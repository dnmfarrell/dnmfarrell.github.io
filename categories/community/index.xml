<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Community on Perl programming news, code and culture</title>
    <link>http://perltricks.com/categories/community/</link>
    <description>Recent content in Community on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Oct 2016 10:51:01 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/categories/community/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hacktoberfest is here</title>
      <link>http://perltricks.com/article/hacktoberfest-is-here/</link>
      <pubDate>Sun, 02 Oct 2016 10:51:01 +0000</pubDate>
      
      <guid>http://perltricks.com/article/hacktoberfest-is-here/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hacktoberfest.digitalocean.com/&#34;&gt;Hacktoberfest&lt;/a&gt; is here, and you can be part of the effort to make Perl the most popular language in the month long festival of patches and pull requests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt; and &lt;a href=&#34;https://www.github.com/&#34;&gt;GitHub&lt;/a&gt; have teamed up to encourage new users to participate in open source. Make four pull requests to any GitHub project and they&amp;rsquo;ll give you a limited-edition Hacktoberfest t-shirt. It might not sound like much, but consider what you get besides the shirt: you&amp;rsquo;re in the commit logs of four projects and your profile has some history. That&amp;rsquo;s the first step in building your open source résumé.&lt;/p&gt;

&lt;p&gt;The sponsors suggest that projects that want to participate label their issues with &amp;ldquo;Hacktoberfest&amp;rdquo;. That&amp;rsquo;s not strictly necessary, but you can &lt;a href=&#34;https://github.com/search?q=state%3Aopen+label%3Ahacktoberfest&amp;amp;type=Issues&#34;&gt;search&lt;/a&gt; for issues that projects think are suitable for new users. I think all of my projects are suitable (I may be optimistic), so I wanted a way to label all of my issues across all of my projects.&lt;/p&gt;

&lt;p&gt;I found out about this as I was building some other GitHub tools. I looked at &lt;a href=&#34;https://www.metacpan.org/module/Net::GitHub&#34;&gt;Net::GitHub&lt;/a&gt;, &lt;a href=&#34;https://www.metacpan.org/module/Pithub&#34;&gt;Pithub&lt;/a&gt;, and Marchex&amp;rsquo;s &lt;a href=&#34;https://github.com/marchex/github-api-tools&#34;&gt;github-api-tools&lt;/a&gt; but I wanted to iterate through long lists of paged results and process each item as I received them. The &lt;a href=&#34;https://developer.github.com/v3/&#34;&gt;GitHub Developer API&lt;/a&gt; is quite nice and even if you are re-inventing the wheel you&amp;rsquo;re learning about wheels, making this a fun night of work.&lt;/p&gt;

&lt;p&gt;The result is &lt;a href=&#34;https://github.com/briandfoy/ghojo/blob/master/examples/hacktoberfest.pl&#34;&gt;hacktoberfest.pl&lt;/a&gt; in my &lt;a href=&#34;https://github.com/briandfoy/ghojo&#34;&gt;ghojo&lt;/a&gt; repo. It will log in, list all of my repos (there are a couple hundred), create the &amp;ldquo;Hacktoberfest&amp;rdquo; label in each, and then apply the label to each open issue.&lt;/p&gt;

&lt;p&gt;The ghojo project is still very much in its infancy (which means there&amp;rsquo;s all sorts of pull request opportunities). But I allow quite a bit of flexibility by accepting a callback for things I expect to return many items:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Ghojo;

my $ghojo = Ghojo-&amp;gt;new( { token =&amp;gt; ... } );

my $callback = sub {
  my $item = shift;
  ...
  };

$ghojo-&amp;gt;repos( $repo_callback );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each time I find a repo—and you don&amp;rsquo;t have to know how I do that—I run that callback. It&amp;rsquo;s a little bit like &lt;a href=&#34;https://www.metacpan.org/module/File::Find&#34;&gt;File::Find&lt;/a&gt;&amp;rsquo;s use of the &lt;code&gt;wanted&lt;/code&gt; coderef. You don&amp;rsquo;t see the very nice API paging going on either; &lt;code&gt;repos&lt;/code&gt; keeps fetching more results as long as there are more results.&lt;/p&gt;

&lt;p&gt;That callback deals with a repo, but each repo has a list of issues. I want to process this list of issues as I run into them. So what I need is a callback to process a repo with a nested callback for the issues:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.24;

use Ghojo;

my $ghojo = Ghojo-&amp;gt;new( { token =&amp;gt; ... } );

my $label_name = &#39;Hacktoberfest&#39;;

my $callback = sub ( $item ) {
  my( $user, $repo ) = split m{/}, $item-&amp;gt;{full_name};

  my $repo = $ghojo-&amp;gt;get_repo_object( $owner, $repo );

  # get the labels for that repo
  my %labels = map { $_-&amp;gt;@{ qw(name color) } } $repo-&amp;gt;labels-&amp;gt;@*;

  unless( exists $labels{$label_name} ) {
    my $rc = $repo-&amp;gt;create_label( $label_name, &#39;ff5500&#39; );
    say &amp;quot;\tCreated $label_name label&amp;quot; if $rc;
    }

  my $callback = sub ( $item ) {
    $repo-&amp;gt;add_labels_to_issue( $item-&amp;gt;{number}, $label_name );
    return $item;
    };

  my $issues = $repo-&amp;gt;issues( $callback );

  return $repo;
  };


$ghojo-&amp;gt;repos( $repo_callback );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Curiously, within a couple of hours of uploading the program, I received my first Hacktoberfest &lt;a href=&#34;https://github.com/briandfoy/ghojo/pull/14&#34;&gt;pull request&lt;/a&gt;. &lt;a href=&#34;https://github.com/haydenty&#34;&gt;haydenty&lt;/a&gt; added the &lt;a href=&#34;https://github.com/briandfoy/ghojo/blob/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file to my ghojo repo. It&amp;rsquo;s something I&amp;rsquo;ve been meaning to add to all of my repos. Now I&amp;rsquo;m considering adding an issue to each repo to note that and label each one &amp;ldquo;Hacktoberfest&amp;rdquo;. Or someone who wants to get started with something simple can create the issues for me, or send the pull requests right off.&lt;/p&gt;

&lt;p&gt;If you have lots of repos, label your issues to help push Perl up in &lt;a href=&#34;https://github.com/search?q=state%3Aopen+label%3Ahacktoberfest&amp;amp;type=Issues&#34;&gt;the rankings&lt;/a&gt;. By the time we reach the end of the month, I&amp;rsquo;ll have a program to reverse the labeling.&lt;/p&gt;

&lt;p&gt;Some of this I&amp;rsquo;m doing for fun, and some of this I&amp;rsquo;m doing because some organizations want better GitHub tools. Somehow how October is when all of that is coming together. If you&amp;rsquo;d like me to work on this sort of stuff for you, &lt;a href=&#34;mailto:brian.d.foy@gmail.com&#34;&gt;let me know&lt;/a&gt;! But submit those pull requests first so you get that t-shirt.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Don&#39;t forget to #Perl</title>
      <link>http://perltricks.com/article/don-t-forget-to--perl/</link>
      <pubDate>Wed, 28 Sep 2016 08:05:37 +0000</pubDate>
      
      <guid>http://perltricks.com/article/don-t-forget-to--perl/</guid>
      <description>&lt;p&gt;When it comes to open source communities, programming comes first, but talking about programming is a close second. Perl programmers are pretty good about blogging (the &lt;a href=&#34;https://github.com/dnmfarrell/Perly-Bot&#34;&gt;Perly-Bot app&lt;/a&gt; that populates our community articles sidebar tracks around 30 blogs), but I&amp;rsquo;ve noticed that on Twitter, many Perl-related tweets lack a &lt;code&gt;#Perl&lt;/code&gt; hashtag. That&amp;rsquo;s a shame, as it helps others discover Perl related tweets via search, clicking the hashtag and in the &amp;ldquo;highlights&amp;rdquo; notification on the Twitter mobile app.&lt;/p&gt;

&lt;p&gt;Sometimes you may not want to include a Perl hashtag: perhaps you&amp;rsquo;ve hit the tweet character limit (&lt;code&gt;#Per&lt;/code&gt; is no good!) or maybe you&amp;rsquo;re blogging about several languages including Perl, and don&amp;rsquo;t want to dissuade non-Perl programmers from clicking the link. There are probably many scenarios where it doesn&amp;rsquo;t make sense to include the hashtag, and that&amp;rsquo;s fine. For everything else, there is &lt;code&gt;#Perl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hashtags are case insensitive so &lt;code&gt;#Perl&lt;/code&gt; and &lt;code&gt;#perl&lt;/code&gt; are good, but I wouldn&amp;rsquo;t &lt;code&gt;#PERL&lt;/code&gt; unless you&amp;rsquo;re trolling (yw trolls!). Unlike many programming languages, our favorite language has a unique name (kind of - there is the Perl &lt;a href=&#34;http://www.surnamedb.com/Surname/Perl&#34;&gt;surname&lt;/a&gt;). Let&amp;rsquo;s take advantage of it by including &lt;code&gt;#Perl&lt;/code&gt; in our tweets. If enough of us do it, who knows, we might even start trending again.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5 things I learned from Learning Perl 7th Edition</title>
      <link>http://perltricks.com/article/5-things-i-learned-from-learning-perl-7th-edition/</link>
      <pubDate>Fri, 23 Sep 2016 08:12:54 +0000</pubDate>
      
      <guid>http://perltricks.com/article/5-things-i-learned-from-learning-perl-7th-edition/</guid>
      <description>

&lt;p&gt;The 7th edition of &lt;a href=&#34;https://www.learning-perl.com/&#34;&gt;Learning Perl&lt;/a&gt; is due to be released later this month. I was one of the technical reviewers of the book - I hadn&amp;rsquo;t read it since the 3rd edition where it was a course text at my University (and Perl was described as a &amp;ldquo;text processing language&amp;rdquo;!). Reviewing the book, I was struck by how much detail it contained. If you&amp;rsquo;re looking for a thorough introduction to Perl, it&amp;rsquo;s a great place to start. I picked up (or re-learned) a few tricks along the way, that I thought were worth sharing.&lt;/p&gt;

&lt;h3 id=&#34;1-stacked-file-test-operators:20798fba47491e24e703587c4db3eaa3&#34;&gt;1. Stacked file test operators&lt;/h3&gt;

&lt;p&gt;You probably know that Perl supports a bunch of &lt;a href=&#34;http://perldoc.perl.org/functions/-X.html&#34;&gt;file test operators&lt;/a&gt; that do useful things like check if a file exists, if it&amp;rsquo;s readable and so on:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  if (-e $filepath &amp;amp;&amp;amp; -r $filepath) {
    ... 
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But did you know that since version 5.10, you can stack file test operators?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  if (-e -r $filepath) {
    ...
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way is cleaner and shorter. Oh and bonus! file test operators work on filehandles too. Stacked file operators are not part of the &lt;a href=&#34;http://perldoc.perl.org/feature.html&#34;&gt;feature&lt;/a&gt; pragma, so an explicit &lt;code&gt;use 5.10.0;&lt;/code&gt; is not required, although if your code is going to be shared, you should probably include it.&lt;/p&gt;

&lt;h3 id=&#34;2-glob-s-checkered-past:20798fba47491e24e703587c4db3eaa3&#34;&gt;2. Glob&amp;rsquo;s checkered past&lt;/h3&gt;

&lt;p&gt;Learning Perl has a lot of anecdotes about Perl history in it. You might have used the &lt;code&gt;glob&lt;/code&gt; function before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @json_files = glob &#39;*.json&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This returns all file names ending in &lt;code&gt;.json&lt;/code&gt; in the current working directory. Glob takes a string of patterns separated by whitespace, so you can provide multiple patterns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  my @config_files = glob &#39;*.json *.toml *.ini&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of using the word &lt;code&gt;glob&lt;/code&gt; you can use angle brackets:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  my @json_files = &amp;lt;*.json&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These angle brackets treat the text between them like a double-quoted string. One thing I learned was that ancient versions of Perl (pre 5.6) simply called &lt;code&gt;/bin/csh&lt;/code&gt; every time they encountered &lt;code&gt;glob&lt;/code&gt;! This made globbing slow, and directory handles were preferred over &lt;code&gt;glob&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;3-perl-supports-inline-binary-notation:20798fba47491e24e703587c4db3eaa3&#34;&gt;3. Perl supports inline binary notation&lt;/h3&gt;

&lt;p&gt;In many C-based languages you can write numbers in hexadecimal and octal notation, and you can in Perl too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  my $byte_max = 0xff;
  my $permissions = 0755;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Perl though, you can also write binary numbers inline, with the prefix &lt;code&gt;0b&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  my $bits = 0b10111000;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can make it easier to work with binary data; instead of using hexadecimal notation and doing the mental arithmetic to calculate values, you can write binary data inline. For example, let&amp;rsquo;s say you are reviewing some code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  if ($bit_array &amp;amp; 0x40) {
    ...
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To understand this example in hexadecimal, you have to calculate that 4 * 16 = 64, and then either just know, or convert that number to binary to find out that the 7th bit is flipped, and understand that this is testing whether &lt;code&gt;$bit_array&lt;/code&gt; has that bit flipped too. Here&amp;rsquo;s the same code with inline binary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  if ($bit_array &amp;amp; 0b1000000) {
    ...
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, you can just see that the 7th bit is flipped, and the intent of the if statement becomes obvious. If you&amp;rsquo;re interested in understanding bit arrays and bitwise operators, I recently wrote an &lt;a href=&#34;http://perltricks.com/article/save-space-with-bit-arrays/&#34;&gt;introduction&lt;/a&gt; to them.&lt;/p&gt;

&lt;h3 id=&#34;4-check-an-installed-module-is-up-to-date:20798fba47491e24e703587c4db3eaa3&#34;&gt;4. Check an installed module is up to date&lt;/h3&gt;

&lt;p&gt;These days we have so many advanced Perl package installers like &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanm&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/distribution/App-cpm/script/cpm&#34;&gt;cpm&lt;/a&gt; it&amp;rsquo;s easy to forget that the basic CPAN client can do a lot too. For instance, the &lt;code&gt;-D&lt;/code&gt; option checks the installed version of a module and compares it to the latest version on CPAN. So to check if the &lt;code&gt;Test::More&lt;/code&gt; module is up to date, at the terminal I can enter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpan -D Test::More

CPAN: Storable loaded ok (v2.53)
Reading &#39;/home/dfarrell/.local/share/.cpan/Metadata&#39;
  Database was generated on Thu, 22 Sep 2016 21:53:30 GMT
Test::More
-------------------------------------------------------------------------
      (no description)
      E/EX/EXODIST/Test-Simple-1.302056.tar.gz
      /home/dfarrell/.plenv/versions/5.22.0/lib/perl5/5.22.0/Test/More.pm
      Installed: 1.001014
      CPAN:      1.302056  Not up to date
      Chad Granum (EXODIST)
      exodist7@gmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Woah, mine is pretty out of date. I should upgrade &amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;5-avoiding-the-shell-for-system-commands:20798fba47491e24e703587c4db3eaa3&#34;&gt;5. Avoiding the shell for system commands&lt;/h3&gt;

&lt;p&gt;The Perl built-in functions &lt;a href=&#34;http://perldoc.perl.org/functions/exec.html&#34;&gt;exec&lt;/a&gt; and &lt;a href=&#34;http://perldoc.perl.org/functions/system.html&#34;&gt;system&lt;/a&gt; &lt;em&gt;may&lt;/em&gt; invoke the shell when running a system command. Generally you want to avoid this as invoking the shell is slower than executing the command directly. Perl looks at the first argument passed to &lt;code&gt;exec&lt;/code&gt; or &lt;code&gt;system&lt;/code&gt; and if it contains shell &lt;a href=&#34;http://faculty.salina.k-state.edu/tim/unix_sg/shell/metachar.html&#34;&gt;metacharacters&lt;/a&gt; invokes the shell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $command = join &amp;quot; &amp;quot;, $program, $arg1, $arg2;
system $command; # may invoke shell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let&amp;rsquo;s say you need to invoke a system command, and you&amp;rsquo;re not sure whether the command arguments will contain metacharacters or not. If they do, the shell will be invoked and any metacharacters will be interpolated. One way to avoid the shell interpolating metacharacters is to escape them. But shell escape sequences are rarely simple (e.g. &lt;a href=&#34;https://stackoverflow.com/questions/1250079/how-to-escape-single-quotes-within-single-quoted-strings#1250279&#34;&gt;escaping a single quote&lt;/a&gt;). Learning Perl shows a better way: passing a list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;system $program, $arg1, $arg2; # never invokes the shell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will never invoke the shell, and avoid metacharacter interpolation.&lt;/p&gt;

&lt;h3 id=&#34;pre-order-learning-perl-now:20798fba47491e24e703587c4db3eaa3&#34;&gt;Pre-order Learning Perl now&lt;/h3&gt;

&lt;p&gt;Learning Perl 7th Edition has nearly 400 pages describing the Perl syntax, and how to accomplish important tasks like file IO, process management and module installations. It&amp;rsquo;s available for pre-order now on &lt;a href=&#34;https://goo.gl/DvCB14&#34;&gt;Amazon&lt;/a&gt; (that&amp;rsquo;s an affiliate link for brian d foy, the author of this edition). You can also get it from the publisher, &lt;a href=&#34;http://shop.oreilly.com/product/0636920049517.do&#34;&gt;O&amp;rsquo;Reilly&lt;/a&gt;. Check out the book&amp;rsquo;s offical &lt;a href=&#34;https://www.learning-perl.com/&#34;&gt;website&lt;/a&gt; where brian has been blogging about the new edition.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The History of the Schwartzian Transform</title>
      <link>http://perltricks.com/article/the-history-of-the-schwartzian-transform/</link>
      <pubDate>Fri, 02 Sep 2016 11:18:55 +0000</pubDate>
      
      <guid>http://perltricks.com/article/the-history-of-the-schwartzian-transform/</guid>
      <description>

&lt;p&gt;The history of the Schwartzian Transform is fascinating, full of intrigue, competing philosophies, and cross-language reluctant cooperation. The Schwartzian Transform is the name applied to a particular implementation of a cached-key sorting algorithm.&lt;/p&gt;

&lt;p&gt;The first public appearance is probably Randal Schwartz&amp;rsquo;s Usenet &lt;a href=&#34;https://groups.google.com/d/msg/comp.unix.shell/MdqXDOuzDG0/gcmc1IG9GckJ&#34;&gt;post&lt;/a&gt; on December 16, 1994 in response to Ken Brown&amp;rsquo;s request for help:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m having trouble sorting on the *last* word of the last field in a record&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ken Brown&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Randal included the following code in his reply:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/perl
require 5; # new features, new bugs!
print
  map { $_-&amp;gt;[0] }
  sort { $a-&amp;gt;[1] cmp $b-&amp;gt;[1] }
  map { [$_, /(\S+)$/] }
  &amp;lt;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Randal didn&amp;rsquo;t name it. He wrote the code and essentially dropped the mic. He says that he was on a break from teaching a Perl class, so his response was brief and unexplicated - typical for an experienced Usenet denizen (he said that he was there when you could read all of Usenet in a half hour). I don&amp;rsquo;t think he expected it to be as troublesome as it turned out to be.&lt;/p&gt;

&lt;p&gt;His code isn&amp;rsquo;t that complex. It&amp;rsquo;s a big statement, but when I teach it in Perl classes, I tell people to read it from the end toward the beginning (a handy technique for any list pipeline):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first step computes the key to sort on. It combines that with the original value in a tuple.&lt;/li&gt;
&lt;li&gt;The middle step sorts of the computed element in the tuple.&lt;/li&gt;
&lt;li&gt;The last step extracts the original value from the tuple.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You probably can&amp;rsquo;t imagine how shocking this could be back then. Perl 5 was officially released in October 1994, but the first development versions had been around since the middle of 1993. Randal was surely playing with Perl 5 as soon as it came out. This means that most Perl programmers had not yet seen new features like the &lt;a href=&#34;http://perldoc.perl.org/functions/map.html&#34;&gt;map&lt;/a&gt; function or references. They certainly weren&amp;rsquo;t comfortable with those ideas.&lt;/p&gt;

&lt;p&gt;Randal, however, knew the &lt;em&gt;decorate-sort-undecorate&lt;/em&gt; technique from LISP, especially since he&amp;rsquo;s solidly in the emacs camp in the editor wars. Renzo on &lt;a href=&#34;http://codereview.stackexchange.com/a/138436/13050&#34;&gt;Code Review&lt;/a&gt; fixed up my attempt at a LISP version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;(defun schwartzian-transform (list costly-function predicate)
&amp;quot;sort a list of objects over the value of a function applied to them,
by applying the Schwartzian Transform (https://en.wikipedia.org/wiki/Schwartzian_transform)
the parameters are the list, the function, and the predicate for the sort.&amp;quot;
  (mapcar #&#39;cdr
      (stable-sort (mapcar (lambda (x)
                 (cons (funcall costly-function x) x))
                 list)
             predicate
             :key #&#39;car)))

(require :sb-posix)
(schwartzian-transform
 (directory &amp;quot;/etc/*&amp;quot;)
 (lambda (x) (sb-posix:stat-mtime (sb-posix:stat x)))
 #&#39;&amp;lt;=)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even with a little LISP knowledge you can tease out the same algorithm. You see the &lt;code&gt;mapcar&lt;/code&gt;, &lt;code&gt;stable-sort&lt;/code&gt;, and &lt;code&gt;mapcar&lt;/code&gt;. (I used &lt;a href=&#34;http://www.sbcl.org&#34;&gt;SBCL&lt;/a&gt; for this).&lt;/p&gt;

&lt;p&gt;In 1995 Tom Christiansen wrote &lt;a href=&#34;http://www.perl.com/doc/FMTEYEWTK/sort.html&#34;&gt;Far More Than Everything You&amp;rsquo;ve Ever Wanted to Know About Sorting&lt;/a&gt; and extensively covered Randal&amp;rsquo;s code even though he hadn&amp;rsquo;t labeled yet. He didn&amp;rsquo;t like it that much, but, to be fair, he says at the end:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m not ragging on Randal, merely teasing a bit. He&amp;rsquo;s just trying to be clever, and that&amp;rsquo;s what he does. I&amp;rsquo;m just submitting a sample chapter for his perusal for inclusion the mythical Alpaca Book :-)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tom Christiansen&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tom refers to &lt;em&gt;Learning Perl Objects, References, Objects, and Modules&lt;/em&gt;, which wouldn&amp;rsquo;t show up until 2003 (it&amp;rsquo;s now called &lt;a href=&#34;http://www.intermediateperl.com&#34;&gt;Intermediate Perl&lt;/a&gt;). Curiously, in that same year &lt;a href=&#34;https://books.google.com/books?id=GxKWdn7u4w8C&amp;amp;pg=PA113&amp;amp;dq=schwartzian+transform&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwir89e-krvNAhXMdz4KHW4uAqQQ6AEILjAC#v=onepage&amp;amp;q=schwartzian%20transform&amp;amp;f=false&#34;&gt;Text Processing in Python&lt;/a&gt; (Google Books) mentioned it.&lt;/p&gt;

&lt;p&gt;A month after his Usenet posting, Randal wrote about his decorate-sort-undecorate idiom in his &lt;a href=&#34;http://www.stonehenge.com/merlyn/UnixReview/col06.html&#34;&gt;Unix Review column&lt;/a&gt; for January 1996, but he hadn&amp;rsquo;t labeled the technique by then either.&lt;/p&gt;

&lt;h3 id=&#34;getting-the-name:cfab7c104a06866196fb7592f2146c3d&#34;&gt;Getting the name&lt;/h3&gt;

&lt;p&gt;In August 1995, &lt;a href=&#34;https://groups.google.com/forum/?hl=en#!topic/comp.lang.perl.misc/fLo0RNV8oW8&#34;&gt;Bennett Todd answers a sorting question&lt;/a&gt; with a &amp;ldquo;Schwartz transformation&amp;rdquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Or for possibly more efficiency, ensure that the calls only happen once per
record, rather than approximately NlogN times, with the Schwartz
transformation:-)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bennett Todd&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;@keys = map { $_-&amp;gt;[0] }
    sort { $a-&amp;gt;[1] &amp;lt;=&amp;gt; $b-&amp;gt;[1] or $a cmp $b }
    map { [ $_, datexform($foo{$_}) ] } keys %foo;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the first instance I could find where Randal&amp;rsquo;s last name was attached to the technique. People have seen and understood the technique and it has the start of a name, but it&amp;rsquo;s not quite an idiom yet. It also hasn&amp;rsquo;t settled on a name.&lt;/p&gt;

&lt;p&gt;Tom Christiansen&amp;rsquo;s April 1996 post in &lt;em&gt;comp.lang.perl.misc&lt;/em&gt; for &lt;a href=&#34;https://groups.google.com/d/msg/comp.lang.perl.misc/pw-Hl4byLnc/yzejRnku3RoJ&#34;&gt;Read directory in timestamp order?&lt;/a&gt; showed some benchmarks for sorting methods. He labeled one the &amp;ldquo;Schwartzian Transform&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;In July, Colin Howarth started the thread &lt;a href=&#34;https://groups.google.com/d/msg/comp.lang.perl.misc/6NEeX4XJx54/nmpMmReMIbcJ&#34;&gt;&amp;ldquo;Schwartzian transform of %$self &amp;hellip; help?&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In October, Tom posted &lt;a href=&#34;https://groups.google.com/d/msg/comp.lang.perl.misc/VIKNMCeNFAM/18UApg1hWy8J&#34;&gt;an expanded draft of perllol&lt;/a&gt; as part of his &lt;a href=&#34;http://www.perl.com/doc/FMTEYEWTK/pdsc/&#34;&gt;Perl Data Structures Cookbook&lt;/a&gt;, which turned into &lt;a href=&#34;http://perldoc.perl.org/perldsc.html&#34;&gt;perldsc&lt;/a&gt; and &lt;a href=&#34;http://perldoc.perl.org/perllol.html&#34;&gt;perllol&lt;/a&gt;. He uses the full term &amp;ldquo;Schwartzian Transform&amp;rdquo;. The term was catching on.&lt;/p&gt;

&lt;h3 id=&#34;gaining-notoriety:cfab7c104a06866196fb7592f2146c3d&#34;&gt;Gaining notoriety&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/comp.lang.perl.misc/fPx42DB2jd8/cC_6osV70mMJ&#34;&gt;I&amp;rsquo;m still pissed at Randal for having posted it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tom Christiansen&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tom wrote that in December and he didn&amp;rsquo;t mince words. It might look catty now, but at the time, Tom was on a mission to make people fall in love with Perl. He evangelized the language and didn&amp;rsquo;t want to scare people off with weird looking code. He was everywhere that people were talking about Perl, and that was good for us. That meant he was effectively supporting code he didn&amp;rsquo;t write, he didn&amp;rsquo;t like, and people didn&amp;rsquo;t understand. In his role of Perl&amp;rsquo;s apostle, he was besieged with people asking about something he wouldn&amp;rsquo;t have written himself.&lt;/p&gt;

&lt;p&gt;Later, in that same thread, he&amp;rsquo;d give it another name, the &lt;a href=&#34;https://groups.google.com/d/msg/comp.lang.perl.misc/fPx42DB2jd8/cC_6osV70mMJ&#34;&gt;Black Transform&lt;/a&gt;. He played on the translation of Randal&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Schwartz_(surname&#34;&gt;Germanic surname&lt;/a&gt;) that reflected his own opinion. That name didn&amp;rsquo;t stick.&lt;/p&gt;

&lt;p&gt;As with most long Usenet threads, it&amp;rsquo;s not entirely clear what people specifically didn&amp;rsquo;t like about the code, or even that there&amp;rsquo;s a consensus complaint. Some complaints spiral around Randal&amp;rsquo;s lack of comments. Some people want Perl to be accessible at first glance to someone who doesn&amp;rsquo;t know the language. Others who were comfortable with advanced programming skills weren&amp;rsquo;t bothered at all. That&amp;rsquo;s a tension even today.&lt;/p&gt;

&lt;p&gt;Remember, references and method notation were new syntax. People skilled with Perl 4 were still learning Perl 5. Perl hadn&amp;rsquo;t developed idioms for list processing (LISP, natch), so people apparently weren&amp;rsquo;t that comfortable with stacked list operations. Some people merely hated functional programming and LISP.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a segment of people who would rather have programming languages that are easy to learn over more powerful but more opaque.&lt;/p&gt;

&lt;p&gt;Around that time, Joseph Hall wrote &lt;a href=&#34;http://web.archive.org/web/19961228210914/http://www.5sigma.com/perl/schwtr.html&#34;&gt;More about the Schwartzian Transform (Internet Archive)&lt;/a&gt;. It&amp;rsquo;s tough to tell exactly when he wrote this, but the earliest copy in the Internet archive notes it was last modified in January 1997. Joseph used his PeGS (Perl Graphical Structures) to show them in action. This might be the first mention outside of Usenet. It&amp;rsquo;s also the basis for the item that appears in his 1998 book &lt;a href=&#34;http://www.effectiveperlprogramming.com&#34;&gt;Effective Perl Programming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, around that time, Joseph was working with Randal at Stonehenge Consulting Services to develop the Perl courses. I&amp;rsquo;m fuzzy on that timeline, but his coursework turned into the book &lt;em&gt;Learning Perl Objects, References, and Modules&lt;/em&gt; (later renamed &lt;a href=&#34;https://www.intermediateperl.com&#34;&gt;Intermediate Perl&lt;/a&gt;). He&amp;rsquo;s the one who came up with the Gilligan&amp;rsquo;s Island as examples, but his handiwork with PeGS and the Schwartzian Transform show up in that book and in the class.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.effectiveperlprogramming.com&#34;&gt;Effective Perl Programming&lt;/a&gt; might be the first book to mention the transform, using what he&amp;rsquo;d already written. Even though I worked on the second edition of that book, I think &lt;a href=&#34;https://www.amazon.com/gp/product/0201419750/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=hashbang09-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0201419750&amp;amp;linkId=b8a4558fd65ec4c4bb17add6e194e5e4&#34;&gt;Joseph&amp;rsquo;s original is still worth the $4 on Amazon.com&lt;/a&gt;. It&amp;rsquo;s some of the best Perl writing in the history of Perl.&lt;/p&gt;

&lt;p&gt;In 1998 the transform also showed up in the first edition of &lt;a href=&#34;https://books.google.com/books?id=7q5QAAAAMAAJ&amp;amp;q=schwartzian+transform+%22programming+perl%22&amp;amp;dq=schwartzian+transform+%22programming+perl%22&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwjplePak7vNAhWSZj4KHYK9AtUQ6AEINDAD&#34;&gt;The Perl Cookbook&lt;/a&gt;, where Tom called it the Schwartzian Transform. I don&amp;rsquo;t know who first typed it into a manuscript, so perhaps it&amp;rsquo;s a tie. Tom and Joseph might have to figure that out between them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://books.google.com/books?id=4ju67sMPwEkC&amp;amp;pg=PA111&amp;amp;dq=schwartzian+transform&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwir89e-krvNAhXMdz4KHW4uAqQQ6AEIOjAE#v=onepage&amp;amp;q=schwartzian%20transform&amp;amp;f=false&#34;&gt;Mastering Perl Algorithms (Google Books)&lt;/a&gt; covered the transform in 1999 and &lt;a href=&#34;https://books.google.com/books?id=gGNQ-O1WWQAC&amp;amp;pg=PA310&amp;amp;dq=schwartzian+transform&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwjo79KEk7vNAhWBMj4KHcBFDEY4ChDoAQhNMAg#v=onepage&amp;amp;q=schwartzian%20transform&amp;amp;f=false&#34;&gt;CGI Programming in Perl (Google Books)&lt;/a&gt; mentioned it in 2000. After that, the term &amp;ldquo;Schwartzian Transform&amp;rdquo; turns up quite a bit, even in some Ruby, Python, the Jython books.&lt;/p&gt;

&lt;p&gt;Some other interesting quotes from that long thread, which seem quaint twenty years later. My favorite was prophetic:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/comp.lang.perl.misc/fPx42DB2jd8/CTRmyWyJW6MJ&#34;&gt;I wonder if this chunk of code will haunt us forever.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Eric Arnold&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Indeed it has haunted us since then, but that&amp;rsquo;s not the end of the story.&lt;/p&gt;

&lt;h3 id=&#34;variations:cfab7c104a06866196fb7592f2146c3d&#34;&gt;Variations&lt;/h3&gt;

&lt;p&gt;Randal&amp;rsquo;s use of the anonymous array is interesting, but it&amp;rsquo;s not the only way to decorate the original value. You could compute the values and store them in a hash. Joseph Hall came up with something called the Orcish Maneuver - a clever pun on &lt;a href=&#34;http://lotr.wikia.com/wiki/Orcs&#34;&gt;Orc&lt;/a&gt; (perhaps) and &amp;ldquo;OR Cache&amp;rdquo;. This doesn&amp;rsquo;t use the &lt;a href=&#34;http://perldoc.perl.org/functions/map.html&#34;&gt;map&lt;/a&gt; function  or references:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @sorted = sort {
  ( $times{$a} ||= -M $a ) &amp;lt;=&amp;gt;
  ( $times{$b} ||= -M $b )
} @old_array;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Joseph uses a hash to store the potentially expensive sort value. If that key does not yet exist, he calculates and stores it for next time. This idiom relies on the feature that a Perl assignment returns the value assigned.&lt;/p&gt;

&lt;p&gt;Thanks to the &lt;a href=&#34;http://act.yapc.eu/alpineperl2016/&#34;&gt;Alpine Perl Workshop 2016&lt;/a&gt; in Innsbruck for sponsoring the accompanying talk on this history. You can find &lt;a href=&#34;http://bit.ly/2bHNNx4&#34;&gt;the slides for that talk on Slideshare&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For what it&amp;rsquo;s worth, you&amp;rsquo;ll find plenty more Lord of the Rings references in the perl source.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Promoting Perl community articles</title>
      <link>http://perltricks.com/article/promoting-perl-community-articles/</link>
      <pubDate>Thu, 26 May 2016 08:53:36 +0000</pubDate>
      
      <guid>http://perltricks.com/article/promoting-perl-community-articles/</guid>
      <description>

&lt;p&gt;The last part of Justin Searls&amp;rsquo; &lt;a href=&#34;https://vimeo.com/165527044#t=28m10s&#34;&gt;talk&lt;/a&gt; has some great advice for promoting Ruby that applies to Perl too. If you haven&amp;rsquo;t seen it, I&amp;rsquo;d encourage you to watch it. Justin points out that some tech projects like Ruby on Rails are essentially, done. They&amp;rsquo;re feature complete and achieve everything they set out to accomplish. This means that they&amp;rsquo;re no longer cutting edge tech, and consequently fewer articles are written about them.&lt;/p&gt;

&lt;p&gt;We see this with Perl too. Modules like &lt;a href=&#34;https://metacpan.org/pod/Moose&#34;&gt;Moose&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Mojolicious&#34;&gt;Mojolicious&lt;/a&gt; are battle-tested, proven libraries that do a wonderful job. So we don&amp;rsquo;t see many hype articles about them either. The solution to this is to focus on evergreen story telling:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tell stories that help people solve problems. And if you love Ruby, tell your story in Ruby.&lt;/p&gt;

&lt;p&gt;Justin Searls&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As Perl programmers we&amp;rsquo;re using the language to solve problems every day. And we&amp;rsquo;ll never run out of problems to solve: there are always new systems to integrate, new data challenges, algorithms to implement and bugs to fix. That&amp;rsquo;s why it doesn&amp;rsquo;t matter that so much has already been written about Perl - new experiences will always be around the corner. And new is good.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s tell more stories in Perl.&lt;/p&gt;

&lt;h3 id=&#34;promoting-content:80ed17a713a6abb8e6d084fd1190752e&#34;&gt;Promoting content&lt;/h3&gt;

&lt;p&gt;Many Perl programmers are regularly writing about Perl, so another thing we can always improve on is promoting new Perl content. This isn&amp;rsquo;t an exhaustive list, just a few suggestions on how to help.&lt;/p&gt;

&lt;p&gt;Last week I added the &amp;ldquo;Community Articles&amp;rdquo; toolbar to this website. It&amp;rsquo;s a JavaScript widget that&amp;rsquo;s powered by &lt;a href=&#34;https://github.com/dnmfarrell/Perly-Bot&#34;&gt;Perly::Bot&lt;/a&gt;. You can add this widget to your website with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;https://perltricks.com/widgets/toplinks/toplinks.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;div id=&amp;quot;toplinks&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The list of links is updated hourly, served over HTTPS and hosted on GitHub pages. The widget is clever enough to skip links to articles from the host domain too (it never shows links to PerlTricks.com on this site).&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d rather not add that sidebar, consider adding a &lt;a href=&#34;https://www.reddit.com/r/perl/widget&#34;&gt;widget&lt;/a&gt; for &lt;code&gt;/r/perl&lt;/code&gt;. The Reddit widget respects Do Not Track.&lt;/p&gt;

&lt;p&gt;Finally, participate on &lt;a href=&#34;https://reddit.com/r/perl&#34;&gt;/r/perl&lt;/a&gt; and Twitter! Link to Perl resources and content you like; upvote or retweet Perl-related tweets. If you have something to say, reply to tweets or add yours comments to the subreddit links. Use the &lt;code&gt;#perl&lt;/code&gt; hashtag.&lt;/p&gt;

&lt;h3 id=&#34;stuff-we-re-already-good-at:80ed17a713a6abb8e6d084fd1190752e&#34;&gt;Stuff we&amp;rsquo;re already good at&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/perl&#34;&gt;StackOverflow.com&lt;/a&gt; has excellent Perl answers that are regularly updated; this is a great resource for Perl programmers. &lt;a href=&#34;http://perlweekly.com&#34;&gt;PerlWeekly&lt;/a&gt; is a fantastic newsletter that links to the best Perl content of the week, subscribe if you haven&amp;rsquo;t already. &lt;a href=&#34;http://perlmonks.org&#34;&gt;PerlMonks&lt;/a&gt; has tonnes of in-depth Perl guides and resources.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;em&gt;Cover image by &lt;a href=&#34;http://newspaper.jaguarpaw.co.uk/&#34;&gt;jaguarpaw&lt;/a&gt;&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Jam VI: April Trolls</title>
      <link>http://perltricks.com/article/april_fools/</link>
      <pubDate>Wed, 04 May 2016 20:37:57 +0000</pubDate>
      
      <guid>http://perltricks.com/article/april_fools/</guid>
      <description>

&lt;p&gt;For an April Fool&amp;rsquo;s joke, I wanted to parody the &lt;a href=&#34;http://perltricks.com/article/netanel-rubins-perljam-circus/&#34;&gt;Perl Jam circus&lt;/a&gt; where the author has an idea that something is wrong but gets the explanation half-wrong. I wrote &lt;a href=&#34;http://perltricks.com/article/perl-jam-iv-return-of-the-camel/&#34;&gt;Perl Jam VI: The Return of the Camel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I thought I&amp;rsquo;d catch some people out if I was clever enough with the first example and increasingly lazy. I might have been too clever, but I also think that April Fool&amp;rsquo;s is probably over. Not only that, I still felt guilty about not doing the work to explain things properly or giving you proper pointers where to look for good solutions.&lt;/p&gt;

&lt;h4 id=&#34;perl-s-rounding-problem:cd86d0266dcf98a4569e4f8588591c75&#34;&gt;Perl&amp;rsquo;s rounding problem&lt;/h4&gt;

&lt;p&gt;Rounding is a problem for people who really care about numbers and where slight biases in numeric functions can skew results. Most people will probably never care about this because they don&amp;rsquo;t have to care. However, I used to work with scads of data from nuclear physics experiments where it could have mattered.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s particular issue is its reliance on someone else making the decision. When I first starting teaching Perl, many of my students had experience with C. They knew the issues with their libc. &lt;code&gt;perl&lt;/code&gt; defers many decisions on to that libc. This means that you can get different results with a different &lt;code&gt;perl&lt;/code&gt;s. Perl may run virtually everywhere, but it doesn&amp;rsquo;t guarantee you&amp;rsquo;ll get the same answer everywhere.&lt;/p&gt;

&lt;p&gt;There is plenty of literature out there on different methods, and there are more than several methods. Just that fact shows that people don&amp;rsquo;t agree on how it should work. If rounding might impact your results, you should be aware that you have many ways to deal with it. The &lt;a href=&#34;http://www.metacpan.org/module/Math::Round&#34;&gt;Math::Round&lt;/a&gt; handles most of them.&lt;/p&gt;

&lt;h4 id=&#34;the-modulus-of-negative-numbers:cd86d0266dcf98a4569e4f8588591c75&#34;&gt;The modulus of negative numbers&lt;/h4&gt;

&lt;p&gt;The modulus operator was a bit more interesting since it actually has some problems and undefined behavior. I presented the table of operand combinations and noted which ones are defined in Perl. Some of the situations don&amp;rsquo;t have defined behavior.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t think that many people would take this section seriously since the modulus operator isn&amp;rsquo;t that popular. The &lt;a href=&#34;http://perldoc.perl.org/integer.html&#34;&gt;integer pragma &lt;/a&gt; may fix the problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Internally, native integer arithmetic (as provided by your C compiler) is used. This means that Perl&amp;rsquo;s own semantics for arithmetic operations may not be preserved. One common source of trouble is the modulus of negative numbers, which Perl does one way, but your hardware may do another.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The StackOverflow question &lt;a href=&#34;https://stackoverflow.com/questions/20691861/perl-understanding-modulo-operation-on-negative-numbers-e-g-103/32090446#32090446&#34;&gt;Perl: understanding modulo operation on negative numbers&lt;/a&gt; goes into more detail about Perl&amp;rsquo;s behavior.&lt;/p&gt;

&lt;p&gt;If this matters for your application, you can implement your own modulo operation (perhaps in &lt;a href=&#34;http://www.metacpan.org/module/Inline::C&#34;&gt;Inline::C&lt;/a&gt;?) to do it exactly how you like to get the results you expect no matter where you run your program.&lt;/p&gt;

&lt;h4 id=&#34;fake-random-numbers:cd86d0266dcf98a4569e4f8588591c75&#34;&gt;Fake random numbers&lt;/h4&gt;

&lt;p&gt;When we say &amp;ldquo;random numbers&amp;rdquo;, experienced programmers generally understand that they aren&amp;rsquo;t actually using numbers that are random. They are &lt;a href=&#34;https://www.random.org/randomness/&#34;&gt;pseudo-random&lt;/a&gt;, although that&amp;rsquo;s too much to say over and over again. We shorten it to &amp;ldquo;random&amp;rdquo; to keep the sentences short. If you are seeding a random number generator, you&amp;rsquo;re using the fake kind.&lt;/p&gt;

&lt;p&gt;For the odd homework assignment or selecting a unique value you haven&amp;rsquo;t used yet, Perl&amp;rsquo;s &lt;a href=&#34;http://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt; may be fine. If you are doing something where you want real randomness, you don&amp;rsquo;t want something deterministic. You want &amp;ldquo;true&amp;rdquo; random numbers.&lt;/p&gt;

&lt;p&gt;Several modules provide an interface to better sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.metacpan.org/module/Net::Random&#34;&gt;Net::Random&lt;/a&gt; can connect to internet services that send back random numbers. You have to trust the internet though.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;(http://www.metacpan.org/module/Crypt::Random&#34;&gt;Crypt::Random&lt;/a&gt; connects to the local &lt;a href=&#34;http://man7.org/linux/man-pages/man4/random.4.html&#34;&gt;/dev/random&lt;/a&gt;. That uses environmental noise to generate bytes. The /dev/urandom device might drop down to pseudo-randomness though. Neither is a good source for long sequences of numbers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An &lt;a href=&#34;http://www.entropykey.co.uk&#34;&gt;Entropy Key&lt;/a&gt; is a small USB device that helps the &lt;em&gt;/dev/random&lt;/em&gt; device fill up its entropy sink. This allows you to read from the device more frequently without dropping into pseudorandomness.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.random.org/integers/&#34;&gt;Random.org&lt;/a&gt; provides data based on atmospheric noise. In the StackOverflow question &lt;a href=&#34;http://stackoverflow.com/a/4093822/2766176&#34;&gt;How to generate an array with random values, without using a loop?&lt;/a&gt;, I presented a way to override Perl&amp;rsquo;s &lt;a href=&#34;http://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt; to use this source. Some other answers are illuminating as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As with most everything else, there&amp;rsquo;s no answer that covers every use. That you discover other sources is a rite of passage for a programmer.&lt;/p&gt;

&lt;h4 id=&#34;perl-lets-anyone-program:cd86d0266dcf98a4569e4f8588591c75&#34;&gt;Perl lets anyone program&lt;/h4&gt;

&lt;p&gt;I joked that Perl&amp;rsquo;s real problem was that it existed, essentially, and that people could use it. It&amp;rsquo;s a variation on the joke about the world&amp;rsquo;s most secure computer is one that&amp;rsquo;s turned off, encased in concrete, and dropped to the bottom of the ocean. And, we&amp;rsquo;re not even sure even then.&lt;/p&gt;

&lt;p&gt;But, I had a more interesting point in mind. Despite any technical limitations or gotchas, documented or not, it&amp;rsquo;s people who make programs and the decisions about what programs will do. Knowing the syntax of a language is a start, but the biggest failures come from human decisions while programming. For entertaining illustrations of this idea, you might like Paul Fenwick&amp;rsquo;s &lt;a href=&#34;https://www.youtube.com/watch?v=73vQglu-4H4&#34;&gt;An Illustrated History of Failure&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Jam VI: The Return of the Camel</title>
      <link>http://perltricks.com/article/perl-jam-iv-return-of-the-camel/</link>
      <pubDate>Fri, 01 Apr 2016 08:32:57 +0000</pubDate>
      
      <guid>http://perltricks.com/article/perl-jam-iv-return-of-the-camel/</guid>
      <description>

&lt;p&gt;A couple of recent presentations about Perl&amp;rsquo;s security have focused on the &lt;a href=&#34;http://www.metacpan.org/module/CGI&#34;&gt;CGI module&lt;/a&gt; and &lt;a href=&#34;https://www.bugzilla.org&#34;&gt;Bugzilla&lt;/a&gt;. David Farrell responded to these in &lt;a href=&#34;http://perltricks.com/article/netanel-rubins-perljam-circus/&#34;&gt;Netanel Rubin&amp;rsquo;s Perl Jam circus&lt;/a&gt;. There are much worse problems with Perl that we should think about.&lt;/p&gt;

&lt;h3 id=&#34;perl-s-rounding-problem:895dfc94e45590b36c5dd569303f6b79&#34;&gt;Perl&amp;rsquo;s rounding problem&lt;/h3&gt;

&lt;p&gt;Perl&amp;rsquo;s approved way of rounding numbers goes through &lt;code&gt;(s)printf&lt;/code&gt;, but there&amp;rsquo;s a problem. In short, it does the wrong thing.&lt;/p&gt;

&lt;p&gt;Most people were taught the rule that 1, 2, 3, 4 round down to 0, and that 5, 6, 7, 8, and 9 round up to the next 0. That means that more digits round up than round down, introducing a systematic bias into any computations where you might round. You shouldn&amp;rsquo;t have to watch &lt;a href=&#34;http://www.imdb.com/title/tt0086393/&#34;&gt;Superman III&lt;/a&gt; to realize the disasterous global consequences this has.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s more than one way to round a number. Most want to get to the nearest number, but if you are half way between, there are options. There are more than two ways. There are more than three. There are, well, a lot of ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Round half up&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half down&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half toward zero&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half away from zero&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half to even&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half to odd&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half alternately up and down&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half stochastically&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the GNU C compiler (or something based on it), you round half to even as the default. Perl relies on this behavior.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -e &#39;printf &amp;quot;%.0f\n&amp;quot;, shift&#39; 1.5
2

$ perl -e &#39;printf &amp;quot;%.0f\n&amp;quot;, shift&#39; 2.5
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time you try this you get the same answer (so, no stochastic or alternate rounding). The GNU C compiler can also use floor, ceiling, or truncate, but those have similar problems.&lt;/p&gt;

&lt;p&gt;As you are rounding, you are going to get more even numbers than odd numbers. If you are writing banking software, &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.91.8055&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;assymetric currency rounding&lt;/a&gt; could destabilize a currency. The Risks Digest has several entries for &lt;a href=&#34;http://catless.ncl.ac.uk/php/risks/search.php?query=rounding&#34;&gt;security problems in rounding&lt;/a&gt;. These issues are much worse than some lame &amp;ldquo;attack&amp;rdquo; on CGI.pm because a programmer can&amp;rsquo;t read.&lt;/p&gt;

&lt;h3 id=&#34;the-modulus-of-negative-numbers:895dfc94e45590b36c5dd569303f6b79&#34;&gt;The modulus of negative numbers&lt;/h3&gt;

&lt;p&gt;Among the heated technical debates, such as vi or emacs, tabs or spaces, or Star Wars or Star Trek (the first answer in each is the right one), the ones that matter, such as the correct value of modulo addition with negative numbers, are overlooked.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Binary &amp;ldquo;%&amp;rdquo; is the modulo operator, which computes the division remainder of its first argument with respect to its second argument. Given integer operands $m and $n : If $n is positive, then $m % $n is $m minus the largest multiple of $n less than or equal to $m. If $n is negative, then $m % $n is $m minus the smallest multiple of $n that is not less than $m (that is, the result will be less than or equal to zero).&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;The perldoc documentation for the % operators&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The modulo operators take two numbers and does something to them. For &lt;code&gt;$m % $n&lt;/code&gt;, you have:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;$m&lt;/th&gt;
&lt;th&gt;$n&lt;/th&gt;
&lt;th&gt;%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;$m - $n * $i ∈ $n * $i &amp;lt;= $m and ($m - $n * $i) &amp;lt; $n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;$m - $n * $i ∈ $n * $i &amp;gt;= $m and ($m - $n * $i) &amp;lt; $n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my( $m, $n ) = @ARGV;

$m //= 137;
$n //= 13;

my $template = &amp;lt;&amp;lt;&#39;HERE&#39;;
m = %d  n = %d

   $m %  $n = %d
  -$m %  $n = %d
   $m % -$n = %d
  -$m % -$n = %d
HERE

printf $template,
   $m, $n,
   $m %  $n,
  -$m %  $n,
   $m % -$n,
  -$m % -$n;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this give different results depending on the location of the unary minus operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl modulo.pl 137 12
m = 137  n = 12

   $m %  $n = 5
  -$m %  $n = 7
   $m % -$n = -7
  -$m % -$n = -5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That unary minus operator is two precedence levels above the modulo operator. That Perl makes one operator better than another is a whole other issue, but that&amp;rsquo;s the way it is and we can&amp;rsquo;t fix it now. Try it again. Use the parentheses (a feature Perl stole from LISP, which had some extra to spare) to separate the operators:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my( $m, $n ) = @ARGV;

$m //= 137;
$n //= 13;

my $template = &amp;lt;&amp;lt;&#39;HERE&#39;;
m = %d  n = %d

    $m %  $n  = %d
  -($m %  $n) = %d
    $m % -$n  = %d
  -($m % -$n) = %d
HERE

printf $template,
    $m, $n,
    $m %  $n,
  -($m %  $n),
    $m % -$n,
  -($m % -$n);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You get different numbers this time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;m = 137  n = 12

    $m %  $n  = 5
  -($m %  $n) = -5
    $m % -$n  = -7
  -($m % -$n) = 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it&amp;rsquo;s even worse, because those numbers aren&amp;rsquo;t what the documentation says they should be. &amp;ldquo;If &lt;code&gt;$n&lt;/code&gt; is positive, then &lt;code&gt;$m % $n&lt;/code&gt; is &lt;code&gt;$m&lt;/code&gt; minus the largest multiple of &lt;code&gt;$n&lt;/code&gt; less than or equal to &lt;code&gt;$m&lt;/code&gt;&amp;rdquo;. Let&amp;rsquo;s take the case of -137 and 12. There are a couple of ways to look at this. If a &amp;ldquo;multiple&amp;rdquo; we call &lt;code&gt;$i&lt;/code&gt; must be positive, there is no value such that &lt;code&gt;$n * $i&lt;/code&gt; will be less than or equal to any negative value. If that &lt;code&gt;$i&lt;/code&gt; can be negative, the word &amp;ldquo;largest&amp;rdquo;  is a bit troublesome. Wikipedia says &lt;a href=&#34;https://en.wikipedia.org/wiki/Large_numbers&#34;&gt;large numbers are positive&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;fake-random-numbers:895dfc94e45590b36c5dd569303f6b79&#34;&gt;Fake random numbers&lt;/h3&gt;

&lt;p&gt;Perl has a &lt;a href=&#34;http://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt; function. It claims to return &amp;ldquo;a random fractional number greater than or equal to 0&amp;rdquo;, but it doesn&amp;rsquo;t. It&amp;rsquo;s not random. It&amp;rsquo;s fake random in a way that might work if you only want to use one of them to complete a homework assignment in a beginning programming course in middle school. Although the documentation includes a footnote saying &amp;ldquo;You should not rely on it in security-sensitive situations&amp;rdquo;, it does not say &amp;ldquo;Don&amp;rsquo;t ever use this.&amp;rdquo; like it should. Try this program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -le &#39;srand(137); print rand for 1 .. 10&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It outputs some numbers, which might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.470744323291914
0.278795581867115
0.263413724062172
0.646815254210146
0.958771364426031
0.3733677954733
0.561358958619476
0.537256242282716
0.967152799238111
0.846555037715689
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run it again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.470744323291914
0.278795581867115
0.263413724062172
0.646815254210146
0.958771364426031
0.3733677954733
0.561358958619476
0.537256242282716
0.967152799238111
0.846555037715689
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not only do you get the same numbers, but you get them in the same order. Perl tries to hide this from you by automatically calling &lt;code&gt;srand&lt;/code&gt; and giving it a &amp;ldquo;random&amp;rdquo; number to start the completely repeatable sequence.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s not the only problem with these fake random numbers (which, again, Perl&amp;rsquo;s documentation never calls &amp;ldquo;fake&amp;rdquo;). They can only represent certain discrete values. See, for instance, the thread that &lt;a href=&#34;https://www.quora.com/Why-does-perl-rand-on-Win32-never-generate-a-value-between-0-890655528357032-and-0-890685315537721&#34;&gt;Why does perl rand() on Win32 never generate a value between 0.890655528357032 and 0.890685315537721?&lt;/a&gt;. On Windows, Perl uses 15 bits to represent the range of the fake random numbers instead of the 53 bits Perl could use.&lt;/p&gt;

&lt;p&gt;There are a variety of ways this can screw up if you use it in an application that keeps going and going. Eventually you come back to the beginning of the sequence, perhaps colliding with existing customer data.&lt;/p&gt;

&lt;h3 id=&#34;perl-lets-anyone-program:895dfc94e45590b36c5dd569303f6b79&#34;&gt;Perl lets anyone program&lt;/h3&gt;

&lt;p&gt;Perhaps the biggest problem with Perl is that anyone with a text editor can write a program and upload it to the internet. It&amp;rsquo;s a feature that Perl allows someone to get their work done, but the problem shows up when someone tries to generalize that to other people&amp;rsquo;s work. Projects such as &lt;a href=&#34;http://nms-cgi.sourceforge.net/&#34;&gt;Not Matt&amp;rsquo;s Scripts&lt;/a&gt; try to mitigate this by fixing the problem one script at a time. There are simply too many scripts to get to in the lifetime of the Universe.&lt;/p&gt;

&lt;h3 id=&#34;in-conclusion:895dfc94e45590b36c5dd569303f6b79&#34;&gt;In conclusion&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;ve made it this far without complaining on Twitter, Reddit, or Hacker News, congratulations. You know what day of the year it is.&lt;/p&gt;

&lt;p&gt;These are real issues, though, and if your application is senstive to small differences in numbers (such as calculating fundamental constants of the universe or pension fund allocations), you&amp;rsquo;re probably using sophisticated number libraries and have various levels of audits to verify the results.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modern Perl 4th edition, a review</title>
      <link>http://perltricks.com/article/205/2015/12/21/Modern-Perl-4th-edition--a-review/</link>
      <pubDate>Mon, 21 Dec 2015 00:02:25 +0000</pubDate>
      
      <guid>http://perltricks.com/article/205/2015/12/21/Modern-Perl-4th-edition--a-review/</guid>
      <description>

&lt;p&gt;The 4th edition of &lt;a href=&#34;https://pragprog.com/book/swperl/modern-perl-fourth-edition&#34;&gt;Modern Perl&lt;/a&gt; by chromatic is out. I was given an advance copy to review and the book features my praise quote, so I figured it was about time I wrote my notes up into a longer review. Overall I really like the changes to the new edition; in my opinion, Modern Perl continues to provide a valuable introduction to idiomatic Perl programming.&lt;/p&gt;

&lt;h3 id=&#34;learn-the-idiomatic-perl-style:1a23e64e513dff9cb8ce1f594e62a037&#34;&gt;Learn the idiomatic Perl style&lt;/h3&gt;

&lt;p&gt;Modern Perl isn&amp;rsquo;t like your typical dry programming book. For one thing, it&amp;rsquo;s opinionated. Author chromatic draws on his experience to provide an insiders&amp;rsquo; guide that shows the &lt;em&gt;right&lt;/em&gt; way to program in Perl.&lt;/p&gt;

&lt;p&gt;The text is fast-moving and doesn&amp;rsquo;t baby the reader. Instead of &amp;ldquo;hello World&amp;rdquo;, the book begins by teaching the reader how to use &lt;code&gt;perldoc&lt;/code&gt; and draw upon the official documentation when they get stuck. Don&amp;rsquo;t waste time with Google when the answer &lt;a href=&#34;http://perltricks.com/article/155/2015/2/26/Hello-perldoc--productivity-booster&#34;&gt;can be found in seconds&lt;/a&gt; at the command line.&lt;/p&gt;

&lt;p&gt;Chapters 1 and 2 introduce the Perl philosophy and Community. The book rapidly covers the major features of Perl (chapters 3 - 7) and even more advanced topics like recursion, anonymous functions and closures. Peppered throughout are gems of wisdom explaining the rationale behind a given concept. For instance, on including parentheses on all function calls (even ones without arguments):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While these parentheses are not strictly necessary for these examples—even with strict enabled—they provide clarity to human readers as well as Perl’s parser. When in doubt, use them.&lt;/p&gt;

&lt;p&gt;Modern Perl 4th edition, Chapter 5, Declaring Functions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The focus here, though is on the practical and chromatic quickly moves on to advising on elements of good Perl style and how to learn it (chapter 8) and real-World programming tips (chapter 9). This is an honest, expert&amp;rsquo;s account of Perl, and chapter 11 describes what to avoid in Perl (chapter 5 also has an entry on function misfeatures).&lt;/p&gt;

&lt;p&gt;Whilst this is an introductory text, chromatic does find time to touch upon several intermediate concepts like taint, schwartzian transforms and tail call optimizations. There is something for everybody: re-reading the &lt;a href=&#34;http://modernperlbooks.com/books/modern_perl_2014/05-perl-functions.html#U3RhdGV2ZXJzdXNDbG9zdXJlcw&#34;&gt;section&lt;/a&gt; State-versus-Closures (chapter 5) I learned a nuance that I hadn&amp;rsquo;t appreciated before.&lt;/p&gt;

&lt;p&gt;Modern Perl does assume a lot and this could make it challenging for complete novices. For example the code snippets assume the reader can distinguish between command line and Perl programming context. Map and grep are used in examples but are not covered in the language overview chapters. But these are minor nits.&lt;/p&gt;

&lt;h3 id=&#34;modern-perl:1a23e64e513dff9cb8ce1f594e62a037&#34;&gt;&amp;ldquo;Modern&amp;rdquo; Perl?&lt;/h3&gt;

&lt;p&gt;About 10 years ago, Perl enjoyed something of a &lt;a href=&#34;http://www.modernperlbooks.com/mt/2009/07/milestones-in-the-perl-renaissance.html&#34;&gt;renaissance&lt;/a&gt; called &amp;ldquo;Modern Perl&amp;rdquo;. This was a movement that developed powerful new libraries, tools and applications which invigorated Perl programming and gave it a new lease-of-life. Today the phrase is almost synonymous with Perl &amp;ldquo;best practices&amp;rdquo; and its ethos continues to help Perl flourish.&lt;/p&gt;

&lt;h3 id=&#34;what-s-changed:1a23e64e513dff9cb8ce1f594e62a037&#34;&gt;What&amp;rsquo;s changed&lt;/h3&gt;

&lt;p&gt;The 4th edition brings a lot of changes, but it&amp;rsquo;s a case of evolution, not revolution. New Perl features like the double-diamond operator (&lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;) and &lt;a href=&#34;http://perltricks.com/article/72/2014/2/24/Perl-levels-up-with-native-subroutine-signatures&#34;&gt;subroutine signatures&lt;/a&gt; are covered. Almost every paragraph has been &lt;a href=&#34;https://github.com/chromatic/modern_perl_book/commits/master&#34;&gt;updated&lt;/a&gt;), but the chapter structure remains the same and many of the edits are tweaks rather than wholesale re-writes. Many of the changes improve the readability of the text, others de-jargonize it, like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Functions are a prime mechanism for abstraction, encapsulation, and re-use in Perl.&lt;/p&gt;

&lt;p&gt;Modern Perl, 3rd Edition, Chapter 5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;became:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Functions are a prime mechanism for organizing code into similar groups, identifying individual pieces by name, and providing reusable units of behavior.&lt;/p&gt;

&lt;p&gt;Modern Perl, 3rd Edition, Chapter 5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which is clearly easier for beginners to understand. Code-wise, many of the examples have changed from a BSD to K&amp;amp;R style, presumably to save vertical space. Overall the book length remains about the same (205 vs 204 pages).&lt;/p&gt;

&lt;p&gt;The biggest change with the new edition comes from The Pragmatic Bookshelf - their version is simply &lt;em&gt;gorgeous&lt;/em&gt;. Full color with larger fonts, icons and callouts, the book really pops. This is the layout Modern Perl needs &lt;em&gt;and&lt;/em&gt; deserves. See this comparison between the Onyx Neon and Pragmatic Bookshelf versions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/205/comparison.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;alternatives:1a23e64e513dff9cb8ce1f594e62a037&#34;&gt;Alternatives&lt;/h3&gt;

&lt;p&gt;As an opinionated introduction to Perl, Modern Perl is a compromise between a tutorial and a best-practices style cookbook. I love the direction and terse writing style, but the book might move too fast for complete beginners. So it depends on what you&amp;rsquo;re looking for - &lt;a href=&#34;http://www.amazon.com/Beginning-Perl-Curtis-Poe/dp/1118013840&#34;&gt;Beginning Perl&lt;/a&gt; and &lt;a href=&#34;http://www.amazon.com/Learning-Perl-Randal-L-Schwartz/dp/1449303587&#34;&gt;Learning Perl&lt;/a&gt; are fine introductions to the language. &lt;a href=&#34;http://www.amazon.com/Effective-Perl-Programming-Idiomatic-Development/dp/0321496949&#34;&gt;Effective Perl Programming&lt;/a&gt; is my favorite Perl cookbook. But Modern Perl is a unique blend of both styles.&lt;/p&gt;

&lt;h3 id=&#34;where-to-get-it:1a23e64e513dff9cb8ce1f594e62a037&#34;&gt;Where to get it&lt;/h3&gt;

&lt;p&gt;You can read Modern Perl &lt;a href=&#34;http://modernperlbooks.com/books/modern_perl_2014/index.html&#34;&gt;online&lt;/a&gt; for free, and there are downloadable versions available from &lt;a href=&#34;http://onyxneon.com/books/modern_perl/index.html&#34;&gt;Onyx Neon&lt;/a&gt;. If you want it as an ebook, I would recommend the Pragmatic Bookshelf &lt;a href=&#34;https://pragprog.com/book/swperl/modern-perl-fourth-edition&#34;&gt;version&lt;/a&gt; - it&amp;rsquo;s beautifully styled, free, and you&amp;rsquo;ll be eligible for updates to the text as/when they appear.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making the Larry Wall shirt</title>
      <link>http://perltricks.com/article/201/2015/12/3/Making-the-Larry-Wall-shirt/</link>
      <pubDate>Thu, 03 Dec 2015 12:52:01 +0000</pubDate>
      
      <guid>http://perltricks.com/article/201/2015/12/3/Making-the-Larry-Wall-shirt/</guid>
      <description>

&lt;p&gt;A few months ago &lt;a href=&#34;http://www.learning-perl.com/&#34;&gt;brian d foy&lt;/a&gt;and I were throwing around some t-shirt ideas and we came up with a concept for series of shirts highlighting our computer heroes. This culminated in us recently launching our first &lt;a href=&#34;https://www.kickstarter.com/projects/1422827986/heroes-of-the-revolution-t-shirts-larry-wall&#34;&gt;Kickstarter project&lt;/a&gt; for the Larry Wall shirt (shown above). If you like the design &lt;a href=&#34;https://www.kickstarter.com/projects/1422827986/heroes-of-the-revolution-t-shirts-larry-wall&#34;&gt;back it&lt;/a&gt;! - we&amp;rsquo;d love to produce more designs for other famous programmers like Ritchie, Norvig et al. This article is about how to create similar pop art style images using &lt;a href=&#34;http://www.gimp.org/&#34;&gt;GIMP&lt;/a&gt; and &lt;a href=&#34;https://inkscape.org/en/&#34;&gt;Inkscape&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;selecting-preparing-an-image:302dac8623db7aacc9a2f705893b1575&#34;&gt;Selecting &amp;amp; preparing an image&lt;/h3&gt;

&lt;p&gt;First find an image you want to convert and open it in GIMP. I&amp;rsquo;m going to use my profile photo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/201/0BwRnByTz2iUXNWNOWmlnb1lxT1E&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To prepare the image for stenciling, I need to reduce the image contrast. The first thing I do is remove the background. I use a variety of techniques for this: if it is a single color, I use the color selection tool and delete it; else a combination of the lasso select with delete and the eraser usually do the trick:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/201/0BwRnByTz2iUXSEN5ZHBTOFRvcHM&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I use the same techniques to remove my body:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/201/0BwRnByTz2iUXd3FCS0tsZ2hRSVE&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next I convert the image to black and white (go to Image-&amp;gt;mode-&amp;gt;grayscale) and crop it (Image-&amp;gt;Autocrop Image).&lt;/p&gt;

&lt;h3 id=&#34;creating-the-stencil:302dac8623db7aacc9a2f705893b1575&#34;&gt;Creating the stencil&lt;/h3&gt;

&lt;p&gt;With the image adequately prepped, I can use GIMP&amp;rsquo;s color threshold tool to convert it to a rough stencil (Colors-&amp;gt;Threshold). I adjust the default threshold until I get an appearance I like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/201/0BwRnByTz2iUXTE9aR0F6RGNSVkk&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I export this image from GIMP as a PNG file and open it with Inkscape. Within Inkscape I left-click the image so that it is selected and then trace the bitmap (Path-&amp;gt;Trace Bitmap). This creates a new, smoother version of the image. Then I delete the original image from Inkscape. At this point the image is good but it&amp;rsquo;s too small for general use, so when I export it as a PNG (File-&amp;gt;Export PNG Image) I adjust the image dimensions to the size required. This works because an SVG will scale to any dimension (click &lt;a href=&#34;http://perltricks.com/images/201/0BwRnByTz2iUXQnJvajhCY3VWMmM&#34;&gt;here&lt;/a&gt; for a larger version).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/201/0BwRnByTz2iUXc1l5NXlldGV4OE0&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this stage I could put this image on any color of t-shirt. Instead I&amp;rsquo;ll re-import the image into GIMP and add a funky background color:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/201/0BwRnByTz2iUXeUs0WGpVdDQ1Q0E&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget to back the &lt;a href=&#34;https://www.kickstarter.com/projects/1422827986/heroes-of-the-revolution-t-shirts-larry-wall&#34;&gt;Kickstarter&lt;/a&gt; project if you want a t-shirt. Best of all, it&amp;rsquo;s Larry Wall approved ™&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to choose a DuckDuckGo cheatsheet topic</title>
      <link>http://perltricks.com/article/191/2015/8/29/How-to-choose-a-DuckDuckGo-cheatsheet-topic/</link>
      <pubDate>Sat, 29 Aug 2015 09:46:29 +0000</pubDate>
      
      <guid>http://perltricks.com/article/191/2015/8/29/How-to-choose-a-DuckDuckGo-cheatsheet-topic/</guid>
      <description>

&lt;p&gt;If you want to develop a &lt;a href=&#34;http://perltricks.com/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier&#34;&gt;DuckDuckGo cheatsheet&lt;/a&gt; and you&amp;rsquo;ve got the technicals down, the next task is to choose a cheatsheet topic. As with &lt;a href=&#34;http://martinfowler.com/bliki/TwoHardThings.html&#34;&gt;naming things&lt;/a&gt;, this can be harder than it sounds.&lt;/p&gt;

&lt;p&gt;Certain topics are better suited to be cheatsheets than others; because the cheatsheet is a static file, it&amp;rsquo;s better to provide information which is unlikely to change, such as a &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/share/goodie/cheat_sheets/json/wu-tang.json&#34;&gt;list of the members of the Wu-Tang Clan&lt;/a&gt;. With that in mind, here are some good sources of inspiration for your cheatsheet.&lt;/p&gt;

&lt;h3 id=&#34;scan-the-cheatsheet-corpus:90f645f884ba1a250b073025e344ebe2&#34;&gt;Scan the cheatsheet corpus&lt;/h3&gt;

&lt;p&gt;Get inspiration from association. The DuckDuckGo goodie repo maintains all of the static &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies/tree/master/share/goodie/cheat_sheets/json&#34;&gt;cheatsheets&lt;/a&gt;. Have a look at them, maybe you&amp;rsquo;ll get an idea for something similar to what&amp;rsquo;s already been done. I made the GNU Screen cheatsheet after I saw the tmux one - there was a lot of copy and paste involved!&lt;/p&gt;

&lt;h3 id=&#34;check-the-instant-answer-request-list:90f645f884ba1a250b073025e344ebe2&#34;&gt;Check the instant answer request list&lt;/h3&gt;

&lt;p&gt;One way to get cheatsheet ideas is to think about technical and trivia subjects you&amp;rsquo;re interested in. That&amp;rsquo;s &amp;ldquo;supply&amp;rdquo;. Another way is to look at &amp;ldquo;demand&amp;rdquo; - i.e. what people have asked for. Helpfully, the DuckDuckGo community maintains an extensive &lt;a href=&#34;https://duck.co/ideas&#34;&gt;list&lt;/a&gt; of instant answer ideas. Have a browse!&lt;/p&gt;

&lt;h3 id=&#34;mine-google-adwords:90f645f884ba1a250b073025e344ebe2&#34;&gt;Mine Google AdWords&lt;/h3&gt;

&lt;p&gt;Another way to view demand is to check search traffic. This is an old SEO trick to find common associations with a keyword using the &lt;a href=&#34;https://adwords.google.com&#34;&gt;Google AdWords&lt;/a&gt; keywords planner tool. For example I used the tool to find the top 50 searches associated with the term &amp;ldquo;cheatsheet&amp;rdquo;:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keyword&lt;/th&gt;
&lt;th&gt;Avg. Monthly Searches (exact match only)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;markdown cheatsheet&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;vim cheatsheet&lt;/td&gt;
&lt;td&gt;1600&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;git cheatsheet&lt;/td&gt;
&lt;td&gt;1600&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;regex cheatsheet&lt;/td&gt;
&lt;td&gt;1300&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;vi cheatsheet&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;jquery cheatsheet&lt;/td&gt;
&lt;td&gt;480&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fantasy football cheatsheet&lt;/td&gt;
&lt;td&gt;390&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cheatsheets&lt;/td&gt;
&lt;td&gt;390&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;html cheatsheet&lt;/td&gt;
&lt;td&gt;390&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;subnet cheatsheet&lt;/td&gt;
&lt;td&gt;390&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;python cheatsheet&lt;/td&gt;
&lt;td&gt;390&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fantasy football cheatsheets&lt;/td&gt;
&lt;td&gt;320&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xss cheatsheet&lt;/td&gt;
&lt;td&gt;320&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sql cheatsheet&lt;/td&gt;
&lt;td&gt;320&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;gdb cheatsheet&lt;/td&gt;
&lt;td&gt;320&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;emacs cheatsheet&lt;/td&gt;
&lt;td&gt;260&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;latex cheatsheet&lt;/td&gt;
&lt;td&gt;260&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;linux cheatsheet&lt;/td&gt;
&lt;td&gt;210&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;screen cheatsheet&lt;/td&gt;
&lt;td&gt;210&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;r cheatsheet&lt;/td&gt;
&lt;td&gt;210&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;svn cheatsheet&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;php cheatsheet&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;html5 cheatsheet&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sql injection cheatsheet&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ruby cheatsheet&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;regular expression cheatsheet&lt;/td&gt;
&lt;td&gt;140&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bash cheatsheet&lt;/td&gt;
&lt;td&gt;140&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;uml cheatsheet&lt;/td&gt;
&lt;td&gt;140&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;css3 cheatsheet&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xpath cheatsheet&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;perl cheatsheet&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;unix cheatsheet&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;django cheatsheet&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;subnet mask cheatsheet&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;c# cheatsheet&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;powershell cheatsheet&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;asciidoc cheatsheet&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fantasy cheatsheet&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rails cheatsheet&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mediawiki cheatsheet&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;regular expressions cheatsheet&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;zfs cheatsheet&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;free fantasy football cheatsheets&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dailybeast cheatsheet&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dmv cheatsheet&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fantasy football draft cheatsheet&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fantasy baseball cheatsheet&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;photobert cheatsheet&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cheatsheet html&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;autosys cheatsheet&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If nothing in this list appeals, try searching against similar terms like &amp;ldquo;cheat sheet&amp;rdquo;, &amp;ldquo;help&amp;rdquo;, &amp;ldquo;FAQ&amp;rdquo; and &amp;ldquo;usage&amp;rdquo; to find something that inspires you.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:90f645f884ba1a250b073025e344ebe2&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Developing cheatsheets should be fun. If you&amp;rsquo;re wrestling with a potential cheatsheet topic remember that there is a large developer community waiting to help you. The &lt;a href=&#34;http://duckduckhack.com/&#34;&gt;DuckDuckHack site&lt;/a&gt; is a good source of information. It has a &lt;a href=&#34;https://duck.co/duckduckhack/faq#goodie&#34;&gt;FAQ&lt;/a&gt;, a &lt;a href=&#34;https://duck.co/duckduckhack/determine_your_instant_answer_type&#34;&gt;guide&lt;/a&gt; to picking the right plugin type for your idea and information on how to join the DuckDuckGo Slack site. Useful information can also be found in the &lt;a href=&#34;https://duckduckgo.com/?q=quack+hack+help&amp;amp;ia=cheatsheet&#34;&gt;quack and hack cheatsheet&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve drafted your cheatsheet, consider using my &lt;a href=&#34;http://perltricks.com/article/190/2015/8/28/Check-your-DuckDuckGo-cheatsheets-with-Perl&#34;&gt;cheatsheet checker tool&lt;/a&gt;. It finds common syntax and data errors which can make developing a cheatsheet easier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing DuckDuckGo plugins just got easier</title>
      <link>http://perltricks.com/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier/</link>
      <pubDate>Sat, 22 Aug 2015 14:05:25 +0000</pubDate>
      
      <guid>http://perltricks.com/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier/</guid>
      <description>

&lt;p&gt;The developers behind DuckDuckGo, the search engine that doesn&amp;rsquo;t track you, have made it easier than ever to write plugins for the site. With the first global &lt;a href=&#34;https://duck.co/blog/post/196/the-first-global-quack-hack&#34;&gt;Quack &amp;amp; Hack&lt;/a&gt; event taking place later this month, there&amp;rsquo;s never been a better time to get involved.&lt;/p&gt;

&lt;h3 id=&#34;instant-answers:06f8e3dfccc590daeee2c2b9ec28de7c&#34;&gt;Instant Answers&lt;/h3&gt;

&lt;p&gt;The DuckDuckGo engine supports several types of plugin, but instant answers that provide a static &amp;ldquo;cheatsheet&amp;rdquo; are a simple to get started. &lt;a href=&#34;http://perltricks.com/article/169/2015/4/20/Writing-DuckDuckGo-instant-answers-is-easy&#34;&gt;Previously&lt;/a&gt; developing a new instant answer would require a Perl module, a test file and a plain text version of the response. Now all you need to provide is a JSON file of your instant answer and you&amp;rsquo;re in business.&lt;/p&gt;

&lt;h3 id=&#34;setup:06f8e3dfccc590daeee2c2b9ec28de7c&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to fork the DuckDuckGo &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies&#34;&gt;repo&lt;/a&gt; and clone your forked repo to your development machine. Optionally you can install &lt;a href=&#34;https://metacpan.org/pod/App::DuckPAN&#34;&gt;App::DuckPAN&lt;/a&gt;, which can launch a local version of the DuckDuckGo site for testing your code. Another way to test the cheatsheet is via &lt;a href=&#34;https://vimeo.com/132712266&#34;&gt;Codio&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;an-instant-answer-json-file:06f8e3dfccc590daeee2c2b9ec28de7c&#34;&gt;An Instant Answer JSON file&lt;/h3&gt;

&lt;p&gt;Instant answer JSON files should be created in the &lt;code&gt;share/goodie/cheat_sheets&lt;/code&gt; directory in the repo. A good way to start is to copy one of the existing files and change it to include your content.&lt;/p&gt;

&lt;p&gt;This is a truncated example from my &lt;code&gt;perldoc&lt;/code&gt; instant answer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;{
    &amp;quot;id&amp;quot;: &amp;quot;perldoc_cheat_sheet&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;perldoc&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Perl Documentation&amp;quot;,
    &amp;quot;metadata&amp;quot;: {
        &amp;quot;sourceName&amp;quot;: &amp;quot;perldoc Manual&amp;quot;,
        &amp;quot;sourceUrl&amp;quot;: &amp;quot;http://perldoc.perl.org/perldoc.html&amp;quot;
    },
    &amp;quot;section_order&amp;quot;: [&amp;quot;Usage&amp;quot;, &amp;quot;Module Options&amp;quot;, &amp;quot;Search Options&amp;quot;, &amp;quot;Common Options&amp;quot;],
    &amp;quot;sections&amp;quot;: {
        &amp;quot;Usage&amp;quot;: [
        {
            &amp;quot;key&amp;quot;: &amp;quot;[perldoc &amp;lt;option&amp;gt;]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;start perldoc&amp;quot;
        },
        {
            &amp;quot;key&amp;quot;: &amp;quot;[perldoc perldoc]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;perldoc help&amp;quot;
        }
        ],
       ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; fields should be unique values that describe the plugin. The &lt;code&gt;metadata&lt;/code&gt; fields describe the source of the information in the instant answer. It&amp;rsquo;s good to use a canonical source - in this case I referenced the official Perl documentation.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sections&lt;/code&gt; field is the content of the instant answer. Each entry is a key value for an array of key pairs. &lt;code&gt;section_order&lt;/code&gt; describes the order in which the sections will be displayed in the search engine results, so make sure you put the most important sections first!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a closer look at a section entry, here is &lt;code&gt;Module Options&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;        &amp;quot;Module Options&amp;quot;: [
        {
            &amp;quot;key&amp;quot;: &amp;quot;Module::Name&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;Show module documentation&amp;quot;
        },
        {
            &amp;quot;key&amp;quot;: &amp;quot;[-l Module::Name]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;Module filepath&amp;quot;
        },
        {
            &amp;quot;key&amp;quot;: &amp;quot;[-m Module::Name]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;Module source code&amp;quot;
        },
        {
            &amp;quot;key&amp;quot;: &amp;quot;[-lm Module::Name]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;Module filepath (alt.)&amp;quot;
        }
        ],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;Module Options&amp;rdquo; is the section name, this must be present exactly in the &lt;code&gt;section_order&lt;/code&gt; field, or this section will not appear at all. The section name text is the subheading used for the section, so be sure to choose something readable: &amp;ldquo;Module Options&amp;rdquo; is better than &amp;ldquo;module_options&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Each key pair entry represents the text to be displayed for the instant answer, the &lt;code&gt;key&lt;/code&gt; text should be the code and &lt;code&gt;val&lt;/code&gt; the description. If the &lt;code&gt;key&lt;/code&gt; text contains spaces, wrap the text in square brackets to ensure it&amp;rsquo;s displayed as code on the web page (see this article&amp;rsquo;s cover image for examples). You can find the complete perldoc JSON file &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/share/goodie/cheat_sheets/json/perldoc.json&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;wrap-up:06f8e3dfccc590daeee2c2b9ec28de7c&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;You can test your instant answer using &lt;a href=&#34;https://metacpan.org/pod/App::DuckPAN&#34;&gt;App::DuckPAN&lt;/a&gt; (see my previous &lt;a href=&#34;http://perltricks.com/article/169/2015/4/20/Writing-DuckDuckGo-instant-answers-is-easy&#34;&gt;article&lt;/a&gt; for examples). If you want to discuss your instant answer with a developer, or resolve an issue, the DuckDuckGo team are on Slack, you can request access via &lt;a href=&#34;mailto:QuackSlack@duckduckgo.com?subject=AddMe&#34;&gt;email&lt;/a&gt;. The official &lt;a href=&#34;https://duck.co/duckduckhack/goodie_overview&#34;&gt;documentation&lt;/a&gt; is also useful.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve finished an instant answer, create a pull request! The DuckDuckGo developers will review your code and give feedback. Once your instant answer is approved, it will go live within a few days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; Changed chat details for DDG slack 2015-08-26&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Miniconf NYC - a free Perl conference</title>
      <link>http://perltricks.com/article/175/2015/5/14/Miniconf-NYC---a-free-Perl-conference/</link>
      <pubDate>Thu, 14 May 2015 12:26:37 +0000</pubDate>
      
      <guid>http://perltricks.com/article/175/2015/5/14/Miniconf-NYC---a-free-Perl-conference/</guid>
      <description>

&lt;p&gt;Just when you thought there couldn&amp;rsquo;t be more NYC based Perl events, another comes along! I&amp;rsquo;m one of the organizers for &lt;a href=&#34;http://mini-conf.com&#34;&gt;Miniconf&lt;/a&gt; a free Perl conference that&amp;rsquo;s running here in New York on Saturday June 6th, two days day before YAPC::NA. There&amp;rsquo;s also a pre-conference social event, and you can sign up for both events on &lt;a href=&#34;http://www.meetup.com/The-New-York-Perl-Meetup-Group/http://www.meetup.com/The-New-York-Perl-Meetup-Group/&#34;&gt;meetup&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;what-to-expect:415b3af018660e6f37a6b2438056b75d&#34;&gt;What to expect&lt;/h3&gt;

&lt;p&gt;We have two large rooms for the day, one for training and the other for the hackathon. Taking our cue from the recent NYC Perl hackathon, for our hackathon we&amp;rsquo;re going to cluster attendees around projects they&amp;rsquo;re interested in working on, and each project team will have a leader responsible for helping attendees get up to speed. I like this approach because it&amp;rsquo;s newbie friendly, and encourages a productive use of the time. We&amp;rsquo;ve got a few teams already:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you know Perl 5 and are interested in Perl 6? Then you might be interested joining my team which is converting Perl 5 modules to Perl 6.&lt;/li&gt;
&lt;li&gt;Want to contribute to core Perl 5 development? Join the &amp;ldquo;Show core modules some love&amp;rdquo; team led by Richard Elberger and help close a few tickets.&lt;/li&gt;
&lt;li&gt;Interested in Mojolicious web development? Help Curtis Brandt hack on &lt;a href=&#34;https://github.com/aggrolite/Mojo-Snoo&#34;&gt;Mojo::Snoo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have a hackathon project you&amp;rsquo;d like to work on, &lt;a href=&#34;mailto:admin@mini-conf.com&#34;&gt;email us&lt;/a&gt; and we&amp;rsquo;ll add it to the &lt;a href=&#34;http://mini-conf.com&#34;&gt;website&lt;/a&gt;. Of course, solo hackers are welcome too :)&lt;/p&gt;

&lt;p&gt;For training, in the morning we have brian d foy delivering his popular &amp;ldquo;Become a CPAN author in three hours&amp;rdquo; course. This is a great introductory course for aspiring CPAN contributors - learn how to create a Perl distribution, package it up and upload it to CPAN. Contributing to CPAN is one of the most fun and rewarding things a Perl developer can learn - once your distribution is on CPAN, &lt;strong&gt;anyone&lt;/strong&gt; can use it and benefit from it - how cool is that? It&amp;rsquo;s also interesting to get to know the Perl toolchain, and how systems like CPAN and PAUSE work. We currently have an afternoon training slot available.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to see the day out with lightning talks - always a fun affair. At the moment we&amp;rsquo;re thinking the project teams can give a lightning talk to describe their progress for the day, but it might make sense to just have a more general lightning talk slot - if you want to give a lightning talk, &lt;a href=&#34;mailto:admin@mini-conf.com&#34;&gt;email us&lt;/a&gt;. I&amp;rsquo;ll probably give a talk on one of my dumber &lt;a href=&#34;https://metacpan.org/pod/Cache::Reddit&#34;&gt;modules&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;how-to-help:415b3af018660e6f37a6b2438056b75d&#34;&gt;How to help&lt;/h3&gt;

&lt;p&gt;Spread the word! We&amp;rsquo;re promoting the event through social media and other outlets (like this website, see the banner ad). Follow the Miniconf Twitter [feed]() - we&amp;rsquo;ll use it to communicate conference updates.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re also looking for sponsors, if you work for a company interested in reaching New York based programmers, give them our email address, or even better send them introductory email cc&amp;rsquo;ing &lt;code&gt;admin@mini-conf.com&lt;/code&gt;. With sponsors we&amp;rsquo;re trying something a little bit different, we have sponsorship slots for particular aspects of the conference. So an organization can be the &amp;ldquo;pizza and soda sponsor&amp;rdquo; to make a more visible link between a sponsor&amp;rsquo;s contribution and the benefits of the conference. Every sponsor gets their logo on the conference website, on the big screens during the conference, and promotion through social media. We&amp;rsquo;re also running a &amp;ldquo;swag&amp;rdquo; table for sponsors to contribute merchandise, an obvious win-win, as the sponsor gets brand promotion and the attendees get free stuff!&lt;/p&gt;

&lt;p&gt;As a programmer and tech conference regular myself, I&amp;rsquo;m trying to create the kind of conference that I&amp;rsquo;d want to go to. If you have any questions or suggestions, &lt;a href=&#34;mailto:admin@mini-conf.com&#34;&gt;email us&lt;/a&gt;. I&amp;rsquo;m looking forward to seeing everyone there!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Script-fu: how to raise 641 request tracker tickets</title>
      <link>http://perltricks.com/article/174/2015/5/12/Script-fu--how-to-raise-641-request-tracker-tickets/</link>
      <pubDate>Tue, 12 May 2015 12:54:26 +0000</pubDate>
      
      <guid>http://perltricks.com/article/174/2015/5/12/Script-fu--how-to-raise-641-request-tracker-tickets/</guid>
      <description>

&lt;p&gt;I spent most of the NYC Perl Hackathon (thanks Bloomberg!) hacking on Perl 6 stuff. Led by Will &amp;ldquo;Coke&amp;rdquo; Coleda, one of the tasks for the group was to find skip/todo directives that were missing Request Tracker (RT) ticket numbers in the Perl 6 test suite.&lt;/p&gt;

&lt;p&gt;A typical skip/todo directive looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#?rakudo todo &amp;quot;doesn&#39;t work yet due to copying of arrays&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells Rakudo to skip the following block of tests. For each skip/todo directive, a new RT ticket had to be raised and the ticket number added to the skip directive line in the test file, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#?rakudo todo &amp;quot;doesn&#39;t work yet due to copying of arrays RT #99999&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This makes it easier for the Rakudo team to identify the remaining bugs or missing features in Rakudo.&lt;/p&gt;

&lt;p&gt;I cloned the Perl 6 test suite, roast and after working through the workflow for reporting a single ticket, I wondered how many other skip/todo directives were missing RT tickets. To find out, I used a little &lt;code&gt;grep&lt;/code&gt; magic:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ grep -rlP &#39;#?rakudo.+?(?:skip|todo)(?:(?!RT).{2})+$&#39; ./ | wc -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells grep to recursively search for files in the current directory, and for each file, print the filename if the Perl-style regex matches the text in the file. The regex matches Rakudo skip/todo directives that didn&amp;rsquo;t already have an RT reference. The output of grep is then passed to &lt;code&gt;wc&lt;/code&gt; in order to count the number of files. Turns out there were 236 files affected, and this method didn&amp;rsquo;t even count the number of occurrences &lt;em&gt;within&lt;/em&gt; a file. Even if it took 5 minutes per file to raise the ticket on RT, update the file, commit the change and issue a pull request, that&amp;rsquo;s still 20 hours of work. It gets more complicated when you have to apportion that work between several people. At this point my spidey sense was tingling &amp;hellip; can you say &amp;ldquo;automation&amp;rdquo;?&lt;/p&gt;

&lt;h3 id=&#34;using-a-machine-to-raise-rt-tickets-like-a-machine:8f3a1e2bb13193f3eb6c35713b20826f&#34;&gt;Using a machine to raise RT tickets &amp;ldquo;like a machine&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;I wrote a quick script to find all the skip/todo directives again, only this time I would capture the filename, line number and description:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;

scan_directory(&#39;.&#39;);

sub scan_directory
{
  my ($dir) = @_; 

  opendir(my $dh, &amp;quot;$dir&amp;quot;) or die $!; 

  while (readdir $dh)
  {
    my $newpath = &amp;quot;$dir/$_&amp;quot;;

    next if $newpath !~ qr/^\.\/S/ || -l $newpath;

    if (-d $newpath &amp;amp;&amp;amp; $newpath !~ /\.$/)
    {   
      scan_directory($newpath);
    }   
    elsif (-f $newpath)
    {   
      open my $file, &#39;&amp;lt;&#39;, $newpath or die &amp;quot;failed to open $newpath $!\n&amp;quot;;
      my $line_num = 1;· 
      while (&amp;lt;$file&amp;gt;)
      {   
        chomp;
        if (/^#\?rakudo.+?(?:skip|todo)((?:(?!RT).)+)$/)
        {
          my $subject = sprintf &amp;quot;Roast rakudo skip/todo test:%s line:%s reason:%s&amp;quot;,
            $newpath, $line_num, $1; 

         $subject =~ s/&amp;quot;//g;

          my $response = `rt create -t ticket set subject=&amp;quot;$subject&amp;quot; queue=perl6 priority=0`;
          if ($response =~ /([0-9]+)/)
          {
            printf &amp;quot;%s RT#:%s\n&amp;quot;, $subject, $1; 
          }
          else
          {
            die &amp;quot;Failed to capture ticket # for $subject response: $response&amp;quot;;
          }
        }
        $line_num++;
      }   
      close $file;
    }   
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script is fairly simple: it&amp;rsquo;s a recursive directory scanner that scans files for Rakudo skip/todo blocks. The script uses the following line of code with backticks to execute the &lt;code&gt;rt&lt;/code&gt; command line program, raise a ticket in the Perl 6 queue and captures the response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $response = `rt create -t ticket set subject=&amp;quot;$subject&amp;quot; queue=perl6 priority=0`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script then extracts the RT ticket number from the &lt;code&gt;$response&lt;/code&gt;, and prints out a line containing the filename, line number, description and the RT ticket number. I saved this output in a separate file&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;h3 id=&#34;a-quick-note-on-configuring-rt-cli:8f3a1e2bb13193f3eb6c35713b20826f&#34;&gt;A quick note on configuring RT CLI&lt;/h3&gt;

&lt;p&gt;Configuring and using the RT command line client is simple, but finding out how to do it can be a hard - most of the sources I looked at were out of date, and the RT CPAN &lt;a href=&#34;https://metacpan.org/search?q=RT&amp;amp;size=20&#34;&gt;namespace&lt;/a&gt; has so many burned-out carcasses that Mad Max would be comfortable there. To use the command line client, first install RT::Client::CLI:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan RT::Client::CLI
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then login to the RT Perl &lt;a href=&#34;http://rt.perl.org/&#34;&gt;website&lt;/a&gt; and go to user &lt;a href=&#34;https://rt.perl.org/User/Prefs.html&#34;&gt;preferences&lt;/a&gt; and set a CLI password. Finally, create the file &lt;code&gt;.rtrc&lt;/code&gt; in your home directory. This file should contain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server https://rt.perl.org/
user rt_username
passwd rt_cli_password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace &lt;code&gt;rt_username&lt;/code&gt; with whatever name shows as the top of the RT screen under &amp;ldquo;logged in as&amp;rdquo;. For me it&amp;rsquo;s my email address. Also replace &lt;code&gt;rt_cli_password&lt;/code&gt; with the CLI password you just set. Alternatively instead of a config file, you can use the following environment variables: RTSERVER, RTUSER and RTPASSWD.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it, RT is now configured! Try out some &lt;a href=&#34;http://requesttracker.wikia.com/wiki/CLI&#34;&gt;commands&lt;/a&gt;. &lt;a href=&#34;https://www.safaribooksonline.com/library/view/rt-essentials/0596006683/ch04.html&#34;&gt;Chapter 4&lt;/a&gt; from the RT Essentials book was also useful.&lt;/p&gt;

&lt;h3 id=&#34;updating-roast:8f3a1e2bb13193f3eb6c35713b20826f&#34;&gt;Updating roast&lt;/h3&gt;

&lt;p&gt;Now that I had the RT ticket numbers I needed to go back and add them to the skip/todo directives in the unit test files in roast. I scripted that too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;

open my $tickets, &#39;&amp;lt;&#39;, &#39;./tickets&#39;;

while (my $line = &amp;lt;$tickets&amp;gt;)
{
  chomp $line;
  if (my ($filename, $line_num, $reason, $ticket_num) = $line =~ /:(.+?) .+?:(.+?) .+?:(.+?) .+?:(.+?)$/)
  {
    open my $file, &#39;&amp;lt;&#39;, $filename or die &amp;quot;failed to open $filename $!\n&amp;quot;;
    my $counter = 1;
    my @lines;
    while (my $line = &amp;lt;$file&amp;gt;)
    {   
      if ($counter == $line_num)
      {   
        chomp $line;
        $line =~ s/(&#39;|&amp;quot;)\s*$/ RT #$ticket_num$1\n/;
      }   
      push @lines, $line;
      $counter++;
    }   
    close $file;

    open my $output_file, &#39;&amp;gt;&#39;, $filename or die &amp;quot;failed to open $filename $!\n&amp;quot;;
    for (@lines)
    {   
      print $output_file $_; 
    }   
    close $output_file;
  }
  else
  {
    die &amp;quot;failed to match $line!\n&amp;quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This took a couple of attempts to get right. At first I thought I would try using &lt;code&gt;open&lt;/code&gt; with an awesome read/write filehandle using &lt;code&gt;+&amp;lt;&lt;/code&gt; but that turned out to be more trouble than it was worth. The other challenge was inserting the RT ticket number within the quoted string on the line, rather than outside of it. So this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#?rakudo todo &amp;quot;doesn&#39;t work yet due to copying of arrays&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Would become this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#?rakudo todo &amp;quot;doesn&#39;t work yet due to copying of arrays RT #124652&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The challenge here is that different descriptions use different delimiters to capture the description, either single or double quotes. In the script, this line handles that problem:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$line =~ s/(&#39;|&amp;quot;)\s*$/ RT #$ticket_num$1\n/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a substitution regex that captures the last quoting delimiter on the line, and replaces that with the RT ticket number plus the captured delimiter (&lt;code&gt;$1&lt;/code&gt;). It worked!&lt;/p&gt;

&lt;h3 id=&#34;wrap-up:8f3a1e2bb13193f3eb6c35713b20826f&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;In the end I raised 641 tickets across 236 test files in roast, for about 2 hours of work. And most of that was spent trying to configure the RT command line client. One thing to keep in mind with raising hundreds of tickets is email notification. Luckily for me Robert Spier intercepted the mailsend (thanks Robert!), but it would be great if there was a way to avoid creating hundreds of notifications when raising tickets. If there&amp;rsquo;s a way, I&amp;rsquo;d love to know how.&lt;/p&gt;

&lt;p&gt;Thanks to Will &amp;ldquo;Coke&amp;rdquo; Coleda, Tobias Leich (FROGGS) and Christian Bartolomäus (usev6) for reviewing the pull request and doing the work of merging it. If you&amp;rsquo;re interested in supporting Perl 6, the Rakudo team have a &lt;a href=&#34;http://rakudo.org/how-to-help/&#34;&gt;page&lt;/a&gt; explaining way to contribute. I&amp;rsquo;d also recommend looking at the Perl 6 community &lt;a href=&#34;http://perl6.org/community/&#34;&gt;page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re based in New York or in the North-East of America, I&amp;rsquo;ll be at the &lt;a href=&#34;http://mini-conf.com&#34;&gt;Miniconf&lt;/a&gt; hackathon on June 6th, leading a team to convert Perl 5 modules to Perl 6. Hope to see everyone there!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing DuckDuckGo instant answers is easy</title>
      <link>http://perltricks.com/article/169/2015/4/20/Writing-DuckDuckGo-instant-answers-is-easy/</link>
      <pubDate>Mon, 20 Apr 2015 12:33:17 +0000</pubDate>
      
      <guid>http://perltricks.com/article/169/2015/4/20/Writing-DuckDuckGo-instant-answers-is-easy/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Editor note:&lt;/strong&gt; some of the information in this article is out of date, see our new DuckDuckGo &lt;a href=&#34;http://perltricks.com/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier&#34;&gt;article&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;A few weeks ago, I attended NYC &lt;a href=&#34;http://duckduckgo.ticketleap.com/quackhacknyc/&#34;&gt;Quack &amp;amp; Hack&lt;/a&gt;, and learned how to write DuckDuckGo instant answers. Instant answers are really cool: they are micro apps that trigger when a user searches for specific terms. For example if you search for &lt;a href=&#34;https://duckduckgo.com/?q=help+tmux&amp;amp;ia=answer&#34;&gt;help tmux&lt;/a&gt;, you&amp;rsquo;ll see a tmux cheatsheet displayed. This is a awesome - you can commit code that will go live on DuckDuckGo.com and the good news is that you don&amp;rsquo;t have to wait until the next Quack &amp;amp; Hack to learn how to write one yourself; DuckDuckGo provide great tools that make it easy.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-the-development-environment:5671e5b11157d2de7fcf618736bb0dd9&#34;&gt;Setting up the development environment&lt;/h3&gt;

&lt;p&gt;DuckDuckGo support several different types of instant answers, but today I&amp;rsquo;m going to focus on creating a cheatsheet, which is displayed by the search engine whenever a user searches for a matching set of keywords.&lt;/p&gt;

&lt;p&gt;To get going you&amp;rsquo;ll need Perl 5.18 or higher and have installed &lt;a href=&#34;https://metacpan.org/pod/App::duckpan&#34;&gt;App::DuckPAN&lt;/a&gt;, which you can do with &lt;code&gt;cpan&lt;/code&gt; or &lt;code&gt;cpanminus&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan App::DuckPAN
# or
$ cpanm App::DuckPAN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll also need a local copy of DuckDuckGo&amp;rsquo;s goodies instant answers repo &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies&#34;&gt;repo&lt;/a&gt;, which you can clone with Git:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ git clone https://github.com/duckduckgo/zeroclickinfo-goodies.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With both App::DuckPAN and the goodies repo installed, change into the zeroclickinfo-goodies repo, and launch the duckpan server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cd zeroclickinfo-goodies
$ duckpan server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you run &lt;code&gt;duckpan server&lt;/code&gt;, there will probably be a lot of output, but you should see this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Checking asset cache...
Starting up webserver...
You can stop the webserver with Ctrl-C
HTTP::Server::PSGI: Accepting connections at http://0:5000/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you open your browser and navigate to &lt;code&gt;http://localhost:5000&lt;/code&gt;, you&amp;rsquo;ll be greeted with the DuckDuckGo search page (try &lt;code&gt;http://0:5000&lt;/code&gt; if localhost doesn&amp;rsquo;t work). Search for &amp;ldquo;help tmux&amp;rdquo; and you should see the same instant answer cheatsheet appear as on the live &lt;a href=&#34;https://duckduckgo.com/?q=help+tmux&amp;amp;ia=answer&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;creating-the-instant-answer:5671e5b11157d2de7fcf618736bb0dd9&#34;&gt;Creating the instant answer&lt;/h3&gt;

&lt;p&gt;So now you&amp;rsquo;ve got the development environment setup, you&amp;rsquo;re ready to create an instant answer. I&amp;rsquo;m going to create an instant answer for &lt;code&gt;perldoc&lt;/code&gt; (taken from my perldoc &lt;a href=&#34;#&#34;&gt;article&lt;/a&gt;). I can get a headstart on this by creating the skeleton instant answer code with &lt;code&gt;duckpan new&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ duckpan new PerldocCheatSheet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates the basic files required for the instant answer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Created file: lib/DDG/Goodie/PerldocCheatSheet.pm
Created file: t/PerldocCheatSheet.t
Successfully created Goodie: PerldocCheatSheet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the logic for the instant answer is in &lt;code&gt;PerldocCheatSheet.pm&lt;/code&gt;, and &lt;code&gt;duckpan&lt;/code&gt; has already created a good skeleton:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package DDG::Goodie::PerldocCheatSheet;
# ABSTRACT: Write an abstract here
# Start at https://duck.co/duckduckhack/goodie_overview if you are new
# to instant answer development

use DDG::Goodie;

zci answer_type =&amp;gt; &amp;quot;perldoc_cheat_sheeet&amp;quot;;
zci is_cached   =&amp;gt; 1;

# Metadata.  See https://duck.co/duckduckhack/metadata for help in filling out this section.
name &amp;quot;PerldocCheatSheeet&amp;quot;;
description &amp;quot;Succinct explanation of what this instant answer does&amp;quot;;
primary_example_queries &amp;quot;first example query&amp;quot;, &amp;quot;second example query&amp;quot;;
secondary_example_queries &amp;quot;optional -- demonstrate any additional triggers&amp;quot;;
# Uncomment and complete: https://duck.co/duckduckhack/metadata#category
# category &amp;quot;&amp;quot;;
# Uncomment and complete: https://duck.co/duckduckhack/metadata#topics
# topics &amp;quot;&amp;quot;;
code_url &amp;quot;https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/lib/DDG/Goodie/PerldocCheatSheet.pm&amp;quot;;
attribution github =&amp;gt; [&amp;quot;GitHubAccount&amp;quot;, &amp;quot;Friendly Name&amp;quot;],
            twitter =&amp;gt; &amp;quot;twitterhandle&amp;quot;;

# Triggers
triggers any =&amp;gt; &amp;quot;triggerWord&amp;quot;, &amp;quot;trigger phrase&amp;quot;;

# Handle statement
handle remainder =&amp;gt; sub {

    # optional - regex guard
    # return unless qr/^\w+/;

    return unless $_; # Guard against &amp;quot;no answer&amp;quot;

    return $_;
};

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ll fill in the answers for the abstract, &lt;a href=&#34;https://duck.co/duckduckhack/metadata&#34;&gt;metadata&lt;/a&gt; and &lt;a href=&#34;https://duck.co/duckduckhack/goodie_triggers&#34;&gt;triggers&lt;/a&gt;, and the &lt;code&gt;handle&lt;/code&gt; subroutine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package DDG::Goodie::PerldocCheatSheet;
# ABSTRACT: A cheat sheet for perldoc, the Perl documentation program

use DDG::Goodie;

zci answer_type =&amp;gt; &amp;quot;perldoc_cheat_sheet&amp;quot;;
zci is_cached   =&amp;gt; 1;

# Metadata
name &amp;quot;PerldocCheatSheet&amp;quot;;
source &amp;quot;http://perltricks.com/article/155/2015/2/26/Hello-perldoc--productivity-booster&amp;quot;;
description &amp;quot;A cheat sheet for perldoc, the Perl documentation program&amp;quot;;
primary_example_queries &amp;quot;help perldoc&amp;quot;, &amp;quot;perldoc cheatsheet&amp;quot;, &amp;quot;perldoc commands&amp;quot;, &amp;quot;perldoc ref&amp;quot;;
category &amp;quot;programming&amp;quot;;
topics qw/computing geek programming sysadmin/;
code_url
  &amp;quot;https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/lib/DDG/Goodie/PerldocCheatSheet.pm&amp;quot;;
attribution github  =&amp;gt; [&amp;quot;dnmfarrell&amp;quot;, &amp;quot;David Farrell&amp;quot;],
            twitter =&amp;gt; &amp;quot;perltricks&amp;quot;,
            web     =&amp;gt; &#39;http://perltricks.com&#39;;

# Triggers
triggers startend =&amp;gt; (
        &amp;quot;perldoc&amp;quot;,
        &amp;quot;perldoc help&amp;quot;,
        &amp;quot;help perldoc&amp;quot;,
        &amp;quot;perldoc cheat sheet&amp;quot;,
        &amp;quot;perldoc cheatsheet&amp;quot;,
        &amp;quot;perldoc commands&amp;quot;,
        &amp;quot;perldoc ref&amp;quot;);

# Handle statement
my $HTML = share(&amp;quot;perldoc_cheat_sheet.html&amp;quot;)-&amp;gt;slurp(iomode =&amp;gt; &#39;&amp;lt;:encoding(UTF-8)&#39;);
my $TEXT= share(&amp;quot;perldoc_cheat_sheet.txt&amp;quot;)-&amp;gt;slurp(iomode =&amp;gt; &#39;&amp;lt;:encoding(UTF-8)&#39;);

handle remainder =&amp;gt; sub {
    return
        heading =&amp;gt; &#39;Perldoc Cheat Sheet&#39;,
        html    =&amp;gt; $HTML,
        answer  =&amp;gt; $TEXT,
};

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The handle subroutine will return a plain text and an HTML version of the cheat sheet to the user. The &lt;code&gt;share&lt;/code&gt; function loads static files from the &lt;code&gt;share/goodie/&lt;/code&gt; directory. These files should be created in the &lt;code&gt;share/goodie/perldoc_cheat_sheet/&lt;/code&gt; directory, and it is &lt;strong&gt;essential&lt;/strong&gt; that the filenames are lowercased versions of the instant answer name, separated by underscores. So &amp;ldquo;PerldocCheatSheet&amp;rdquo; becomes &amp;ldquo;perldoc_cheat_sheet&amp;rdquo;. You can view the files on &lt;a href=&#34;https://github.com/dnmfarrell/zeroclickinfo-goodies/tree/perldoc/share/goodie/perldoc_cheat_sheet&#34;&gt;GitHub&lt;/a&gt;. Note that the CSS file is not referenced directly by any code: it is automagically loaded by DuckDuckGo (this is why the directory and filename must be correct). I copied the CSS from the tmux &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies/tree/master/share/goodie/tmux_cheat_sheet&#34;&gt;example&lt;/a&gt;, it provides two columns of text that will display side-by-side or wrap to a single column if the screen width is too narrow.&lt;/p&gt;

&lt;h3 id=&#34;testing-the-instant-answer:5671e5b11157d2de7fcf618736bb0dd9&#34;&gt;Testing the instant answer&lt;/h3&gt;

&lt;p&gt;The quickest way to test that the instant answer is working, is with the &lt;code&gt;duckpan query&lt;/code&gt; command. I can run it in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ duckpan query
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This launches an interactive command line program. I can enter one of the triggers for my perldoc instant answer, and see if the server responds as expected:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Query: perldoc ref
  You entered: perldoc ref
---
DDG::ZeroClickInfo  {
    Parents       WWW::DuckDuckGo::ZeroClickInfo
    public methods (4) : DOES, has_structured_answer, new, structured_answer
    private methods (0)
    internals: {
        answer        &amp;quot;perldoc [option]

Module Options
--------------
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking good! (I&amp;rsquo;ve cut the output as it&amp;rsquo;s verbose). The next thing I can try is a browser test using &lt;code&gt;duckpan server&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ duckpan server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I point my browser at &lt;code&gt;http://localhost:5000&lt;/code&gt;, and enter a trigger query for the instant answer. That works as well. Finally, I need to complete a unit test script for the instant answer. I&amp;rsquo;ve already got a skeleton test script which was created by &lt;code&gt;duckpan new&lt;/code&gt; at the start:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl

use strict;
use warnings;
use Test::More;
use DDG::Test::Goodie;

zci answer_type =&amp;gt; &amp;quot;perldoc_cheat_sheet&amp;quot;;
zci is_cached   =&amp;gt; 1;

ddg_goodie_test(
    [qw( DDG::Goodie::PerldocCheatSheeet )],
    # At a minimum, be sure to include tests for all:
    # - primary_example_queries
    # - secondary_example_queries
    &#39;example query&#39; =&amp;gt; test_zci(&#39;query&#39;),
    # Try to include some examples of queries on which it might
    # appear that your answer will trigger, but does not.
    &#39;bad example query&#39; =&amp;gt; undef,
);

done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ll update the test file, and add some comments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl

use strict;
use warnings;
use Test::More;
use DDG::Test::Goodie;

zci answer_type =&amp;gt; &amp;quot;perldoc_cheat_sheet&amp;quot;;
zci is_cached   =&amp;gt; 1;

# all responses for this goodie are the same
my @test_zci = (
  # regex for the plain text response
  qr/^perldoc \[option\].*Module Options.*Search Options.*Common Options.*Help.*$/s,
  # check the heading
  heading =&amp;gt; &#39;Perldoc Cheat Sheet&#39;,
  # check the html pattern
  html    =&amp;gt; qr#$#s,
);  

ddg_goodie_test(
    # name of goodie to test
    [&#39;DDG::Goodie::PerldocCheatSheet&#39;],

    # At a minimum, be sure to include tests for all:
    # - primary_example_queries
    # - secondary_example_queries
    &#39;help perldoc&#39;        =&amp;gt; test_zci(@test_zci),
    &#39;help perldoc&#39;        =&amp;gt; test_zci(@test_zci),
    &amp;quot;perldoc&amp;quot;             =&amp;gt; test_zci(@test_zci),
    &amp;quot;perldoc help&amp;quot;        =&amp;gt; test_zci(@test_zci),
    &amp;quot;help perldoc&amp;quot;        =&amp;gt; test_zci(@test_zci),
    &amp;quot;perldoc cheat sheet&amp;quot; =&amp;gt; test_zci(@test_zci),
    &amp;quot;perldoc cheatsheet&amp;quot;  =&amp;gt; test_zci(@test_zci),
    &amp;quot;perldoc commands&amp;quot;    =&amp;gt; test_zci(@test_zci),

    # Try to include some examples of queries on which it might
    # appear that your answer will trigger, but does not.
    &#39;perl doc help&#39;     =&amp;gt; undef,
    &#39;perl documentaton&#39; =&amp;gt; undef,
    &#39;perl faq&#39;          =&amp;gt; undef,
    &#39;perl help&#39;         =&amp;gt; undef,
);

done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of this is easy to follow; but there are a few gotchas; &lt;code&gt;@test_zci&lt;/code&gt; is a variable that stores the expected output from a successful trigger of the instant answer. It&amp;rsquo;s a bit of a hack: its passed to the &lt;code&gt;test_zci()&lt;/code&gt; function which expects a scalar which matches the plain text response, followed by 2 key/pairs, one for the heading and one for the HTML response (see the &lt;a href=&#34;https://duck.co/duckduckhack/test_files&#34;&gt;docs&lt;/a&gt; for more detail). I can run this script at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ prove -I t/PerldocCheatSheet.t
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;t/PerldocCheatSheet.t .. ok    
All tests successful.
Files=1, Tests=12,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.17 cusr  0.01 csys =  0.20 CPU)
Result: PASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the tests pass, so I&amp;rsquo;m ready to issue a pull request to the DuckDuckGo community!&lt;/p&gt;

&lt;h3 id=&#34;where-to-go-for-help:5671e5b11157d2de7fcf618736bb0dd9&#34;&gt;Where to go for help&lt;/h3&gt;

&lt;p&gt;Whilst the DuckDuckGo tools are great, there is also good &lt;a href=&#34;http://duckduckhack.com/&#34;&gt;documentation&lt;/a&gt; available and a friendly community supporting development when you need it. I spent some time on the Gitter &lt;a href=&#34;https://gitter.im/duckduckgo/zeroclickinfo-goodies?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;chatroom&lt;/a&gt; for the instant answers repo, and the people there were friendly and responsive (and more importantly, they have commit bits :).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3 Awesome Perl Events in NYC this Spring/Summer</title>
      <link>http://perltricks.com/article/166/2015/3/31/3-Awesome-Perl-Events-in-NYC-this-Spring-Summer/</link>
      <pubDate>Tue, 31 Mar 2015 13:25:56 +0000</pubDate>
      
      <guid>http://perltricks.com/article/166/2015/3/31/3-Awesome-Perl-Events-in-NYC-this-Spring-Summer/</guid>
      <description>

&lt;p&gt;Something great is happening in NYC; there are 3 special Perl events happening in the next 3 months!&lt;/p&gt;

&lt;h3 id=&#34;quack-hack-nyc-april-4-sup-th-sup:cdae2c53f83b5213c5cd28d928e6c370&#34;&gt;Quack &amp;amp; Hack NYC, April 4&lt;sup&gt;th&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo&lt;/a&gt; are a privacy-focused search engine with a large Perl codebase and they&amp;rsquo;re hosting the first ever &lt;a href=&#34;http://duckduckgo.ticketleap.com/quackhacknyc/details&#34;&gt;NYC Quack &amp;amp; Hack&lt;/a&gt; at &lt;a href=&#34;https://www.google.com/maps/place/500+7th+Ave,+New+York,+NY+10018/@40.7531589,-73.9893598,17z/data=!3m1!4b1!4m2!3m1!1s0x89c259ac7b941903:0xcb0a4d6a0e42963e?hl=en&#34;&gt;AlleyNYC&lt;/a&gt;. The focus of the event is creating cheatsheets to support DuckDuckGo help, which seems like a great way to encourage first-time contributors. With free food, drinks and merchandise, and an opportunity to meet new people, this looks like a lot of fun.&lt;/p&gt;

&lt;h3 id=&#34;nyc-perl-hackathon-may-2-sup-nd-sup:cdae2c53f83b5213c5cd28d928e6c370&#34;&gt;NYC Perl Hackathon, May 2&lt;sup&gt;nd&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/nyperlmongers/nyperlhackathon2015/wiki&#34;&gt;NYC Perl Hackathon&lt;/a&gt; is back! It&amp;rsquo;s a day-long hackathon, hosted at &lt;a href=&#34;https://www.google.com/maps/search/Bloomberg+Tower+731+Lexington+Ave+New+York,+NY+10022/@40.7615894,-73.9676297,17z/data=!3m1!4b1?hl=en&#34;&gt;Bloomberg&lt;/a&gt;. The organizers have produced some useful guides on how to &lt;a href=&#34;https://github.com/nyperlmongers/nyperlhackathon2015/wiki/Getting-Ready-for-the-Hackathon&#34;&gt;prepare&lt;/a&gt; and what &lt;a href=&#34;https://github.com/nyperlmongers/nyperlhackathon2015/wiki/Projects&#34;&gt;projects&lt;/a&gt; are available to hack on. Details can also be found on the New York Perl Mongers&amp;rsquo; &lt;a href=&#34;http://www.meetup.com/The-New-York-Perl-Meetup-Group/events/221319780/&#34;&gt;meetup&lt;/a&gt; page. The hackathon also have several sponsorship &lt;a href=&#34;https://github.com/nyperlmongers/nyperlhackathon2015/wiki/Sponsorship-Opportunities&#34;&gt;options&lt;/a&gt; for organizations looking to support Perl and promote their brand.&lt;/p&gt;

&lt;h3 id=&#34;mojoconf-june-4-sup-th-sup-6-sup-th-sup:cdae2c53f83b5213c5cd28d928e6c370&#34;&gt;Mojoconf, June 4&lt;sup&gt;th&lt;/sup&gt;-6&lt;sup&gt;th&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.mojoconf.com/2015&#34;&gt;Mojoconf&lt;/a&gt; is a conference about &lt;a href=&#34;http://mojolicio.us/&#34;&gt;Mojolicious&lt;/a&gt;, the real-time web framework. Mojoconf consists of a day of training, a day of talks and a hackathon day. Almost the entire Mojo core dev &lt;a href=&#34;http://mojolicio.us/perldoc/Mojolicious#CORE-DEVELOPERS&#34;&gt;team&lt;/a&gt; will be there, including project founder Sebastian Riedel and Glen Hinkle, author of those wonderful &lt;a href=&#34;http://mojocasts.com/e1&#34;&gt;videos&lt;/a&gt;. You can still get an early-bird &lt;a href=&#34;https://www.mojoconf.com/2015/register&#34;&gt;discount&lt;/a&gt; for the talks and hackathon until April 10&lt;sup&gt;th&lt;/sup&gt;, so grab your ticket now!&lt;/p&gt;

&lt;h3 id=&#34;other-stuff:cdae2c53f83b5213c5cd28d928e6c370&#34;&gt;Other stuff&lt;/h3&gt;

&lt;p&gt;Not far from NYC, the &lt;a href=&#34;http://dcbpw.org/dcbpw2015/&#34;&gt;DC-Baltimore Perl workshop&lt;/a&gt; is running April 11&lt;sup&gt;th&lt;/sup&gt;-12&lt;sup&gt;th&lt;/sup&gt;, with a day of talks followed by a hackathon. For other events, a good list of global Perl events can be found on &lt;a href=&#34;http://perlweekly.com/events.html&#34;&gt;Perl Weekly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to all 3 New York events, and looking forward to seeing everyone there. So come over and say hi! if you see me.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

