<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apps on Perl programming news, code and culture</title>
    <link>http://perltricks.com/categories/apps/</link>
    <description>Recent content in Apps on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Apr 2016 20:42:41 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/categories/apps/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fixing a sluggish Linux after suspend-resume</title>
      <link>http://perltricks.com/article/fixing-a-sluggish-linux-after-suspend-resume/</link>
      <pubDate>Tue, 26 Apr 2016 20:42:41 +0000</pubDate>
      
      <guid>http://perltricks.com/article/fixing-a-sluggish-linux-after-suspend-resume/</guid>
      <description>

&lt;p&gt;Occasionally when I suspend my Linux laptop (sleep mode) and later resume working the machine is sluggish. Perceptible pauses occur every time I change applications, scrolling is fractured and text edits are delayed. Monitoring tools like &lt;a href=&#34;http://hisham.hm/htop/&#34;&gt;htop&lt;/a&gt; and &lt;a href=&#34;http://guichaz.free.fr/iotop/&#34;&gt;iotop&lt;/a&gt; give no indication of system resources being under heavy load. I can close all applications and the sluggishness persists.&lt;/p&gt;

&lt;p&gt;Apparently this is a bug where the CPU frequency has been pinned to a very low level. Linux uses CPU frequency scaling to save power; when the machine is resumed, it should start increasing the CPU frequency to meet the demands of the system, but it doesn&amp;rsquo;t always do that. A reboot fixes the problem, but who has time for that? The good news is that it&amp;rsquo;s an easy fix with the &lt;code&gt;cpupower&lt;/code&gt; utility.&lt;/p&gt;

&lt;h3 id=&#34;get-the-cpupower-utility:19d2d70d512c1beb1a7d378bc4e289d3&#34;&gt;Get the cpupower utility&lt;/h3&gt;

&lt;p&gt;You may have &lt;code&gt;cpupower&lt;/code&gt; already installed, but if not it&amp;rsquo;s easy to get with via a package manager. On Ubuntu &lt;a href=&#34;http://manpages.ubuntu.com/manpages/trusty/man1/cpupower.1.html&#34;&gt;cpupower&lt;/a&gt; is part of the &lt;code&gt;linux-tools-common&lt;/code&gt; package. You can install it at the terminal with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install linux-tools-common
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On RHEL based distributions like Fedora and CentOS, &lt;code&gt;cpupower&lt;/code&gt; is bundled with the &lt;code&gt;kernel-tools&lt;/code&gt; package. On CentOS and older Fedoras you can install it with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install kernel-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On newer Fedoras you can use &lt;code&gt;dnf&lt;/code&gt; to install it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dnf install kernel-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;switch-back-to-performance-mode:19d2d70d512c1beb1a7d378bc4e289d3&#34;&gt;Switch back to performance mode&lt;/h3&gt;

&lt;p&gt;CPU frequency scaling for modern Intel CPUs is provided by the &lt;a href=&#34;https://www.kernel.org/doc/Documentation/cpu-freq/intel-pstate.txt&#34;&gt;intel_pstate driver&lt;/a&gt;. It supports two modes (called &amp;ldquo;governors&amp;rdquo;) of operation: performance and powersave. Performance mode is not necessarily &amp;ldquo;all guns blazing&amp;rdquo; performance. Likewise, powersave doesn&amp;rsquo;t cripple your system either. Both are intelligent governors that responds to system loads by scaling the CPU frequency. I&amp;rsquo;ve found that switching governors immediately resolves my sluggish system issue.&lt;/p&gt;

&lt;p&gt;To confirm which governors are available, I use &lt;code&gt;cpupower&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpupower frequency-info --governors
analyzing CPU 0:
performance powersave
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you can see my system printed both &amp;ldquo;performance&amp;rdquo; and &amp;ldquo;powersave&amp;rdquo; as expected. To switch to the performance governor, I can use the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cpupower frequency-set --governor performance
Setting cpu: 0
Setting cpu: 1
Setting cpu: 2
Setting cpu: 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;frequency-info&lt;/code&gt; subcommand will show me which governor is active:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpupower frequency-info
analyzing CPU 0:
  driver: intel_pstate
  CPUs which run at the same hardware frequency: 0
  CPUs which need to have their frequency coordinated by software: 0
  maximum transition latency: 0.97 ms.
  hardware limits: 500 MHz - 2.70 GHz
  available cpufreq governors: performance, powersave
  current policy: frequency should be within 500 MHz and 2.70 GHz.
                  The governor &amp;quot;performance&amp;quot; may decide which speed to use
                  within this range.
  current CPU frequency is 2.28 GHz.
  boost state support:
    Supported: yes
    Active: yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;current policy&amp;rdquo; section describes the active governor, which in my case is showing the performance governor as active.&lt;/p&gt;

&lt;h3 id=&#34;cpupower-resources:19d2d70d512c1beb1a7d378bc4e289d3&#34;&gt;cpupower resources&lt;/h3&gt;

&lt;p&gt;The Redhat Linux documentation includes an CPU frequency setup &lt;a href=&#34;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Power_Management_Guide/cpufreq_setup.html#enabling_a_cpufreq_governor&#34;&gt;guide&lt;/a&gt; with instruction on how to load additional drivers. The Arch Linux CPU frequency scaling &lt;a href=&#34;https://wiki.archlinux.org/index.php/CPU_Frequency_Scaling&#34;&gt;documentation&lt;/a&gt; contains lots of useful information including which files control frequency settings.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cpupower&lt;/code&gt; manpage is pretty sparse. Once you have installed &lt;code&gt;cpupower&lt;/code&gt; try running the &lt;code&gt;help&lt;/code&gt; command to get started:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpupower help
Usage:  cpupower [-d|--debug] [-c|--cpu cpulist ] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]
Supported commands are:
        frequency-info
        frequency-set
        idle-info
        idle-set
        set
        info
        monitor
        help

Not all commands can make use of the -c cpulist option.

Use &#39;cpupower help &amp;lt;command&amp;gt;&#39; for getting help for above commands.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Prevent harmful Linux updates with versionlock</title>
      <link>http://perltricks.com/article/prevent-harmful-updates-with-versionlock/</link>
      <pubDate>Mon, 21 Mar 2016 20:46:17 +0000</pubDate>
      
      <guid>http://perltricks.com/article/prevent-harmful-updates-with-versionlock/</guid>
      <description>

&lt;p&gt;On my home machine I run Fedora, a Linux distro famous for being at the cutting-edge of Linux development. My laptop is the &lt;a href=&#34;http://perltricks.com/article/187/2015/8/18/Laptop-review--Dell-XPS-13-2015/&#34;&gt;Dell XPS 13&lt;/a&gt; which uses some fairly advanced hardware. In Open Source this can be dangerous combination: older Linux kernels can&amp;rsquo;t handle my machine&amp;rsquo;s hardware, and brand new kernels often break it too. Every time I do a software update, I&amp;rsquo;m walking a tightrope.&lt;/p&gt;

&lt;p&gt;The way I handle this is with a package manager plugin called &lt;a href=&#34;https://github.com/rpm-software-management/dnf-plugins-extras&#34;&gt;versionlock&lt;/a&gt;. It lets me tell the package manager to lock certain packages at their current version and voil√†! I can blindly apply all software updates and know that those troublesome packages will not be upgraded.&lt;/p&gt;

&lt;h3 id=&#34;installation:cc50447c6adbe416d99715fce2b83d16&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;The versionlock plugin is available for both dnf and yum, so pick which package manager your system is using. For dnf:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dnf install python-dnf-plugins-extras-versionlock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for yum:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install yum-plugin-versionlock
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lock-a-package:cc50447c6adbe416d99715fce2b83d16&#34;&gt;Lock a package&lt;/h3&gt;

&lt;p&gt;To add a package to the locked list, simply run the package manager program with the &lt;code&gt;versionlock&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dnf versionlock add my-package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The yum version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum versionlock add my-package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the commands for dnf and yum are the same. You can lock multiple packages in one command. Here&amp;rsquo;s how I prevent my system from upgrading the kernel packages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dnf versionlock add kernel-0:4.3.5-300.fc23 kernel-modules-0:4.3.5-300.fc23 kernel-core-0:4.3.5-300.fc23 kernel-devel-0:4.3.5-300.fc23
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-locked-packages:cc50447c6adbe416d99715fce2b83d16&#34;&gt;List locked packages&lt;/h3&gt;

&lt;p&gt;To see which packages are locked, use the &lt;code&gt;list&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dnf versionlock list
Last metadata expiration check: 0:00:00 ago on Mon Mar 21 20:58:57 2016.
kernel-0:4.3.5-300.fc23.*
kernel-modules-0:4.3.5-300.fc23.*
kernel-core-0:4.3.5-300.fc23.*
kernel-devel-0:4.3.5-300.fc23.*
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unlock-a-package:cc50447c6adbe416d99715fce2b83d16&#34;&gt;Unlock a package&lt;/h3&gt;

&lt;p&gt;To remove one package from the lock list, use &lt;code&gt;delete&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dnf versionlock delete my-package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To remove all packages from the lock list, use &lt;code&gt;clear&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum versionlock clear
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;help:cc50447c6adbe416d99715fce2b83d16&#34;&gt;Help&lt;/h3&gt;

&lt;p&gt;If you ever forget these commands, you can list the available commands with &lt;code&gt;help&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dnf help versionlock
versionlock [add|exclude|list|delete|clear] [&amp;lt;package-nevr-spec&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-many-installers-do-you-need:cc50447c6adbe416d99715fce2b83d16&#34;&gt;How many installers do you need?&lt;/h3&gt;

&lt;p&gt;On Fedora I also remove the &lt;a href=&#34;https://wiki.gnome.org/Apps/Software&#34;&gt;Gnome Software&lt;/a&gt; program (&lt;code&gt;gnome-software&lt;/code&gt; package). Whilst it&amp;rsquo;s useful to be reminded of pending updates via the GUI, any package installed via Gnome Software is not part of the dnf history. That makes it harder when it&amp;rsquo;s necessary to downgrade or remove a troublesome package.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:cc50447c6adbe416d99715fce2b83d16&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Managing packages can be a pain, but versionlock makes life easier. If you use Debian or Ubuntu you can use &lt;code&gt;apt-mark hold my-package&lt;/code&gt; and &lt;code&gt;apt-mark unhold my-package&lt;/code&gt; to similar effect.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An introduction to Tmux</title>
      <link>http://perltricks.com/article/an-introduction-to-tmux/</link>
      <pubDate>Wed, 24 Feb 2016 09:29:18 +0000</pubDate>
      
      <guid>http://perltricks.com/article/an-introduction-to-tmux/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://tmux.github.io/&#34;&gt;Tmux&lt;/a&gt; is a terminal multiplexer: it&amp;rsquo;s like a power-up for terminal programming. You can manage several terminals under a session, split terminal screens, detach and re-attach sessions and much more. If you do most of your programming at the command line, you&amp;rsquo;ll find using a terminal multiplexer invaluable.&lt;/p&gt;

&lt;h3 id=&#34;setup:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;First you&amp;rsquo;ll need to install Tmux via your package manager or &lt;a href=&#34;https://tmux.github.io/&#34;&gt;download&lt;/a&gt; it. Tmux is highly configurable but the first change I&amp;rsquo;d recommend is to ssh, not Tmux. Make ssh &amp;ldquo;keep alive&amp;rdquo; for all connections by adding this to &lt;code&gt;~/.ssh/config&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host *
   ServerAliveInterval 300
   ServerAliveCountMax 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the file doesn&amp;rsquo;t exist, create it. This configuration instructs your local machine for all user ssh sessions to send a server alive message every 300 seconds to keep the ssh session alive. If the local machine sends 3 unanswered messages, it will disconnect the session. You should tweak these settings to suit your needs: for instance by restricting the &lt;code&gt;host&lt;/code&gt; to specific domains you can have different settings per domain. If you have a slow or unreliable internet connection, consider changing &lt;code&gt;ServerAliveInterval&lt;/code&gt; to a lower number to send more frequent messages.&lt;/p&gt;

&lt;p&gt;If you have permission on the servers you use, you can update them with a similar configuration, in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ClientAliveInterval 300
ClientAliveCountMax 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-prefix-and-one-true-command-trade:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;The Prefix and One True Command&amp;trade;&lt;/h3&gt;

&lt;p&gt;Once Tmux is installed, start a new Tmux session from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Ctrl-b&lt;/code&gt; is the &lt;strong&gt;prefix&lt;/strong&gt; combination. Press the Ctrl key AND the letter b at the same time. When inside a Tmux session, the prefix is nearly always pressed before the shortcut key to trigger a command.&lt;/p&gt;

&lt;p&gt;The prefix combination is really important. Once you get the hang of the prefix combination, you can pretty much bootstrap yourself into learning Tmux with just one command. To display a list of Tmux commands, type: &lt;code&gt;Ctrl-b ?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That means press &lt;code&gt;Control&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; together, release, then press &lt;code&gt;?&lt;/code&gt;. Tmux should display:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind-key        C-b send-prefix
bind-key        C-o rotate-window
bind-key        C-z suspend-client
bind-key      Space next-layout
bind-key          ! break-pane
bind-key          &amp;quot; split-window
bind-key          # list-buffers
bind-key          $ command-prompt -I #S &amp;quot;rename-session &#39;%%&#39;&amp;quot;
bind-key          % split-window -h
bind-key          &amp;amp; confirm-before -p &amp;quot;kill-window #W? (y/n)&amp;quot; kill-window
bind-key          &#39; command-prompt -p index &amp;quot;select-window -t &#39;:%%&#39;&amp;quot;
bind-key          ( switch-client -p
bind-key          ) switch-client -n
bind-key          , command-prompt -I #W &amp;quot;rename-window &#39;%%&#39;&amp;quot;
bind-key          - delete-buffer
bind-key          . command-prompt &amp;quot;move-window -t &#39;%%&#39;&amp;quot;
bind-key          0 select-window -t :0
bind-key          1 select-window -t :1
bind-key          2 select-window -t :2
bind-key          3 select-window -t :3
bind-key          4 select-window -t :4
bind-key          5 select-window -t :5
bind-key          6 select-window -t :6
bind-key          7 select-window -t :7
bind-key          8 select-window -t :8
bind-key          9 select-window -t :9
bind-key          : command-prompt
bind-key          ; last-pane
bind-key          = choose-buffer
bind-key          ? list-keys
bind-key          D choose-client
bind-key          L switch-client -l
bind-key          [ copy-mode
bind-key          ] paste-buffer
bind-key          c new-window
bind-key          d detach-client
bind-key          f command-prompt &amp;quot;find-window &#39;%%&#39;&amp;quot;
bind-key          i display-message
bind-key          l last-window
bind-key          n next-window
bind-key          o select-pane -t :.+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also change the prefix combination (see the Config options section). If you do that, remember to use your prefix combination instead of &lt;code&gt;Ctrl-b&lt;/code&gt; in the examples below.&lt;/p&gt;

&lt;h3 id=&#34;window-control:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Window control&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s look at a key Tmux feature: windows. They&amp;rsquo;re similar to tabs in browsers. Each one is a different terminal from where you can run different commands at the same time. To create a new window press&lt;code&gt;Ctrl-b c&lt;/code&gt;. You can cycle between windows: &lt;code&gt;Ctrl-b n&lt;/code&gt; for the next window and &lt;code&gt;Ctrl-b p&lt;/code&gt; takes you to the prior window. &lt;code&gt;Ctrl-b w&lt;/code&gt; list all windows in a session and let&amp;rsquo;s you select which one to active (using the arrow keys and enter).&lt;/p&gt;

&lt;p&gt;If you know the window number you can also jump straight to it with &lt;code&gt;Ctrl-b #&lt;/code&gt; replacing &amp;ldquo;#&amp;rdquo; with the window number. By default they begin at 0, not 1!&lt;/p&gt;

&lt;p&gt;You might be wondering what&amp;rsquo;s the benefit of using Tmux windows over tabbed terminals. First, with regular terminals if the window manager crashes, you&amp;rsquo;ll lose the terminals as well. This won&amp;rsquo;t happen with Tmux: it will keep the terminals running in the background and you can re-attach a new terminal to them at any time. Windows can also be subdivided into panes, all running pseudo-terminals. Let&amp;rsquo;s look at them now.&lt;/p&gt;

&lt;h3 id=&#34;pane-control:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Pane control&lt;/h3&gt;

&lt;p&gt;Panes are great. You can split a window horizontally, vertically and with any dimensions you like. Have you ever wanted to quickly look up a man page whilst coding? Instead of dropping back to the terminal, looking up the man page and then foregrounding your editor, just open a new vertical pane, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/an-introduction-to-tmux/tmux-split-screen.png&#34; alt=&#34;Tmux Panes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can read the man page and code at the same time; you can even copy and paste between the two panes. Much more convenient!&lt;/p&gt;

&lt;p&gt;Recently I was processing a huge set of data; I arranged my Tmux window with 3 panes running the data processing and 1 pane monitoring the server resources with &lt;a href=&#34;http://hisham.hm/htop/&#34;&gt;htop&lt;/a&gt;. This server is almost overloaded:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/an-introduction-to-tmux/tmux-panes.png&#34; alt=&#34;Tmux Panes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;These are the key pane controls:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ctrl-b &amp;quot;      split pane horizontally
Ctrl-b %      split pane vertically
Ctrl-b o      next pane
Ctrl-b ;      prior pane
Ctrl-b ‚Üê‚Üë‚Üí‚Üì   jump to pane
Ctrl-b Ctrl-o swap panes
Ctrl-b space  arrange panes
Ctrl-b-‚Üê‚Üë‚Üí‚Üì   change pane size
Ctrl-b !      pop a pane into a new window
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The arrows &lt;code&gt;‚Üê‚Üë‚Üí‚Üì&lt;/code&gt; represent the arrow keys, just use one of these. For example to jump to a pane on the right, you&amp;rsquo;d press &lt;code&gt;Ctrl-b ‚Üí&lt;/code&gt;. The change pane size controls are a little different. To make that work you first have to have more than one pane. Next press &lt;code&gt;Ctrl-b&lt;/code&gt; and keep the control key held down. Now you can repeatedly press an arrow key to change the pane size.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl-b !&lt;/code&gt; is one of my favorite features. It pops the current pane out of the window and moves it to its own window. This is wonderful if you find yourself doing some unrelated activity in one pane and want to re-organize your setup.&lt;/p&gt;

&lt;h3 id=&#34;scrolling-and-copy-paste:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Scrolling and copy/paste&lt;/h3&gt;

&lt;p&gt;If you can master scrolling and copy/paste in Tmux, you can master anything. I won&amp;rsquo;t lie, this is the clunkiest feature. But it&amp;rsquo;s really useful. The interface is modal, so start by entering scroll mode by typing &lt;code&gt;Ctrl-b [&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pressing &lt;code&gt;esc&lt;/code&gt; will exit scroll mode. You should know you&amp;rsquo;re in scroll mode because an orange line count appears in the top-right corner of the pane.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;re in scroll mode, you can move the cursor using the arrow keys and page up and down. By default Tmux doesn&amp;rsquo;t retain much history, but you can change that (see the Config options section).&lt;/p&gt;

&lt;p&gt;You can copy and paste in scroll mode. This is useful when you have split screens as a regular highlight and copy using the mouse won&amp;rsquo;t work across vertically split panes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/an-introduction-to-tmux/tmux-copy-fail.png&#34; alt=&#34;copy fail&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To copy, position the cursor where you want to start copying. Press &lt;code&gt;Ctrl-space&lt;/code&gt; to begin highlighting the text to copy. Press &lt;code&gt;Alt-w&lt;/code&gt; to copy the highlighted text. Pressing &lt;code&gt;Ctrl-b ]&lt;/code&gt; will paste the copied text. There are ways to make copy and paste easier: Tmux has a &amp;ldquo;vim like&amp;rdquo; copy mode (see the Config options section and the &lt;a href=&#34;http://man.openbsd.org/OpenBSD-current/man1/tmux.1&#34;&gt;man&lt;/a&gt; page for details).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/an-introduction-to-tmux/tmux-copy-win.png&#34; alt=&#34;copy win&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shortcut&lt;/strong&gt; You can jump into scroll mode and page up in one fell swoop with &lt;code&gt;Ctrl-b PgUp&lt;/code&gt; (thanks to Ludovic Tolhurst for the tip).&lt;/p&gt;

&lt;h3 id=&#34;session-control:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Session control&lt;/h3&gt;

&lt;p&gt;Sessions are one of the most useful features of Tmux. They let you group multiple terminal processes into a single Tmux session which can be worked on (attached), put into the background (detached) and discarded as you see fit. Programmers will often have different sessions for different projects. Because Tmux operates under a client-server architecture, even if the original terminal that started Tmux dies or your desktop GUI crashes, the Tmux session will be preserved, along with all of the terminal sessions in it.&lt;/p&gt;

&lt;p&gt;Detach your Tmux session with &lt;code&gt;Ctrl-b d&lt;/code&gt;. This will return you to a regular terminal prompt.&lt;/p&gt;

&lt;p&gt;To list existing Tmux sessions just use the &lt;code&gt;ls&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux ls
0: 1 windows (created Thu Jan 28 08:15:20 2016) [190x50] (attached)
2: 2 windows (created Thu Jan 28 09:11:59 2016) [190x50]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shows that I have two Tmux sessions running, one of which is attached to a terminal window already. To attach to a session just use the &lt;code&gt;attach&lt;/code&gt; command at the terminal prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux attach
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default Tmux attaches to the next unattached session (&amp;ldquo;2&amp;rdquo;) in this case. If I have many different sessions and want to attach to a particular one, I can specify it with &lt;code&gt;-t&lt;/code&gt; for target:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux attach -t 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;config-options:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Config options&lt;/h3&gt;

&lt;p&gt;The file &lt;code&gt;~/.tmux.conf&lt;/code&gt; is a plaintext file used by Tmux for local config. This is what mine looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# set scroll history to 10,000 lines
set -g history-limit 10000

# modern encoding and colors
set -g utf8 on set-window-option -g utf8 on
set -g default-terminal screen-256color

# don&#39;t use a login shell
set -g default-command /bin/bash

# unbind the prefix and bind it to Ctrl-a like screen
unbind C-b set -g prefix C-a bind C-a send-prefix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tmux starts with a tiny scroll history, so I like to bump that up. The modern encoding and colors are there to jive with my terminal setup - they may even be the default Tmux settings by now. By default Tmux uses a login shell, so every new pane will execute &lt;code&gt;.bash_profile&lt;/code&gt;. I prefer to disable that behavior and just launch regular non-login shells.&lt;/p&gt;

&lt;p&gt;Tmux has hundreds more options: many users will switch to a different shell like zsh, enable pane switching with the trackpad, display custom data in the Tmux footer (like weather info!) and so on. Copying other programmers&amp;rsquo; &lt;a href=&#34;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=.tmux.conf&#34;&gt;conf files&lt;/a&gt; is a great way to learn and experiment.&lt;/p&gt;

&lt;p&gt;To reload your &lt;code&gt;.tmux.conf&lt;/code&gt; within a Tmux session, type: &lt;code&gt;Ctrl-b :&lt;/code&gt; then &lt;code&gt;source-file ~/.tmux.conf&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;tmux-resources:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Tmux resources&lt;/h3&gt;

&lt;p&gt;The official Tmux &lt;a href=&#34;https://tmux.github.io/&#34;&gt;website&lt;/a&gt; is a good starting point with summary information, a changelog, downloads and a link to the extensive &lt;a href=&#34;http://man.openbsd.org/OpenBSD-current/man1/tmux.1&#34;&gt;man page&lt;/a&gt;. The Arch Linux &lt;a href=&#34;https://wiki.archlinux.org/index.php/Tmux&#34;&gt;tmux documentation&lt;/a&gt; covers advanced features and troubleshooting tips. The book &lt;a href=&#34;https://pragprog.com/book/bhtmux/tmux&#34;&gt;tmux - Productive Mouse-Free Development&lt;/a&gt; by Pragmatic Bookshelf is thorough introduction to Tmux.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/article/153/2015/2/16/Get-to-grips-with-GNU-Screen/&#34;&gt;GNU Screen&lt;/a&gt; is another terminal multiplexer program. It&amp;rsquo;s older than Tmux and a little bit crufty, but it has most of the features Tmux has. The controls for Screen and Tmux are similar enough that if you know one of them you can get by using the other. The Tmux &lt;a href=&#34;https://raw.githubusercontent.com/tmux/tmux/master/FAQ&#34;&gt;FAQ&lt;/a&gt; lists the differences between them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick tip: git push origin hamster?</title>
      <link>http://perltricks.com/article/206/2015/12/24/Quick-tip--git-push-origin-hamster-/</link>
      <pubDate>Thu, 24 Dec 2015 17:20:05 +0000</pubDate>
      
      <guid>http://perltricks.com/article/206/2015/12/24/Quick-tip--git-push-origin-hamster-/</guid>
      <description>&lt;p&gt;My typing is horrible. I make mistakes all the time. I&amp;rsquo;m an avid &lt;a href=&#34;http://www.vim.org/&#34;&gt;Vim&lt;/a&gt; user but I still use the arrow keys. I&amp;rsquo;m one of those people who need technology that does what they meant, not what they asked for. So if you&amp;rsquo;re a coder like me, you probably see this a lot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ git push origin amster
error: src refspec amster does not match any.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fortunately there is a simple workaround: Git&amp;rsquo;s &lt;a href=&#34;https://git-scm.com/docs/git-symbolic-ref&#34;&gt;symbolic references&lt;/a&gt;. I can add a symbolic reference for &lt;code&gt;amster&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ git symbolic-ref refs/heads/amster refs/heads/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now Git does what I meant:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ git push origin amster
Counting objects: 3, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 695 bytes | 0 bytes/s, done.
Total 3 (delta 2), reused 0 (delta 0)
To git@github.com:user/SomeProject.git
   ec208c7..fb0cb8f  amster -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because it&amp;rsquo;s a symbolic reference, anytime I mean to type &lt;code&gt;master&lt;/code&gt; but actually type &lt;code&gt;amster&lt;/code&gt;, Git will do the right thing. Try it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run only one instance of a program at a time</title>
      <link>http://perltricks.com/article/2/2015/11/4/Run-only-one-instance-of-a-program-at-a-time/</link>
      <pubDate>Wed, 04 Nov 2015 13:03:49 +0000</pubDate>
      
      <guid>http://perltricks.com/article/2/2015/11/4/Run-only-one-instance-of-a-program-at-a-time/</guid>
      <description>

&lt;p&gt;Recently I wanted to schedule a Perl app to run every minute on a server, but if an instance of the app was already running, it should exit and do nothing. This is a common problem and I was able to solve it with a lockfile. Let&amp;rsquo;s see how to use lockfiles in Perl.&lt;/p&gt;

&lt;h3 id=&#34;lockfiles-you-say:e2b49cd805c9d1d81412d3e39a65e7e9&#34;&gt;Lockfiles you say?&lt;/h3&gt;

&lt;p&gt;Most operating systems support file locking - it&amp;rsquo;s an essential tool to prevent multiple processes updating a file at the same time and causing data loss. Processes obtain file locks when they are accessing a file to prevent other processes changing them, and release the file lock when they&amp;rsquo;re done, freeing the file to be used by other processes again.&lt;/p&gt;

&lt;p&gt;Programs can use the lock file principle to prevent multiple instances of themselves running at the same time. When the program starts it tries to lock the lockfile, if successful it executes the program, else it exits. When the program process ends, any locks it obtained are removed by the OS. You may have seen lockfiles before, they are usually ordinary files with a &lt;code&gt;.lock&lt;/code&gt; extension.&lt;/p&gt;

&lt;h3 id=&#34;file-locking-in-perl:e2b49cd805c9d1d81412d3e39a65e7e9&#34;&gt;File locking in Perl&lt;/h3&gt;

&lt;p&gt;Perl provides the &lt;a href=&#34;http://perldoc.perl.org/functions/flock.html&#34;&gt;flock&lt;/a&gt; function for file locking. It takes a filehandle and a constant value for the lock type. So to get an exclusive lock on a file, I could do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $file, &amp;quot;&amp;gt;&amp;quot;, &amp;quot;app.lock&amp;quot; or die $!; 
flock $file, 2 or die &amp;quot;Unable to lock file $!&amp;quot;;
# we have the lock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code starts by opening a write filehandle to the file &lt;code&gt;app.lock&lt;/code&gt;. If successful, it attempts to get an exclusive lock on the file by calling flock with the number 2. An exclusive lock means no other process can access the file whilst the lock is active. Remembering the constant values for lock types can be a pain, so helpfully the &lt;a href=&#34;https://metacpan.org/pod/Fcntl&#34;&gt;Fcntl&lt;/a&gt; module will export constant names if you ask nicely. I&amp;rsquo;ll update the code to do that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Fcntl qw(:flock);
open my $file, &amp;quot;&amp;gt;&amp;quot;, &amp;quot;app.lock&amp;quot; or die $!; 
flock $file, LOCK_EX or die &amp;quot;Unable to lock file $!&amp;quot;;
# we have the lock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code does the same thing as before but we don&amp;rsquo;t need to remember the constant value for the lock type (LOCK_EX == exclusive lock). Note there is no need to unlock the file - when the program exits, the lock will be removed automatically.&lt;/p&gt;

&lt;h3 id=&#34;non-blocking-flock:e2b49cd805c9d1d81412d3e39a65e7e9&#34;&gt;Non-blocking flock&lt;/h3&gt;

&lt;p&gt;So far so good but we have a problem. If the file is locked, &lt;code&gt;flock&lt;/code&gt; will block and keep our program waiting around until the lock is removed. I want is the program to exit immediately if it can&amp;rsquo;t obtain the lock. The only way to check if a file is locked is with &lt;code&gt;flock&lt;/code&gt; though! Fortunately the &lt;code&gt;flock&lt;/code&gt; developers had considered this issue, and I can pass an extra argument to indicate I want a non-blocking lock.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Fcntl qw(:flock);
open my $file, &amp;quot;&amp;gt;&amp;quot;, &amp;quot;app.lock&amp;quot; or die $!; 
flock $file, LOCK_EX|LOCK_NB or die &amp;quot;Unable to lock file $!&amp;quot;;
# we have the lock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve added &lt;code&gt;|LOCK_NB&lt;/code&gt; to the flock arguments and now it will return false immediately if it cannot obtain an exclusive lock.This provides the non-blocking behavior I need.&lt;/p&gt;

&lt;h3 id=&#34;testing-it-out:e2b49cd805c9d1d81412d3e39a65e7e9&#34;&gt;Testing it out&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m going to put this locking code into a quick script so I can test the lock functionality:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use Fcntl qw(:flock);
open my $file, &amp;quot;&amp;gt;&amp;quot;, &amp;quot;app.lock&amp;quot; or die $!; 
flock $file, LOCK_EX|LOCK_NB or die &amp;quot;Unable to lock file: $!&amp;quot;;

sleep(60);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ll save the script as &lt;code&gt;sleep60.pl&lt;/code&gt; and test it at the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ chmod 700 sleep60.pl
$ ./sleep60.pl&amp;amp;
[2] 21505
$ ./sleep60.pl
Unable to lock file Resource temporarily unavailable at ./sleep60.pl line 4.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking good! I tried to run the script twice and the second time, the system printed the expected error message and exited.&lt;/p&gt;

&lt;h3 id=&#34;avoiding-external-files:e2b49cd805c9d1d81412d3e39a65e7e9&#34;&gt;Avoiding external files&lt;/h3&gt;

&lt;p&gt;Using an external file feels kind-of-dirty. What I&amp;rsquo;d really like to do is tidy up by deleting the lockfile once the program has finished. However unlocking and deleting the file involves extra steps which may introduce a &lt;a href=&#34;https://en.wikipedia.org/wiki/Race_condition&#34;&gt;race condition&lt;/a&gt;. Instead of deleting the file, what if we never created it? One way to do this is to use the &lt;a href=&#34;http://perltricks.com/article/24/2013/5/11/Perl-tokens-you-should-know&#34;&gt;__DATA__&lt;/a&gt; filehandle, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use Fcntl qw(:flock);
flock DATA, LOCK_EX|LOCK_NB or die &amp;quot;Unable to lock file $!&amp;quot;;

sleep(60);
__DATA__
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This version of the script opens a lock on the &lt;code&gt;DATA&lt;/code&gt; filehandle and creates no external files. Mark Jason Dominus &lt;a href=&#34;http://perl.plover.com/yak/flock/samples/slide006.html&#34;&gt;showed&lt;/a&gt; this ingenious trick years ago. Another trick Mark showed was to open the lockfile on the program file itself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use Fcntl qw(:flock);
open our $file, &#39;&amp;lt;&#39;, $0 or die $!;
flock $file, LOCK_EX|LOCK_NB or die &amp;quot;Unable to lock file $!&amp;quot;;

sleep(60);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This frees up &lt;code&gt;DATA&lt;/code&gt; and has the added benefit that the code can be exported by a module (by using &lt;code&gt;our&lt;/code&gt; instead of &lt;code&gt;my&lt;/code&gt;). Note that the &lt;code&gt;open&lt;/code&gt; arguments have been changed to use a read-only filehandle to avoid truncating the source code of the program! If you need this behavior, you can implement it yourself as shown above, or use my module &lt;a href=&#34;https://metacpan.org/pod/IPC::Lockfile&#34;&gt;IPC::Lockfile&lt;/a&gt;, which will do it for you. If you need more refined lockfile functionality, have a look at &lt;a href=&#34;https://metacpan.org/pod/Sys::RunAlone&#34;&gt;Sys::RunAlone&lt;/a&gt; which uses the same trick (thanks to &lt;a href=&#34;https://metacpan.org/author/BOOK&#34;&gt;BooK&lt;/a&gt; for the reference). There are also plenty of other options on &lt;a href=&#34;https://metacpan.org/search?size=20&amp;amp;q=lockfile&amp;amp;search_type=modules&#34;&gt;CPAN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;em&gt;added Sys::RunAlone reference - 2015-11-28.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple, secure backups with Perl</title>
      <link>http://perltricks.com/article/185/2015/8/27/Simple--secure-backups-with-Perl/</link>
      <pubDate>Thu, 27 Aug 2015 13:09:11 +0000</pubDate>
      
      <guid>http://perltricks.com/article/185/2015/8/27/Simple--secure-backups-with-Perl/</guid>
      <description>

&lt;p&gt;Recently I was searching for a backup solution, and ended up rolling my own. The result is &lt;a href=&#34;https://github.com/dnmfarrell/Stasis&#34;&gt;Stasis&lt;/a&gt; a Perl program that uses &lt;code&gt;tar&lt;/code&gt; and &lt;code&gt;gpg&lt;/code&gt; to compress and encrypt files.&lt;/p&gt;

&lt;h3 id=&#34;how-it-works:58ff53ab1c4471a3eaca8fcffabc9318&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;Stasis takes a list of file and directory paths and builds a temporary compressed gzip archive using &lt;code&gt;tar&lt;/code&gt;. It then encrypts the temporary archive with &lt;code&gt;gpg&lt;/code&gt; using &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&#34;&gt;AES 256-bit&lt;/a&gt;, saving it to a new location and removes the temporary archive. Stasis supports backups using a passphrase or a GPG key.&lt;/p&gt;

&lt;h3 id=&#34;examples:58ff53ab1c4471a3eaca8fcffabc9318&#34;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s say I wanted to backup all files in my main home directories. I&amp;rsquo;d create a text file called &lt;code&gt;files_to_backup.txt&lt;/code&gt;, that contains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/home/dfarrell/Documents
/home/dfarrell/Downloads
/home/dfarrell/Music
/home/dfarrell/Pictures
/home/dfarrell/Videos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can save all of these directories and files to Dropbox:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis --destination ~/Dropbox --files files_to_backup.txt --passphrase mysecretkey
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or more tersely:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt --passphrase mysecretkey
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use passfile instead of passphrase:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt --passfile /path/to/passfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use the &amp;ldquo;referrer&amp;rdquo; argument to provide a GPG key instead of a passphrase:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt -r keyname@example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ignore the files matching patterns in &lt;code&gt;.stasisignore&lt;/code&gt;. This is useful if I wanted to ignore certain types of files, like OSX &lt;code&gt;.DS_Store&lt;/code&gt; index files or more broadly, all hidden files: &lt;code&gt;.*&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt -r keyname@example.com -i .stasisignore
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;limiting-the-number-of-backups:58ff53ab1c4471a3eaca8fcffabc9318&#34;&gt;Limiting the number of backups&lt;/h3&gt;

&lt;p&gt;Stasis accepts the &lt;code&gt;--limit&lt;/code&gt; option to only retain the most recent x backups:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt -r mygpgkey@email.com --limit 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works really nicely with the &lt;code&gt;--days&lt;/code&gt; option, which tells stasis to only create a new archive if one deosn&amp;rsquo;t already exist within x days. So to keep a months&amp;rsquo; worth of weekly archives, I can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt -r mygpgkey@email.com --limit 4 --days 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now stasis will only retain the last 4 archives, and only create one new archive a week. My personal laptop isn&amp;rsquo;t always on, so I have a cron job that checks for this every 30 minutes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*/30 * * * * stasis -de ~/Dropbox -f files_to_backup.txt -r mygpgkey@email.com -l 4 -da 7
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;restoring-a-backup:58ff53ab1c4471a3eaca8fcffabc9318&#34;&gt;Restoring a backup&lt;/h3&gt;

&lt;p&gt;First decrypt the the backup with &lt;code&gt;gpg&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg -d /path/to/backup.tar.gz.gpg &amp;gt; /path/to/output.tar.gz
gpg: AES256 encrypted data
gpg: encrypted with 1 passphrase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GPG will ask for the passphrase or GPG key passphrase to unlock the data. You can then inspect the decrypted archive&amp;rsquo;s files with &lt;code&gt;tar&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar --list -f /path/to/output.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -zvtf /path/to/output.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To unzip the archive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -zvxf /path/to/output.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;disadvantages-of-stasis:58ff53ab1c4471a3eaca8fcffabc9318&#34;&gt;Disadvantages of Stasis&lt;/h3&gt;

&lt;p&gt;Stasis suits my needs but it has several drawbacks which mean it might not be ideal for you. For one thing, it creates a standalone, encrypted archive every time it runs instead of incremental backups. Although this is simple, it also wastes space, so consider the implications if you intend to keep many backup copies. Because Stasis creates a temporary copy of the data it archives, it also requires enough disk space to create two compressed archives of the data.&lt;/p&gt;

&lt;p&gt;As Stasis creates a new archive every time, it can be a resource intensive process to backup. On my ultrabook, it takes Stasis about 20 seconds to create a new 400MB new archive. If you are intending to archive large amounts of data, you may need another solution.&lt;/p&gt;

&lt;p&gt;Archive names are fixed and should not be changed. Stasis creates encrypted archives with the ISO 8601 datetime in the filename like:&lt;code&gt;stasis-0000-00-00T00:00:00.tar.gz.gpg&lt;/code&gt;. To detect previous backup files, Stasis looks for files matching this pattern in the backup directory. This comes into play of you use the &lt;code&gt;--limit&lt;/code&gt; option.&lt;/p&gt;

&lt;h3 id=&#34;stasis-cheatsheet:58ff53ab1c4471a3eaca8fcffabc9318&#34;&gt;Stasis cheatsheet&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;stasis [options]

Options:

  --destination -de destination directory to save the encrypted archive to
  --days        -da only create an archive if one doesn&#39;t exist within this many days (optional)
  --files       -f  filepath to a text file of filepaths to backup
  --ignore      -i  filepath to a text file of glob patterns to ignore (optional)
  --limit       -l  limit number of stasis backups to keep in destination directory (optional)
  --passphrase      passphrase to use
  --passfile        filepath to a textfile containing the password to use
  --referrer    -r  name of the gpg key to use (instead of a passphrase or passfile)
  --temp        -t  temp directory path, uses /tmp by default
  --verbose     -v  verbose, print progress statements (optional)
  --help        -h  print this documentation (optional)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Updated&lt;/strong&gt;:&lt;em&gt;Added new section covering &amp;ndash;days options, removed scripting section 2016-04-02&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rip music from anywhere with Audacity</title>
      <link>http://perltricks.com/article/186/2015/7/30/Rip-music-from-anywhere-with-Audacity/</link>
      <pubDate>Thu, 30 Jul 2015 12:49:46 +0000</pubDate>
      
      <guid>http://perltricks.com/article/186/2015/7/30/Rip-music-from-anywhere-with-Audacity/</guid>
      <description>

&lt;p&gt;Sorry Perlers, this post contains no Perl code. Instead I want to show you how to record music with the open source tool &lt;a href=&#34;http://audacityteam.org/&#34;&gt;Audacity&lt;/a&gt;. If you listen to music on YouTube, Soundcloud, Pandora - wherever, you can rip it and save it using Audacity. Say goodbye to the arms race of YouTube downloaders/decoders and HTTP network analysis to find the direct URL for the underlying MP3 (looking at you Bandcamp - still vulnerable at the time of writing). Instead say hello to a solution that will work as long as music plays through your computer (so - forever).&lt;/p&gt;

&lt;h3 id=&#34;setup:5c5a3e3c615fcc2b53c7c3ec3df70294&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;First install Audacity. I&amp;rsquo;m a fedora user so I grabbed it with &lt;code&gt;yum&lt;/code&gt;/&lt;code&gt;dnf&lt;/code&gt;, but users of other systems can use their package manager or get pre-built &lt;a href=&#34;http://www.fosshub.com/Audacity.html/audacity-minsrc-2.1.1.tar.xz&#34;&gt;binary&lt;/a&gt; for Windows or OSX.&lt;/p&gt;

&lt;p&gt;Disable your microphone, you don&amp;rsquo;t want Audacity recording anything except the sound passing out of your speakers. Navigate to the webpage which you want to record from, but don&amp;rsquo;t start the music yet.&lt;/p&gt;

&lt;h3 id=&#34;recording-and-exporting:5c5a3e3c615fcc2b53c7c3ec3df70294&#34;&gt;Recording and Exporting&lt;/h3&gt;

&lt;p&gt;Start Audacity, click the &amp;ldquo;Transport&amp;rdquo; menu, and select &amp;ldquo;Sound Activated Recording&amp;rdquo;. Now click the record button, and Audacity should pause recording. Switch to the webpage you wan to record from and start the music. You should see Audacity detect the music and begin recording. Once the music has finished, stop Audacity.&lt;/p&gt;

&lt;p&gt;If the music contains more than one track, you&amp;rsquo;ll need to add labels at the start of each track. A fast way to do this is using the silence analyzer. Click the &amp;ldquo;Analyze&amp;rdquo; menu, and &amp;ldquo;Silence Finder&amp;rdquo;. Press &amp;ldquo;OK&amp;rdquo; and Audacity will add a label at each point of silence in the music. Make sure you add a label to the beginning of the music - sound activated recording usually means the first track is not preceded by silence. To manually add labels, just navigate to the section of music where you want to add a label and press &lt;code&gt;Control + B&lt;/code&gt;. You can give each label a title, or add them on export later.&lt;/p&gt;

&lt;p&gt;To maximize the recorded volume, press &lt;code&gt;Control + A&lt;/code&gt; to select all of the recording, select the &amp;ldquo;effect&amp;rdquo; menu, and &amp;ldquo;normalize&amp;rdquo;. The default value of -1.0 decibel is fine. This will ensure the recording doesn&amp;rsquo;t sound &amp;ldquo;quiet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Finally, select the &amp;ldquo;File&amp;rdquo; menu and &amp;ldquo;Export Audio&amp;rdquo; or &amp;ldquo;Export Multiple&amp;rdquo; if you have more than one track to export. If you&amp;rsquo;re exporting mp3, Audacity will let you add mp3 tags to each track at this point. That&amp;rsquo;s it!&lt;/p&gt;

&lt;h3 id=&#34;automating-the-process:5c5a3e3c615fcc2b53c7c3ec3df70294&#34;&gt;Automating the process&lt;/h3&gt;

&lt;p&gt;One downside to this method is it is highly manual. One way to automate some of it is by using an Audacity&amp;rsquo;s &lt;a href=&#34;http://manual.audacityteam.org/man/Chains_-_for_batch_processing_and_effects_automation&#34;&gt;chains&lt;/a&gt; feature. To script an audio recording process with Perl, the &lt;a href=&#34;https://metacpan.org/pod/Audio::PortAudio&#34;&gt;Audio::PortAudio&lt;/a&gt; module looks promising, for the capturing and saving of audio data at least.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello perldoc, productivity booster</title>
      <link>http://perltricks.com/article/155/2015/2/26/Hello-perldoc--productivity-booster/</link>
      <pubDate>Thu, 26 Feb 2015 13:42:57 +0000</pubDate>
      
      <guid>http://perltricks.com/article/155/2015/2/26/Hello-perldoc--productivity-booster/</guid>
      <description>

&lt;p&gt;Imagine this scenario: you&amp;rsquo;re using the DateTime module but you can&amp;rsquo;t remember the exact name of a function it provides. What do you do? You could open your browser, go to &lt;a href=&#34;https://metacpan.org/&#34;&gt;MetaCPAN&lt;/a&gt;, search for DateTime and look up the answer in the module&amp;rsquo;s documentation. A faster way would be to switch to the command line, and type &lt;code&gt;perldoc DateTime&lt;/code&gt; to display the module&amp;rsquo;s documentation right there in the terminal.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perldoc&lt;/code&gt; is a command line program for reading Perl documentation. It comes with Perl, so if you&amp;rsquo;ve got Perl installed, perldoc should be available too. Using perldoc is easy: as you&amp;rsquo;ve already seen, to view the documentation of a module you&amp;rsquo;ve installed, at the command line type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc Module::Name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;perldoc will search for the module and if it finds it, display the module&amp;rsquo;s documentation (written in Pod). Using perldoc you can learn more about any aspect of Perl almost instantly. Want to know more about Pod? Try &lt;code&gt;perldoc pod&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;dial-f-for-functions:950e91211886bd6e410eb5c07d6bf43a&#34;&gt;Dial -f for functions&lt;/h3&gt;

&lt;p&gt;Perl has a huge number of built-in functions, about 224 depending on the Perl version. Who can remember exactly how they all work? I know I can&amp;rsquo;t. To lookup a Perl function, use perldoc with the &lt;code&gt;-f&lt;/code&gt; switch. For instance to look up the documentation on the &lt;code&gt;rindex&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc -f rindex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will display:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rindex STR,SUBSTR,POSITION
rindex STR,SUBSTR
      Works just like index() except that it returns the position of the
      last occurrence of SUBSTR in STR. If POSITION is specified,
      returns the last occurrence beginning at or before that position.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aha! This is all well and good, but what do you do if you can&amp;rsquo;t remember the function name? Well you could use &lt;a href=&#34;https://metacpan.org/pod/B::Keywords&#34;&gt;B::Keywords&lt;/a&gt;, but another way would be to check out &lt;code&gt;perlfunc&lt;/code&gt; the Perl documentation on built-in functions. To read it, with perldoc just type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc perlfunc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;predefined-variables:950e91211886bd6e410eb5c07d6bf43a&#34;&gt;Predefined Variables&lt;/h3&gt;

&lt;p&gt;As with functions, Perl has a large number of predefined variables that do everything from storing the program name to tracking the state of the regex engine. They&amp;rsquo;re really useful, but often have obscure names like &lt;code&gt;$^O&lt;/code&gt; (the OS name). So if you find yourself needing to check whether you&amp;rsquo;re looking at a list separator (&lt;code&gt;$&amp;quot;&lt;/code&gt;) or an output separator (&lt;code&gt;$/&lt;/code&gt;), just use perldoc with the &lt;code&gt;-v&lt;/code&gt; switch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc -v $/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because some predefined variables have weird names, you may need to quote them on the command line for perldoc to work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc -v &#39;$&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The predefined variables documentation is known as &lt;code&gt;perlvar&lt;/code&gt;. It&amp;rsquo;s well worth a read through at least once (&lt;code&gt;perldoc perlvar&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;searching-the-documentation:950e91211886bd6e410eb5c07d6bf43a&#34;&gt;Searching the documentation&lt;/h3&gt;

&lt;p&gt;Perl has a lot of great documentation, but it can be hard to remember the names of all of the entries. If you ever want to browse the table of contents, use &lt;code&gt;perl&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc perl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Many people recommend perltoc for this, but for finding relevant entries, I think the perl entry is easier to browse than perltoc.&lt;/p&gt;

&lt;p&gt;Perl also has an extensive FAQ, (another entry that&amp;rsquo;s worth a read through). It has loads of answers to common queries. As usual you can read it with &lt;code&gt;perldoc faq&lt;/code&gt;, but you can also search it using the &lt;code&gt;-q&lt;/code&gt; switch. Want to know if there are any good IDEs for Perl? (a common newbie question):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -q ide
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Is there an IDE or Windows Perl Editor?
 Perl programs are just plain text, so any editor will do.

 If you&#39;re on Unix, you already have an IDE--Unix itself. The Unix
 philosophy is the philosophy of several small tools that each do one thing
 and do it well. It&#39;s like a carpenter&#39;s toolbox.

 If you want an IDE, check the following (in alphabetical order, not order
 of preference):

 Eclipse


     The Eclipse Perl Integration Project integrates Perl editing/debugging
     with Eclipse.

 Komodo


     ActiveState&#39;s cross-platform (as of October 2004, that&#39;s Windows,
     Linux, and Solaris), multi-language IDE has Perl support, including a
     regular expression debugger and remote debugging.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;finding-module-install-locations:950e91211886bd6e410eb5c07d6bf43a&#34;&gt;Finding module install locations&lt;/h3&gt;

&lt;p&gt;perldoc isn&amp;rsquo;t just about documentation. If you need to find out where a module is installed, using the &lt;code&gt;-l&lt;/code&gt; switch, perldoc will return the filepath of the module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc -l Test::More
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you get the path, you can open it in an editor directly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ vi $(perldoc -l Test::More)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One trick here: some modules don&amp;rsquo;t have any POD in them, for those modules, use &lt;code&gt;-lm&lt;/code&gt; to still return the path.&lt;/p&gt;

&lt;h3 id=&#34;read-module-source-code-in-perldoc:950e91211886bd6e410eb5c07d6bf43a&#34;&gt;Read module source code in perldoc&lt;/h3&gt;

&lt;p&gt;Finally, perldoc can also display module source code. Just use the &lt;code&gt;-m&lt;/code&gt; switch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc -m Test::More
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wrap-up:950e91211886bd6e410eb5c07d6bf43a&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;This article has covered the most common features, but perldoc has a bunch of other capabilities that you can read about at the command line with &lt;code&gt;man perldoc&lt;/code&gt;. The Perl documentation is also &lt;a href=&#34;http://perldoc.perl.org/&#34;&gt;online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keep in mind that as you get more proficient with perldoc, you&amp;rsquo;ll need the online resources less and less. Get in the habit of switching to the command line, looking up something in perldoc and flipping right back to programming - it&amp;rsquo;s a productivity win.&lt;/p&gt;

&lt;h3 id=&#34;perldoc-cheatsheet:950e91211886bd6e410eb5c07d6bf43a&#34;&gt;perldoc cheatsheet&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;perldoc [option]

Module Options                               
--------------                               
         Module documentation     
-l       Module filepath          
-lm      Module filepath (alt.)   
-m       Module source


Search Options
--------------
-f     Get a built-in function definition
-v     Get a variable definition
-q      Search the faq for a keyword


Commonly Used Entries
---------------------
perl         Language overview, list of all other entries
perltoc      Table of contents
perlfunc     Built-in functions documentation
perlvar      Predefined variables documentation
perlref      References documentation
perlre       Regex documentation
faq          The Perl FAQ

Help
----
man perldoc     List of all perldoc options
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get to grips with GNU Screen</title>
      <link>http://perltricks.com/article/153/2015/2/16/Get-to-grips-with-GNU-Screen/</link>
      <pubDate>Mon, 16 Feb 2015 14:15:50 +0000</pubDate>
      
      <guid>http://perltricks.com/article/153/2015/2/16/Get-to-grips-with-GNU-Screen/</guid>
      <description>

&lt;p&gt;GNU Screen is a terminal multiplexer, a program that manages terminal windows. It&amp;rsquo;s been around for 28 years, which makes it older than Perl 5. So if you thought Perl had some archaic conventions, you ain&amp;rsquo;t seen nothing yet. But despite it&amp;rsquo;s age Screen is a powerful tool for managing terminals; if you often find yourself using more than one terminal, you owe it to yourself to start using a multiplexer for major productivity gains. Screen is the most widely used multiplexer, another popular option is &lt;a href=&#34;http://tmux.sourceforge.net/&#34;&gt;tmux&lt;/a&gt;, but this article is about Screen.&lt;/p&gt;

&lt;h3 id=&#34;getting-started:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Getting started&lt;/h3&gt;

&lt;p&gt;Start Screen by simply typing &lt;code&gt;screen&lt;/code&gt; at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All commands in Screen start with the prefix &lt;code&gt;Control + a&lt;/code&gt;. The first command to learn is the most important; how to display the commands menu! To do this type &lt;code&gt;Control + a, ?&lt;/code&gt; (that is, press Control and the &amp;ldquo;A&amp;rdquo; key, release the keys and then type question mark). If you remember this one command, you can always get yourself out of trouble, even if you forget some of the other commands.&lt;/p&gt;

&lt;h3 id=&#34;managing-windows:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Managing windows&lt;/h3&gt;

&lt;p&gt;To open a new terminal window, type &lt;code&gt;Control + a, c&lt;/code&gt;. Screen will create a new window - this is a new terminal process. To see a list of open windows, type &lt;code&gt;Control + a, &amp;quot;&lt;/code&gt;. You can press up and down to highlight the window you want to use, and press enter to open it.&lt;/p&gt;

&lt;p&gt;You can also cycle through windows, by pressing &lt;code&gt;Control + a, n&lt;/code&gt; to move to the next window and &lt;code&gt;Control + a, p&lt;/code&gt; to move to the previous one. Every window is assigned a number, and you can jump straight to a window with: &lt;code&gt;Control + a, #&lt;/code&gt; where the pound key is the number window to jump to.&lt;/p&gt;

&lt;p&gt;Finally if you want to kill a window type &lt;code&gt;Control + a, k&lt;/code&gt;. To kill all windows and exit screen the combination is: &lt;code&gt;Control + a, \&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;split-screen:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Split Screen&lt;/h3&gt;

&lt;p&gt;Screen can split the terminal window into multiple windows. This is really helpful if you need to look at multiple terminals simultaneously. Any window can be split vertically or horizontally and multiple times, leading to all kinds of &lt;a href=&#34;https://encrypted.google.com/search?tbm=isch&amp;amp;q=gnu%20screen&amp;amp;tbs=imgo:1&#34;&gt;combinations&lt;/a&gt;. To vertically split the screen type: &lt;code&gt;Control + a, |&lt;/code&gt; and to horizontally split type: &lt;code&gt;Control + a, S&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To highlight the next split window, type &lt;code&gt;Control + a, tab&lt;/code&gt; (there&amp;rsquo;s also a config option to select by mouse click, more on that later). The combination &lt;code&gt;Control + a, Q&lt;/code&gt;. will quit split screen mode.&lt;/p&gt;

&lt;h3 id=&#34;copy-and-paste:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Copy and paste&lt;/h3&gt;

&lt;p&gt;Copying and pasting with Screen isn&amp;rsquo;t super easy. So much so that I often found myself using the terminal copy and paste instead (highlight with mouse, then &lt;code&gt;Control + C&lt;/code&gt;, &lt;code&gt;Control + V&lt;/code&gt;). However it&amp;rsquo;s useful to know Screen&amp;rsquo;s copy and paste because terminal copy and paste just crumbles on split screen mode, and you may want to use the mouse select for something more useful anyway.&lt;/p&gt;

&lt;p&gt;Copy and paste is modal, so you first have to enter &amp;ldquo;copy mode&amp;rdquo;. To do that type &lt;code&gt;Control + a, [&lt;/code&gt;. Now move the cursor to the beginning of the text you want to copy. Press &lt;code&gt;space&lt;/code&gt; to mark it and use the arrow keys (or h, j, k, l) to move the cursor to the end of the text you want to copy. Pressing &lt;code&gt;space&lt;/code&gt; again will copy the highlighted text. To paste, type &lt;code&gt;Control + a, ]&lt;/code&gt;. Ew.&lt;/p&gt;

&lt;h3 id=&#34;scrolling:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Scrolling&lt;/h3&gt;

&lt;p&gt;By default Screen prevents scrolling using the X-Window scrollbar (it also doesn&amp;rsquo;t keep much history). This can be get very annoying, so you&amp;rsquo;ll want to know how to scroll. To do so, you need to enter copy mode with &lt;code&gt;Control + a, [&lt;/code&gt;. and then press &lt;code&gt;Control + u&lt;/code&gt; to scroll up and &lt;code&gt;Control + d&lt;/code&gt; to go down. Press &lt;code&gt;escape&lt;/code&gt; to exit copy mode. And until you can remember the combinations for scrolling, you&amp;rsquo;ll find yourself piping output to &lt;code&gt;less&lt;/code&gt; more than you ever imagined.&lt;/p&gt;

&lt;h3 id=&#34;detaching-screen-sessions:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Detaching Screen Sessions&lt;/h3&gt;

&lt;p&gt;Screen sessions can be put into the background just like any other terminal process. Screen will keep open any terminal processes (like ssh sessions). This is very useful - if you find yourself working with more than 5 or 6 windows, it might be easier to detach and start a new screen session than adding more windows. To detach screen, the combination is &lt;code&gt;Control + a, d&lt;/code&gt;. When you detach, screen will print the session name and return to the terminal prompt. To re-attach to a detached session just use &lt;code&gt;screen -r&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have more than one screen session, you can display all detached sessions with &lt;code&gt;-ls&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -ls
There are screens on:
    30549.pts-1.localhost   (Detached)
    30498.pts-1.localhost   (Detached)
    29207.pts-1.localhost   (Detached)
3 Sockets in /var/run/screen/S-sillymoose.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then just re-attach to the session you want by providing the session name as an option to &lt;code&gt;-r&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -r 29207
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if you&amp;rsquo;ve really got multiple Screen sessions going, it can be hard to remember what they&amp;rsquo;re all doing. So when you start Screen, use the &lt;code&gt;-S&lt;/code&gt; option to give the session a name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -S aws_ec2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you name all your sessions, it&amp;rsquo;s much easier to know which one to re-attach to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -ls
There are screens on:
    31155.aws_ec2   (Detached)
    30866.email_servers (Detached)
    30815.ecommerce_app (Detached)
3 Sockets in /var/run/screen/S-sillymoose.

$ screen -r email_servers
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;customizing-screen:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Customizing Screen&lt;/h3&gt;

&lt;p&gt;Screen is highly configurable which is good because you&amp;rsquo;ll probably want to change a few of the default options. The first option you should consider isn&amp;rsquo;t a Screen option at all however.&lt;/p&gt;

&lt;p&gt;To stop your ssh sessions from timing out, add the following to your &lt;code&gt;~/.ssh/config&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# dont timeout connections
ServerAliveInternal 600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the &lt;code&gt;~/.ssh/config&lt;/code&gt; file didn&amp;rsquo;t already exist, you may have to change the permissions on the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ chmod 644 ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This option will have ssh send a byte every 10 minutes to the remote server to keep the session alive. You may want to change the frequency depending on your needs. Now you can have multiple ssh windows within screen, detach them for hours and return and you&amp;rsquo;ll still be logged in.&lt;/p&gt;

&lt;p&gt;Like many other terminal programs, screen will look for a runcom config file (&lt;code&gt;~/.screenrc&lt;/code&gt;). I like the following options:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# no welcome message
startup_message off

# keep running processes on detach
autodetach on

# start windows at 1 instead of 0
bind c screen 1
bind ^c screen 1
bind 0 select 10
screen 1

# large scrollback buffer
defscrollback 5000

# on split screen, switch window focus by clicking
mousetrack on

# refresh screen after closing a program
altscreen on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are loads more options to choose from. Screen has a huge online &lt;a href=&#34;https://www.gnu.org/software/screen/manual/screen.html&#34;&gt;manual&lt;/a&gt; and it&amp;rsquo;s terminal man page is comprehensive too. Any typed command listed in the manual can be run from within screen, or added to the &lt;code&gt;~/.screenrc&lt;/code&gt; file. For instance if you don&amp;rsquo;t like Screen&amp;rsquo;s default key bindings, checkout the &lt;code&gt;bindkey&lt;/code&gt; command for overriding them, as you don&amp;rsquo;t want to be typing them for another 28 years.&lt;/p&gt;

&lt;h3 id=&#34;screen-cheatsheet:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Screen Cheatsheet&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# Type before other commands
Prefix: Control + a

Shortcuts menu: ?

New window:    c      Split Vertical:   |       Copy mode:     [
Close window:  k      Split Horizontal: S       Start copy:    space
Next window:   n      Focus next region: tab    Scroll up:     u
Prior window:  p      Quit split screem: Q      Scroll down:   d
Jump window #: 0-9                              End copy:      space
List windows:  &amp;quot;                                Paste:         ]
                                                End copy mode: escape

Detach: d
Quit:   \

# Terminal commands
Launch Screen:     screen
Named session:     screen -S &amp;lt;name&amp;gt;
List sessions:     screen -ls
Re-attach session: screen -r [name]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Advanced slideshow maneuvers</title>
      <link>http://perltricks.com/article/134/2014/11/13/Advanced-slideshow-maneuvers/</link>
      <pubDate>Thu, 13 Nov 2014 13:38:30 +0000</pubDate>
      
      <guid>http://perltricks.com/article/134/2014/11/13/Advanced-slideshow-maneuvers/</guid>
      <description>

&lt;p&gt;Back in June I wrote an &lt;a href=&#34;http://perltricks.com/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup&#34;&gt;overview&lt;/a&gt; of &lt;a href=&#34;https://metacpan.org/pod/App::revealup&#34;&gt;App::revealup&lt;/a&gt;, a Perl app that enables markdown-driven presentations with &lt;a href=&#34;https://github.com/hakimel/reveal.js&#34;&gt;reveal.js&lt;/a&gt;. Today I want to share some of the advanced features that I&amp;rsquo;ve found useful, but are not always intuitive to include when working with reveal.js and markdown.&lt;/p&gt;

&lt;h3 id=&#34;speaker-notes:a1fbf7d06fee8e079231f01e0bd9c1d4&#34;&gt;Speaker notes&lt;/h3&gt;

&lt;p&gt;The speaker notes screen is one of the &amp;ldquo;killer features&amp;rdquo; of reveal.js. It&amp;rsquo;s a separate browser window that displays your current slide, the next slide, the speaker notes and the time elapsed so far (&lt;a href=&#34;https://camo.githubusercontent.com/69f044f8126bdd09cf4caafa2d9239839612a8de/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3632393432392f313738393338352f62316565323431652d363935362d313165332d383166652d6535363630643531323130612e706e67&#34;&gt;example&lt;/a&gt;). You can even control the slide transition from the speaker notes screen, enabling you to share the presentation on a large screen whilst driving the presentation from the speaker notes screen on your laptop. To add speaker notes to a slide in presentation, use the &lt;code&gt;Note:&lt;/code&gt; syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# This is my title #

Note:
This is the title slide for the presentation.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if I launch this presentation I can view the speaker notes by pressing the &lt;code&gt;s&lt;/code&gt; key.&lt;/p&gt;

&lt;h3 id=&#34;slide-transitions:a1fbf7d06fee8e079231f01e0bd9c1d4&#34;&gt;Slide transitions&lt;/h3&gt;

&lt;p&gt;The default slide transition is cute, but it can get a bit tiresome after a while. The good news is reveal.js gives you fine-grained control of slide transitions, the bad news is that the syntax is ugly as hell. You have to include the slide transition commands as HTML comments within your markdown:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;lt;!-- .slide: data-transition=&amp;quot;none&amp;quot; --&amp;gt;
# This is my title #

Note:
This is the title slide for the presentation.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line of this markdown instructs reveal.js to use &amp;ldquo;none&amp;rdquo; as the slide transition style (you can choose from default/cube/page/concave/zoom/linear/fade). The rest of the markdown is the same as before. Although it&amp;rsquo;s nice to have this control at the slide level, one downside is that you must include the slide-transition instruction on every slide where you don&amp;rsquo;t want the default transition.&lt;/p&gt;

&lt;p&gt;Another option is to use App::revealup&amp;rsquo;s &lt;code&gt;transition&lt;/code&gt; command line option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ revealup server slides.md --port 5000 --transition zoom
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will apply the transition style to the entire presentation. What&amp;rsquo;s nice about this option is that you can override the transition style using the inline notation described above. So choose your base transition style on the command line option, and tailor it for specific slides with the inline syntax.&lt;/p&gt;

&lt;h3 id=&#34;fragments:a1fbf7d06fee8e079231f01e0bd9c1d4&#34;&gt;Fragments&lt;/h3&gt;

&lt;p&gt;Fragments are slide elements that you can introduce sequentially on to a slide. I use them all the time to keep the audience&amp;rsquo;s focus on the item I&amp;rsquo;m currently talking about. This slide displays a rather uncontroversial opinion:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;I &amp;lt;!-- .element: class=&amp;quot;fragment&amp;quot; data-fragment-index=&amp;quot;1&amp;quot; --&amp;gt; 

 ‚ù§ &amp;lt;!-- .element: class=&amp;quot;fragment&amp;quot; data-fragment-index=&amp;quot;2&amp;quot; --&amp;gt; 

Perl&amp;lt;!-- .element: class=&amp;quot;fragment&amp;quot; data-fragment-index=&amp;quot;3&amp;quot; --&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like slide transitions, fragments are driven by HTML comments. In this case, when the slide first loads it will be blank, clicking three times will gradually display &amp;ldquo;I ‚ù§ Perl&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;background:a1fbf7d06fee8e079231f01e0bd9c1d4&#34;&gt;Background&lt;/h3&gt;

&lt;p&gt;Fade your presentation to black and get your audience&amp;rsquo;s undivided attention by pressing the &lt;code&gt;b&lt;/code&gt; key. Press &lt;code&gt;b&lt;/code&gt; again to bring your presentation back. Simple!&lt;/p&gt;

&lt;h3 id=&#34;styling:a1fbf7d06fee8e079231f01e0bd9c1d4&#34;&gt;Styling&lt;/h3&gt;

&lt;p&gt;Like slide transitions, I found the default reveal.js theme to be a novelty that quickly wears off. The good news is you can define your own CSS to get a style that works for you. Don&amp;rsquo;t start with a blank slate! App::revealup ships with all the &lt;a href=&#34;https://metacpan.org/source/YUSUKEBE/App-revealup-0.14/share/revealjs/css/theme&#34;&gt;standard themes&lt;/a&gt; so grab one of those and edit it to meet your needs. Test out your new theme by loading it at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ revealup server presentation.md --port 5000 --theme /path/to/theme.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use custom CSS to develop a &amp;ldquo;house-style&amp;rdquo; for your organisation. This can help encourage adoption away from those awful stock PowerPoint templates.&lt;/p&gt;

&lt;h3 id=&#34;save-as-pdf:a1fbf7d06fee8e079231f01e0bd9c1d4&#34;&gt;Save as PDF&lt;/h3&gt;

&lt;p&gt;Presentations can be saved as PDF but you must be using Google Chrome for this to work. There are step-by-step &lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34;&gt;instructions&lt;/a&gt;, but one thing that wasn&amp;rsquo;t clear to me was that if you&amp;rsquo;re running the presentation on &lt;code&gt;http://localhost:5000&lt;/code&gt; you should append &amp;ldquo;?print-pdf&amp;rdquo; to the URL so it becomes &lt;code&gt;http://localhost:5000?print-pdf&lt;/code&gt;. Then reveal.js will load the presentation ready for saving to PDF.&lt;/p&gt;

&lt;h3 id=&#34;wrap-up:a1fbf7d06fee8e079231f01e0bd9c1d4&#34;&gt;Wrap-up&lt;/h3&gt;

&lt;p&gt;Hopefully these tips are useful. Combined with the previous &lt;a href=&#34;http://perltricks.com/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup&#34;&gt;article&lt;/a&gt;, you should have everything you need to craft an awesome markdown-driven presentation. Try &lt;a href=&#34;https://metacpan.org/pod/App::revealup&#34;&gt;App::revealup&lt;/a&gt; out at your local Perl Mongers!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated: *added slide transition command line option 2014-12-19&lt;/strong&gt;*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello berrybrew, the Strawberry Perl version manager</title>
      <link>http://perltricks.com/article/119/2014/10/10/Hello-berrybrew--the-Strawberry-Perl-version-manager/</link>
      <pubDate>Fri, 10 Oct 2014 12:39:52 +0000</pubDate>
      
      <guid>http://perltricks.com/article/119/2014/10/10/Hello-berrybrew--the-Strawberry-Perl-version-manager/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://perlbrew.pl/&#34;&gt;Perlbrew&lt;/a&gt; and [plenv]() are tools for managing local Perl installations. They&amp;rsquo;re useful as they let you install and use multiple versions of Perl without administrator privileges. I have a special appreciation for them as I once tried to upgrade my mac system Perl and instead wrecked it and had to reinstall OSX.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m on Windows I use Strawberry Perl, so I wrote &lt;a href=&#34;https://github.com/sillymoose/berrybrew&#34;&gt;berrybrew&lt;/a&gt; to help manage Perl on Windows. It&amp;rsquo;s similar to Perlbrew and plenv; it will download, install and manage multiple versions of Strawberry Perl for you, no administrator privileges required.&lt;/p&gt;

&lt;h3 id=&#34;installation:d5167bc4d58ffc1d5402991419a8e81b&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;berrybrew is written in C#. If you have git you can install berrybrew by cloning the GitHub &lt;a href=&#34;https://github.com/sillymoose/berrybrew&#34;&gt;repo&lt;/a&gt; and either using the pre-compiled binary, or minting your own with Mono. The pre-compiled binary is &lt;code&gt;bin/berrybrew.exe&lt;/code&gt; and should work out of the box on Windows 7 and 8 (it might work on Windows XP if you have .Net framework 2 or higher installed).&lt;/p&gt;

&lt;p&gt;To download the project with git and compile it with &lt;a href=&#34;http://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; type the following commands at the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; git clone https://github.com/sillymoose/berrybrew
&amp;gt; mcs src/berrybrew.cs -lib:lib -r:ICSharpCode.SharpZipLib.dll -out:bin/berrybrew.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will output a fresh binary in the &lt;code&gt;bin&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&#34;features:d5167bc4d58ffc1d5402991419a8e81b&#34;&gt;Features&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;available&lt;/code&gt; command lists available Strawberry Perls and whether they&amp;rsquo;re installed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; berrybrew available

The following Strawberry Perls are available:

            5.20.1_64 [installed]
            5.20.1_32 [installed]
            5.18.4_64
            5.18.4_32
            5.16.3_64
            5.16.3_32
            5.14.4_64
            5.14.4_32
            5.12.3_32
            5.10.1_32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output shows that I have both versions of Perl 5.20.1 installed. I can install another version using the &lt;code&gt;install&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; berrybrew install 5.10.1_32
Downloading http://strawberryperl.com/download/5.10.1.2/strawberry-perl-5.10.1.2-portable.zip to C:\Users\dfarrell\AppData\Local\Temp\gp5d33yg.qjo/strawberry-pe
rl-5.10.1.2-portable.zip
Confirming checksum ...
Extracting C:\Users\dfarrell\AppData\Local\Temp\gp5d33yg.qjo/strawberry-perl-5.10.1.2-portable.zip

The following Strawberry Perls are available:

            5.20.1_64 [installed]
            5.20.1_32 [installed]
            5.18.4_64
            5.18.4_32
            5.16.3_64
            5.16.3_32
            5.14.4_64
            5.14.4_32
            5.12.3_32
            5.10.1_32 [installed]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;berrybrew will download a temporary zip archive, confirm the checksums match, and extract the files to &lt;code&gt;C:\berrybrew&lt;/code&gt;. Finally I can use the newly installed Perl with the &lt;code&gt;switch&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; berrybrew switch 5.10.1_32
Switched to 5.10.1_32, start a new terminal to use it.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This updates my user &lt;code&gt;%PATH%&lt;/code&gt; environment variable to point at the new Perl binary. berrybrew will also warn if it finds another Perl binary in the system or user path (such as an ActiveState or vanilla Strawberry Perl). The system path can be problematic as Windows appends the user path to the system path which means it will search the system path first for any matching Perl binary and if it finds one, it will ignore the berrybrew binary. The system path also requires administrator privileges to update, which kind of goes against the spirit of berrybrew. One way to handle these would be to ask the user if they want to remove the other path, if they say yes, then berrybrew could prompt for administrator credentials, fire up another berrybrew process and remove them. For now it just warns the user and leaves the path variables untouched.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:d5167bc4d58ffc1d5402991419a8e81b&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I plan to add a few more commands to berrybrew: &lt;code&gt;exec&lt;/code&gt; to run a Perl program against every installed Perl, &lt;code&gt;uninstall&lt;/code&gt; to remove a Perl and &lt;code&gt;config&lt;/code&gt; to manage berrybrew&amp;rsquo;s settings. Under the hood a feature I&amp;rsquo;d love to add but am not sure how, is to refresh the current shell&amp;rsquo;s environment variable block, so the user doesn&amp;rsquo;t have to start a new cmd.exe when switching to a new Perl version.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s early days but if you have any suggestions for new features or feedback drop me an email or fork the project on &lt;a href=&#34;https://github.com/sillymoose/berrybrew&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create static web apps with Wget</title>
      <link>http://perltricks.com/article/103/2014/7/22/Create-static-web-apps-with-Wget/</link>
      <pubDate>Tue, 22 Jul 2014 12:44:13 +0000</pubDate>
      
      <guid>http://perltricks.com/article/103/2014/7/22/Create-static-web-apps-with-Wget/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Last week we covered &lt;a href=&#34;https://metacpan.org/pod/distribution/App-Wallflower/bin/wallflower&#34;&gt;Wallflower&lt;/a&gt; an awesome utility for generating static websites from Perl web applications. This week we&amp;rsquo;re covering an alternative method, that uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Wget&#34;&gt;Wget&lt;/a&gt;. One benefit of this method is it can be used on any dynamic web application, not just Perl ones.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need Wget installed - if you&amp;rsquo;re using Linux it should already be installed. OSX users can install it with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; and there is a Windows &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages/wget.htm&#34;&gt;version&lt;/a&gt; available. To follow this example you&amp;rsquo;ll also need Dancer2 installed, which you can get via cpan:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Dancer2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-the-application:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Create the application&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll use Dancer2 to create a basic skeleton app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ dancer2 -a MyApp
+ MyApp
+ MyApp/config.yml
+ MyApp/MANIFEST.SKIP
+ MyApp/Makefile.PL
+ MyApp/views
+ MyApp/views/index.tt
+ MyApp/views/layouts
+ MyApp/views/layouts/main.tt
+ MyApp/t
+ MyApp/t/002_index_route.t
+ MyApp/t/001_base.t
+ MyApp/bin
+ MyApp/bin/app.pl
+ MyApp/lib
+ MyApp/lib/MyApp.pm
+ MyApp/environments
+ MyApp/environments/production.yml
+ MyApp/environments/development.yml
+ MyApp/public
+ MyApp/public/500.html
+ MyApp/public/404.html
+ MyApp/public/favicon.ico
+ MyApp/public/dispatch.cgi
+ MyApp/public/dispatch.fcgi
+ MyApp/public/css
+ MyApp/public/css/error.css
+ MyApp/public/css/style.css
+ MyApp/public/javascripts
+ MyApp/public/javascripts/jquery.js
+ MyApp/public/images
+ MyApp/public/images/perldancer.jpg
+ MyApp/public/images/perldancer-bg.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets start the app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ ./MyApp/bin/app.pl
&amp;gt;&amp;gt; Dancer2 v0.143000 server 435 listening on http://0.0.0.0:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-the-static-site:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Create the static site&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll point Wget at the site in recursive mode, so that it pulls all the files we need (up to a depth of 5 by default).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ wget -r 0:3000 -d 0:3000 --page-requisites
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we pass Wget the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;rdquo;-r 0:3000&amp;rdquo; to recursively follow links from 0:3000&lt;/li&gt;
&lt;li&gt;-&amp;ldquo;d 0:3000&amp;rdquo; to only save static files from the local domain&lt;/li&gt;
&lt;li&gt;&amp;rdquo;&amp;ndash;page-requisites&amp;rdquo; to pull all required files for a page, even if beyond our depth limit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default Wget will create a directory named after the domain (&amp;ldquo;0:3000&amp;rdquo;) and place all static files there. And that&amp;rsquo;s it, all the files for our static site have been generated.&lt;/p&gt;

&lt;h3 id=&#34;wget-vs-wallflower:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Wget vs Wallflower&lt;/h3&gt;

&lt;p&gt;So if both apps can generate static sites, which one is better? If you&amp;rsquo;re working with a non-Perl site, then Wget is obviously the way to go. In terms of speed, Wget is faster if you combine the command with xargs and request the urls in parallel:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cat urls.txt | xargs -P16 wget -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To take advantage of the parallel GET requests, you&amp;rsquo;ll need to serve the application on a web server though.&lt;/p&gt;

&lt;p&gt;Wallflower has nice option (&amp;ldquo;-F&amp;rdquo;) to take a list of URLs to download, which can be useful if the entire site cannot be downloaded by following links from the root application page. &lt;a href=&#34;https://metacpan.org/pod/Wallflower&#34;&gt;App::Wallflower&lt;/a&gt; is the source library for Wallflower, and extendible through Perl code, so you can further tailor the process to meet your needs. This can be used for post-processing actions like generating a sitemap.xml or advanced setups like a hybrid application, where the public pages of the site are static, but the secure parts remain dynamic. With Wallflower all of this can be scripted in Perl, with Wget you&amp;rsquo;d need to a combination of shell scripts and Perl, which is less convenient.&lt;/p&gt;

&lt;p&gt;As was recommended in last week&amp;rsquo;s &lt;a href=&#34;http://perltricks.com/article/102/2014/7/15/Generate-static-websites-from-dynamic-Perl-web-apps#h3Wallflower%20Tips&#34;&gt;article&lt;/a&gt; make sure you&amp;rsquo;re using absolute urls in your template code to avoid deployment issues with your static files.&lt;/p&gt;

&lt;h3 id=&#34;thanks:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Thanks to Steve Schnepp for contacting us with this tip. Thanks to Philippe Bruhat for creating Wallflower and providing additional technical guidance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;Correction:&lt;/strong&gt; technical comparison of Wallflower and Wget updated following clarification from module author. 2014-08-02*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get GNOME 3 popup alerts for IRC</title>
      <link>http://perltricks.com/article/95/2014/6/9/Get-GNOME-3-popup-alerts-for-IRC/</link>
      <pubDate>Mon, 09 Jun 2014 12:34:25 +0000</pubDate>
      
      <guid>http://perltricks.com/article/95/2014/6/9/Get-GNOME-3-popup-alerts-for-IRC/</guid>
      <description>

&lt;p&gt;&lt;em&gt;IRC is a great medium but chats are often intermittent and it&amp;rsquo;s easy to miss messages if your focus is elsewhere. Lately I&amp;rsquo;ve been using &lt;a href=&#34;http://irssi.org/&#34;&gt;Irssi&lt;/a&gt; which is extendible with Perl and I wrote a quick script to create a desktop popup alert any time my IRC username is mentioned in chat, or I receive a private message.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:ce6f8b6323c39b7022df382ce5c1d78c&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;Warning, this script has a lot of dependencies. To use it, you&amp;rsquo;ll need to be running GNOME 3, have Irssi and install &lt;a href=&#34;https://metacpan.org/pod/Gtk3::Notify&#34;&gt;Gtk3::Notify&lt;/a&gt;. There is an open &lt;a href=&#34;https://rt.cpan.org/Public/Bug/Display.html?id=96108&#34;&gt;issue&lt;/a&gt; on the Gtk3::Notify tests, so you&amp;rsquo;ll have to force install it at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan -fi Gtk3::Notify
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gtk3::Notify has several C library &lt;a href=&#34;https://github.com/dnmfarrell/irssi/blob/master/gnotify.pl#L98&#34;&gt;dependencies&lt;/a&gt;, so you&amp;rsquo;ll need to install those too - your Linux distro&amp;rsquo;s package manager should have them.&lt;/p&gt;

&lt;h3 id=&#34;installation:ce6f8b6323c39b7022df382ce5c1d78c&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Unless you&amp;rsquo;re running any scripts with Irssi already, you&amp;rsquo;ll need to create a scripts directory, and download &lt;a href=&#34;https://raw.githubusercontent.com/dnmfarrell/irssi/master/gnotify.pl&#34;&gt;gnotify.pl&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ mkdir ~/.irssi/scripts
$ cd ~/.irssi/scripts
$ curl -O https://raw.githubusercontent.com/dnmfarrell/irssi/master/gnotify.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To have Irssi to autoload the script, create an &amp;ldquo;autorun&amp;rdquo; subdirectory with a symlink back to the script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ mkdir ~/.irssi/scripts/autorun
$ cd ~/.irssi/scripts/autorun
$ ln -s ../gnotify.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test-the-script:ce6f8b6323c39b7022df382ce5c1d78c&#34;&gt;Test the script&lt;/h3&gt;

&lt;p&gt;To make sure gnotify.pl is working, start Irssi and try sending a private message to yourself from within Irssi:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;/msg username hey this is a test message
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just replace username with your own IRC username, for me it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/95/irssi_msg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At the bottom of the screen you can see the popup alert.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/95/irssi_gnotify.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;conclusion:ce6f8b6323c39b7022df382ce5c1d78c&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Apart from desktop alerts, there are myriad ways to send IRC alerts: sounds, email and sms. A more sophisticated solution would be to write a script that uses a cloud-based notification service that could then transmit the alerts across all of these channels to the end user.&lt;/p&gt;

&lt;p&gt;What types of IRC alerts do you use? Let us know on &lt;a href=&#34;http://www.reddit.com/r/perl/comments/27ox3d/get_gnome_3_popup_alerts_for_irc/&#34;&gt;Reddit&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create professional slideshows in seconds with App::revealup</title>
      <link>http://perltricks.com/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup/</link>
      <pubDate>Fri, 06 Jun 2014 12:59:56 +0000</pubDate>
      
      <guid>http://perltricks.com/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup/</guid>
      <description>

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://metacpan.org/pod/App::revealup&#34;&gt;App::revealup&lt;/a&gt; is a command line app that creates slide shows from markdown documents. We listed it in this this month&amp;rsquo;s &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, but the app is so much fun I thought it was worth a separate feature.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:69eb22f12abc28dbc259e04444743098&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to grab App::revealup from CPAN. The latest version (0.03) should run on most platforms including Windows. At the command line type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan App::revealup
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-presentation:69eb22f12abc28dbc259e04444743098&#34;&gt;Create a presentation&lt;/h3&gt;

&lt;p&gt;App::revealup transforms markdown documents into slide shows, so let&amp;rsquo;s start by creating a basic presentation file, called presentation.md:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;A quick guide to markdown  as served by `App::revealup`  
David Farrell  
[PerlTricks.com](http://perltricks.com)
June 2014
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, markdown is easy to read. The code above is a single slide presentation. The only two interesting things going on here is the use of backticks (&amp;rdquo;`App::revealup`&amp;rdquo;) to create inline code and the hyperlink &amp;ldquo;&lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;To view this slide in presentation mode, at the command line type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ revealup server presentation.md --port 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now open your browser and navigate to &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;. You should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/94/slide1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add a second slide to showcase how different headers appear. In App::revealup the horizontal slide separator is three hyphens in a row (&amp;ldquo;&amp;mdash;&amp;rdquo;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;A quick guide to markdown  as served by `App::revealup`  
David Farrell  
[PerlTricks.com](http://perltricks.com)
June 2014  

---
# This is H1
## This is H2
### This is H3
#### This is H4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;App::reveal dynamically reads the source presentation file, so you can leave the process running and just save the changes to the source presentation file. Reloading the browser at &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt; should show the updated presentation. Press ‚Üí to move to the second slide.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/94/slide2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can add vertical slides too. These are delimited by three underscores (&amp;rdquo;___&amp;rdquo;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;A quick guide to markdown  as served by `App::revealup`  
David Farrell  
[PerlTricks.com](http://perltricks.com)
June 2014  

---
# This is H1
## This is H2
### This is H3
#### This is H4

---

+ Unordered
- lists are
* made with plus, minus or asterisk
___

1. Ordered
2. lists are
3. made with numbers and a period
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refreshing the browser, we get two additional slides. Press ‚Üì to move down one slide:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/94/slide3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/94/slide4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of trawling through every slide, I&amp;rsquo;ve completed the rest of the presentation and put it on &lt;a href=&#34;https://gist.github.com/dnmfarrell/1b118c5813a7a10ea7e2&#34;&gt;GitHub&lt;/a&gt;. The presentation content is an overview of the markdown syntax. Try running it with App::revealup!&lt;/p&gt;

&lt;p&gt;One nice feature is if you ever want to zoom out, just press the escape key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/94/slide_zoom.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-app-revealup-works:69eb22f12abc28dbc259e04444743098&#34;&gt;How App::revealup works&lt;/h3&gt;

&lt;p&gt;App::revealup is the glue between the &lt;a href=&#34;http://lab.hakim.se/reveal-js/#/&#34;&gt;reveal.js&lt;/a&gt; library and the source markdown file. It launches a PSGI web server, and compiles a basic HTML document which loads reveal.js and any required libraries or css. You can override the default css theme by passing an extra command line option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ revealup server presentation.md --port 5000 --theme solarized.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;App::revealup installs all of the basic reveal.js &lt;a href=&#34;https://github.com/hakimel/reveal.js/tree/master/css/theme&#34;&gt;themes&lt;/a&gt; or you can provide your own:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ revealup server presentation.md --port 5000 --theme &amp;quot;/path/to/custom.css&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion:69eb22f12abc28dbc259e04444743098&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;App::revealup is great example of Perl as a glue language - pulling together useful libraries to create something greater than the sum of its parts. If you&amp;rsquo;d like to learn more about the markdown syntax, check out this &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;cheetsheet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F94%2F2014%2F6%2F6%2FCreate-professional-slideshows-in-seconds-with-App-revealup&amp;amp;text=Create+professional+slideshows+in+seconds+with+App%3A%3Arevealup&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F94%2F2014%2F6%2F6%2FCreate-professional-slideshows-in-seconds-with-App-revealup&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update: command changed to match v0.10 (see &lt;a href=&#34;https://metacpan.org/changes/distribution/App-revealup&#34;&gt;changelog&lt;/a&gt;) 2014-08-24.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Secure your passwords with KeePass and Perl</title>
      <link>http://perltricks.com/article/79/2014/3/24/Secure-your-passwords-with-KeePass-and-Perl/</link>
      <pubDate>Mon, 24 Mar 2014 13:00:38 +0000</pubDate>
      
      <guid>http://perltricks.com/article/79/2014/3/24/Secure-your-passwords-with-KeePass-and-Perl/</guid>
      <description>

&lt;p&gt;&lt;em&gt;These days password managers are an &lt;a href=&#34;http://arstechnica.com/information-technology/2013/06/the-secret-to-online-safety-lies-random-characters-and-a-password-manager/&#34;&gt;essential&lt;/a&gt; part of online security. The module File::KeePass provides an easy-to-use Perl API for the KeePass password manager and opens up a world-of-possibilities for programmatically creating, reading and updating passwords securely.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to install &lt;a href=&#34;https://metacpan.org/pod/File::KeePass&#34;&gt;File::KeePass&lt;/a&gt;. The CPAN testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=File-KeePass+2.03&#34;&gt;results&lt;/a&gt; show that it runs on all modern Perls and many platforms including Windows. To install the module with CPAN, fire up the terminal and enter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan File::KeePass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may want to install &lt;a href=&#34;https://www.keepassx.org/&#34;&gt;KeePassX&lt;/a&gt;, an open source implementation of KeePass to get a GUI. I&amp;rsquo;ve used it on both Windows and Linux and it works great.&lt;/p&gt;

&lt;h3 id=&#34;creating-keepass-databases:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Creating KeePass Databases&lt;/h3&gt;

&lt;p&gt;The KeePass password manager stores all passwords in an encrypted database file. All username/password entries are stored in collections of entries called &amp;ldquo;groups&amp;rdquo;. File::KeePass provides for methods creating all of these items:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::KeePass;

my $kp_db = File::KeePass-&amp;gt;new;

my $app_group = $kp_db-&amp;gt;add_group({ title =&amp;gt; &#39;Apps&#39; });

$kp_db-&amp;gt;add_entry({ title     =&amp;gt; &#39;email&#39;,
                    username  =&amp;gt; &#39;system&#39;,
                    password  =&amp;gt; &#39;mumstheword&#39;,
                    group     =&amp;gt; $app_group-&amp;gt;{gid},
                  });

$kp_db-&amp;gt;save_db(&#39;MyAppDetails.kdb&#39;, &#39;itsasecret&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above we start by instantiating a new File::KeePass object. The &amp;ldquo;add_group&amp;rdquo; method adds a new group called &amp;ldquo;Apps&amp;rdquo; to the object. We then add an entry to the &amp;ldquo;Apps&amp;rdquo; group. The entry contains the username/password credentials that we want to store securely. Finally the &amp;ldquo;save_db&amp;rdquo; method saves the KeePass database to &amp;ldquo;MyAppDetails.kdb&amp;rdquo; (the extension is important) with a master password of &amp;ldquo;itsasecret&amp;rdquo; - in reality you would want to use a stronger password than this.&lt;/p&gt;

&lt;p&gt;Save the code as &amp;ldquo;create_keepass_db.pl&amp;rdquo; and run it on the command line with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl create_keepass_db.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have KeePassX or KeePass installed, you can open the newly-created &amp;ldquo;MyAppDetails.kdb&amp;rdquo; file. When you do, you&amp;rsquo;ll be asked for the master password that we set:&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/79/keepassx_login.png&#34; alt=&#34;keepassx login&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve entered the master password, KeePassX will show the main window, which lists the groups and entries in the database file. You can see the &amp;ldquo;Apps&amp;rdquo; group on the left and the &amp;ldquo;email&amp;rdquo; entry that was created listed in the main window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/79/keepassx_group_entry_added.png&#34; alt=&#34;keepassx main screen&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;reading-keepass-databases:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Reading KeePass databases&lt;/h3&gt;

&lt;p&gt;Instead of using a GUI like KeePass or KeePassX, you can read the contents of the database file using File::KeePass:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::KeePass;

my $kp_db = File::KeePass-&amp;gt;new;
$kp_db-&amp;gt;load_db(&#39;MyAppDetails.kdb&#39;, &#39;itsasecret&#39;);
my $groups = $kp_db-&amp;gt;groups;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we opened our newly-created KeePass database file using the &amp;ldquo;load_db&amp;rdquo; method. The &amp;ldquo;groups&amp;rdquo; method returns an arrayref of groups. Each group is a hashref that also contains an arrayref of entries. Printing $groups with Data::Dumper, we can see this more clearly:&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$VAR1 = [
          {
            &#39;icon&#39; =&amp;gt; 0,
            &#39;created&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
            &#39;level&#39; =&amp;gt; 0,
            &#39;entries&#39; =&amp;gt; [
                           {
                             &#39;icon&#39; =&amp;gt; 0,
                             &#39;modified&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
                             &#39;username&#39; =&amp;gt; &#39;system&#39;,
                             &#39;created&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
                             &#39;comment&#39; =&amp;gt; &#39;&#39;,
                             &#39;url&#39; =&amp;gt; &#39;&#39;,
                             &#39;id&#39; =&amp;gt; &#39;E31rvRS5mqK37mak&#39;,
                             &#39;title&#39; =&amp;gt; &#39;email&#39;,
                             &#39;accessed&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
                             &#39;expires&#39; =&amp;gt; &#39;2999-12-31 23:23:59&#39;
                           }
                         ],
            &#39;title&#39; =&amp;gt; &#39;Apps&#39;,
            &#39;id&#39; =&amp;gt; 2450784255,
            &#39;accessed&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
            &#39;expires&#39; =&amp;gt; &#39;2999-12-31 23:23:59&#39;,
            &#39;modified&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;
          }
        ];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;searching-and-updating-a-keepass-database:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Searching and updating a KeePass database&lt;/h3&gt;

&lt;p&gt;File::KeePass provides methods for searching for entries. In order to update an entry, we have to retrieve it, update it, and then save the database file. Because entries are just hashrefs, this is easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::KeePass;

my $kp_db = File::KeePass-&amp;gt;new;
$kp_db-&amp;gt;load_db(&#39;MyAppDetails.kdb&#39;, &#39;itsasecret&#39;);
$kp_db-&amp;gt;unlock; # enable changes

my $entry = $kp_db-&amp;gt;find_entry({ title =&amp;gt; &#39;email&#39; }); 
$entry-&amp;gt;{password} = &#39;mumsnottheword&#39;;

$kp_db-&amp;gt;save_db(&#39;MyAppDetails.kdb&#39;, &#39;itsasecret&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above we opened the database file, and used the &amp;ldquo;find_entry&amp;rdquo; method to search for our email entry. We then updated the password for the entry, and re-saved the database file. File::KeePass provides many additional methods for searching and updating groups and entries.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;File::KeePass has a simple API that works great and comes with comprehensive &lt;a href=&#34;https://metacpan.org/pod/File::KeePass&#34;&gt;documentation&lt;/a&gt;. I would recommend using the &amp;ldquo;.kdb&amp;rdquo; format as File::KeePass has &lt;a href=&#34;https://rt.cpan.org/Public/Dist/Display.html?Name=File-KeePass&#34;&gt;open issues&lt;/a&gt; for the &amp;ldquo;.kdbx&amp;rdquo; format.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F79%2F2014%2F3%2F24%2FSecure-your-passwords-with-KeePass-and-Perl&amp;amp;text=Secure+your+passwords+with+KeePass+and+Perl&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F79%2F2014%2F3%2F24%2FSecure-your-passwords-with-KeePass-and-Perl&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;Cover image ¬© &lt;a href=&#34;http://www.flickr.com/photos/danielsphotography/466435567/sizes/o/&#34;&gt;DanielSTL&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

