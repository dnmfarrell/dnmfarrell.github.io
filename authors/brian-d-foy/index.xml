<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brian D Foy on Perl programming news, code and culture</title>
    <link>http://perltricks.com/authors/brian-d-foy/</link>
    <description>Recent content in Brian D Foy on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Apr 2016 08:32:57 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/authors/brian-d-foy/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Perl Jam VI: The Return of the Camel</title>
      <link>http://perltricks.com/article/perl-jam-iv-return-of-the-camel/</link>
      <pubDate>Fri, 01 Apr 2016 08:32:57 +0000</pubDate>
      
      <guid>http://perltricks.com/article/perl-jam-iv-return-of-the-camel/</guid>
      <description>

&lt;p&gt;A couple of recent presentations about Perl&amp;rsquo;s security have focused on the &lt;a href=&#34;http://www.metacpan.org/module/CGI&#34;&gt;CGI module&lt;/a&gt; and &lt;a href=&#34;https://www.bugzilla.org&#34;&gt;Bugzilla&lt;/a&gt;. David Farrell responded to these in &lt;a href=&#34;http://perltricks.com/article/netanel-rubins-perljam-circus/&#34;&gt;Netanel Rubin&amp;rsquo;s Perl Jam circus&lt;/a&gt;. There are much worse problems with Perl that we should think about.&lt;/p&gt;

&lt;h3 id=&#34;perl-s-rounding-problem:895dfc94e45590b36c5dd569303f6b79&#34;&gt;Perl&amp;rsquo;s rounding problem&lt;/h3&gt;

&lt;p&gt;Perl&amp;rsquo;s approved way of rounding numbers goes through &lt;code&gt;(s)printf&lt;/code&gt;, but there&amp;rsquo;s a problem. In short, it does the wrong thing.&lt;/p&gt;

&lt;p&gt;Most people were taught the rule that 1, 2, 3, 4 round down to 0, and that 5, 6, 7, 8, and 9 round up to the next 0. That means that more digits round up than round down, introducing a systematic bias into any computations where you might round. You shouldn&amp;rsquo;t have to watch &lt;a href=&#34;http://www.imdb.com/title/tt0086393/&#34;&gt;Superman III&lt;/a&gt; to realize the disasterous global consequences this has.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s more than one way to round a number. Most want to get to the nearest number, but if you are half way between, there are options. There are more than two ways. There are more than three. There are, well, a lot of ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Round half up&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half down&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half toward zero&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half away from zero&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half to even&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half to odd&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half alternately up and down&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half stochastically&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the GNU C compiler (or something based on it), you round half to even as the default. Perl relies on this behavior.&lt;/p&gt;

&lt;p&gt;$ perl -e &amp;lsquo;printf &amp;ldquo;%.0f\n&amp;rdquo;, shift&amp;rsquo; 1.5
  2&lt;/p&gt;

&lt;p&gt;$ perl -e &amp;lsquo;printf &amp;ldquo;%.0f\n&amp;rdquo;, shift&amp;rsquo; 2.5
  2&lt;/p&gt;

&lt;p&gt;Every time you try this you get the same answer (so, no stochastic or alternate rounding). The GNU C compiler can also use floor, ceiling, or truncate, but those have similar problems.&lt;/p&gt;

&lt;p&gt;As you are rounding, you are going to get more even numbers than odd numbers. If you are writing banking software, &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.91.8055&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;assymetric currency rounding&lt;/a&gt; could destabilize a currency. The Risks Digest has several entries for &lt;a href=&#34;http://catless.ncl.ac.uk/php/risks/search.php?query=rounding&#34;&gt;security problems in rounding&lt;/a&gt;. These issues are much worse than some lame &amp;ldquo;attack&amp;rdquo; on CGI.pm because a programmer can&amp;rsquo;t read.&lt;/p&gt;

&lt;h3 id=&#34;the-modulus-of-negative-numbers:895dfc94e45590b36c5dd569303f6b79&#34;&gt;The modulus of negative numbers&lt;/h3&gt;

&lt;p&gt;Among the heated technical debates, such as vi or emacs, tabs or spaces, or Star Wars or Star Trek (the first answer in each is the right one), the ones that matter, such as the correct value of modulo addition with negative numbers, are overlooked.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Binary &amp;ldquo;%&amp;rdquo; is the modulo operator, which computes the division remainder of its first argument with respect to its second argument. Given integer operands $m and $n : If $n is positive, then $m % $n is $m minus the largest multiple of $n less than or equal to $m. If $n is negative, then $m % $n is $m minus the smallest multiple of $n that is not less than $m (that is, the result will be less than or equal to zero).&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;The perldoc documentation for the % operators&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The modulo operators take two numbers and does something to them. For &lt;code&gt;$m % $n&lt;/code&gt;, you have:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;$m&lt;/th&gt;
&lt;th&gt;$n&lt;/th&gt;
&lt;th&gt;%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;$m - $n * $i ∈ $n * $i &amp;lt;= $m and ($m - $n * $i) &amp;lt; $n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;$m - $n * $i ∈ $n * $i &amp;gt;= $m and ($m - $n * $i) &amp;lt; $n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my( $m, $n ) = @ARGV;

$m //= 137;
$n //= 13;

my $template = &amp;lt;&amp;lt;&#39;HERE&#39;;
m = %d  n = %d

   $m %  $n = %d
  -$m %  $n = %d
   $m % -$n = %d
  -$m % -$n = %d
HERE

printf $template,
   $m, $n,
   $m %  $n,
  -$m %  $n,
   $m % -$n,
  -$m % -$n;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this give different results depending on the location of the unary minus operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl modulo.pl 137 12
m = 137  n = 12

   $m %  $n = 5
  -$m %  $n = 7
   $m % -$n = -7
  -$m % -$n = -5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That unary minus operator is two precedence levels above the modulo operator. That Perl makes one operator better than another is a whole other issue, but that&amp;rsquo;s the way it is and we can&amp;rsquo;t fix it now. Try it again. Use the parentheses (a feature Perl stole from LISP, which had some extra to spare) to separate the operators:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my( $m, $n ) = @ARGV;

$m //= 137;
$n //= 13;

my $template = &amp;lt;&amp;lt;&#39;HERE&#39;;
m = %d  n = %d

    $m %  $n  = %d
  -($m %  $n) = %d
    $m % -$n  = %d
  -($m % -$n) = %d
HERE

printf $template,
    $m, $n,
    $m %  $n,
  -($m %  $n),
    $m % -$n,
  -($m % -$n);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You get different numbers this time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;m = 137  n = 12

    $m %  $n  = 5
  -($m %  $n) = -5
    $m % -$n  = -7
  -($m % -$n) = 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it&amp;rsquo;s even worse, because those numbers aren&amp;rsquo;t what the documentation says they should be. &amp;ldquo;If &lt;code&gt;$n&lt;/code&gt; is positive, then &lt;code&gt;$m % $n&lt;/code&gt; is &lt;code&gt;$m&lt;/code&gt; minus the largest multiple of &lt;code&gt;$n&lt;/code&gt; less than or equal to &lt;code&gt;$m&lt;/code&gt;&amp;rdquo;. Let&amp;rsquo;s take the case of -137 and 12. There are a couple of ways to look at this. If a &amp;ldquo;multiple&amp;rdquo; we call &lt;code&gt;$i&lt;/code&gt; must be positive, there is no value such that &lt;code&gt;$n * $i&lt;/code&gt; will be less than or equal to any negative value. If that &lt;code&gt;$i&lt;/code&gt; can be negative, the word &amp;ldquo;largest&amp;rdquo;  is a bit troublesome. Wikipedia says &lt;a href=&#34;https://en.wikipedia.org/wiki/Large_numbers&#34;&gt;large numbers are positive&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;fake-random-numbers:895dfc94e45590b36c5dd569303f6b79&#34;&gt;Fake random numbers&lt;/h3&gt;

&lt;p&gt;Perl has a &lt;a href=&#34;http://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt; function. It claims to return &amp;ldquo;a random fractional number greater than or equal to 0&amp;rdquo;, but it doesn&amp;rsquo;t. It&amp;rsquo;s not random. It&amp;rsquo;s fake random in a way that might work if you only want to use one of them to complete a homework assignment in a beginning programming course in middle school. Although the documentation includes a footnote saying &amp;ldquo;You should not rely on it in security-sensitive situations&amp;rdquo;, it does not say &amp;ldquo;Don&amp;rsquo;t ever use this.&amp;rdquo; like it should. Try this program:&lt;/p&gt;

&lt;p&gt;$ perl -le &amp;lsquo;srand(137); print rand for 1 .. 10&amp;rsquo;&lt;/p&gt;

&lt;p&gt;It outputs some numbers, which might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.470744323291914
0.278795581867115
0.263413724062172
0.646815254210146
0.958771364426031
0.3733677954733
0.561358958619476
0.537256242282716
0.967152799238111
0.846555037715689
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run it again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.470744323291914
0.278795581867115
0.263413724062172
0.646815254210146
0.958771364426031
0.3733677954733
0.561358958619476
0.537256242282716
0.967152799238111
0.846555037715689
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not only do you get the same numbers, but you get them in the same order. Perl tries to hide this from you by automatically calling &lt;code&gt;srand&lt;/code&gt; and giving it a &amp;ldquo;random&amp;rdquo; number to start the completely repeatable sequence.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s not the only problem with these fake random numbers (which, again, Perl&amp;rsquo;s documentation never calls &amp;ldquo;fake&amp;rdquo;). They can only represent certain discrete values. See, for instance, the thread that &lt;a href=&#34;https://www.quora.com/Why-does-perl-rand-on-Win32-never-generate-a-value-between-0-890655528357032-and-0-890685315537721&#34;&gt;Why does perl rand() on Win32 never generate a value between 0.890655528357032 and 0.890685315537721?&lt;/a&gt;. On Windows, Perl uses 15 bits to represent the range of the fake random numbers instead of the 53 bits Perl could use.&lt;/p&gt;

&lt;p&gt;There are a variety of ways this can screw up if you use it in an application that keeps going and going. Eventually you come back to the beginning of the sequence, perhaps colliding with existing customer data.&lt;/p&gt;

&lt;h3 id=&#34;perl-s-lets-anyone-program:895dfc94e45590b36c5dd569303f6b79&#34;&gt;Perl&amp;rsquo;s lets anyone program&lt;/h3&gt;

&lt;p&gt;Perhaps the biggest problem with Perl is that anyone with a text editor can write a program and upload it to the internet. It&amp;rsquo;s a feature that Perl allows someone to get their work done, but the problem shows up when someone tries to generalize that to other people&amp;rsquo;s work. Projects such as &lt;a href=&#34;http://nms-cgi.sourceforge.net/&#34;&gt;Not Matt&amp;rsquo;s Scripts&lt;/a&gt; try to mitigate this by fixing the problem one script at a time. There are simply too many scripts to get to in the lifetime of the Universe.&lt;/p&gt;

&lt;h3 id=&#34;in-conclusion:895dfc94e45590b36c5dd569303f6b79&#34;&gt;In conclusion&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;ve made it this far without complaining on Twitter, Reddit, or Hacker News, congratulations. You know what day of the year it is.&lt;/p&gt;

&lt;p&gt;These are real issues, though, and if your application is senstive to small differences in numbers (such as calculating fundamental constants of the universe or pension fund allocations), you&amp;rsquo;re probably using sophisticated number libraries and have various levels of audits to verify the results.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magical tied scalars</title>
      <link>http://perltricks.com/article/magical-tied-scalars/</link>
      <pubDate>Tue, 16 Feb 2016 09:50:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/magical-tied-scalars/</guid>
      <description>&lt;p&gt;Perl&amp;rsquo;s &lt;code&gt;tie&lt;/code&gt; mechanism allows me to create something that looks like a scalar but does anything I want it to do. I can change how the familiar scalar interface of simple access and assignment actually work. I&amp;rsquo;ve found this so useful at times that I devoted an entire chapter of &lt;a href=&#34;http://www.masteringperl.org/&#34;&gt;Mastering Perl&lt;/a&gt; to it.&lt;/p&gt;

&lt;p&gt;I think I fell in love with this technique when it allowed me to solve a seemly intractable problem creating some HTML by hand (so you know this must have been a long time ago). Someone had created a library to create an HTML table that allowed me to set the color of the table rows by passing in a scalar value for &lt;code&gt;tr&lt;/code&gt;&amp;rsquo;s &lt;code&gt;bgcolor&lt;/code&gt; attribute. Fortunately I&amp;rsquo;ve forgotten who that was or what the code looked like, but it was something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub print_table_and_stuff {
    my( $color, @lots_of_other_arguments ) = @_;

    ... lots of code ...
    print &amp;quot;&amp;lt;table&amp;gt;&amp;quot;;

    foreach my $item ( @items ) {
            print qq(&amp;lt;tr bgcolor=&amp;quot;$color&amp;quot;&amp;gt;);
            ... fill in the cells ...
            print &amp;quot;&amp;lt;/tr&amp;gt;&amp;quot;;
            }

    ... lots of code ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besides all the goofy things going on with the code, such as printing directly and not using templates, whoever wrote it wasn&amp;rsquo;t thinking that anyone would want to have tables with alternating (or even rotating) row colors. There was a time before that was a thing and the code pre-dated even that. My task was to get alternating row colors with as little disturbance as possible.&lt;/p&gt;

&lt;p&gt;I could have replaced the subroutine using one of the techniques I showed in &lt;a href=&#34;http://www.masteringperl.org/&#34;&gt;Mastering Perl&lt;/a&gt;, but there was something simpler. If I could get &lt;code&gt;$color&lt;/code&gt; to change on its own, I wouldn&amp;rsquo;t have to mess with the code.&lt;/p&gt;

&lt;p&gt;Thus, I invented &lt;a href=&#34;https://metacpan.org/pod/Tie::Cycle&#34;&gt;Tie::Cycle&lt;/a&gt;. The &lt;code&gt;tie&lt;/code&gt; interface allows me to decide what a scalar should do when I access it or store it. I supply code behind both of those operations by defining special subroutines. Here&amp;rsquo;s an extract of the code that shows those special methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Tie::Cycle;
use strict;

sub TIESCALAR {
        my( $class, $list_ref ) = @_;
        my $self = bless [], $class;

        unless( $self-&amp;gt;STORE( $list_ref ) ) {
                carp &amp;quot;Argument must be an array reference&amp;quot;;
                return;
                }

        return $self;
        }

sub FETCH {
        my( $self ) = @_;

        my $index = $self-&amp;gt;[CURSOR_COL]++;
        $self-&amp;gt;[CURSOR_COL] %= $self-&amp;gt;_count;

        return $self-&amp;gt;_item( $index );
        }

sub STORE {
        my( $self, $list_ref ) = @_;
        return unless ref $list_ref eq ref [];
        my @shallow_copy = map { $_ } @$list_ref;

        $self-&amp;gt;[CURSOR_COL] = 0;
        $self-&amp;gt;[COUNT_COL]  = scalar @shallow_copy;
        $self-&amp;gt;[ITEM_COL]   = \@shallow_copy;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;tie&lt;/code&gt; interface includes the &lt;code&gt;TIESCALAR&lt;/code&gt; method that creates the &lt;code&gt;tied&lt;/code&gt; object, the &lt;code&gt;FETCH&lt;/code&gt; method that decides how to return a value, and the &lt;code&gt;STORE&lt;/code&gt; method that decides how to store a value. In this case, I want to store an array of values and cycle through them. Each time I access the scalar, Perl calls &lt;code&gt;FETCH&lt;/code&gt;. Each time it calls &lt;code&gt;FETCH&lt;/code&gt; I increment a counter so I&amp;rsquo;ll get the next value. When I get to the end, I wrap around to the beginning of the array.&lt;/p&gt;

&lt;p&gt;In this short bit of code, I create the tied scalar by calling &lt;code&gt;tie&lt;/code&gt; with the target scalar, the module name that defines the interface, and the arguments to pass to &lt;code&gt;TIESCALAR&lt;/code&gt;. After that, I use &lt;code&gt;$scalar&lt;/code&gt; as a normal scalar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use Tie::Cycle;

tie my $scalar, &#39;Tie::Cycle&#39;, [ qw(red green blue) ];

my $count;
while( $count++ &amp;lt; 10 ) {
        say $scalar;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each time through the &lt;code&gt;while&lt;/code&gt;, I output the value of &lt;code&gt;$scalar&lt;/code&gt;. It doesn&amp;rsquo;t look like I&amp;rsquo;m doing anything fancy, but I&amp;rsquo;m implicitly calling &lt;code&gt;Tie::Cycle::FETCH&lt;/code&gt; each time. Now the colors rotate.&lt;/p&gt;

&lt;p&gt;This is a bit more fun when I cycle through colored boxes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use open qw(:std :utf8);

use Tie::Cycle;
use Term::ANSIColor;

tie my $scalar, &#39;Tie::Cycle&#39;, [
        map { colored( [ $_ ], &amp;quot;\x{25AE}&amp;quot; ) }
                qw(red green blue)
        ];

my $count;
while( $count++ &amp;lt; 10 ) {
        print $scalar;
        }
print &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With an appropriate terminal, I see a series of Christmas lights.&lt;/p&gt;

&lt;p&gt;Recently, David Farrell had a similar problem. He could pass a value to a method that gave it a delay time to retry if it failed. That&amp;rsquo;s a nice feature, but he could only pass in a scalar. He didn&amp;rsquo;t want to pass in a value for two seconds and have it retry every two seconds. Instead, he wanted to back off. Wait two seconds the first time, then 4 seconds the next time, and eight seconds the next time. If something is falling over because you&amp;rsquo;re hitting it too frequently, you want to back off the pressure.&lt;/p&gt;

&lt;p&gt;However, using the same trick I used for HTML row colors, he was able to create what looks like a simple scalar variable but was really a method call that increased the value each time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
package Tie::Scalar::Ratio;

use parent &#39;Tie::Scalar&#39;;

sub TIESCALAR {
  my ($class, $ratio, $value) = @_;

  die &#39;Must provide ratio argument, a number to multiply the scalar value by&#39;
        unless $ratio &amp;amp;&amp;amp; $ratio =~ /^[\d.]+$/;

  bless {
        ratio =&amp;gt; $ratio,
        value =&amp;gt; $value,
  }, $class;
}

sub STORE {
  my ($self, $value) = @_;
  $self-&amp;gt;{value} = $value;
}

sub FETCH {
  my ($self) = @_;
  my $old_value = $self-&amp;gt;{value};
  $self-&amp;gt;{value} *= $self-&amp;gt;{ratio} if $self-&amp;gt;{value};
  return $old_value;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My program to demonstrate this is almost the same as my prior one. The part where I use &lt;code&gt;$scalar&lt;/code&gt; is the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use Tie::Scalar::Ratio;

tie my $scalar, &#39;Tie::Scalar::Ratio&#39;, 2, 37;

my $count;
while( $count++ &amp;lt; 10 ) {
        say $scalar;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each time I access the scalar, I get back the previous value multiplied by the ratio. In this case, I multiply the previous value by &lt;code&gt;2&lt;/code&gt; each time.&lt;/p&gt;

&lt;p&gt;This is a tidy solution because it fits into the code that&amp;rsquo;s already there. The existing code that expected a single value gets a scalar that changes its value each time.&lt;/p&gt;

&lt;p&gt;Instead of giving Tie::Scalar::Ratio, I&amp;rsquo;d like to give it a callback. David also created &lt;a href=&#34;https://metacpan.org/pod/Tie::Scalar::Callback&#34;&gt;Tie::Scalar::Callback&lt;/a&gt;. Each time I access the scalar, this module calls the subroutine I passed to it and give me back the result. The code looks similar to the others:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
package Tie::Scalar::Callback;

use parent &#39;Tie::Scalar&#39;;
use Carp qw(carp);

sub TIESCALAR {
  my ($class, $sub ) = @_;

  die &#39;Must provide subroutine reference argument&#39;
        unless $sub &amp;amp;&amp;amp; ref $sub eq ref sub {};

  bless $sub, $class;
}

sub STORE {
  carp &amp;quot;You can&#39;t assign to this tied scalar&amp;quot;;
}

sub FETCH {
  my ($self) = @_;
  return $self-&amp;gt;();
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a subroutine that does the same thing as the previous example by stores the state in the subroutine rather than in the tied object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $coderef = sub {
        state $value  = 1/2;
        state $factor = 2;
        $value *= $factor;
        }

tie my $scalar, &#39;Tie::Scalar::Callback&#39;, $sub;

my $count;
while( $count++ &amp;lt; 10 ) {
        say $scalar;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a simple callback, but I can make something a little more exotic. How about a sine-based function?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use Tie::Scalar::Callback;

my $coderef = sub {
        state $pi     = 3.14152926;
        state $eighth = $pi / 8;
        state $value  = 0;

        sprintf &#39;%.3f&#39;, abs sin( $value += $eighth );
        };

tie my $scalar, &#39;Tie::Scalar::Callback&#39;, $coderef;

my $count;
while( $count++ &amp;lt; 10 ) {
        say $scalar;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the output backs off and speeds up. There&amp;rsquo;s something that might be more useful. Perhaps I want to use the load average to decide the number:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Sys::LoadAvg qw(loadavg);
use Tie::Scalar::Callback;

my $coderef = sub {
        state $factor  = 5;

        my @loads = loadavg();

        $factor * $loads[-1];
        };

tie my $scalar, &#39;Tie::Scalar::Callback&#39;, $coderef;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, just for fun, here&amp;rsquo;s a tied scalar that creates the Fibonacci series using the inline &lt;code&gt;package NAMESPACE BLOCK&lt;/code&gt; syntax introduced in v5.14:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.14;

package Tie::Scalar::Fibonacci {
        use parent &#39;Tie::Scalar&#39;;
        use Carp qw(croak);
        use List::Util qw(sum);

        sub TIESCALAR {
                my( $class, $count ) = @_;
                $count = 2 unless defined $count;
                die &amp;quot;count must be a counting number&amp;quot; if $count =~ /[^0-9]/;
                die &amp;quot;count must be greater than 1&amp;quot;    if $count &amp;lt;= 1;

                my $array = [ ( 1 ) x ( $count ) ];
                bless $array, $class
                }
        sub STORE     { croak &amp;quot;You can&#39;t assign to this scalar!&amp;quot; }

        sub FETCH {
                my ($self) = @_;
                push @$self, sum( @$self );
                shift @$self;
                }
        }

tie my $scalar, &#39;Tie::Scalar::Fibonacci&#39;;

my $count;
while( $count++ &amp;lt; 10 ) {
        print $scalar, &#39; &#39;;
        }
print &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time I access it I get the next number in the Fibonacci series. Curiously, doing it this way, I&amp;rsquo;m computing a number that I&amp;rsquo;ll use in the future by pushing it onto the end and returning the oldest value by shifting it off the front. There&amp;rsquo;s no recursion here like in almost every example on the interwebs.&lt;/p&gt;

&lt;p&gt;But, it can generate other series too. Instead of looking at the previous two values, I can give &lt;code&gt;TIESCALAR&lt;/code&gt; a different number to specify how many previous numbers to sum:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;tie my $scalar, &#39;Tie::Scalar::Fibonacci&#39;, 5;

my $count;
while( $count++ &amp;lt; 10 ) {
        print $scalar, &#39; &#39;;
        }
print &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The idea is the same, but the sums are different. If you&amp;rsquo;ve used a tied variable in an interesting way, let us know about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Twitter as a datastore</title>
      <link>http://perltricks.com/article/210/2016/1/21/Twitter-as-a-datastore/</link>
      <pubDate>Thu, 21 Jan 2016 13:52:14 +0000</pubDate>
      
      <guid>http://perltricks.com/article/210/2016/1/21/Twitter-as-a-datastore/</guid>
      <description>&lt;p&gt;Why doesn&amp;rsquo;t anyone talk about Twitter as a data store? It&amp;rsquo;s a free account, they mostly have uptime, and you can easily control who can see the information. If you can do it in 140 characters (and &lt;a href=&#34;http://www.theverge.com/2015/8/12/9134175/twitter-direct-message-character-limit&#34;&gt;soon to be 10,000&lt;/a&gt;), it&amp;rsquo;s an easy way to store data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/excellent_nums&#34;&gt;Tweets by @excellent_nums&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m doing this for my &lt;a href=&#34;http://www.excellentnums.com&#34;&gt;excellent numbers project&lt;/a&gt; that does quite a bit of computing to find numbers with a particular property. This isn&amp;rsquo;t the only way I&amp;rsquo;m storing the numbers, but I had the idea of tweeting them as soon as I found them in case every other method failed. If I accidentally deleted the output files (did that), truncated and overwrote files (did that), or somehow screwed it up in another way (did that), the numbers are still on Twitter.&lt;/p&gt;

&lt;p&gt;I had another compelling reason, though. I wanted to get an alert on my phone when my program found another excellent number. Unfortunately, I&amp;rsquo;ve hitched my wagon to the iPhone. There are all sorts of complicated ways for me to get an alert but I already use Twitter and get alerts for that. So, I can have a backup store and an alert system using stuff I already have installed. I can spend more time on the math and less time on installing and managing Redis (which is easy too and deserves an article here) then coming up with a way to send new entries to my phone.&lt;/p&gt;

&lt;p&gt;I wrote about my setup in nonspecific terms in &lt;a href=&#34;http://www.masteringperl.org/2015/12/ive-found-over-200-excellent-numbers/&#34;&gt;Mastering Perl&lt;/a&gt;. I didn&amp;rsquo;t show any code, although it&amp;rsquo;s all in &lt;a href=&#34;https://github.com/briandfoy/excellent_numbers&#34;&gt;the excellent_numbers GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before you start, you need some Twitter credentials to use their API through the &lt;a href=&#34;https://metacpan.org/pod/Net::Twitter&#34;&gt;Net::Twitter&lt;/a&gt; module. Start at &lt;a href=&#34;http://apps.twitter.com&#34;&gt;Twitter Application Management&lt;/a&gt; to get the four special strings you&amp;rsquo;ll need (&lt;a href=&#34;http://iag.me/socialmedia/how-to-create-a-twitter-app-in-8-easy-steps/&#34;&gt;&amp;ldquo;How to Register a Twitter App in 8 Easy Steps&amp;rdquo; has a good description of the steps&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Consumer Key (API Key)&lt;/p&gt;

&lt;p&gt;Consumer Secret (API Secret)&lt;/p&gt;

&lt;p&gt;Access Token&lt;/p&gt;

&lt;p&gt;Access Token Secret&lt;/p&gt;

&lt;p&gt;The Net::Twitter module needs these strings to create its object. The module handles all of the OAuth details without me having to think about them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Net::Twitter;

my $nt = Net::Twitter-&amp;gt;new(
   traits   =&amp;gt; [qw/OAuth API::RESTv1_1/],
   map { $_ =&amp;gt; $ENV{&amp;quot;$_&amp;quot;} || die &amp;quot;ENV $_ not set&amp;quot; }
           qw(     
                consumer_secret
                consumer_key
                access_token
                access_token_secret
                )
   );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my excellent number program, I wanted to be as simple as possible. I didn&amp;rsquo;t want to re-tweet numbers I already tweeted so I fetched everything I&amp;rsquo;ve tweeted so far and stored it in a hash. Twitter pages in groups of 200 tweets maximum, and this didn&amp;rsquo;t seem like it would be a problem a couple of months ago but I&amp;rsquo;m now up to over 350 of them.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s easy to fetch a bunch of statuses with the &lt;code&gt;user_timeline&lt;/code&gt; method. I need to tell it where to start (&lt;code&gt;min_id&lt;/code&gt; or &lt;code&gt;since_id&lt;/code&gt;). Twitter returns huge JSON structures with lots of information, but Net::Twitter turns that into a Perl data structure for me. I dump what they send and pull out the parts I want:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %tweets;
STATUSES: while( 1 ) {
  state $min_id = 1;
  state $fetch_size = 200;

  my $max_key = $min_id == 1 ? &#39;since_id&#39; : &#39;max_id&#39;;

  my $statuses = $nt-&amp;gt;user_timeline({
          count       =&amp;gt; $fetch_size,
          screen_name =&amp;gt; &#39;excellent_nums&#39;,
          $max_key    =&amp;gt; $min_id,
          });     

  say { interactive } &amp;quot;Found &amp;quot; . @$statuses . &amp;quot; statuses&amp;quot;;
  $min_id = $statuses-&amp;gt;[-1]{id} - 1 if $min_id == 1;

  foreach my $status ( @$statuses ) {
          $min_id = $status-&amp;gt;{id} - 1 if $min_id &amp;gt; $status-&amp;gt;{id};
          my( $number ) = $status-&amp;gt;{text} =~ m/(\d+)/;
          warn &amp;quot;[$number] has more than one tweet!\n&amp;quot; if exists $tweets{$number};
          $tweets{$number} = undef;
          unless( is_excellent( $number ) ) {
                  warn &amp;quot;Tweet for [$number] is an unexcellent error\n&amp;quot;;
                  }       
          }       

  last if @$statuses &amp;lt; $fetch_size; # must be last page
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This part is complicated for another reason. At the start of the project I was generating the excellent numbers sequentially. When that&amp;rsquo;s the case I only needed to look at the previous tweet to see if it was less than the number I just discovered. When I got to the big numbers, I went wide and worked on different parts of the range in parallel and sometimes on several computers simultaneously. I started to discover the numbers out of order and tweet them out of order. Hence, the paging. I could store the list of tweeted numbers locally, but that&amp;rsquo;s a hassle to manage too since that can be out of sync. I still might do that when this method runs out of steam. I&amp;rsquo;m not likely to get far beyond 500 numbers though.&lt;/p&gt;

&lt;p&gt;Notice that I also &lt;code&gt;warn&lt;/code&gt; if I run into a tweet with a number that I think is a duplicate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;warn &amp;quot;[$number] has more than one tweet!\n&amp;quot; if exists $tweets{$number};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this was a bigger problem (and it&amp;rsquo;s not anymore), I could use the &lt;code&gt;destroy_status&lt;/code&gt; method to automatically get rid of it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$nt-&amp;gt;destroy_status( $status-&amp;gt;{id} ) if exists $tweets{$number};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I decided not to delete automatically from the program. It&amp;rsquo;s not a problem to have duplicates. It&amp;rsquo;s a bit messy, but it&amp;rsquo;s more messy to delete stuff I want to keep and to retweet it. That risk makes it not worth it for me. I don&amp;rsquo;t want another possible automated mess to clean up.&lt;/p&gt;

&lt;p&gt;Now I know everything I&amp;rsquo;ve tweeted previously and I&amp;rsquo;ve put them in &lt;code&gt;%tweets&lt;/code&gt;. The next part is to tweet what I&amp;rsquo;ve found and haven&amp;rsquo;t stored yet. I also store that in a local file (but remember I want the alerts and the backup!) that I used to populate &lt;code&gt;%numbers&lt;/code&gt;. I skip the numbers I already tweeted and use &lt;code&gt;update&lt;/code&gt; to make the new tweets. Storing new numbers is easy, and when I do it I want to tweet the new numbers in ascending order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;NUMBER: foreach my $number ( sort { $a &amp;lt;=&amp;gt; $b } keys %numbers ) {
  next NUMBER if exists $tweets{$number};

  $nt-&amp;gt;update( &amp;quot;$number is excellent&amp;quot; );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This used to be part of the program that found the excellent numbers, but I switched to C for a huge performance bump. I still wanted to tweet from Perl, which is easy. Perl&amp;rsquo;s become the glue holding together lots of different things.&lt;/p&gt;

&lt;p&gt;Once I can read from, post to, and delete from twitter, other applications (or even real people) can follow it. It can be public or private. It&amp;rsquo;s not sophisticated. It&amp;rsquo;s uptime isn&amp;rsquo;t going to win any awards. But it&amp;rsquo;s free and easy for my small task.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Display real-time data with Curses</title>
      <link>http://perltricks.com/article/197/2015/10/6/Display-real-time-data-with-Curses/</link>
      <pubDate>Tue, 06 Oct 2015 13:18:48 +0000</pubDate>
      
      <guid>http://perltricks.com/article/197/2015/10/6/Display-real-time-data-with-Curses/</guid>
      <description>&lt;p&gt;Sometimes a terminal interface is the easiest way to get an answer, and when it is, I like to use Curses to make the experience pleasant. In this article, I&amp;rsquo;ll rewrite a Curses program I&amp;rsquo;ve written many times, mostly because I forget where I had put it the last time I created it (and this time I found that I&amp;rsquo;d posted it to &lt;a href=&#34;http://www.perlmonks.org/index.pl/jacques?node_id=388218&#34;&gt;Perlmonks&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Every time I reinvent it I write it a little differently than I did before, and now I want to update it for Perl&amp;rsquo;s new features, mainly its &lt;a href=&#34;http://www.effectiveperlprogramming.com/2015/04/use-v5-20-subroutine-signatures/&#34;&gt;subroutine signatures&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One day I had a small task to prune a directory tree and I wanted to look at the largest files in it. I knew about &lt;code&gt;du&lt;/code&gt; and that it could show me a list of files and their sizes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ du -a
16  ./apache2/extra
16  ./apache2/original/extra
32  ./apache2/original
0   ./apache2/other
16  ./apache2/users
192 ./apache2
0   ./asl
104 ./certificates
...
12904
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is the command&amp;rsquo;s depth-first traversal. I could play various tricks to sort the output once I had it, but for a large directory I want to see the results as they come in. Perl, being the Unix glue language (Swiss Army Chainsaw, etc.), is perfect for this. I can read the real-time output of &lt;code&gt;du&lt;/code&gt; and display it how I like.&lt;/p&gt;

&lt;p&gt;The first part is easy. I can open a pipe to the external command (see my earlier article &lt;a href=&#34;http://perltricks.com/article/182/2015/7/15/Stupid-open---tricks&#34;&gt;Stupid open tricks&lt;/a&gt;). This time, I use the three-argument pipe-open instead of the two-argument form I&amp;rsquo;d used earlier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $pipe, &#39;-|&#39;, &#39;du -a&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that, I need to display the data. My concept is that the on-screen list will update with the largest files so far. I take each line of output, split it into its size and filename, and add them to the list. I&amp;rsquo;ve created a class to handle that, including the parts that decide which files are large enough to display:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $files = Local::files-&amp;gt;new;

while( &amp;lt;$pipe&amp;gt; ) {
  chomp;
  my( $size, $file ) = split /\s+/, $_, 2;
  next if -d $file;
  next if $file eq &amp;quot;.&amp;quot;;
  $files-&amp;gt;add( $size, &amp;quot;$file&amp;quot; );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next part I update for Perl 5.12&amp;rsquo;s &lt;a href=&#34;http://www.effectiveperlprogramming.com/2013/08/declare-packages-outside-of-their-block/&#34;&gt;package NAME BLOCK&lt;/a&gt; syntax that allows me to declare the &lt;code&gt;package&lt;/code&gt; outside of its block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Local::files {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest is list manipulation and Curses stuff. I won&amp;rsquo;t go through the list code. Basically, if the next item is greater than the size of the last element in the list, the new, larger element replaces the existing one. After that, I resort the list.&lt;/p&gt;

&lt;p&gt;The setup for Curses is easy. It knows the screen size already:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub init ($self) {   
  initscr;
  curs_set(0); # hide cursor
  $win = Curses-&amp;gt;new;
    
  for( my $i = MAX; $i &amp;gt;= 0; $i-- ) {
    $self-&amp;gt;size_at( $i, undef );
    $self-&amp;gt;name_at( $i, &#39;&#39; );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I need to remember to undo all the magic that Curses does by calling &lt;code&gt;endwin&lt;/code&gt; at the end, so I put the &lt;code&gt;DESTROY&lt;/code&gt; right after the part I go through the initial setup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub DESTROY { endwin; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once I have the sorted list, I have to draw it to the screen. This involves two things. I need to erase what&amp;rsquo;s already there so a shorter filename doesn&amp;rsquo;t leave parts of a longer filename it might replace. The &lt;code&gt;addstr&lt;/code&gt; puts text on the screen (the top-left corner being (1,1)). None of the new text shows up until I call &lt;code&gt;refresh&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub draw ($self) {
  for( my $i = 0; $i &amp;lt; MAX; $i++ ) {
    next if $self-&amp;gt;size_at( $i ) == 0 or $self-&amp;gt;name_at( $i ) eq &#39;&#39;;
    $win-&amp;gt;addstr( $i,  1, &amp;quot; &amp;quot; x $Curses::COLS );
    $win-&amp;gt;addstr( $i,  1, sprintf( &amp;quot;%8d&amp;quot;, $self-&amp;gt;[$i][SIZE] || &#39;&#39; )  );
    $win-&amp;gt;addstr( $i, 10, $self-&amp;gt;name_at( $i ) );
    $win-&amp;gt;refresh;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I have a little script that makes some fancy output to the screen as I sort the list of largest files in real time. Here&amp;rsquo;s a run against my &lt;a href=&#34;https://metacpan.org/pod/CPAN::Mini&#34;&gt;MiniCPAN&lt;/a&gt; directory:&lt;/p&gt;

&lt;p&gt;The way I&amp;rsquo;ve written it, I have to run it from the directory I want to check. I can avoid all sorts of nonsense with taint-checking and weird directory names that way. You could easily make it work otherwise. You could even adapt this program to list something else. The list management stuff is already there and it doesn&amp;rsquo;t really care about the particular problem. The full code is on &lt;a href=&#34;https://github.com/PerlTricks/du-curses/blob/master/curses.pl&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stupid open() tricks</title>
      <link>http://perltricks.com/article/182/2015/7/15/Stupid-open---tricks/</link>
      <pubDate>Wed, 15 Jul 2015 12:19:04 +0000</pubDate>
      
      <guid>http://perltricks.com/article/182/2015/7/15/Stupid-open---tricks/</guid>
      <description>

&lt;p&gt;The &lt;code&gt;open&lt;/code&gt; function can do much more than you probably realize. If you read enough about Perl, you&amp;rsquo;ll start to notice the theme that everyone expects you to use the three-argument &lt;code&gt;open&lt;/code&gt;. There&amp;rsquo;s much more that the &lt;code&gt;open&lt;/code&gt; can do. Some of these &amp;ldquo;stupid open() tricks&amp;rdquo; may be useful, but they may also be dangerous. These tricks were performed on a closed course by a professional driver. Do not attempt at home. Or work. And, to focus on &lt;code&gt;open&lt;/code&gt;, I&amp;rsquo;ve left off all of the error checking.&lt;/p&gt;

&lt;h3 id=&#34;no-explicit-filename:71880d4d5f641ca9776afe8033e8612a&#34;&gt;No explicit filename&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a one-argument form of &lt;code&gt;open&lt;/code&gt; that takes only a bareword filehandle. In this example, when I open the filehandle &lt;code&gt;F&lt;/code&gt; with no other arguments, Perl uses the package scalar variable of the same name as the filename:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;our $F;
while( $F = shift @ARGV ) {
  open F;
  while(  ) { print }
  close F;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This might seem a bit silly, but as many shortcuts like this, consider the one-liner and scripting side of Perl. Imagine I want to go through a bunch of files on the command line, but some of those I want to skip. I can&amp;rsquo;t simply use &lt;code&gt;-n&lt;/code&gt; because that opens all the files for me. I have to handle that myself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl -e &#39;while($F=shift){next if$F=~/\.jpg/;open F;while(&amp;lt;F&amp;gt;){print;exit if /Perl/}}&#39; *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe you&amp;rsquo;ll need that once in life. Maybe you&amp;rsquo;ll never want to use it. Still, there it is.&lt;/p&gt;

&lt;h3 id=&#34;create-an-anonymous-temporary-file:71880d4d5f641ca9776afe8033e8612a&#34;&gt;Create an anonymous temporary file&lt;/h3&gt;

&lt;p&gt;If I give &lt;code&gt;open&lt;/code&gt; a filename of an explicit &lt;code&gt;undef&lt;/code&gt; and the read-write mode (&lt;code&gt;+&amp;gt;&lt;/code&gt; or &lt;code&gt;+&amp;lt;&lt;/code&gt;), Perl opens an anonymous temporary file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;+&amp;gt;&#39;, undef;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perl actually creates a named file and opens it, but immediately unlinks the name. No one else will be able to get to that file because no one else has the name for it. If I had used &lt;a href=&#34;https://metacpan.org/pod/File::Temp&#34;&gt;File::Temp&lt;/a&gt;, I might leave the temporary file there, or something else might be able to see it while I&amp;rsquo;m working with it.&lt;/p&gt;

&lt;h3 id=&#34;print-to-a-string:71880d4d5f641ca9776afe8033e8612a&#34;&gt;Print to a string&lt;/h3&gt;

&lt;p&gt;If my &lt;strong&gt;perl&lt;/strong&gt; is compiled with PerlIO (it probably is), I can open a filehandle on a scalar variable if the filename argument is a reference to that variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;gt;&#39;, \ my $string;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is handy when I want to capture output for an interface that expects a filehandle:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;something_that_prints( $fh );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;$string&lt;/code&gt; contains whatever was printed by the function. I can inspect it by printing it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;say &amp;quot;I captured:\n$string&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;read-lines-from-a-string:71880d4d5f641ca9776afe8033e8612a&#34;&gt;Read lines from a string&lt;/h3&gt;

&lt;p&gt;I can also read from a scalar variable by opening a filehandle on it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;lt;&#39;, \ $string;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can play with the string line-by-line without messing around with regex anchors or line endings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;while( &amp;lt;$fh&amp;gt; ) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I write about these sorts of filehandle-on-string tricks in &lt;a href=&#34;http://www.effectiveperlprogramming.com&#34;&gt;Effective Perl Programming&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;make-a-pipeline:71880d4d5f641ca9776afe8033e8612a&#34;&gt;Make a pipeline&lt;/h3&gt;

&lt;p&gt;Most Unix programmers probably already know that they can read the output from a command as the input for another command. I can do that with Perl&amp;rsquo;s &lt;code&gt;open&lt;/code&gt; too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;

open my $pipe, &#39;-|&#39;, &#39;date&#39;;
while( &amp;lt;$pipe&amp;gt; ) {
  say &amp;quot;$_&amp;quot;;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This reads the output of the &lt;code&gt;date&lt;/code&gt; system command and prints it. But, I can have more than one command in that pipeline. I have to abandon the three-argument form which purposely prevents this nonsense:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $pipe, qq(cat &#39;$0&#39; | sort |);
while( &amp;lt;$pipe&amp;gt; ) {
  print &amp;quot;$.: $_&amp;quot;;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This captures the text of the current program, sorts each line alphabetically and prints the output with numbered lines. I might get a &lt;a href=&#34;http://www.smallo.ruhr.de/award.html&#34;&gt;Useless Use of cat Award&lt;/a&gt; for that program that sorts the lines of the program, but it&amp;rsquo;s still a feature.&lt;/p&gt;

&lt;h3 id=&#34;gzip-on-the-fly:71880d4d5f641ca9776afe8033e8612a&#34;&gt;gzip on the fly&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;http://perltricks.com/article/162/2015/3/27/Gzipping-data-directly-from-Perl&#34;&gt;Gzipping data directly from Perl&lt;/a&gt;, I showed how I could compress data on the fly by using Perl&amp;rsquo;s gzip IO layer. This is handy when I have limited disk space:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;gt;:gzip&#39; $filename 
  or die &amp;quot;Could not write to $filename: $!&amp;quot;;

while( $_ = something_interesting() ) {
  print { $fh } $_;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can go the other direction as well, reading directly from compressed files when I don&amp;rsquo;t have enough space to uncompress them first:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;lt;:gzip&#39; $filename 
  or die &amp;quot;Could not read from $filename: $!&amp;quot;;

while( &amp;lt;$fh&amp;gt; ) {
  print;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;change-stdout:71880d4d5f641ca9776afe8033e8612a&#34;&gt;Change STDOUT&lt;/h3&gt;

&lt;p&gt;I can change the default output filehandle with &lt;code&gt;select&lt;/code&gt; if I don&amp;rsquo;t like standard output, but I can do that in another way. I can change &lt;code&gt;STDOUT&lt;/code&gt; for the times when the easy way isn&amp;rsquo;t fun enough. David Farrell showed some of this in &lt;a href=&#34;http://perltricks.com/article/45/2013/10/27/How-to-redirect-and-restore-STDOUT&#34;&gt;How to redirect and restore STDOUT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First I can say the &amp;ldquo;dupe&amp;rdquo; the standard output filehandle with the special &lt;code&gt;&amp;amp;&lt;/code&gt;mode:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;

open my $STDOLD, &#39;&amp;gt;&amp;amp;&#39;, STDOUT;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any of the file modes will work there as long as I append the &lt;code&gt;&amp;amp;&lt;/code&gt; to it.&lt;/p&gt;

&lt;p&gt;I can then re-open &lt;code&gt;STDOUT&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open STDOUT, &#39;&amp;gt;&amp;gt;&#39;, &#39;log.txt&#39;;
say &#39;This should be logged to log.txt.&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I&amp;rsquo;m ready to change it back, I do the same thing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open STDOUT, &#39;&amp;gt;&amp;amp;&#39;, $STDOLD;
say &#39;This should show in the terminal&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I only have the file descriptor, perhaps because I&amp;rsquo;m working with an old Unix programmer who thinks &lt;strong&gt;vi&lt;/strong&gt; is a crutch, I can use that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &amp;quot;&amp;lt;&amp;amp;=$fd&amp;quot; 
  or die &amp;quot;Could not open filehandle on $fd\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file descriptor has a three-argument form too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;lt;&amp;amp;=&#39;, $fd
  or die &amp;quot;Could not open filehandle on $fd\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can have multiple filehandles that go to the same place since they are different names for the same file descriptor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;

open my $fh, &#39;&amp;gt;&amp;gt;&amp;amp;=&#39;, fileno(STDOUT);

say         &#39;Going to default&#39;;
say $fh     &#39;Going to duped version. fileno &#39; . fileno($fh);
say STDOUT  &#39;Going to STDOUT. fileno &#39; . fileno($fh);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of these print to STDOUT.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Separate data and behavior with table-driven testing</title>
      <link>http://perltricks.com/article/178/2015/6/17/Separate-data-and-behavior-with-table-driven-testing/</link>
      <pubDate>Wed, 17 Jun 2015 13:09:04 +0000</pubDate>
      
      <guid>http://perltricks.com/article/178/2015/6/17/Separate-data-and-behavior-with-table-driven-testing/</guid>
      <description>&lt;p&gt;How can I easily run the same tests on different data without duplicating a lot of code? If I follow my usual pattern, I start off with a couple of tests where I write some code then cut-and-paste that a couple of times. I add a few more tests before I realize I have a mess. If I had the foresight to know that I would make a mess (again), I would have started with a table of data and a little bit of code that went through it.&lt;/p&gt;

&lt;p&gt;Consider a silly and small example of testing &lt;code&gt;sprintf&lt;/code&gt;-like behavior of &lt;a href=&#34;https://metacpan.org/pod/String::Sprintf&#34;&gt;String::Sprintf&lt;/a&gt;. I can use this module to create my own format specifiers, such as one to commify a number. I stole this mostly from its documentation, although I threw in the &lt;a href=&#34;http://www.effectiveperlprogramming.com/2015/04/use-v5-20-subroutine-signatures/&#34;&gt;v5.20 signatures feature&lt;/a&gt; and the &lt;a href=&#34;http://www.effectiveperlprogramming.com/2010/09/use-the-r-substitution-flag-to-work-on-a-copy/&#34;&gt;v5.14 non-destructive substitution operator&lt;/a&gt; because I love those features:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.20;
use feature qw(signatures);
no warnings qw(experimental::signatures);

use String::Sprintf;

my $f = String::Sprintf-&amp;gt;formatter(
  N =&amp;gt; sub {
    my($width, $value, $values, $letter) = @_;
    return commify(sprintf &amp;quot;%${width}f&amp;quot;, $value);
  });

say &amp;quot;Numbers are: &amp;quot; . 
  $f-&amp;gt;sprintf(
    &#39;%10.2N, %10.2N&#39;, 
    12345678.901, 87654.321
  );

sub commify ( $n ) {
  $n =~ s/(\.\d+)|(?&amp;lt;=\d)(?=(?:\d\d\d)+\b)/$1 || &#39;,&#39;/rge;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Numbers are: 12,345,678.90,   87,654.32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The mess I might make to test this starts with a single input and output with the &lt;a href=&#34;https://metacpan.org/pod/Test::More&#34;&gt;Test::More&lt;/a&gt; function &lt;code&gt;is&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.20;
use feature qw(signatures);
no warnings qw(experimental::signatures);

use Test::More;
    
sub commify ( $n ) {
  $n =~ s/(\.\d+)|(?&amp;lt;=\d)(?=(?:\d\d\d)+\b)/$1 || &#39;,&#39;/rge;
}

my $class = &#39;String::Sprintf&#39;;  
use_ok( $class );
    
my $f = String::Sprintf-&amp;gt;formatter(
  N =&amp;gt; sub {
    my($width, $value, $values, $letter) = @_;
    return commify(sprintf &amp;quot;%${width}f&amp;quot;, $value);
  });
    
isa_ok(  $f, $class );
can_ok( $f, &#39;sprintf&#39; );

is(  $f-&amp;gt;sprintf( &#39;%.2N&#39;, &#39;1234.56&#39; ), &#39;1,234.56&#39; );

done_testing();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I decide to test another value, and I think the easiest thing to do is to duplicate that line with &lt;code&gt;is&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;is(  $f-&amp;gt;sprintf( &#39;%.2N&#39;, &#39;1234.56&#39; ), &#39;1,234.56&#39; );
is(  $f-&amp;gt;sprintf( &#39;%.2N&#39;, &#39;1234&#39; ),    &#39;1,234.00&#39; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The particular thing to test isn&amp;rsquo;t the point of this article. It&amp;rsquo;s all the stuff around it that I want to highlight. Or, more correctly, I want to de-emphasize all this stuff around it. I had to duplicate the test although most of the structure is the same.&lt;/p&gt;

&lt;p&gt;I can convert those tests to a structure to hold the data and another structure for the behavior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @data = (
    [ ( 1234.56, &#39;1,234.56&#39; ) ],
    [ ( 1234,    &#39;1,234.00&#39; ) ],
);

foreach my $row ( @data ) {
  is(  $f-&amp;gt;sprintf( &#39;%.2N&#39;, $row-&amp;gt;[0] ), $row-&amp;gt;[1] );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can add many more rows to &lt;code&gt;@data&lt;/code&gt; but the meat of the code, that &lt;code&gt;foreach&lt;/code&gt; loop, doesn&amp;rsquo;t change.&lt;/p&gt;

&lt;p&gt;I can improve this though. So far I only test that one &lt;code&gt;sprintf&lt;/code&gt; template. I can add that to &lt;code&gt;@data&lt;/code&gt; too, and use that to make a label for the test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $ndot2_f = &#39;%.2N&#39;;

my @data = (
    [ $ndot2_f,( 1234.56, &#39;1,234.56&#39; ) ],
    [ $ndot2_f, ( 1234,    &#39;1,234.00&#39; ) ],
);

foreach my $row ( @data ) {
  is( $f-&amp;gt;sprintf( $row-&amp;gt;[0], $row-&amp;gt;[1] ), $row-&amp;gt;[2],
       &amp;quot;$row-&amp;gt;[1] with format $row-&amp;gt;[0] returns $row-&amp;gt;[2]&amp;quot;
   );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can add another test with a different format. If I had kept going the way I started, this would look like a new test because the format changed. Now the format is just part of the input:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $ndot2_f = &#39;%.2N&#39;;

my @data = (
    [ $ndot2_f, ( 1234.56, &#39;1,234.56&#39; ) ],
    [ $ndot2_f, ( 1234,    &#39;1,234.00&#39; ) ],
    [ &#39;%.0N&#39;  , ( 1234.49, &#39;1,234&#39;    ) ],
);

foreach my $row ( @data ) {
  is( $f-&amp;gt;sprintf( $row-&amp;gt;[0], $row-&amp;gt;[1] ), $row-&amp;gt;[2],
       &amp;quot;$row-&amp;gt;[1] with format $row-&amp;gt;[0] returns $row-&amp;gt;[2]&amp;quot;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As I go on things get more complicated. If a test fails, I want some extra information about which one failed. I&amp;rsquo;ll change up how I go through the table. In this case, I&amp;rsquo;ll use the &lt;a href=&#34;http://www.effectiveperlprogramming.com/2010/05/perl-5-12-lets-you-use-each-on-an-array/&#34;&gt;v5.12 feature&lt;/a&gt; that allows &lt;code&gt;each&lt;/code&gt; on an array so I get back the index and the value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;while( my( $index, $row ) = each @data ) {
  is( $f-&amp;gt;sprintf( $row-&amp;gt;[0], $row-&amp;gt;[1] ), $row-&amp;gt;[2],
       &amp;quot;$index: $row-&amp;gt;[1] with format $row-&amp;gt;[0] returns $row-&amp;gt;[2]&amp;quot;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My code for the test behavior changed but I didn&amp;rsquo;t have to mess with the input data at all. The particular code in this case doesn&amp;rsquo;t matter. This table-driven testing separates the inputs and the tests; that&amp;rsquo;s what you should pay attention to.&lt;/p&gt;

&lt;p&gt;It can get even better. So far, I&amp;rsquo;ve put all the input data in the test file itself, but now that it&amp;rsquo;s separate from the test code, I can grab the input from somewhere else. That might be a tab-separated values file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%.2N   1234.56 1,234.56 
%.2N    1234    1,234.00
%.0N    1234.49 1,234
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I create &lt;code&gt;@data&lt;/code&gt; in the test file by reading and parsing the external file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $test_data_fh, &#39;&amp;lt;&#39;, $test_file_name or die ...;

my @data;
while( &amp;lt;$test_data_fh&amp;gt; ) {
  chomp;
  push @data, split /\t/;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now none of the data are in the test file. And, there&amp;rsquo;s nothing special about a simple text file. I could do a little bit more work to take the data from an Excel file (perhaps the most useful wizard skill in business) or even a database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use DBI;
    
my $dbh = DBI-&amp;gt;connect( ... );
my $sth = $dbh-&amp;gt;prepare( &#39;SELECT * FROM tests&#39; );
    
$sth-&amp;gt;execute();
    
while( my $row = $sth-&amp;gt;fetchrow_arrayref ) {
  state $index = 0;

  is( $f-&amp;gt;sprintf( $row-&amp;gt;[0], $row-&amp;gt;[1] ), $row-&amp;gt;[2],
       $index++ . &amp;quot;: $row-&amp;gt;[1] with format $row-&amp;gt;[0] returns $row-&amp;gt;[2]&amp;quot;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s the idea. I separate the data and the tests to give myself some flexibility. How I access the data and how I test depend on my particular problems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Defend your code with Guard</title>
      <link>http://perltricks.com/article/173/2015/5/19/Defend-your-code-with-Guard/</link>
      <pubDate>Tue, 19 May 2015 12:55:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/173/2015/5/19/Defend-your-code-with-Guard/</guid>
      <description>&lt;p&gt;I can&amp;rsquo;t always trust my subroutines to leave the world in the same way that they found it. Perl has some features to help with this, but the &lt;a href=&#34;https://metacpan.org/pod/Guard&#34;&gt;Guard&lt;/a&gt; module goes much further.&lt;/p&gt;

&lt;p&gt;Consider the case where I want to change the current working directory temporarily in my subroutine. If I&amp;rsquo;m not careful, the rest of the ends up in an unexpected directory since &lt;code&gt;chdir&lt;/code&gt; has process-level effect:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub do_some_work {
  state $dir = &#39;/usr/local/etc&#39;;
  chdir $dir or die &amp;quot;Could not change to $dir! $!&amp;quot;;
  
  ...; # do some work
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since I don&amp;rsquo;t change back to the starting directory, after I call &lt;code&gt;do_some_work&lt;/code&gt;, the rest of the program uses &lt;code&gt;/usr/local/etc&lt;/code&gt; as the base to resolve relative paths.&lt;/p&gt;

&lt;p&gt;If I were careful, I would have done the work to save the current working directory before I changed it, and I would have changed back to that directory. The &lt;code&gt;getcw&lt;/code&gt; from the &lt;a href=&#34;https://metacpan.org/pod/Cwd&#34;&gt;Cwd&lt;/a&gt; module from the Standard Library:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Cwd qw(getcwd);

sub do_some_work {
  state $dir = &#39;/usr/local/etc&#39;;
  
  my $old_directory = getcwd();
  chdir $dir or die &amp;quot;Could not change to $dir! $!&amp;quot;;
  
  ...; # do some work
  
  chdir $old_directory 
    or die &amp;quot;Could not change back to $old_directory! $!&amp;quot;;
    
  return $value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s too much work. I have long wished that the &lt;code&gt;chdir&lt;/code&gt; would return the old directory like &lt;code&gt;select&lt;/code&gt; returns the current default filehandle. Instead, I use a module with an imported subroutine.&lt;/p&gt;

&lt;p&gt;I also have to call another &lt;code&gt;chdir&lt;/code&gt; when I&amp;rsquo;m done, and I probably have to add some extra code to return the right value since I can&amp;rsquo;t easily organize the code to use Perl&amp;rsquo;s nifty last-evaluated-expression idiom (although Perl 5.20 optimizes &lt;a href=&#34;http://www.effectiveperlprogramming.com/2014/06/perl-5-20-optimizes-return-at-the-end-of-a-subroutine/&#34;&gt;return at the end of a subroutine&lt;/a&gt;). It offends my sense of code style that the two &lt;code&gt;chdir&lt;/code&gt;s are apart from each other when I want to keep the logical parts close to each other. I&amp;rsquo;d like all of the code to handle the current working directory next to each other.&lt;/p&gt;

&lt;p&gt;Enter the &lt;a href=&#34;https://metacpan.org/pod/Guard&#34;&gt;Guard&lt;/a&gt; module that lets me define blocks of code that run at the end of the subroutine. Somewhere in the scope I create a guard with &lt;code&gt;scope_guard&lt;/code&gt; and that guard runs at scope exit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;

use Cwd qw(getcwd);
use Guard;

chdir &#39;/etc&#39; or die &amp;quot;Could not start at /etc: $!&amp;quot;;
my $starting_dir = getcwd();

do_some_work();

say &amp;quot;Finally, the directory is &amp;quot;, getcwd();


sub do_some_work {
  state $dir = &#39;/usr/local/etc&#39;;
  
  my $old_directory = getcwd();
  scope_guard { 
    say &amp;quot;Guard thinks old directory is $old_directory&amp;quot;;
    chdir $old_directory;
  };
  chdir $dir or die &amp;quot;Could not change to $dir! $!&amp;quot;;
  
  say &amp;quot;At the end of do_some_work(), the directory is &amp;quot;, getcwd();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output shows which each part thinks the current working directory should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;At the end of do_some_work(), the directory is /usr/local/etc
Guard thinks old directory is /etc
Finally, the directory is /etc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is still a little bit ugly. The &lt;code&gt;scope_guard&lt;/code&gt; only takes a block or &lt;code&gt;sub {}&lt;/code&gt; argument, so I can&amp;rsquo;t refactor its argument into a subroutine. This doesn&amp;rsquo;t work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;scope_guard make_sub_ref();  # wrong sort of argument
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can make a guard in a variable, though, to get around this. Instead of doing its work at scope exit, the variable guard does its work when it&amp;rsquo;s cleaned up (which we might do on our own before the end of its scope). In this example, I use &lt;a href=&#34;http://perltricks.com/article/72/2014/2/24/Perl-levels-up-with-native-subroutine-signatures&#34;&gt;Perl v5.20 subroutine signatures&lt;/a&gt; just because I can (they are really nice even if they are experimental):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.20;
use feature qw(signatures);
no warnings qw(experimental::signatures);

use Cwd qw(getcwd);
use Guard;

chdir &#39;/etc&#39; or die &amp;quot;Could not start at /etc: $!&amp;quot;;
my $starting_dir = getcwd();

do_some_work();

say &amp;quot;Finally, the directory is &amp;quot;, getcwd();


sub do_some_work {
  state $dir = &#39;/usr/local/etc&#39;;
  
  my $guard = make_guard( getcwd() );
  chdir $dir or die &amp;quot;Could not change to $dir! $!&amp;quot;;
  
  say &amp;quot;At the end of do_some_work(), the directory is &amp;quot;, getcwd();
}

sub make_guard ( $old_directory ) {
  return guard {
    say &amp;quot;Guard thinks old directory is $old_directory&amp;quot;;
    chdir $old_directory;  
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the code in &lt;code&gt;do_some_work&lt;/code&gt; is a bit nicer and I can reuse this guard in other subroutines.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Here&amp;rsquo;s a bonus trick and one of the reasons I wanted to show the subroutine signatures. I can declare a default value for a subroutine argument. If I don&amp;rsquo;t specify an argument to &lt;code&gt;make_guard&lt;/code&gt;, Perl fills it in with the value of &lt;code&gt;getcwd&lt;/code&gt;&lt;/dt&gt;
&lt;/dl&gt;

&lt;p&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub make_guard ( $old_directory = getcwd() ) {
  return guard {
    say &amp;quot;Guard thinks old directory is $old_directory&amp;quot;;
    chdir $old_directory;  
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the default value, I can simplify my call to &lt;code&gt;make_guard&lt;/code&gt; while still having the flexibility to supply an argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $guard = make_guard();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are other tricks I can employ with M. I can define multiple &lt;code&gt;scope_guard&lt;/code&gt;s. In that case, they execute in reverse order of their definition (like &lt;code&gt;END&lt;/code&gt; blocks). With a guard object, I can cancel the guard if I decide I don&amp;rsquo;t want it any longer.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/kwl/4229954645/in/photolist-7rMC9v-pWeFtB-dyGDSJ-4MTKCZ-9KGfvt-2Vmh2z-isiLE-a8wfzo-a8wdRy-nP4HU4-pMmELA-ebn2Yf-fR1AiY-6pwAvQ-oZC6iQ-eiAHKH-KaYMr-7ur9cv-eex2Ee-aJRH8P-nAD84h-nB5gYR-fFiErQ-6Y7HDp-dzKZh2-7xKM96-63dow9-6YbKFs-6nwuvh-6jFGwT-gDJYEc-bvwwma-7dKehm-8s7yHZ-8s7yjr-hNorq7-66hCWL-cLiZjq-7dKeYQ-9f4UgQ-nB5fP6-c6w6dU-7VSAhE-nAkYD2-gDKEpJ-iegmK-fFiE61-dd5mRC-64joJH-64CuGq&#34;&gt;Kenny Loule&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A preview of Perl 5.22</title>
      <link>http://perltricks.com/article/165/2015/4/10/A-preview-of-Perl-5-22/</link>
      <pubDate>Fri, 10 Apr 2015 14:29:14 +0000</pubDate>
      
      <guid>http://perltricks.com/article/165/2015/4/10/A-preview-of-Perl-5-22/</guid>
      <description>

&lt;p&gt;Perl v5.22 is bringing myriad new features and ways of doing things, making its &lt;em&gt;perldelta&lt;/em&gt; file much more interesting than most releases. While I normally wait until after the first stable release to go through these features over at &lt;a href=&#34;http://www.effectiveperlprogramming.com&#34;&gt;The Effective Perler&lt;/a&gt;, here&amp;rsquo;s a preview of some of the big news.&lt;/p&gt;

&lt;h3 id=&#34;a-safer-argv:85ae9380e810afb42a55fa70c8155be3&#34;&gt;A safer ARGV&lt;/h3&gt;

&lt;p&gt;The line input operator, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; looks at the &lt;code&gt;@ARGV&lt;/code&gt; array for filenames to open and read through the &lt;code&gt;ARGV&lt;/code&gt; filehandle. It has the same meta-character problem as the two-argument &lt;code&gt;open&lt;/code&gt;. Special characters in the filename might do shell things. To get around this unintended feature (which I think might be useful if that&amp;rsquo;s what you want), there&amp;rsquo;s a new line-input operator, &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;, that doesn&amp;rsquo;t treat any character as special:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;while( &amp;lt;&amp;lt;&amp;gt;&amp;gt; ) {  # new, safe line input operator
    ...;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cgi-pm-and-module-build-disappear-from-core:85ae9380e810afb42a55fa70c8155be3&#34;&gt;CGI.pm and Module::Build disappear from core&lt;/h3&gt;

&lt;p&gt;The Perl maintainers have been stripping modules from the Standard Library. Sometimes that&amp;rsquo;s because no one uses (or should use) that module anymore, no one wants to maintain that module, or it&amp;rsquo;s better to get it from CPAN where the maintainer can update it faster than the Perl release cycle. You can still find these modules on CPAN, though.&lt;/p&gt;

&lt;p&gt;The CGI.pm module, only one of Lincoln Stein&amp;rsquo;s amazing contributions to the Perl community, is from another era. It was light years ahead of its Perl 4 predecessor, &lt;em&gt;cgi.pl&lt;/em&gt;. It did everything, including HTML generation. This was the time before robust templating systems came around, and CGI.pm was good. But, they&amp;rsquo;ve laid it to rest.&lt;/p&gt;

&lt;p&gt;Somehow, Module::Build fell out of favor. Before then, building and installing Perl modules depended on a non-perl tool, &lt;em&gt;make&lt;/em&gt;. That&amp;rsquo;s a portability problem. However, we already know they have Perl, so if there were a pure Perl tool that could do the same thing we could solve the portability problem. We could also do much more fancy things. It was the wave of the future. I didn&amp;rsquo;t really buy into Module::Build although I had used it for a distributions, but I&amp;rsquo;m still a bit sad to see it go. It had some technical limitations and was unmaintained for a bit, and now it&amp;rsquo;s been cut loose. David Golden explains more about that in &lt;a href=&#34;http://www.dagolden.com/index.php/2140/paying-respect-to-modulebuild/&#34;&gt;Paying respect to Module::Build&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This highlights a long-standing and usually undiscovered problem with modules that depend on modules in the Standard Library. For years, most authors did not bother to declare those dependencies because Perl was there and its modules must be there too. When those modules move to a CPAN-only state, they end up with an undeclared dependencies. This also shows up in some linux distributions that violate the Perl license by removing some modules or putting them in a different package. Either way, always declare a dependency on everything you use despite its provenance.&lt;/p&gt;

&lt;h3 id=&#34;hexadecimal-floating-point-values:85ae9380e810afb42a55fa70c8155be3&#34;&gt;Hexadecimal floating point values&lt;/h3&gt;

&lt;p&gt;Have you always felt too constrained by ten digits, but were also stuck with non-integers? Now your problems are solved with hexadecimal floating point numbers.&lt;/p&gt;

&lt;p&gt;We already have the exponential notation with uses the &lt;code&gt;e&lt;/code&gt; to note the exponent, as in &lt;code&gt;1.23e4&lt;/code&gt;. But that &lt;code&gt;e&lt;/code&gt; is a hexadecimal digit, so we can&amp;rsquo;t use that to denote the exponent. Instead, we use &lt;code&gt;p&lt;/code&gt; and an exponent that&amp;rsquo;s a power of two:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.22;

my $num = 0.deadbeefp2;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;variable-aliases:85ae9380e810afb42a55fa70c8155be3&#34;&gt;Variable aliases&lt;/h3&gt;

&lt;p&gt;We can now assign to the reference version of a non-reference variable. This creates an alias for the referenced value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.22;
use feature qw(refaliasing);

\%other_hash = \%hash;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think we&amp;rsquo;ll discover many interesting uses for this, and probably some dangerous ones, but the use case in the docs looks interesting. We can now assign to something other than a scalar for the &lt;code&gt;foreach&lt;/code&gt; control variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.22;
use feature qw(refaliasing);

foreach \my %hash ( @array_of_hashes ) { # named hash control variable
    foreach my $key ( keys %hash ) { # named hash now!
        ...;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t think I&amp;rsquo;ll use that particular pattern since I&amp;rsquo;m comfortable with references, but if you really hate the dereferencing arrow, this might be for you. Note that v5.12 allows us to write &lt;code&gt;keys $hash_ref&lt;/code&gt; without the dereferencing &lt;code&gt;%&lt;/code&gt;. See my &lt;a href=&#34;http://www.effectiveperlprogramming.com/&#34;&gt;Effective Perl&lt;/a&gt; items &lt;a href=&#34;http://www.effectiveperlprogramming.com/2010/11/use-array-references-with-the-array-operators/&#34;&gt;Use array references with the array operators&lt;/a&gt;, but also &lt;a href=&#34;http://www.effectiveperlprogramming.com/2012/03/dont-use-auto-dereferencing-with-each/&#34;&gt;Don’t use auto-dereferencing with each or keys&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;repetition-in-list-assignment:85ae9380e810afb42a55fa70c8155be3&#34;&gt;Repetition in list assignment&lt;/h3&gt;

&lt;p&gt;Perl can assign one list of scalars to another. In &lt;a href=&#34;http://www.learning-perl.com&#34;&gt;Learning Perl&lt;/a&gt; we show assigning to &lt;code&gt;undef&lt;/code&gt;. I could make dummy variables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my($name, $card_num, $addr, $home, $work, $count) = split /:/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if I don&amp;rsquo;t need all of those variable, I can put placeholder &lt;code&gt;undef&lt;/code&gt;s in the assignment list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my(undef, $card_num, undef, undef, undef, $count) = split /:/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those consecutive &lt;code&gt;undef&lt;/code&gt;s can be a problem, as well as ugly. I don&amp;rsquo;t have to count out separate &lt;code&gt;undef&lt;/code&gt;s now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.22;

my(undef, $card_num, (undef)x3, $count) = split /:/;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-pipe-opens-on-win32:85ae9380e810afb42a55fa70c8155be3&#34;&gt;List pipe opens on Win32&lt;/h3&gt;

&lt;p&gt;The three-argument &lt;code&gt;open&lt;/code&gt; can take a pipe mode, which didn&amp;rsquo;t previously work on Windows. Now it does, to the extent that the list form of &lt;code&gt;system&lt;/code&gt; works on Win32:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;-|&#39;, &#39;some external command&#39; or die;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I always have to check my notes to remember that the &lt;code&gt;-&lt;/code&gt; in the pipe mode goes on the side of the pipe that has the pipe. Those in the unix world know &lt;code&gt;-&lt;/code&gt; as a special filename for standard input in many commands.&lt;/p&gt;

&lt;h3 id=&#34;various-small-fixes:85ae9380e810afb42a55fa70c8155be3&#34;&gt;Various small fixes&lt;/h3&gt;

&lt;p&gt;We also get many smaller fixes I think are worth a shout out. Many of these are clean ups to warts and special cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;/x&lt;/code&gt; regex operator flag now ignores Unicode space characters instead of just ASCII whitespace. If you tried to do that with multiple &lt;code&gt;/x&lt;/code&gt; on an operator, you can&amp;rsquo;t do that anymore either (it didn&amp;rsquo;t work before anyway but it wasn&amp;rsquo;t an error).&lt;/li&gt;
&lt;li&gt;A literal &lt;code&gt;{&lt;/code&gt; in a pattern should now be escaped. I mostly do that anyway.&lt;/li&gt;
&lt;li&gt;A bad &lt;code&gt;close&lt;/code&gt; now sets &lt;code&gt;$!&lt;/code&gt;. We don&amp;rsquo;t have to fiddle with &lt;code&gt;$?&lt;/code&gt; to find out what happened.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defined(@array)&lt;/code&gt; and &lt;code&gt;defined(%hash)&lt;/code&gt; are now fatal. They&amp;rsquo;ve been deprecated for a long time, and now they are gone. This does not apply to assignments, though, such as &lt;code&gt;defined(@array = ...)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Using a named array or hash in a place where Perl expects a reference is now fatal.&lt;/li&gt;
&lt;li&gt;Omitting % and @ on hash and array names is no longer permitted. No more &lt;code&gt;my %hash = (...); my @keys = keys hash&lt;/code&gt; where Perl treats the bareword &lt;code&gt;hash&lt;/code&gt; as &lt;code&gt;%hash&lt;/code&gt;. This is a Perl 4 feature that is no longer.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Gzipping data directly from Perl</title>
      <link>http://perltricks.com/article/162/2015/3/27/Gzipping-data-directly-from-Perl/</link>
      <pubDate>Fri, 27 Mar 2015 12:48:28 +0000</pubDate>
      
      <guid>http://perltricks.com/article/162/2015/3/27/Gzipping-data-directly-from-Perl/</guid>
      <description>

&lt;p&gt;Perl can read and write gzipped streams through its IO layers. &lt;a href=&#34;https://metacpan.org/author/NWCLARK&#34;&gt;Nicholas Clark&lt;/a&gt; recently updated &lt;a href=&#34;https://metacpan.org/pod/PerlIO::gzip&#34;&gt;PerlIO::gzip&lt;/a&gt; (with patches from &lt;a href=&#34;https://metacpan.org/author/ZEFRAM&#34;&gt;Zefram&lt;/a&gt;), after nine years since the last release. Now it works with Perl v5.20 and the upcoming v5.22, although it still has problems on Windows. But as we are used to, there is more then one way to do it.&lt;/p&gt;

&lt;h3 id=&#34;the-pipe-way:73581e43f14f9bf5179ccccf00045752&#34;&gt;The pipe way&lt;/h3&gt;

&lt;p&gt;Perl is versatile, and being the Unix duct tape that it is, reading or writing from the standard filehandles is easy. You might know about the three-argument &lt;a href=&#34;http://perldoc.perl.org/functions/open.html&#34;&gt;open&lt;/a&gt;, but I can give it as many arguments as I like. For a piped open, I can set the mode as the second argument and the command as a list as I would for &lt;a href=&#34;http://perldoc.perl.org/functions/system.html&#34;&gt;system&lt;/a&gt; (see the &amp;ldquo;Secure Programming Chapter&amp;rdquo; of &lt;a href=&#34;http://www.masteringperl.org&#34;&gt;Mastering Perl&lt;/a&gt;). I remember where to put the &lt;code&gt;-&lt;/code&gt; on the side of the &lt;code&gt;|&lt;/code&gt; where the command would go:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ENV{PATH} = &#39;&#39;;

open my $z, &#39;-|&#39;, &#39;/usr/bin/gunzip&#39;, &#39;-c&#39;, &#39;moby_dick.txt.gz&#39;;

while( &amp;lt;$z&amp;gt; ) {
    print;
    }

close $z 
    or die &amp;quot;There was a problem with the pipe open!&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could go the other way too by printing through a pipe to a command that will &lt;em&gt;gzip&lt;/em&gt; the data for me. The &lt;code&gt;-&lt;/code&gt; flips to the other side of the &lt;code&gt;|&lt;/code&gt; and I use shell redirection to move the result of &lt;em&gt;gzip&lt;/em&gt; into a file. I don&amp;rsquo;t use the list form since I want the &lt;code&gt;&amp;gt;&lt;/code&gt; in the command to be special (if only &lt;em&gt;gzip&lt;/em&gt; had a switch to set the output filename):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ENV{PATH} = &#39;&#39;;

open my $z, &#39;|-&#39;, &#39;/usr/bin/gzip &amp;gt; data.gz&#39;;

while(  ) {
    print { $z } $_;
    }

close $z 
    or die &amp;quot;There was a problem with the pipe open!&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s the general form that I can use with any sort of command. It has the drawbacks of multiple processes and the reliance of an external command in a particular place. If I can do it directly in the Perl process, I don&amp;rsquo;t have those drawbacks. Fortunately, I can, because Perl is like that.&lt;/p&gt;

&lt;h3 id=&#34;reading-gzipped-data:73581e43f14f9bf5179ccccf00045752&#34;&gt;Reading gzipped data&lt;/h3&gt;

&lt;p&gt;To read a gzippped file in Perl, I can use the &lt;code&gt;gzip&lt;/code&gt; I/O layer (see &lt;a href=&#34;http://perldoc.perl.org/perlopentut.html&#34;&gt;perlopen&lt;/a&gt;). Once I open the file, I can read its lines (assuming it&amp;rsquo;s text) like I would a &amp;ldquo;normal&amp;rdquo; text file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;lt;:gzip&#39; $filename 
    or die &amp;quot;Could not read from $filename: $!&amp;quot;;

while( &amp;lt;$fh&amp;gt; ) {
    print;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, I can read octets if the data aren&amp;rsquo;t text:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;lt;:gzip&#39; $filename 
    or die &amp;quot;Could not read from $filename: $!&amp;quot;;

while( read( $fh, $buffer, 1024 ) ) {
    ...; # do something with $buffer (... is a v5.12 feature!)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I can&amp;rsquo;t use the I/O layers, perhaps because the operating system does not support it or it&amp;rsquo;s broken on my version of Perl, I can use the &lt;a href=&#34;http://www.metacpan.org/pod/IO::Compress&#34;&gt;IO::Compress&lt;/a&gt; modules instead. This example uses its object interface to create the write filehandle:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use IO::Compress::Gunzip;

my $z = IO::Compress::Gunzip-&amp;gt;new( $filename )
    or die &amp;quot;Could not read from $filename: $GunzipError&amp;quot;;

while( &amp;lt;$z&amp;gt; ) {
    print;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The I/O layer is faster than the module, but the PerlIO documentation notes that we shouldn&amp;rsquo;t trust our data to it. People have been using it without major problems, but you could be that one person who loses all their data. Sinan Ünür writes about the performance in &lt;a href=&#34;http://www.nu42.com/2013/02/large-gzipped-files-long-lines.html&#34;&gt;Large gzipped files, long lines, extracting columns etc&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;writing-gzipped-data:73581e43f14f9bf5179ccccf00045752&#34;&gt;Writing gzipped data&lt;/h3&gt;

&lt;p&gt;I can also directly write gzipped data to a file. It&amp;rsquo;s similar my previous examples with the filehandles moved around. This one uses the I/O layer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;gt;:gzip&#39; $filename 
    or die &amp;quot;Could not write to $filename: $!&amp;quot;;

while(  ) {
    print { $fh } $_;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this one uses &lt;a href=&#34;http://www.metacpan.org/pod/IO::Compress::Gzip&#34;&gt;IO::Compress::Gzip&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use IO::Compress::Gzip;

my $z = IO::Compress::Gzip-&amp;gt;new( $filename )
    or die &amp;quot;Could not write to $filename: $GzipError&amp;quot;;

while(  ) {
    print { $z } $_;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;an-advanced-tip:73581e43f14f9bf5179ccccf00045752&#34;&gt;An advanced tip&lt;/h3&gt;

&lt;p&gt;I can read multiple streams of gzipped data with a single filehandle. The &lt;code&gt;MultiStream&lt;/code&gt; option in &lt;a href=&#34;http://www.metacpan.org/pod/IO::Compress::Gunzip&#34;&gt;IO::Compress::Gunzip&lt;/a&gt; allows the decompressor to reset itself when it thinks it has detected a new stream and continue to provide output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use IO::Uncompress::Gunzip qw($GunzipError);

my $z = IO::Uncompress::Gunzip-&amp;gt;new( *STDIN, MultiStream =&amp;gt; 1 )
    or die &amp;quot;Could not make uncompress object: $GunzipError&amp;quot;;
    
while( &amp;lt;$z&amp;gt; ) {
    print;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this I can read several gzipped files at the same time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat *.gz |  ./multistream.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sort of thing is quite handy for rotated logs when I want to read them all and don&amp;rsquo;t care that they were split up.&lt;/p&gt;

&lt;h3 id=&#34;and-a-small-bonus:73581e43f14f9bf5179ccccf00045752&#34;&gt;And, a small bonus&lt;/h3&gt;

&lt;p&gt;If you want to know more about the gzip compression, &lt;a href=&#34;http://jvns.ca/blog/2013/10/24/day-16-gzip-plus-poetry-equals-awesome/%0A&#34;&gt;Julia Evans created a nice animation of gzip working in real time on &lt;em&gt;The Raven&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can see a bit more abstract &lt;a href=&#34;http://www.data-compression.com/lempelziv.html%0A&#34;&gt;animation&lt;/a&gt; at www.data-compression.com. You can see how this single-pass method works and how it can work from a possibly infinite stream like I provide in this article.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Time::Moment can save time</title>
      <link>http://perltricks.com/article/148/2015/2/2/Time--Moment-can-save-time/</link>
      <pubDate>Mon, 02 Feb 2015 14:04:40 +0000</pubDate>
      
      <guid>http://perltricks.com/article/148/2015/2/2/Time--Moment-can-save-time/</guid>
      <description>&lt;p&gt;A long time ago in a galaxy far, far away, the rebel alliance ran into a slight problem when the starship carrying the princess left two hours late because its software was in the wrong time zone, running into an imperial cruiser that was patrolling an hour early for a similar reason. The bad guys unwittingly solved the rebels&amp;rsquo; problem by removing the wrong time zone when they removed that special case—a solution familiar to programmers. The rebels exploited an imperial bug when a literal hole in their defense was left open an hour late.&lt;/p&gt;

&lt;p&gt;You might think that we are in the computer revolution (&lt;a href=&#34;https://www.youtube.com/watch?v=oKg1hTOQXoY&#34;&gt;Alan Kay says we aren&amp;rsquo;t&lt;/a&gt;), but for all of our fancy hardware, the cheap or free platforms and services, and the amazing programming tools we have, the way we handle and times is often a mess. Y2K has nothing on this.&lt;/p&gt;

&lt;p&gt;When Dave Rolsky came out with &lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt;, everyone rejoiced. It&amp;rsquo;s a masterful piece of software that strives to be pedantically correct down to the nanosecond and leap seconds. Before then, I used a hodge-podge of modules to deal with dates and avoided date math.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; can represent dates and tell me various things about them, such as the day of the quarter, give me locale-specific names, format them in interesting ways, and also give me the difference between dates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Date::Time;

my $dt = DateTime-&amp;gt;new(
    year       =&amp;gt; 2014,
    month      =&amp;gt; 12,
    day        =&amp;gt; 18,
    hour       =&amp;gt; 12,
    minute     =&amp;gt; 37,
    second     =&amp;gt; 57,
    nanosecond =&amp;gt; 0,
    time_zone  =&amp;gt; &#39;UTC&#39;,
);

my $quarter = $dt-&amp;gt;quarter;
my $day_of_quarter = $dt-&amp;gt;day_of_quarter;

my $month_name = $dt-&amp;gt;month_name;  # can be locale specific

my $ymd = $dt-&amp;gt;ymd(&#39;/&#39;); # 2015/02/06

my $now = DateTime-&amp;gt;now;

my $duration = $now - $dt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; doesn&amp;rsquo;t parse dates. Separate modules in the same namespace can do that while returning a &lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; object. For instance, the &lt;a href=&#34;http://www.metacpan.org/module/DateTime::Format::W3CDTF&#34;&gt;DateTime::Format::W3CDTF&lt;/a&gt; module parses dates and turn them into objects:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use DateTime::Format::W3CDTF;

my $w3c = DateTime::Format::W3CDTF-&amp;gt;new;
my $dt = $w3c-&amp;gt;parse_datetime( &#39;2003-02-15T13:50:05-05:00&#39; );

# 2003-02-15T13:50:05-05:00
$w3c-&amp;gt;format_datetime($dt);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Brilliant. &lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; is the standard answer to any date question. It works with almost no thought on my side.&lt;/p&gt;

&lt;p&gt;But &lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; has a problem. It creates big objects and in the excitement to use something that works (slow and correct is better than fast and wrong), I might end up with hundreds of those objects, not leaving much space for other things. Try dumping one of these objects to see its extent. I won&amp;rsquo;t waste space with that in this article.&lt;/p&gt;

&lt;p&gt;Although &lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; is exactingly correct, sometimes I&amp;rsquo;d like to be a little less exact and quite a bit faster. That&amp;rsquo;s where Christian Hansen&amp;rsquo;s &lt;a href=&#34;http://www.metacpan.org/module/Time::Moment&#34;&gt;Time::Moment&lt;/a&gt; comes in (see his &lt;a href=&#34;http://blogs.perl.org/users/chansen/2014/08/timemoment-vs-datetime.html&#34;&gt;Time::Moment vs DateTime&lt;/a&gt;). It works in UTC, ignores leap seconds, and limits its dates to the years 1 to 9999. It&amp;rsquo;s objects are immutable, so it can be a bit faster. To get a new datetime, you get a new object. And, it has many of the common features and an interface close to &lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.metacpan.org/module/Time::Moment&#34;&gt;Time::Moment&lt;/a&gt; distribution comes with a program, &lt;em&gt;dev/bench.pl&lt;/em&gt;, that allows me to compare the performance. Here&amp;rsquo;s some of the output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl dev/bench.pl
Benchmarking constructor: -&amp;gt;new()
                  Rate     DateTime Time::Moment
DateTime       14436/s           --         -99%
Time::Moment 1064751/s        7276%           --
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s make a more interesting benchmark that constructs an object from a string, add a day to it, and check if it&amp;rsquo;s before today. As with every benchmark, you have to check it against your particular use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Benchmark;
use DateTime;
use Time::Moment;
use DateTime::Format::W3CDTF;

my $dtf_string =&#39;2014-02-01T13:01:37-05:00&#39;;

my $time_moment = sub {
    my $tm = Time::Moment-&amp;gt;from_string( $dtf_string );
    my $tm2 = $tm-&amp;gt;plus_days( 1 );
    
    my $now = Time::Moment-&amp;gt;now;
    
    my $comparison = $now &amp;gt; $tm2;
    };
        
my $datetime = sub {
    my $w3c = DateTime::Format::W3CDTF-&amp;gt;new;
    my $dt = $w3c-&amp;gt;parse_datetime( $dtf_string );
    $dt-&amp;gt;add( days =&amp;gt; 1 );

    my $now = DateTime-&amp;gt;now;

    my $comparison = $now &amp;gt; $dt;
    };

Benchmark::cmpthese( -10, {
    &#39;Time::Moment&#39; =&amp;gt; $time_moment,
    &#39;DateTime&#39;     =&amp;gt; $datetime,
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.metacpan.org/module/Time::Moment&#34;&gt;Time::Moment&lt;/a&gt; is still really fast. Amazingly fast:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl dtf_bench.pl
                 Rate     DateTime Time::Moment
DateTime       1889/s           --         -99%
Time::Moment 273557/s       14384%           --
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If my problem is within the limits of &lt;a href=&#34;http://www.metacpan.org/module/Time::Moment&#34;&gt;Time::Moment&lt;/a&gt; (and, who ever needs more than 640k?), I can get big wins. When that no longer applies, with a little work I can switch to &lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt;. Either way, you might want to wipe the memory of your droids.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;http://creativecommons.org/licenses/by-nc/2.5/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;http://xkcd.com/1179/&#34;&gt;XKCD&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extracting from HTML with Mojo::DOM</title>
      <link>http://perltricks.com/article/143/2015/1/8/Extracting-from-HTML-with-Mojo--DOM/</link>
      <pubDate>Thu, 08 Jan 2015 14:01:42 +0000</pubDate>
      
      <guid>http://perltricks.com/article/143/2015/1/8/Extracting-from-HTML-with-Mojo--DOM/</guid>
      <description>&lt;p&gt;Everyone wants to parse HTML, and many people reach for a regular expression to do that. Although you can &lt;a href=&#34;http://stackoverflow.com/a/4234491/2766176&#34;&gt;use a regex to parse HTML&lt;/a&gt;, it&amp;rsquo;s not as fun as my latest favorite way: &lt;a href=&#34;http://www.metacpan.org/module/Mojo::DOM&#34;&gt;Mojo::DOM&lt;/a&gt; with CSS3 selectors. I find this much easier than trying to remember XPATH and I get to play with Mojo.&lt;/p&gt;

&lt;p&gt;The DOM is the &lt;a href=&#34;http://www.w3.org/DOM/&#34;&gt;&amp;ldquo;Document Object Model&amp;rdquo;&lt;/a&gt;. Something behind the scenes parses and organizes the information and allows me to query it with questions such as &amp;ldquo;find all the &lt;code&gt;a&lt;/code&gt; tags inside a &lt;code&gt;div&lt;/code&gt; tag&amp;rdquo;, or &amp;ldquo;find all the tags of a particular class&amp;rdquo;. I don&amp;rsquo;t manipulate the text myself.&lt;/p&gt;

&lt;p&gt;If I&amp;rsquo;m using &lt;a href=&#34;http://mojolicio.us/perldoc/Mojo/UserAgent&#34;&gt;Mojo::UserAgent&lt;/a&gt;, I can get a DOM object from the response object from an HTTP request:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Mojo::UserAgent;
my $ua = Mojo::UserAgent-&amp;gt;new;

my $dom = $ua-&amp;gt;get( &#39;http://search.cpan.org/~bdfoy/&#39; )
    -&amp;gt;res
    -&amp;gt;dom;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Mojo method-chaining style with one method per line shows its strengths as I get into more complicated tasks later.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t &lt;em&gt;have&lt;/em&gt; to make a request to get a DOM object. I&amp;rsquo;m often presented with HTML files to parse with no server to give them to me. Depending on the tractability of the task, I might hand edit it to remove the parts I don&amp;rsquo;t want to think about then use a regex to handle the rest. That way, I don&amp;rsquo;t have to do a lot of work to save state and know where I am in the document. With a DOM, that&amp;rsquo;s not a problem.&lt;/p&gt;

&lt;p&gt;In the first example, I fetched &lt;code&gt;http://search.cpan.org/~bdfoy/&#39;&lt;/code&gt;, my author page at &lt;a href=&#34;http://search.cpan.org/&#34;&gt;CPAN Search&lt;/a&gt;. I&amp;rsquo;ll start with that HTML, assuming I already have it in a string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Mojo::DOM;

my $string = ...;

my $dom = Mojo::DOM-&amp;gt;new( $string );

my $module_list = $dom
    -&amp;gt;find(&#39;a&#39;)
    -&amp;gt;join(&amp;quot;\n&amp;quot;);

print $module_list;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once I have the &lt;code&gt;$dom&lt;/code&gt; object, I can use &lt;code&gt;find&lt;/code&gt; to select elements. I give &lt;code&gt;find&lt;/code&gt; a &lt;a href=&#34;http://mojolicio.us/perldoc/Mojo/DOM/CSS#SELECTORS&#34;&gt;CSS3 selector&lt;/a&gt;, in this case just &lt;code&gt;a&lt;/code&gt; to find all the anchor links. &lt;code&gt;find&lt;/code&gt; returns a &lt;a href=&#34;=&#34; title=&#34;http://mojolicio.us/perldoc/Mojo/Collection&#34;&gt;Mojo::Collection&lt;/a&gt; object, a fancy way to store a list and do things do it. The Mojolicious style makes heavy use of method chaining so it needs a way to call methods on the result. In this example, I merely &lt;code&gt;join&lt;/code&gt; the elements with a newline. These are the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;lt;a href=&amp;quot;/&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;CPAN&amp;quot; src=&amp;quot;http://st.pimg.net/tucs/img/cpan_banner.png&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;/author/&amp;quot;&amp;gt;Authors&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;/recent&amp;quot;&amp;gt;Recent&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;http://log.perl.org/cpansearch/&amp;quot;&amp;gt;News&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;/mirror&amp;quot;&amp;gt;Mirrors&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;/faq.html&amp;quot;&amp;gt;FAQ&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;/feedback&amp;quot;&amp;gt;Feedback&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;Acme-BDFOY-0.01/&amp;quot;&amp;gt;Acme-BDFOY-0.01&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;/CPAN/authors/id/B/BD/BDFOY/Acme-BDFOY-0.01.tar.gz&amp;quot;&amp;gt;Download&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;/src/BDFOY/Acme-BDFOY-0.01/&amp;quot;&amp;gt;Browse&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a good start, but I extracted all of the links. I want to limit it to the links to my distributions. Looking at the HTML, I see that the link I want is in the first &lt;code&gt;td&lt;/code&gt; tag in a &lt;code&gt;tr&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;lt;tr class=s&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;a href=&amp;quot;Data-Constraint-1.17/&amp;quot;&amp;gt;Data-Constraint-1.17&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;prototypical value checking&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;small&amp;gt;[&amp;lt;a href=&amp;quot;/CPAN/authors/id/B/BD/BDFOY/Data-Constraint-1.17.tar.gz&amp;quot;&amp;gt;Download&amp;lt;/a&amp;gt;] [&amp;lt;a
      href=&amp;quot;/src/BDFOY/Data-Constraint-1.17/&amp;quot;&amp;gt;Browse&amp;lt;/a&amp;gt;]&amp;lt;/small&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td nowrap&amp;gt;26 Aug 2014&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I change my selector to look for the first anchor in the first table cell in a table row:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $module_list = $dom
    -&amp;gt;find(&#39;tr td:first-child a:first-child&#39;)
    -&amp;gt;join(&amp;quot;\n&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I have a list of the links I want, but with the anchor HTML and text:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;lt;a href=&amp;quot;Acme-BDFOY-0.01/&amp;quot;&amp;gt;Acme-BDFOY-0.01&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;Apache-Htaccess-1.4/&amp;quot;&amp;gt;Apache-Htaccess-1.4&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;Apache-iTunes-0.11/&amp;quot;&amp;gt;Apache-iTunes-0.11&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;App-Module-Lister-0.15/&amp;quot;&amp;gt;App-Module-Lister-0.15&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;App-PPI-Dumper-1.02/&amp;quot;&amp;gt;App-PPI-Dumper-1.02&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I still have a bit of work to do. I want to extract the value of the &lt;code&gt;href&lt;/code&gt; attribute. I can do that with the &lt;code&gt;map&lt;/code&gt; method from &lt;a href=&#34;http://mojolicio.us/perldoc/Mojo/Collection&#34;&gt;Mojo::Collection&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $module_list = $dom
    -&amp;gt;find(&#39;tr td:first-child a:first-child&#39;)
    -&amp;gt;map( attr =&amp;gt; &#39;href&#39; )
    -&amp;gt;join(&amp;quot;\n&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each element in the collection is actually a &lt;a href=&#34;http://mojolicio.us/perldoc/Mojo/DOM&#34;&gt;Mojo::DOM&lt;/a&gt; object. The first argument to &lt;code&gt;map&lt;/code&gt; is the method to call on each element and the remaining arguments pass through to that method. In this case, I&amp;rsquo;m calling &lt;code&gt;attr(&#39;href&#39;)&lt;/code&gt; on each object. Now I mostly have the values I want:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Acme-BDFOY-0.01/
Apache-Htaccess-1.4/
Apache-iTunes-0.11/
App-Module-Lister-0.15/
App-PPI-Dumper-1.02/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t want that trailing slash. I can use another &lt;code&gt;map&lt;/code&gt;, but with an anonymous subroutine. The result of the subroutine replaces the element in the collection. I use the &lt;a href=&#34;http://www.effectiveperlprogramming.com/2010/09/use-the-r-substitution-flag-to-work-on-a-copy/&#34;&gt;&lt;code&gt;/r&lt;/code&gt; of the substitution operator to return the modified string&lt;/a&gt; instead of the number of substitutions (best Perl enhancement ever):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.14;

my $module_list = $dom
    -&amp;gt;find(&#39;tr td:first-child a:first-child&#39;)
    -&amp;gt;map( attr =&amp;gt; &#39;href&#39; )
    -&amp;gt;map( sub { s|/\z||r } )
    -&amp;gt;join(&amp;quot;\n&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I have my list of distributions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Acme-BDFOY-0.01
Apache-Htaccess-1.4
Apache-iTunes-0.11
App-Module-Lister-0.15
App-PPI-Dumper-1.02
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s still as one string since I ended the method chain with &lt;code&gt;join(&amp;quot;\n&amp;quot;)&lt;/code&gt;. To get a list, I use &lt;code&gt;each&lt;/code&gt; to get the list, which I join myself later:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @module_list = $dom
    -&amp;gt;find(&#39;tr td:first-child a:first-child&#39;)
    -&amp;gt;map( attr =&amp;gt; &#39;href&#39; )
    -&amp;gt;map( sub { s|/\z||r } )
    -&amp;gt;each;

print join &amp;quot;\n&amp;quot;, @module_list;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can get even fancier. Instead of the distribution name with the version, I can break it up with &lt;a href=&#34;http://www.metacpan.org/module/CPAN::DistnameInfo&#34;&gt;CPAN::DistnameInfo&lt;/a&gt;. I&amp;rsquo;ll turn every found link into a tuple of name and version. Since that module wants to deal with a distribution filename, I tack on &lt;em&gt;.tar.gz&lt;/em&gt; to make it work out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Data::Printer;
use CPAN::DistnameInfo;

my $dom = Mojo::DOM-&amp;gt;new( $string );

my @module_list = $dom
    -&amp;gt;find(&#39;tr td:first-child a:first-child&#39;)
    -&amp;gt;map( attr =&amp;gt; &#39;href&#39; )
    -&amp;gt;map( sub { s|/\z||r } )
    -&amp;gt;map( sub { 
        my $d = CPAN::DistnameInfo-&amp;gt;new( &amp;quot;$_.tar.gz&amp;quot; );
        [ map { $d-&amp;gt;$_() } qw(dist version) ];
         } )
    -&amp;gt;each;

p @module_list;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;each&lt;/code&gt; extracts each element from the collection and returns it. I use &lt;a href=&#34;https://metacpan.org/pod/Data::Printer&#34;&gt;Data::Printer&lt;/a&gt; to display the array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;[
    [0]   [
        [0] &amp;quot;Acme-BDFOY&amp;quot;,
        [1] 0.01
    ],
    [1]   [
        [0] &amp;quot;Apache-Htaccess&amp;quot;,
        [1] 1.4
    ],
    [2]   [
        [0] &amp;quot;Apache-iTunes&amp;quot;,
        [1] 0.11
    ],
    [3]   [
        [0] &amp;quot;App-Module-Lister&amp;quot;,
        [1] 0.15
    ],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I want only the distributions that are development versions, I can use &lt;a href=&#34;http://mojolicio.us/perldoc/Mojo/Collection&#34;&gt;Mojo::Collection&lt;/a&gt;&amp;rsquo;s &lt;code&gt;grep&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @module_list = $dom
    -&amp;gt;find(&#39;tr td:first-child a:first-child&#39;)
    -&amp;gt;map( attr =&amp;gt; &#39;href&#39; )
    -&amp;gt;map( sub { s|/\z||r } )
    -&amp;gt;map( sub { 
        my $d = CPAN::DistnameInfo-&amp;gt;new( &amp;quot;$_.tar.gz&amp;quot; );
        [ map { $d-&amp;gt;$_() } qw(dist version) ];
         } )
    -&amp;gt;grep( sub { $_-&amp;gt;[-1] =~ /_/ } )
    -&amp;gt;each;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;grep&lt;/code&gt; selects each element of the collection for which the subroutine returns a true value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;[
    [0]  [
        [0] &amp;quot;Brick&amp;quot;,
        [1] &amp;quot;0.227_01&amp;quot;
    ],
    [1]  [
        [0] &amp;quot;Distribution-Guess-BuildSystem&amp;quot;,
        [1] &amp;quot;0.12_02&amp;quot;
    ],
    [2]  [
        [0] &amp;quot;File-Fingerprint&amp;quot;,
        [1] &amp;quot;0.10_02&amp;quot;
    ],
    [3]  [
        [0] &amp;quot;Geo-GeoNames&amp;quot;,
        [1] &amp;quot;1.01_01&amp;quot;
    ],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s the process. No HTML shows up in my code. The rest is figuring out how to select the particular element that I want.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Whitespace in the Perl community</title>
      <link>http://perltricks.com/article/141/2014/12/15/The-Whitespace-in-the-Perl-community/</link>
      <pubDate>Mon, 15 Dec 2014 14:00:45 +0000</pubDate>
      
      <guid>http://perltricks.com/article/141/2014/12/15/The-Whitespace-in-the-Perl-community/</guid>
      <description>

&lt;p&gt;One night over pastrami sandwiches, David Farrell and I came up with the idea of &lt;em&gt;the whitespace in the Perl community&lt;/em&gt;. Between all the code, projects, user groups, and events we already enjoy, there&amp;rsquo;s much more that people who want to make names for themselves can do. The trick is picking what to do.&lt;/p&gt;

&lt;p&gt;David started this website and wants to give people a place to publish their stories about Perl. He can promote it, readers can discover it once instead of finding new blogs, and authors don&amp;rsquo;t have to maintain their own site. Perl.com used to be such a site, and while it&amp;rsquo;s still around, it&amp;rsquo;s not active.&lt;/p&gt;

&lt;p&gt;You probably know my own projects. I and a few others started Perl mongers when there were no Perl user groups. After &lt;em&gt;The Perl Journal&lt;/em&gt; finally gave up, I started &lt;em&gt;The Perl Review&lt;/em&gt; to take its place (and the print magazine lasted just as long). I&amp;rsquo;ve done many other things as well.&lt;/p&gt;

&lt;p&gt;Both David and I looked for things that other people weren&amp;rsquo;t doing, and we both asked around to see who&amp;rsquo;s toes we might step on and to build support for our new thing.&lt;/p&gt;

&lt;p&gt;We wanted to list things which other people might do if they were looking to make a name for themselves in the community. That&amp;rsquo;s different than mere participation. They need to make something that&amp;rsquo;s virtually synonymous with their names. That&amp;rsquo;s how they can build their résumés. Every project needs a spiritual center and chief motivator to keep things going.&lt;/p&gt;

&lt;p&gt;I still remember Graham Barr demonstrating &lt;a href=&#34;http://search.cpan.org&#34;&gt;CPAN Search&lt;/a&gt; for me at a long ago Perl conference. It was groundbreaking; we didn&amp;rsquo;t have anything like that yet. Younger Perl programmers probably have never been without it and didn&amp;rsquo;t realize how big a leap it was from browsing directories.&lt;/p&gt;

&lt;p&gt;Before JJ Allen set up &lt;a href=&#34;http://perldoc.perl.org&#34;&gt;perldoc.perl.org&lt;/a&gt;, Carlos Ramirez had &lt;a href=&#34;http://www.perldoc.com&#34;&gt;Perldoc.com&lt;/a&gt;. Before those sites, there were isolated ways to get the Perl docs in HTML, but Carlos somehow leapt ahead of all of them to create an integrated solution. Fortunately, JJ Allen took the idea further when Carlos disappeared.&lt;/p&gt;

&lt;p&gt;Not every successful project is a completely new idea. Sometimes it&amp;rsquo;s an older idea done better. Gabor Szabo started &lt;a href=&#34;http://perlweekly.com&#34;&gt;Perl Weekly&lt;/a&gt; to curate the internet activity of the Perl community. He discovers what&amp;rsquo;s worth reading so the rest of the community doesn&amp;rsquo;t need to spend too much time away from &lt;a href=&#34;https://www.youtube.com/results?search_query=kitten+videos&#34;&gt;kitten videos&lt;/a&gt; and coding. Other people have tried the same thing, but Gabor&amp;rsquo;s advantage is his perseverance.&lt;/p&gt;

&lt;p&gt;We did come up with a list of opportunities, but we&amp;rsquo;re not going to present it here. We thought of things that we&amp;rsquo;d like to do, but in my experience that&amp;rsquo;s not that helpful. Not only that, but the most successful ideas seem to be something that nobody had ever considered, including us. The next big ideas will be things that most people never imagined.&lt;/p&gt;

&lt;p&gt;Instead, we talked about the process to come up with those ideas, which is the advice either of us tend to give out anyway. Along with that, we put together some advice on how you might make it work.&lt;/p&gt;

&lt;h3 id=&#34;finding-opportunity:8518d03148399efeae5968329e94e564&#34;&gt;Finding opportunity&lt;/h3&gt;

&lt;p&gt;Whitespace is any opportunity to add value. In that sense, there are two categories of whitespace:&lt;/p&gt;

&lt;p&gt;The first is discovered through innovation; truly original ideas whose time has come. No one is doing it because no one has thought of it. These &amp;ldquo;gladwellian&amp;rdquo; opportunities can be highly valuable and often come from deep insight. They&amp;rsquo;re also exceedingly rare, such as the creation of CPAN. Every language has their own version of CPAN now.&lt;/p&gt;

&lt;p&gt;The second kind is less appealing. These are the opportunities that exist because no one wants to do them. Typically the work required to exploit the opportunity will involve repetitive and manual tasks, such as maintaining documentation or shepherding modules that you didn&amp;rsquo;t write and don&amp;rsquo;t use. In Perl we hack through inconveniences all the time. Inconvenience is an annoyance or an afterthought. We &lt;code&gt;chomp&lt;/code&gt; it, &lt;code&gt;split&lt;/code&gt; on it, trim it and move on. But those inconveniences are opportunities, where (usually) no one is working. These kinds of opportunities can be just as valuable to the community and even so, are easy to find. Just look for the jobs that would benefit the community that no one is doing, and start doing them.&lt;/p&gt;

&lt;p&gt;If you want big results, you can do either the boring or the hard work that no one else is doing.&lt;/p&gt;

&lt;h3 id=&#34;just-do-it:8518d03148399efeae5968329e94e564&#34;&gt;Just do it&lt;/h3&gt;

&lt;p&gt;We had a much easier time back in the day because we didn&amp;rsquo;t think anyone was in charge and there were fewer toes to step on. Now there are various organizations, such as &lt;a href=&#34;http://www.perlfoundation.org&#34;&gt;The Perl Foundation&lt;/a&gt;. People often ask me how to get TPF approval, but they don&amp;rsquo;t need it. They don&amp;rsquo;t need a grant, or a subhost on a particular domain, or many of the other things any organization might control.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t to say that you should ignore those who can help you; just don&amp;rsquo;t let them stop or delay you. Remember that they are all volunteers and are probably already giving the time that they have available.&lt;/p&gt;

&lt;h3 id=&#34;planning-ahead:8518d03148399efeae5968329e94e564&#34;&gt;Planning ahead&lt;/h3&gt;

&lt;p&gt;Your first step is to ensure that you&amp;rsquo;re doing something you&amp;rsquo;re going to want to do. It&amp;rsquo;s one thing to come up with an idea, but it&amp;rsquo;s another to want to work on it for months (or longer), most likely on your own until the community gets behind you.&lt;/p&gt;

&lt;p&gt;To do this, you should talk to as many people as you can. Start with private or limited conversations with people you trust. Some people may tell you to just put it out there, but do a little research first. Don&amp;rsquo;t get discouraged by irrelevant details from people who weren&amp;rsquo;t going to use it and weren&amp;rsquo;t going to help.&lt;/p&gt;

&lt;p&gt;Specifically, don&amp;rsquo;t design a database schema right away. I&amp;rsquo;ve long had a rule that lets me figure out which conference fever projects will fail within the month; they are the ones who start picking the technologies right away.&lt;/p&gt;

&lt;p&gt;Figure out how you want it to work, and keep a particular audience in mind. Instead of pleasing everyone, which drags out your design and creates much more work, start simply so you can get something out there quickly.&lt;/p&gt;

&lt;h3 id=&#34;sticking-to-it:8518d03148399efeae5968329e94e564&#34;&gt;Sticking to it&lt;/h3&gt;

&lt;p&gt;Most ideas fail because their originators think that the idea is enough. People will see the merits instantly and volunteers will step in to do all the work. Fall into that trap and you may find yourself unmotivated and overworked because you are doing everything. For awhile, embrace the idea that you&amp;rsquo;re doing most of the work and look at help as gravy instead of the meat.&lt;/p&gt;

&lt;h3 id=&#34;be-ready-to-give-it-up:8518d03148399efeae5968329e94e564&#34;&gt;Be ready to give it up&lt;/h3&gt;

&lt;p&gt;Our last bit of advice seems contradictory to the rest. After you develop your great idea, be prepared to lose it. The idea may change from underneath you, or more motivated and enthusiastic volunteers may take it in another direction. Trying to stick to the original plan might drive everyone away.&lt;/p&gt;

&lt;p&gt;Also be prepared to hand off major responsibilities to other people and to trust what they do with it even if it&amp;rsquo;s not the same thing that you would have done.&lt;/p&gt;

&lt;h3 id=&#34;some-ideas-we-had:8518d03148399efeae5968329e94e564&#34;&gt;Some ideas we had&lt;/h3&gt;

&lt;p&gt;You didn&amp;rsquo;t think we weren&amp;rsquo;t going to suggest anything, did you? We had a few ideas of things that we&amp;rsquo;d like to do but don&amp;rsquo;t have the time to do ourselves.&lt;/p&gt;

&lt;p&gt;Perl is under-represented on Reddit, Twitter, and Facebook. There&amp;rsquo;s no person we can point to as the energy behind these efforts. Some of the same names that you see everywhere are present, but no one has planted their flag here. If you&amp;rsquo;re social media savvy, you could be the person to tend to Perl wherever you spend your time. The different sites have different purposes, each of which could highlight Perl in a different way and for a different purpose. You can create content or highlight the work of others.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7159/6847365223_4b5bdabf97.jpg&#34; alt=&#34;Social Media Explained (with Donuts)&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cpantesters.org&#34;&gt;CPAN Testers&lt;/a&gt; is a fantastic service, but have you ever wanted to re-create a bug report from CPAN Testers? Unless you have access to the specific operating system and Perl version, you may not be able to. Even once you get hold of a virtual machine, it may take several hours to install the Perl modules and C library dependencies required. We should have a collection of virtual machine images within easy reach that any Perl programmer can startup to launch, pre-loaded with every major Perl version and most stuff installed.&lt;/p&gt;

&lt;p&gt;There could be a a &amp;ldquo;PDL Perl&amp;rdquo; distribution that would have all of the main &lt;a href=&#34;http://pdl.perl.org&#34;&gt;Perl Data Language&lt;/a&gt; libraries installed and the same for our major web frameworks and our OO frameworks. A Perl developer could then quickly spin up an instance of OpenBSD and run their Perl code against every installed Perl version using &lt;em&gt;perlbrew&lt;/em&gt;. This might happen with something like &lt;a href=&#34;https://www.virtualbox.org&#34;&gt;Virtual Box&lt;/a&gt; or &lt;a href=&#34;https://www.vagrantup.com&#34;&gt;Vagrant&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This doesn&amp;rsquo;t be something you distribute. Free service hosting services like &lt;a href=&#34;https://www.digitalocean.com&#34;&gt;Digital Ocean&lt;/a&gt; allow users to share snapshots of virtual machines, but the end user would still have to pay a few cents to lease the virtual machine for a couple of hours. What this requires is someone to regularly maintain and refresh the snapshots, installing the latest Perl versions and keeping everything up to date. Similarly, someone could create and maintain a &lt;a href=&#34;http://blogs.perl.org/users/brian_d_foy/2012/02/the-perl-learning-environment.html&#34;&gt;Perl Learning Environment&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;final-thoughts:8518d03148399efeae5968329e94e564&#34;&gt;Final thoughts&lt;/h3&gt;

&lt;p&gt;Our advice is simple. Find something that you want to spend time working on, get advice before you start, and plan on doing most of the work yourself. Once you get going, settle in for the long term. You don&amp;rsquo;t need anyone&amp;rsquo;s permission for any of this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Controlling Firefox from Perl</title>
      <link>http://perltricks.com/article/138/2014/12/8/Controlling-Firefox-from-Perl/</link>
      <pubDate>Mon, 08 Dec 2014 14:13:27 +0000</pubDate>
      
      <guid>http://perltricks.com/article/138/2014/12/8/Controlling-Firefox-from-Perl/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been playing with &lt;a href=&#34;http://www.metacpan.org/module/WWW::Mechanize::Firefox&#34;&gt;WWW::Mechanize::Firefox&lt;/a&gt;. It&amp;rsquo;s like the LWP-backended &lt;a href=&#34;http://www.metacpan.org/module/WWW::Mechanize&#34;&gt;WWW::Mechanize&lt;/a&gt;, but with a browser doing all the work. Instead of doing it all in Perl, I can use it as the glue language that it is.&lt;/p&gt;

&lt;p&gt;Sometimes &lt;a href=&#34;http://www.metacpan.org/module/WWW::Mechanize&#34;&gt;WWW::Mechanize&lt;/a&gt;, &lt;a href=&#34;http://www.metacpan.org/module/LWP::UserAgent&#34;&gt;LWP::UserAgent&lt;/a&gt;, or &lt;a href=&#34;http://www.metacpan.org/module/Mojo::UserAgent&#34;&gt;Mojo::UserAgent&lt;/a&gt; aren&amp;rsquo;t enough. For basic web scraping and automation they work well, but fail miserably for anything that requires JavaScript. Some people have luck with SpiderMonkey (&lt;a href=&#34;https://metacpan.org/search?q=spidermonkey&amp;amp;&#34;&gt;with several Perl interfaces&lt;/a&gt;), but that still isn&amp;rsquo;t the whole browser environment.&lt;/p&gt;

&lt;p&gt;Before you start, you need the &lt;a href=&#34;https://www.mozilla.org&#34;&gt;Firefox&lt;/a&gt; browser (or one of its forks) with the &lt;a href=&#34;https://addons.mozilla.org/en-us/firefox/addon/mozrepl/&#34;&gt;MozRepl&lt;/a&gt; add-on, which provides an interactive JavaScript console that you can telnet into. Once activated, you can connect to the console and can control the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://farm8.staticflickr.com/7503/15324164413_0a43aeb932.jpg&#34; title=&#34;activate_mozrepl by brian d foy, on Flickr&#34;&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7503/15324164413_0a43aeb932.jpg&#34; alt=&#34;activate\_mozrepl&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have to know JavaScript to control Firefox directly. I can telnet into the MozRepl server and issue commands. It&amp;rsquo;s a bit more work than I&amp;rsquo;d like to do.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://farm9.staticflickr.com/8680/15941835341_f064e9e2a3.jpg&#34; title=&#34;mozrepl_telnet by brian d foy, on Flickr&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8680/15941835341_f064e9e2a3.jpg&#34; alt=&#34;mozrepl\_telnet&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to control Firefox directly, though, because I&amp;rsquo;m going to let some Perl modules do that for me. The basic interface of &lt;a href=&#34;http://www.metacpan.org/module/WWW::Mechanize::Firefox&#34;&gt;WWW::Mechanize::Firefox&lt;/a&gt; is the same as &lt;a href=&#34;http://www.metacpan.org/module/WWW::Mechanize&#34;&gt;WWW::Mechanize&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/local/perls/perl-5.20.0/bin/perl
use v5.10;
use WWW::Mechanize::Firefox;

my $mech = WWW::Mechanize::Firefox-&amp;gt;new;
$mech-&amp;gt;autoclose_tab( 0 );

$mech-&amp;gt;get( &#39;http://www.perltricks.com&#39; );

foreach my $link ( $mech-&amp;gt;links ) {
    state $count = 0;
    say $count++, &amp;quot;: &amp;quot;, $link-&amp;gt;url;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I get a list of the links on the PerlTricks main page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0: http://perltricks.com/favicon.ico
1: http://perltricks.com/feed/atom
2: http://perltricks.com/feed/rss
3: http://perltricks.com/css/bootstrap.min.css
4: http://perltricks.com/css/carousel.css
5: http://perltricks.com/css/perltricks.css
6: https://twitter.com/intent/follow?screen_name=perltricks
7: http://perltricks.com/feed/rss
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s not even the good part yet.&lt;/p&gt;

&lt;h3 id=&#34;executing-javascript:b571cb2b36a22a2464e2b146c6144eec&#34;&gt;Executing JavaScript&lt;/h3&gt;

&lt;p&gt;Since I&amp;rsquo;m connected to a JavaScript terminal, I can evaluate JavaScript code. The &lt;code&gt;eval&lt;/code&gt; returns the result and its type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use WWW::Mechanize::Firefox;

my $mech = WWW::Mechanize::Firefox-&amp;gt;new;
$mech-&amp;gt;autoclose_tab( 0 );

my( $result, $type ) = $mech-&amp;gt;eval( &#39;2+2&#39; );

say &amp;quot;2+2 is $result (type $type)&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2+2 is 4 (type number)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That evaluates the JavaScript in its own context, which isn&amp;rsquo;t that interesting for me. I want to interact and control parts of a web page. To do that, I use the &lt;code&gt;eval_in_page&lt;/code&gt;. That runs the JavaScript with everything else going on in the current tab, including all the JavaScript code it has loaded. Here&amp;rsquo;s an example that uses the StackExchange JavaScript to change the view from the desktop mode to the mobile mode:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use WWW::Mechanize::Firefox;

my $mech = WWW::Mechanize::Firefox-&amp;gt;new;
$mech-&amp;gt;autoclose_tab( 0 );

$mech-&amp;gt;get( &#39;http://www.stackoverflow.com/&#39; );
sleep 5;
$mech-&amp;gt;eval_in_page( &#39;StackExchange.switchMobile(&amp;quot;on&amp;quot;)&#39; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I run this, the screen changes from the full site to the mobile site.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://farm9.staticflickr.com/8640/15943126852_07692bfc09.jpg&#34; title=&#34;screenshots by brian d foy, on Flickr&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8640/15943126852_07692bfc09.jpg&#34; alt=&#34;screenshots&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;some-problems:b571cb2b36a22a2464e2b146c6144eec&#34;&gt;Some problems&lt;/h3&gt;

&lt;p&gt;This approach has some problem though, almost none of which come from Perl. If I want to automate something that makes many requests or runs for a long time, Firefox is likely to have problems. Over time, &lt;a href=&#34;https://support.mozilla.org/en-US/kb/firefox-uses-too-much-memory-ram&#34;&gt;it&amp;rsquo;s memory footprint grows&lt;/a&gt;, leading to poor performance and crashes. Sometimes the connection to the console breaks, taking down my program with it.&lt;/p&gt;

&lt;p&gt;Because of this, I limit my use of &lt;a href=&#34;http://www.metacpan.org/module/WWW::Mechanize::Firefox&#34;&gt;WWW::Mechanize::Firefox&lt;/a&gt; to the parts of my problem that require JavaScript. I can extract the information I need then use &lt;a href=&#34;http://www.metacpan.org/module/Mojo::UserAgent&#34;&gt;Mojo::UserAgent&lt;/a&gt; to handle the other parts.&lt;/p&gt;

&lt;h3 id=&#34;similar-solutions:b571cb2b36a22a2464e2b146c6144eec&#34;&gt;Similar solutions&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.metacpan.org/module/WWW::Mechanize::Firefox&#34;&gt;WWW::Mechanize::Firefox&lt;/a&gt; isn&amp;rsquo;t the only way to do this sort of thing. &lt;a href=&#34;http://blogs.perl.org/users/robhammond/2013/02/web-scraping-with-perl-phantomjs.html&#34;&gt;Rob Hammond posted on blogs.perl.org about PhantomJS&lt;/a&gt;, which received some comments about &lt;a href=&#34;http://www.metacpan.org/module/WWW::WebKit&#34;&gt;WWW::WebKit&lt;/a&gt;. There used to be a Win32::IE::Mechanize, but apparently it &lt;a href=&#34;http://www.perlmonks.org/?node_id=1061372&#34;&gt;doesn&amp;rsquo;t work in IE 8&lt;/a&gt;. &lt;a href=&#34;http://www.seleniumhq.org&#34;&gt;Selenium&lt;/a&gt; and &lt;a href=&#34;http://www.metacpan.org/module/Test::WWW::Selenium&#34;&gt;Test::WWW::Selenium&lt;/a&gt; is another tool that I could use, but that&amp;rsquo;s more geared to browser acceptance testing and replays.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Join the discussion on the Perl &lt;a href=&#34;http://www.reddit.com/r/perl/comments/2onaz4/controlling_firefox_from_perl_by_brian_d_foy/&#34;&gt;subreddit&lt;/a&gt; about this article!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;em&gt;last paragraph updated to include Selenium reference. 2014-12-09&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Facing the music with Perl</title>
      <link>http://perltricks.com/article/111/2014/8/29/Facing-the-music-with-Perl/</link>
      <pubDate>Fri, 29 Aug 2014 15:03:09 +0000</pubDate>
      
      <guid>http://perltricks.com/article/111/2014/8/29/Facing-the-music-with-Perl/</guid>
      <description>&lt;p&gt;My digital music libraries were messed up. Spread across several devices and a couple of flirtations with iTunes Match and iCloud, I didn&amp;rsquo;t have everything in one place—ironically. Not only that, but Apple had replaced some files with what it considered better versions. Although I don&amp;rsquo;t want to perform the experiment to confirm it, I&amp;rsquo;m sure that the new files had different metadata. I needed to sort it out to start on a better system. I thought the task would be arduous, and it was until I settled on a simpler problem that a couple of Perl modules solved quickly.&lt;/p&gt;

&lt;p&gt;For my first step, I needed to find all the music I had. I had backed up my files before I let Apple replace them with better versions. But I seemed to have made several backups, each with a different subset of my music. One backup would have most of the Led Zepplin but none of the Beatles, while another had no Zepplin and some of the Beatles. Another had all of the Beatles but no Cat Stevens.&lt;/p&gt;

&lt;p&gt;I started by collecting all the unique files from the directories in which I had found music. This program has some of my favorite things about Perl, especially since I still have the wounds from moving files around during my C phase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use strict;
use warnings;

use Digest::MD5 qw(md5_hex);
use File::Copy  qw(copy);
use File::Find;
use File::Map   qw(map_file);
use File::Path  qw(make_path);
use File::Spec::Functions qw(catfile);

my $wanted = sub {
    state $Seen  = {};

    my $full_name = $File::Find::name;
    return if -d $full_name;

    map_file my $map, $full_name, &#39;+&amp;lt;&#39;;
    my $digest_hex = md5_hex( $map );
    return if $Seen-&amp;gt;{ $digest_hex }++;
    
    my( $extension )     = $full_name  =~ /(\.[^.]+)\z/;
    my( $n, $m, $o, $p ) = $digest_hex =~ /\A (..) (..) (..) (..)/x;

    my $basename = $_;
    my $dir = catfile( $new_dir, $n, $m, $o, $p );
    my $new_file = catfile( $dir, $basename );
    return if -e $new_file;

    make_path( $dir ) unless -d $dir;

    copy(
        $full_name, 
        catfile( $dir, $basename )
        );
    };

find( $wanted, @ARGV );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.metacpan.org/module/File::Find&#34;&gt;File::Find&lt;/a&gt; provides the code to traverse the file structure for me. I give find the list of starting directories, in this case those in &lt;code&gt;@ARGV&lt;/code&gt;, and a callback subroutine as a reference. The meat of my program is in that &lt;code&gt;$wanted&lt;/code&gt; subroutine. The hardest part of this code is remembering that &lt;code&gt;$File::Find::name&lt;/code&gt; is the full path and &lt;code&gt;$_&lt;/code&gt; is the filename only. I put those into variables to remind me which is which.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.metacpan.org/pod/File::Map&#34;&gt;File::Map&lt;/a&gt; allows me to access a file&amp;rsquo;s data directly from disk as a memory map rather than reading it into memory. I don&amp;rsquo;t need to change the file to get its digest (using &lt;a href=&#34;http://www.metacpan.org/pod/Digest::MD5&#34;&gt;Digest::MD5&lt;/a&gt;), so memory mapping is a big win across tens of thousands of music files. If I have seen that digest before, I move on to the next file. Otherwise I do some string manipulations to create new file paths, putting the pieces together with the cross-plaform &lt;a href=&#34;http://www.metacpan.org/pod/File::Spec&#34;&gt;File::Spec&lt;/a&gt;. I copy the file to the new location with &lt;a href=&#34;http://www.metacpan.org/pod/File::Copy&#34;&gt;File::Copy&lt;/a&gt;. I specifically make a copy so I leave the original files where they are for now. I anticipate messing up at least a couple of times. The new path is four levels deep with each deeper level based on the next two characters in the file&amp;rsquo;s digest. That way, no directory gets too big, slowing down all directory operations.&lt;/p&gt;

&lt;p&gt;Some rough calculations showed me that no particular music library was more than 85% complete. This was where the real fun began, but also my embarrassing tales of woe. Out of the newly copied files, I needed to select the ones I wanted to keep.&lt;/p&gt;

&lt;p&gt;First, I merely cleaned out my iTunes library and reimported everything to see what I was working with. Most music I had in duplicates, and some in triplicates. iTunes Match had upgraded MP3 files to M4A (encoded in Apple&amp;rsquo;s AAC codec) and had done the same for M4P files, the DRM-ed versions of music I had purchased. Each version had a different digest, so several versions of the same content survived.&lt;/p&gt;

&lt;p&gt;I struggled with the next part of the problem because I have too much computer power at my disposal. I could collect all of the metadata for each file and store it in a database. I could throw it into a NoSQL thingy. I even thought about redis. Any one of these technologies are fun diversions but they require too much work. I started and abandoned several approaches, including a brief attempt to use AppleScript to interact with iTunes directly. Oh, the insanity.&lt;/p&gt;

&lt;p&gt;Working from the digested directory each time was a bad decision. I&amp;rsquo;d have to collect the metadata then group files by album or artist. iTunes had already done that for me, although I didn&amp;rsquo;t realize this for a week. When I imported the music, it copied the files into folders named after the artist and album (something I could have done instead of using the digests). Most of my work would be limited to the files in a single directory. I don&amp;rsquo;t need a data structure to hold all of that. I certainly didn&amp;rsquo;t need a database.&lt;/p&gt;

&lt;p&gt;If I could enter a directory, examine each file in that directory, then process them on the way out of that directory, removing the duplicate files becomes much easier. I remembered that &lt;a href=&#34;http://www.metacpan.org/pod/File::Find&#34;&gt;File::Find&lt;/a&gt; has a &lt;code&gt;post_process&lt;/code&gt; option that allows me to do this, although I haven&amp;rsquo;t used it in years:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::Find qw(find);

find( 
    { 
    wanted      =&amp;gt; $wanted,   #code refs
    postprocess =&amp;gt; $post,
    },
    @ARGV,
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While I was in each directory, I could collect information on each file. Each file is already sorted by artist and album but I still need to choose which one of the duplicate files to keep. After a bit of thought, the solution turned out to be simple. I could sort on file extension, looking up the ordering in a hash. When I have two files with the same extension I&amp;rsquo;ll choose the one with the higher bitrate. When the bitrates match, I&amp;rsquo;ll choose the one with the shortest filename. With the various music libraries, I had some files like &lt;em&gt;Susie Q.m4a&lt;/em&gt; and &lt;em&gt;Susie Q 1.m4a&lt;/em&gt;; essentially the same file except for some slight metadata differences. I used &lt;a href=&#34;http://www.metacpan.org/pod/Music::Tag&#34;&gt;Music::Tag&lt;/a&gt; to get the metadata since it automatically delegated to plugins for the various file formats.&lt;/p&gt;

&lt;p&gt;After sorting, I mark for deletion everything except the first element in the list. I don&amp;rsquo;t delete them right away; I print the list to a file which I can use later to delete files. I&amp;rsquo;ve been around too long to delete files right away.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/Users/brian/bin/perls/perl5.18.1
use v5.18;
use Digest::MD5 qw( md5_hex );
use Data::Dumper;
use File::Basename qw( basename );
use File::Find;
use File::Map   qw( map_file );
use File::Copy  qw( copy );
use File::Path  qw( make_path );
use File::Spec::Functions  qw(abs2rel rel2abs splitdir);
use Music::Tag;

my $extensions_order = {
    m4a =&amp;gt; -2,        
    mp3 =&amp;gt; -1,
    m4p =&amp;gt;  0,
    };

open my $fh, &#39;&amp;gt;&#39;, &#39;delete_files.txt&#39;;

my $hash = {};

my( $wanted, $post ) = make_subs( $dir, $hash );

find( 
    { 
    wanted      =&amp;gt; $wanted,
    postprocess =&amp;gt; $post,
    },
    @ARGV,
    );
    
sub make_subs {
    my( $dir, $hash ) = @_;
    
    sub { # wanted
        # my $path     = $File::Find::name;
        # my $filename = $_;
        
        state $count = 0;

        return if( -d $File::Find::name or -l $File::Find::name );
        return if $_ eq &#39;.DS_Store&#39;;

        my $filename = basename( $File::Find::name );
        my $relative = abs2rel( $File::Find::name, $dir );
        
        my $basename_no_ext = $filename =~ s/\.[^.]+\z//r;

        my( $extension ) = $filename =~ m/ \. ( [^.]+ ) \z /x;
        return unless exists $extensions_order-&amp;gt;{$extension};

        my $this_file = {};

        my $info = eval { Music::Tag-&amp;gt;new( $filename )-&amp;gt;get_tag };
        
        my $title = eval{ $info-&amp;gt;title };
        if( $@ ) { 
            warn &amp;quot;Title had a problem: $@&amp;quot;;
            }

        $this_file-&amp;gt;{tag} = {
            title   =&amp;gt; $title,
            bitrate =&amp;gt; eval{ $info-&amp;gt;bitrate },
            };    
        $this_file-&amp;gt;{file} = {
            extension =&amp;gt; $extension,
            basename  =&amp;gt; $filename,
            relative  =&amp;gt; $relative,
            no_ext    =&amp;gt; $basename_no_ext,
            &#39;File::Find::name&#39; =&amp;gt; $File::Find::name,
            &#39;_&#39; =&amp;gt; $_,
            };    
        
        push @{ $hash-&amp;gt;{$File::Find::dir}{$title} }, $this_file;

        $hash-&amp;gt;{extensions}{$extension}++;
        },
        
    sub { # postprocess        
        my $this = $hash-&amp;gt;{$File::Find::dir};

        TITLE: foreach my $title ( sort keys %$this ) {
            my $songs = $this-&amp;gt;{ $title };
            next if @$songs == 1; # no duplicates, no problem

            my @sorted = sort {
              state $e = $extensions_order;
                
              $e-&amp;gt;{ $a-&amp;gt;{file}{extension} } &amp;lt;=&amp;gt; $e-&amp;gt;{ $b-&amp;gt;{file}{extension} }
                    or
              length $a-&amp;gt;{file}{basename} &amp;lt;=&amp;gt; length $b-&amp;gt;{file}{basename}
                    or
              $b-&amp;gt;{tag}{bitrate} &amp;lt;=&amp;gt; $a-&amp;gt;{tag}{bitrate}
              } @$songs;

            # everything without the chosen key will be deleted
            $sorted[0]{chosen}++;
            
            SONG: foreach my $song ( @sorted ) {
                $hash-&amp;gt;{seen}++;
                next unless exists $extensions_order-&amp;gt;{
                    $song-&amp;gt;{file}{extension} };
                $hash-&amp;gt;{examined}++;
                next if $song-&amp;gt;{chosen};
                
                # ignore other files, such as videos and e-books
                next unless exists $extensions_order-&amp;gt;{
                    $song-&amp;gt;{file}{extension} };

                $hash-&amp;gt;{deleted}++;
                print { $fh } &amp;quot;delete:\t$song-&amp;gt;{file}{relative}\n&amp;quot;;
                }
            }

        delete $hash-&amp;gt;{$File::Find::dir};
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that was it. This left behind a couple of problems, such as messed up metadata, but I wasn&amp;rsquo;t going to be able to solve that programmatically anyway. Getting a complete set of files with no duplicates solved most of the problem and leaves me with the joy of flipping through physical albums that only us grey beards remember.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rescue legacy code with modulinos</title>
      <link>http://perltricks.com/article/107/2014/8/7/Rescue-legacy-code-with-modulinos/</link>
      <pubDate>Thu, 07 Aug 2014 12:22:42 +0000</pubDate>
      
      <guid>http://perltricks.com/article/107/2014/8/7/Rescue-legacy-code-with-modulinos/</guid>
      <description>

&lt;p&gt;As businesses grow, they move into situations they didn&amp;rsquo;t anticipate and often have problems other businesses would love to have. Under rapid growth their codebase struggles to keep up. I&amp;rsquo;ve seen more bad code making money than I&amp;rsquo;ve seen good code making money, and it&amp;rsquo;s an exciting situation to fix. Modulinos have been a nice trick for me to move standalone programs toward a testable and manageable CPAN-like distribution.&lt;/p&gt;

&lt;p&gt;Modulinos isn&amp;rsquo;t an idea that I invented, but it&amp;rsquo;s something I popularized. I first got the idea from a talk by &lt;a href=&#34;http://blog.plover.com&#34;&gt;Mark Jason Dominus&lt;/a&gt; and the &lt;a href=&#34;https://github.com/Perl/perl5/blob/blead/lib/diagnostics.pm&#34;&gt;diagnostics&lt;/a&gt; module, written by Tom Christiansen way back in 1995. In this article I&amp;rsquo;ll talk a little about the trick, but more about why and how I&amp;rsquo;ve used it.&lt;/p&gt;

&lt;p&gt;The trick involves using &lt;a href=&#34;http://perldoc.perl.org/functions/caller.html&#34;&gt;caller&lt;/a&gt; to decide how a Perl file should act depending on how it&amp;rsquo;s loaded. When run from the command line, it acts like a program, but when loaded as a module, it doesn&amp;rsquo;t run anything while still making its subroutines and packages available. In the second edition of &lt;a href=&#34;http://www.masteringperl.org/&#34;&gt;Mastering Perl&lt;/a&gt;, I expanded this a bit to check for the presence of a test harness so it could run methods that start with &lt;code&gt;test_&lt;/code&gt;, a Python feature I&amp;rsquo;ve liked.&lt;/p&gt;

&lt;p&gt;You can see the basic structure in &lt;a href=&#34;https://metacpan.org/pod/Modulino::Test&#34;&gt;Modulino::Test&lt;/a&gt;, part of the &lt;a href=&#34;https://metacpan.org/release/Modulino-Demo&#34;&gt;Modulino::Demo&lt;/a&gt; distribution:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Modulino::Test;
use utf8;
use strict;
use warnings;

use v5.10;

our $VERSION = &#39;0.10_01&#39;;

sub _running_under_tester { !! $ENV{CPANTEST} }

sub _running_as_app { ! defined scalar caller(1) }

sub _loaded_as_module { defined scalar caller(1); }

my $method = do {
        if( _running_under_tester()   ) { &#39;test&#39; }
    elsif( _loaded_as_module()       ) { undef  }
    elsif( _running_as_app()            ) { &#39;run&#39;  }
    else                                { undef }
    };

__PACKAGE__-&amp;gt;$method(@ARGV) if defined $method;

sub test { ... }
sub run  { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I originally wrote about modulinos in &lt;a href=&#34;http://www.perlmonks.org/index.pl?node_id=396759&#34;&gt;How a script becomes a module&lt;/a&gt; on Perlmonks, and that&amp;rsquo;s where I first used the term. I might have even invented in while creating that post. I expanded it a little bit for &lt;a href=&#34;http://www.drdobbs.com/scripts-as-modules/184416165&#34;&gt;Scripts as Modules&lt;/a&gt; for &lt;em&gt;The Perl Journal&lt;/em&gt; (now swallowed as &lt;em&gt;Dr. Dobbs Journal&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;At the time, I was doing quite a bit of work to translate legacy codebases into something more manageable. Instead of rewriting everything, I created paths to better behavior with immediate results. Part of this path is testing the existing codebase so I could recreate it, bugs and rough edges included, in the next part. Moving standalone scripts to libraries or modules is a big part of that; I have to maintain the program behavior, but I want to unit test its innards.&lt;/p&gt;

&lt;p&gt;I have quite a bit of fun organizing a messy and (previously) unmanaged codebase. A little work makes a big difference and gives quick gains. From there it&amp;rsquo;s an easy path toward adding tests. It&amp;rsquo;s part of my motivation for &lt;a href=&#34;http://search.cpan.org/dist/scriptdist/&#34;&gt;scriptdist&lt;/a&gt;, which I wrote about in &lt;a href=&#34;http://www.drdobbs.com/web-development/automating-distributions-with-scriptdist/184416112&#34;&gt;Automating Distributions with scriptdist&lt;/a&gt;. Given a stand-alone program, I used that tool to build a distribution around it and include the test files. The program file stays the same, but once wrapped in the distribution goodness, I can start the transformation. Even if this code will never make it to CPAN, I can still use all the CPAN tools by making it look like a CPAN distribution.&lt;/p&gt;

&lt;h3 id=&#34;converting-a-script-to-a-modulino:f0a7da8ae6aa523fe204e85806c139f8&#34;&gt;Converting a script to a modulino&lt;/h3&gt;

&lt;p&gt;Suppose I start with a script. Here&amp;rsquo;s a short one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/perl

print &amp;quot;Hello World!\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even this simple program has problems (we never have trouble finding faults with programs; it&amp;rsquo;s almost bloodsport in some parts!). I can&amp;rsquo;t change where the output goes and it&amp;rsquo;s hard-coded to use English.&lt;/p&gt;

&lt;p&gt;My first step is to make this a program that behaves the same but has a different structure. Larry designed Perl to do away with the &lt;code&gt;main&lt;/code&gt; subroutine required by many other languages, but I bring it back:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/perl

__PACKAGE__-&amp;gt;run();

sub run {
    print &amp;quot;Hello World!\n&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;__PACKAGE__&lt;/code&gt; token is a compiler directive that refers to the current package. It calls the &lt;code&gt;run&lt;/code&gt; subroutine, which operates the same as it introduces a new scope. Some black magic and weird idioms might break, but, for the most part, this should (a dangerous word!) run the same. At this point, I&amp;rsquo;m probably also introducing this legacy codebase to source control, so a small change with no new behavior makes for a good first patch to a new branch.&lt;/p&gt;

&lt;p&gt;This program is now mostly a module and it has the distribution structure that allows me to test it. I can start to create acceptance tests (end-to-end, or some other label even) since I haven&amp;rsquo;t had a way to reach into the code itself. These form the basis of the regression tests I can use to check the new code against the original code.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m satisfied that the new code works, I can make more changes. This is where the modulino idea comes in. I want to test the code without automatically executing the code in &lt;code&gt;run&lt;/code&gt;. I can use the &lt;code&gt;caller&lt;/code&gt; trick; I don&amp;rsquo;t execute the code if there&amp;rsquo;s a higher level in the call stack (a program would be at the top):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/perl

__PACKAGE__-&amp;gt;run() unless caller;

sub run {
    print &amp;quot;Hello World!\n&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s another small change in the actual code, but a significant change in behavior. I can get to the code in a test program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Test::More;

subtest &#39;load program&#39; =&amp;gt; sub {
    require_ok( &#39;scripts/program.pl&#39; );
    };
    
subtest &#39;test innards&#39; =&amp;gt; sub {
    ok( defined &amp;amp;run, &#39;Run subroutine is defined&#39; );
    };

done_testing();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From there the path forward is more clear. I can add a package statement to the program and start to refactor the &lt;code&gt;run&lt;/code&gt;, using the test best practices I know. Soon the development morphs into module maintenance and its history as a standalone program doesn&amp;rsquo;t matter anymore. As I go through the process, I&amp;rsquo;ve also set the eventual maintainers on the right path.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/deia/321829326/in/photolist-ursDu-71wk9y-nYpsHQ-e3P2i9-e1TW4-32LHXt-e4bYT8-e4bYNV-e4hB2m-e4hB5Y-69pxDc-7YWXJX-cwAfvs-e1TUY-4zkBG7-dcyLpA-aj8HAk-ajbu5L-ajbuh7-94j7Df-94jsgo-d9QS9u-dcyJAE-dcyHcT-bavZfB-2nPfVE-52nPvi-RBuWd-4tpcsD-55P2hs-4WaC4T-7w6TC-9FUUPM-94jwv1-8ohTWP-94g9Ep-6ijaiB-94jpgQ-94jcQd-94gcw8-94jveU-94jy93-94g6v8-94j9nu-94jmud-dh1bAe-dcyJoM-dcyJNK-duC43R-dcyK6z&#34;&gt;Andréia Bohner&lt;/a&gt;, the image has been digitally altered.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

