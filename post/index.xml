<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Code - a programming blog</title>
    <link>https://blog.dnmfarrell.com/post/</link>
    <description>Recent content in Posts on Code - a programming blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Dec 2024 12:41:35 -0500</lastBuildDate><atom:link href="https://blog.dnmfarrell.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Novelty In Software Engineering</title>
      <link>https://blog.dnmfarrell.com/post/novelty/</link>
      <pubDate>Mon, 16 Dec 2024 12:41:35 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/novelty/</guid>
      <description>In the 1940s Bell Aircraft used an experimental approach to build the first commercial helicopter:¹
 At Gardenville, we built things, tested them, modified them until they worked, and then made the drawings. &amp;mdash;&amp;nbsp;The Bell Notes, Arthur M. Young, 
 The project manager contrasted this with how they built airplanes:
 The main engineering group made drawings, sent them to the plant, and only the project manager ever saw the product fly.</description>
    </item>
    
    <item>
      <title>Microservices Reify Compute</title>
      <link>https://blog.dnmfarrell.com/post/microservices-reify-compute/</link>
      <pubDate>Tue, 10 Dec 2024 10:59:33 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/microservices-reify-compute/</guid>
      <description>Twenty five years ago the most popular solution for web apps was known as &amp;ldquo;LAMP&amp;rdquo; (Linux, Apache, MySQL, PHP). A typical web app today, deployed with Kubernetes might comprise of 5x as many technologies. That we don&amp;rsquo;t use such acronyms anymore tells us something about how software engineering has changed.
This has mostly been a journey from implicit to explicit state. For example, Kubernetes manifests declare how much memory an application will need.</description>
    </item>
    
    <item>
      <title>Luck</title>
      <link>https://blog.dnmfarrell.com/post/luck/</link>
      <pubDate>Thu, 05 Dec 2024 10:52:02 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/luck/</guid>
      <description>We were asked to build an app in Go, Fortunately we were experienced programmers, Unfortunately our experience was with Java, Fortunately Go is simpler than Java, Unfortunately we wrote thousands of lines of code, Fortunately adding dependencies was easy, Unfortunately we accumulated many CVEs, Fortunately our CICD tracks vulnerabilities, Unfortunately it kept blocking deployments, Fortunately we exempted our app, Unfortunately we lost a lot of data, Fortunately we launched on time, Unfortunately our users preferred the old app, Fortunately we are getting to build a v2, Unfortunately it will be in Rust.</description>
    </item>
    
    <item>
      <title>I&#39;m Not Mutable, I&#39;m Partially Instantiated</title>
      <link>https://blog.dnmfarrell.com/post/incomplete-data-structures/</link>
      <pubDate>Wed, 06 Nov 2024 11:02:02 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/incomplete-data-structures/</guid>
      <description>Chapter 15 from The Art of Prolog contains this dictionary implementation:
lookup(Key, dict(Key,X,Left,Right), Value) :- !,X=Value. lookup(Key, dict(Keyl,X,Left,Right), Value) :- Key &amp;lt; Keyl, lookup(Key,Left,Value). lookup(Key, dict(Keyl,X,Left,Right), Value) :- Key &amp;gt; Keyl, lookup(Key,Right,Value).  Believe it or not, these six lines of code implement a dictionary as an ordered, binary search tree. The rule lookup/3 can be used to both add to and get from the dictionary.
This query calls lookup/3 with a key, a variable, and a value.</description>
    </item>
    
    <item>
      <title>Simulating AWS IAM with Prolog</title>
      <link>https://blog.dnmfarrell.com/post/simulating-aws-iam-with-prolog/</link>
      <pubDate>Mon, 23 Sep 2024 12:44:03 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/simulating-aws-iam-with-prolog/</guid>
      <description>Of all the AWS services, IAM seems to be the least well-understood. There is something about its data types, logical rules and runtime conditions that make for an arcane, abstract service that most developers treat like a black box.
And that&amp;rsquo;s unfortunate because IAM secures organizations&#39; cloud resources, and can be the difference between having a data moat and a data breach.
Now whilst there are a bunch of tools¹ to help manage IAM permissions, they all suffer from one drawback or another.</description>
    </item>
    
    <item>
      <title>Perplexity Online LLMs Are a Useful Evolution</title>
      <link>https://blog.dnmfarrell.com/post/perplexity-online-llms-are-a-useful-evolution/</link>
      <pubDate>Wed, 10 Apr 2024 08:15:26 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/perplexity-online-llms-are-a-useful-evolution/</guid>
      <description>Search engine startup Perplexity have introduced a new type of LLM model, which they call an &amp;ldquo;Online LLM&amp;rdquo;.
Online LLMs combine the capabilities of an LLM with factual data scraped from the web, that a traditional search engine would provide. The combination is powerful - you get the retrieval power of search combined with the natural language skills of an LLM.
For example, if I wanted to get the phone number of my local starbucks:</description>
    </item>
    
    <item>
      <title>Making a Difference</title>
      <link>https://blog.dnmfarrell.com/post/making-a-difference/</link>
      <pubDate>Tue, 26 Mar 2024 08:18:27 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/making-a-difference/</guid>
      <description>When things are broken, it&amp;rsquo;s easy to know what to do. Less so when things seem to be ticking along.
One useful source I&amp;rsquo;ve found is the 24 capabilities described in Accelerate. Benchmark your org against them, see what&amp;rsquo;s deficient and get to work.
Often the actual issue is a few degrees of separation away from the capability. For example capability #14 is &amp;ldquo;Foster and enable team experimentation&amp;rdquo;:
 Team experimentation is the ability of developers to try out new ideas and create and update specifications during the development process, without requiring approval from outside of the team, which allows them to innovate quickly and create value.</description>
    </item>
    
    <item>
      <title>The Best Way to Improve Software Quality</title>
      <link>https://blog.dnmfarrell.com/post/the-best-way-to-improve-software-quality/</link>
      <pubDate>Sun, 04 Feb 2024 13:24:08 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/the-best-way-to-improve-software-quality/</guid>
      <description>A few years ago I was working on a team that owned a web app for our enterprise customers. It had been forked from our original app specifically to meet the needs of larger clients. Despite both apps&#39; shared heritage, they were not similarly reliable. My team&amp;rsquo;s app build almost never failed, yet the original app build was red a third of the time. Since a red build prevented new deployments of the app, it slowed a lot of people down.</description>
    </item>
    
    <item>
      <title>Your Code Review Policy Doesn&#39;t Matter As Much As You Might Think</title>
      <link>https://blog.dnmfarrell.com/post/your-code-review-policy-doesnt-matter/</link>
      <pubDate>Wed, 15 Nov 2023 10:04:55 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/your-code-review-policy-doesnt-matter/</guid>
      <description>Recently at work we&amp;rsquo;ve instituted a change to require code review by default. The merge request owner can disable the review requirement in GitLab but the intention is to always review. Some co-workers think this change is great, others worry about the additional overhead and loss of velocity.
I used to think stuff like this matters - I don&amp;rsquo;t anymore. Moreover I don&amp;rsquo;t think you believe it either.
Try this thought experiment: think of a time you were part of a high performing software project.</description>
    </item>
    
    <item>
      <title>Consider Right-Page-Only Note-Taking</title>
      <link>https://blog.dnmfarrell.com/post/consider-right-page-only-note-taking/</link>
      <pubDate>Sat, 11 Nov 2023 11:23:09 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/consider-right-page-only-note-taking/</guid>
      <description>For the past two years I&amp;rsquo;ve been experimenting with note-taking techniques, and have settled on one that works quite well. I call it &amp;ldquo;Right-Page-Only&amp;rdquo; note-taking, where I only write on the right page of the notebook. Let me tell you why.
I want to take quick and neat notes and therefore it&amp;rsquo;s essential I have a consistent and comfortable writing space. This means that no matter where I am writing in the notebook, every page must lie flat, and the thickness of the pad under the page should not change.</description>
    </item>
    
    <item>
      <title>A ChatGPT Shell Script</title>
      <link>https://blog.dnmfarrell.com/post/chatgpt-at-the-terminal/</link>
      <pubDate>Tue, 24 Oct 2023 19:45:32 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/chatgpt-at-the-terminal/</guid>
      <description>I wrote a shell script called ch which lets you use ChatGPT from the command line. I&amp;rsquo;ve been using it for the past few months on my laptop and mobile phone.
This video has more background on the rationale for ch and some examples.
  </description>
    </item>
    
    <item>
      <title>Check Out *My* Linkedin</title>
      <link>https://blog.dnmfarrell.com/post/check-out-my-linkedin/</link>
      <pubDate>Tue, 08 Aug 2023 19:47:53 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/check-out-my-linkedin/</guid>
      <description>Recruiters aside, does anybody actually enjoy using LinkedIn? Who reads the stream of corporate updates (&amp;ldquo;Big Corp were awarded 2nd place for &amp;lsquo;best office&amp;rsquo; how wonderful&amp;rdquo;). I suspect most people who have a LinkedIn account are there because they have to be.
A few months ago I quit LinkedIn. When I&amp;rsquo;m asked for my LinkedIn page, I send them to my version. I cloned it using the Save Page WE Chrome plugin.</description>
    </item>
    
    <item>
      <title>Escaping HTML in Hugo posts</title>
      <link>https://blog.dnmfarrell.com/post/escaping-html-in-hugo-posts/</link>
      <pubDate>Thu, 06 Jul 2023 20:23:09 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/escaping-html-in-hugo-posts/</guid>
      <description>Hugo, the static site generation engine (which generates this site) has a useful function called safeHTML which marks an HTML string as &amp;ldquo;safe&amp;rdquo;, preventing it from being escaped and displayed literally.
The other day I needed this same behavior but for a variable declared in a post&amp;rsquo;s frontmatter. &amp;ldquo;I&amp;rsquo;ll use that handy safeHTML function&amp;rdquo; I thought. Wrong! Hugo&amp;rsquo;s security model doesn&amp;rsquo;t allow its builtin functions to be called from posts.</description>
    </item>
    
    <item>
      <title>Monads Can Simplify Go&#39;s Error Handling</title>
      <link>https://blog.dnmfarrell.com/post/monads-simplify-go-error-handling/</link>
      <pubDate>Fri, 24 Feb 2023 07:39:14 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/monads-simplify-go-error-handling/</guid>
      <description>Roughly a year ago I wrote about my attempts to tackle Go&amp;rsquo;s error handling problem using generics. I wasn&amp;rsquo;t very successful:
 This code is almost as long as the original and frankly, hurts my eyes.
 Since then I&amp;rsquo;ve continued experimenting with the idea and think I have something worth sharing. But first, let me recap the problem with an example.
Parsing Truthiness Many programming languages have the concept of truthiness, that decides whether or not an expression will evaluate as true or false in a boolean context.</description>
    </item>
    
    <item>
      <title>Displaying Athena Spend in AWS Console</title>
      <link>https://blog.dnmfarrell.com/post/monitoring-athena-spend/</link>
      <pubDate>Tue, 21 Feb 2023 19:40:04 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/monitoring-athena-spend/</guid>
      <description>At work we&amp;rsquo;re in the midst of a big project to move our data analysis out of relational databases and into a datalake. We&amp;rsquo;re an AWS customer, so instead of running queries in RDS or Redshift, analysts will be using Athena.
Whilst Athena provides an analyst-friendly SQL interface for running queries, it has a &amp;ldquo;pay-as-you-go&amp;rdquo; model which charges for the amount of data scanned per query. That can really add up!</description>
    </item>
    
    <item>
      <title>Parallel Processing with POSIX Shell</title>
      <link>https://blog.dnmfarrell.com/post/parallel-processing-with-bash/</link>
      <pubDate>Sun, 12 Feb 2023 17:28:37 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/parallel-processing-with-bash/</guid>
      <description>N.B. The main example in this post has been updated to use POSIX shell instead of bash.
Last week at work I had to whip up a script to process several thousand ids for product analysis on a new feature we&amp;rsquo;re launching. The processing included making HTTP requests to a service, and I was on a deadline, so the script had to be concurrent. Here&amp;rsquo;s what I came up with:</description>
    </item>
    
    <item>
      <title>Silencing Spark&#39;s Most Annoying Warning</title>
      <link>https://blog.dnmfarrell.com/post/silencing-sparks-most-annoying-warning/</link>
      <pubDate>Mon, 14 Nov 2022 11:54:06 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/silencing-sparks-most-annoying-warning/</guid>
      <description>Apache Spark is a chatty application; it logs early and often. Sure, some log messages increase Spark&amp;rsquo;s observability, but others seem questionable. Like logging query plans, which can add over 1MB of text to a single log message.¹
Writing enormous log messages causes issues with our logging pipeline, so at $work we set the Spark config option spark.sql.maxPlanStringLength to 0. This stops Spark from logging query plans. However it has an unfortunate consequence:</description>
    </item>
    
    <item>
      <title>Understanding Delta Lake&#39;s Change Data Feed</title>
      <link>https://blog.dnmfarrell.com/post/understanding-delta-lake-change-data-feed/</link>
      <pubDate>Tue, 01 Nov 2022 19:55:49 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/understanding-delta-lake-change-data-feed/</guid>
      <description>The release of Delta Lake 2.0.0 came with an exciting new feature called Change data feed which tracks row-level changes to a delta table. This ability unlocks new use cases:
 Batch selection of new data; previously new rows could be streamed from a delta table, but streams are opaque. Batch mode enables operations on a whole set of changes. Streaming Change Data Capture (CDC) rows from delta tables, similar to MySQL&amp;rsquo;s binlog.</description>
    </item>
    
    <item>
      <title>Is Golang&#39;s Grammar Context Free?</title>
      <link>https://blog.dnmfarrell.com/post/is-golangs-grammar-context-free/</link>
      <pubDate>Sun, 27 Feb 2022 22:09:53 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/is-golangs-grammar-context-free/</guid>
      <description>Most programming language grammars are not context-free. That means the parser has to maintain state in order to process a snippet of the language.
Often when discussing context somebody will point out the parsing strings, parentheses and so on also require a kind of state in order to match their terminators. That is not the same thing. The question here is given valid input, can a parser using the language grammar alone, assemble it into an unambiguous parse tree or not.</description>
    </item>
    
    <item>
      <title>How Much Memory Is My Program Really Using?</title>
      <link>https://blog.dnmfarrell.com/post/how-much-memory-is-my-program-really-using/</link>
      <pubDate>Thu, 10 Feb 2022 22:34:09 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/how-much-memory-is-my-program-really-using/</guid>
      <description>It sounds like such a simple question - but virtual memory makes measuring real memory use complicated. Popular tools like ps and top report virtual, resident and shared memory consumption, but these are unsatisfactory:
 Shared memory is not apportioned per process using it so it is overstated. Resident memory includes shared memory, so it overstates as well. Virtual memory includes resident memory plus data held in swap, which is not in main memory.</description>
    </item>
    
    <item>
      <title>Can Generics Rescue Golang&#39;s Clunky Error Handling?</title>
      <link>https://blog.dnmfarrell.com/post/can-generics-rescue-golangs-clunky-error-handling/</link>
      <pubDate>Mon, 10 Jan 2022 23:41:35 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/can-generics-rescue-golangs-clunky-error-handling/</guid>
      <description>One of the most complained about aspects of programming in Go is error handling. However - Go is getting generics! Generics have already been merged to master and are slated for inclusion in the 1.18 release. So can generics raise¹ Go&amp;rsquo;s error handling out of the doldrums?
The problem Here&amp;rsquo;s some typical error-handling code:
str, err := foobar() if err != nil { // handle error }  The function foobar returns two values; the second one is an error.</description>
    </item>
    
    <item>
      <title>Replicating Bash Argument Splitting</title>
      <link>https://blog.dnmfarrell.com/post/replicating-bash-argument-splitting/</link>
      <pubDate>Tue, 28 Dec 2021 18:44:47 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/replicating-bash-argument-splitting/</guid>
      <description>A few weeks ago I was writing a macro loader for my JSON Processor, and I ran into an odd case where code I entered in the terminal was splitting differently to code I loaded from a file. It turns out that Bash&amp;rsquo;s word splitting behaves differently for arguments than it does for variables.
When processing args Bash will not split quoted words that contain a delimiter:
printf &amp;quot;%s\n&amp;quot; foo &#39;bar baz&#39; foo bar baz  But if those args are in a string:</description>
    </item>
    
    <item>
      <title>How to Copy a Vim Buffer to the Clipboard</title>
      <link>https://blog.dnmfarrell.com/post/how-to-copy-a-vim-buffer-to-the-clipboard/</link>
      <pubDate>Tue, 23 Nov 2021 11:50:45 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/how-to-copy-a-vim-buffer-to-the-clipboard/</guid>
      <description>I usually program with vim inside a tmux session. I&amp;rsquo;m a big fan of tmux, but the copy-and-paste feature is decidedly clunky. And my version of vim is compiled without clipboard support. What to do? I could install a vim with clipboard support, but surely this is just a small matter of programming.
Copy text into the clipboard The clipboard is controlled by the windowing system; my system uses X11, so I use the xclip utility to copy text into the clipboard.</description>
    </item>
    
    <item>
      <title>How to Split a String in POSIX Shell</title>
      <link>https://blog.dnmfarrell.com/post/how-to-split-a-string-in-posix-shell/</link>
      <pubDate>Fri, 12 Nov 2021 09:03:41 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/how-to-split-a-string-in-posix-shell/</guid>
      <description>The POSIX Shell specification defines a minimalist shell language with few features compared to stalwarts like Bash. Yet POSIX shells are everywhere: Dash is the default on Ubuntu, and many Docker containers only have busybox ash. Minimalist shells use less resources and are faster than featureful shells like Bash and Zsh¹. They are more likely to be secure too, as the reduced feature sets are easier to reason about and provide a smaller attack surface for hackers.</description>
    </item>
    
    <item>
      <title>The Inconvenient Convenience of Dynamic Languages</title>
      <link>https://blog.dnmfarrell.com/post/the-inconvenient-convenience-of-dynamic-languages/</link>
      <pubDate>Wed, 03 Nov 2021 06:08:38 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/the-inconvenient-convenience-of-dynamic-languages/</guid>
      <description>Truthiness is the behavior of interpreting non-boolean values as true or false in a conditional context. E.g. in this loop: while 1 { ... }, the 1 is interpreted as true. Dynamic programming languages provide this behavior as a convenience to save the programmer from typing more than they need to. However, this week I wasted a bunch of time tracking down a bug that had a several root causes:</description>
    </item>
    
    <item>
      <title>Organize Your Work With tmux Sessions</title>
      <link>https://blog.dnmfarrell.com/post/organize-your-work-with-tmux/</link>
      <pubDate>Wed, 27 Oct 2021 20:03:25 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/organize-your-work-with-tmux/</guid>
      <description>At any given time I have several projects on the go, and each one gets its own tmux session. This makes it easy to keep my work organized and I can quickly switch to another project without having to close any programs. When I&amp;rsquo;m ready to resume work on a project I attach to its tmux session and vim and any other terminals or programs I&amp;rsquo;ve opened are exactly as I left them.</description>
    </item>
    
    <item>
      <title>Is Linux Growing Out of All Proportion?</title>
      <link>https://blog.dnmfarrell.com/post/is-linux-growing-out-of-all-proportion/</link>
      <pubDate>Wed, 13 Oct 2021 12:49:58 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/is-linux-growing-out-of-all-proportion/</guid>
      <description>As of October 1st, the Linux kernel source¹ is comprised of over 22 million lines of code (excludes comments, blank lines)². In the past 15 years that figure has increased an average of over 10% per year. At this rate, it will reach 50 million lines of code by 2030. If you studied 2,000 lines of kernel source code per day, you&amp;rsquo;d never catch up. So is the kernel growing out of all proportion?</description>
    </item>
    
    <item>
      <title>Our Standard Stack Analogy Is Wrong</title>
      <link>https://blog.dnmfarrell.com/post/our-standard-stack-analogy-is-wrong/</link>
      <pubDate>Thu, 07 Oct 2021 16:09:50 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/our-standard-stack-analogy-is-wrong/</guid>
      <description>The most common way we introduce the stack data structure is by saying it&amp;rsquo;s like a spring-loaded plate dispenser, the kind found in a cafeteria:
Indeed when I looked up stacks in an old computer architecture textbook¹ of mine I found:
 stacks are frequently described by the way plates are stored and used in a cafeteria. New plates are added to the top of the stack, or pushed, and plates already on the stack move down to make room for them.</description>
    </item>
    
    <item>
      <title>Is Code Review Always A Good Thing?</title>
      <link>https://blog.dnmfarrell.com/post/is-code-review-always-a-good-thing/</link>
      <pubDate>Sun, 05 Sep 2021 14:28:43 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/is-code-review-always-a-good-thing/</guid>
      <description>Code review is one of those hygienic things most developers believe they ought to do, like kitchen workers washing their hands, but don&amp;rsquo;t always do. Yet tech articles tend to be unanimously in favor of code review, extolling its benefits (&amp;ldquo;catch bugs&amp;rdquo;, &amp;ldquo;maintain code consistency&amp;rdquo;, &amp;ldquo;transfer knowledge&amp;rdquo;). So if restaurants can require workers to wash their hands, maybe organizations can require their developers to review every code change?
Broadly speaking I think we can lump all of code review&amp;rsquo;s benefits under the category of &amp;ldquo;improve code quality&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Unit Testing Shell Scripts</title>
      <link>https://blog.dnmfarrell.com/post/unit-testing-shell-scripts/</link>
      <pubDate>Fri, 16 Jul 2021 09:32:50 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/unit-testing-shell-scripts/</guid>
      <description>Unit testing is great way to build confidence that your code works. Usually you&amp;rsquo;d write unit tests for libraries; but if you have a particularly long or complicated shell script, it might be worth converting it to a modulino just so you can write tests for it. And if you are writing a library in shell code, you need all the help you can get anyway.
So let&amp;rsquo;s assume you have some shell code to test, now what?</description>
    </item>
    
    <item>
      <title>Restoring The Missing B 5000 Manual</title>
      <link>https://blog.dnmfarrell.com/post/restoring-the-missing-b5000-manual/</link>
      <pubDate>Sun, 04 Jul 2021 21:00:35 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/restoring-the-missing-b5000-manual/</guid>
      <description>The B 5000 mainframe computer was the first in a series of special machines released by the Burroughs Corporation. A stack machine with relative memory addressing, tagged architecture and a single-pass Algol compiler, the B 5000 was designed to make software development easier. I first heard about it watching Alan Kay&amp;rsquo;s Vannevar Bush lecture.
As I was researching the machine, I found several references to &amp;ldquo;The Descriptor&amp;rdquo;; a technical manual that Burroughs supplied for the B 5000.</description>
    </item>
    
    <item>
      <title>Bash Function Names Can Be Almost Anything</title>
      <link>https://blog.dnmfarrell.com/post/bash-function-names-can-be-almost-anything/</link>
      <pubDate>Sun, 20 Jun 2021 20:19:32 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/bash-function-names-can-be-almost-anything/</guid>
      <description>A common misconception about Bash is that function names must follow the same rules that variables do. The Bash manual even suggests this:
 A word consisting solely of letters, numbers, and underscores, and beginning with a letter or underscore. Names are used as shell variable and function names. Also referred to as an identifier.
 In fact Bash function names can be almost any printable character. For instance I can define my own pre-increment unary function:</description>
    </item>
    
    <item>
      <title>Search Man Pages With Apropos</title>
      <link>https://blog.dnmfarrell.com/post/search-man-pages-with-apropos/</link>
      <pubDate>Sun, 13 Jun 2021 13:21:08 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/search-man-pages-with-apropos/</guid>
      <description>Unix man pages are a mixed bag, but they&amp;rsquo;re faster than Google if you know where to look. That&amp;rsquo;s where the apropos program comes in. E.G. to search for man pages for errno:
$ apropos errno clnt_perrno (3) - library routines for remote procedure calls clnt_sperrno (3) - library routines for remote procedure calls errno (3) - number of last error h_errno (3) - get network host entry  This returns the man page name and section number (run man man for a list of section numbers and their meaning).</description>
    </item>
    
    <item>
      <title>Three Ways to Get a Unix Epoch in Bash</title>
      <link>https://blog.dnmfarrell.com/post/three-ways-to-get-a-unix-epoch-in-bash/</link>
      <pubDate>Sun, 13 Jun 2021 11:34:50 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/three-ways-to-get-a-unix-epoch-in-bash/</guid>
      <description>The Unix epoch time is the number of elapsed seconds since January 1st, 1970. Epoch times are handy because they&amp;rsquo;re not subject to timezone offsets, and they&amp;rsquo;re numbers, unlike ISO 8601 timestamps for example (&amp;ldquo;1970-01-01T00:00:00Z&amp;rdquo;). That makes them memory efficient, and more importantly, easy to do math with.
Here are three ways to get the epoch time in Bash.
Use Date You can use the date program to generate the epoch time by providing the %s formatting argument.</description>
    </item>
    
    <item>
      <title>Modulinos In Bash</title>
      <link>https://blog.dnmfarrell.com/post/modulinos-in-bash/</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/modulinos-in-bash/</guid>
      <description>A modulino is a file which behaves like a library when it is imported, and like a script when executed. I first read about them in Mastering Perl, but you can create them in other languages too. Here&amp;rsquo;s how to do it in Bash.
Let&amp;rsquo;s say you have a simple script:
#!/bin/bash echo &amp;quot;Hello, World!&amp;quot;  A common refactor with scripts is to encapsulate all the code behavior in functions. As this script only does one thing, it&amp;rsquo;s a small change:</description>
    </item>
    
    <item>
      <title>The Trouble with Reference Counting</title>
      <link>https://blog.dnmfarrell.com/post/the-trouble-with-reference-counting/</link>
      <pubDate>Mon, 25 Jan 2021 12:05:23 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/the-trouble-with-reference-counting/</guid>
      <description>Perl uses a simple form of garbage collection (GC) called reference counting. Every variable created by a Perl program has a refcnt associated with it. If the program creates a reference to the variable, Perl increments its refcnt. Whenever Perl exits a block it reclaims any variables that belong to the block scope. If any are references, their referenced values&#39; refcnt are either decremented or they&amp;rsquo;re reclaimed as well if no other references to them remain.</description>
    </item>
    
    <item>
      <title>Perl Closures As Objects</title>
      <link>https://blog.dnmfarrell.com/post/closures-as-objects/</link>
      <pubDate>Sun, 13 Dec 2020 12:57:03 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/closures-as-objects/</guid>
      <description>Perl&amp;rsquo;s object system is not one of its most admired qualities. Included in the 1993 Perl 5.0 release, objects were a bolt-on. A big improvement at the time, in today&amp;rsquo;s context the Perl 5 object system requires too much boilerplate and is under-powered compared to other language offerings (no private state, no type checking, no traits, no multimethods). Perl programmers have been trying to upgrade it for years (Cor is a recent example).</description>
    </item>
    
    <item>
      <title>Inspecting Catalyst</title>
      <link>https://blog.dnmfarrell.com/post/inspecting-catalyst/</link>
      <pubDate>Mon, 11 Nov 2019 10:34:07 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/inspecting-catalyst/</guid>
      <description>One of the convenient things about Catalyst is it lets you register controller methods as actions, so you don&amp;rsquo;t need a separate routing table of URIs to controller methods. A consequence of this though, is that when the web app gets large enough it can be tricky to keep track of all the different paths the app is responding to.
Catalyst&amp;rsquo;s chained dispatch promotes code reuse, but exacerbates the issue by obfuscating route matching.</description>
    </item>
    
    <item>
      <title>Creating IP Address Tools From Scratch</title>
      <link>https://blog.dnmfarrell.com/post/creating-ip-address-tools-from-scratch/</link>
      <pubDate>Thu, 19 Sep 2019 11:00:07 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/creating-ip-address-tools-from-scratch/</guid>
      <description>Recently I&amp;rsquo;ve been researching how the Internet is organized, and working with whois data. I&amp;rsquo;ve been creating simple tools that process IP addresses without any help from CPAN. At work we tend to use Net::IP::XS for these tasks, but sometimes it&amp;rsquo;s fun to figure out how things work under the hood.
Converting to decimal I&amp;rsquo;m sure you&amp;rsquo;re familiar with the IPv4 address format; the &amp;ldquo;dotted quad&amp;rdquo; consists of four numbers between 0 and 255 separated by periods.</description>
    </item>
    
    <item>
      <title>Find Relationships Quickly In Data With Chart::Plot</title>
      <link>https://blog.dnmfarrell.com/post/find-relationships-quickly-in-data-with-chart-plot/</link>
      <pubDate>Mon, 21 Jan 2019 15:41:39 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/find-relationships-quickly-in-data-with-chart-plot/</guid>
      <description>Last week I was analyzing server log data at work, and my boss asked me to plot it on a scatter chart. &amp;ldquo;No problem!&amp;rdquo; I thought, firing up Google Sheets. But Sheets slowed to a crawl when I uploaded 250,000 records to plot. Using CPAN I found something better: Chart::Plot. It has a simple interface and is really fast. Here&amp;rsquo;s how you use it.
A scatter plot script #!/usr/bin/env perl use Chart::Plot; open my $mlb, &#39;&amp;lt;&#39;, &#39;2017-so-hr.</description>
    </item>
    
    <item>
      <title>Spidering websites with Headless Chrome and Selenium</title>
      <link>https://blog.dnmfarrell.com/post/spidering-websites-with-headless-chrome-and-selenium/</link>
      <pubDate>Sun, 13 Jan 2019 20:31:37 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/spidering-websites-with-headless-chrome-and-selenium/</guid>
      <description>Over the holidays I was working on a project that needed to download content from different websites. I needed a web spider, but the typical Perl options like WWW:Mechanize wouldn&amp;rsquo;t cut it, as with JavaScript controlling the content on many websites, I needed a JavaScript-enabled browser. But browsers consume lots of memory - what to do?
The answer was to use headless Chrome, which works exactly like normal except it has no graphical display, reducing its memory footprint.</description>
    </item>
    
    <item>
      <title>Validating Untrusted Input: Numbers</title>
      <link>https://blog.dnmfarrell.com/post/validating-untrusted-input-numbers/</link>
      <pubDate>Mon, 03 Dec 2018 09:10:38 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/validating-untrusted-input-numbers/</guid>
      <description>Validating untrusted input safely is critical for application security: SQL injection, XSS and malicious file upload are common attacks which succeed because the user&amp;rsquo;s input is not vetted correctly.
Numbers are problematic: negative numbers (&amp;ldquo;the sales price was -$500&amp;rdquo;), very large numbers (&amp;ldquo;my account balance is 9,223,372,036,854,775,807&amp;rdquo;) or not-a-number (&amp;ldquo;rm -rf /&amp;quot;) can all wreak havoc if not handled with care.
Fortunately, Perl has robust capabilities for validating input but there are some edge cases to be aware of that make answering &amp;ldquo;is $x a number?</description>
    </item>
    
    <item>
      <title>Patching Perl: Loading Modules That Return False</title>
      <link>https://blog.dnmfarrell.com/post/patching-perl-loading-modules-that-return-false/</link>
      <pubDate>Mon, 23 Jul 2018 09:01:37 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/patching-perl-loading-modules-that-return-false/</guid>
      <description>[Update: this is now an issue for Perl 7]
If you&amp;rsquo;ve been programming Perl for a while, you&amp;rsquo;ve probably run into this exception: Foo.pm did not return a true value. This is a peculiar quirk of the require function: modules must return a true value else Perl interprets it as a failure:
 The file must return true as the last statement to indicate successful execution of any initialization code, so it&amp;rsquo;s customary to end such a file with &amp;ldquo;1;&amp;rdquo; unless you&amp;rsquo;re sure it&amp;rsquo;ll return true otherwise.</description>
    </item>
    
    <item>
      <title>Writing New Testing Tools With Test2</title>
      <link>https://blog.dnmfarrell.com/post/writing-new-testing-tools-with-test2/</link>
      <pubDate>Tue, 12 Jun 2018 15:26:40 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/writing-new-testing-tools-with-test2/</guid>
      <description>Perl has had great testing tools for a long time, but Test2 is the single biggest improvement to Perl testing in years. One of my favorite Test2 features is how easy it is to extend it with new tools, and today I&amp;rsquo;ll show you how I wrote my first tool.
Dealing with known test failures Ideally when your tests fail, it means that something needs to be fixed, and that thing is fixable.</description>
    </item>
    
    <item>
      <title>How Does Traceroute Work?</title>
      <link>https://blog.dnmfarrell.com/post/how-does-traceroute-work-/</link>
      <pubDate>Wed, 28 Feb 2018 10:40:29 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/how-does-traceroute-work-/</guid>
      <description>Lately I&amp;rsquo;ve been reading Interconnections by Radia Perlman (great lastname!). It&amp;rsquo;s an old, but still relevant book which describes how low-level networking technologies work, such as ethernet. The book contains many insights and anecdotes. On page 236 I came across this gem:
 The traceroute utility is a clever hack designed to force each router along the path, in turn, to return an error report. It works by setting the TTL first to 1 (causing the first router to send an error report back to the source) and then setting it to 2 (causing the next router to send an error report) and so forth until the packet reaches the destination.</description>
    </item>
    
    <item>
      <title>Git Bisect And Perl</title>
      <link>https://blog.dnmfarrell.com/post/git-bisect-and-perl/</link>
      <pubDate>Tue, 08 Aug 2017 20:27:16 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/git-bisect-and-perl/</guid>
      <description>At work we have many developers committing code to a large Git repo, and a huge test suite which runs to check the software builds and operates correctly. Inevitably, developers push commits which break a test or two, and in particularly hectic moments, it can be difficult to figure out &amp;ldquo;who broke the build&amp;rdquo;.
Enter Git&amp;rsquo;s bisect command. I feed it the SHA of the earliest bad commit I know of (or &amp;ldquo;HEAD&amp;rdquo;) and the SHA of the last working commit:</description>
    </item>
    
  </channel>
</rss>
