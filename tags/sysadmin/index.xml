<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sysadmin on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/sysadmin/</link>
    <description>Recent content in Sysadmin on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Feb 2016 09:29:18 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/sysadmin/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>An introduction to Tmux</title>
      <link>http://perltricks.com/article/an-introduction-to-tmux/</link>
      <pubDate>Wed, 24 Feb 2016 09:29:18 +0000</pubDate>
      
      <guid>http://perltricks.com/article/an-introduction-to-tmux/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://tmux.github.io/&#34;&gt;Tmux&lt;/a&gt; is a terminal multiplexer: it&amp;rsquo;s like a power-up for terminal programming. You can manage several terminals under a session, split terminal screens, detach and re-attach sessions and much more. If you do most of your programming at the command line, you&amp;rsquo;ll find using a terminal multiplexer invaluable.&lt;/p&gt;

&lt;h3 id=&#34;setup:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;First you&amp;rsquo;ll need to install Tmux via your package manager or &lt;a href=&#34;https://tmux.github.io/&#34;&gt;download&lt;/a&gt; it. Tmux is highly configurable but the first change I&amp;rsquo;d recommend is to ssh, not Tmux. Make ssh &amp;ldquo;keep alive&amp;rdquo; for all connections by adding this to &lt;code&gt;~/.ssh/config&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host *
   ServerAliveInterval 300
   ServerAliveCountMax 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the file doesn&amp;rsquo;t exist, create it. This configuration instructs your local machine for all user ssh sessions to send a server alive message every 300 seconds to keep the ssh session alive. If the local machine sends 3 unanswered messages, it will disconnect the session. You should tweak these settings to suit your needs: for instance by restricting the &lt;code&gt;host&lt;/code&gt; to specific domains you can have different settings per domain. If you have a slow or unreliable internet connection, consider changing &lt;code&gt;ServerAliveInterval&lt;/code&gt; to a lower number to send more frequent messages.&lt;/p&gt;

&lt;p&gt;If you have permission on the servers you use, you can update them with a similar configuration, in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ClientAliveInterval 300
ClientAliveCountMax 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-prefix-and-one-true-command-trade:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;The Prefix and One True Command&amp;trade;&lt;/h3&gt;

&lt;p&gt;Once Tmux is installed, start a new Tmux session from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Ctrl-b&lt;/code&gt; is the &lt;strong&gt;prefix&lt;/strong&gt; combination. Press the Ctrl key AND the letter b at the same time. When inside a Tmux session, the prefix is nearly always pressed before the shortcut key to trigger a command.&lt;/p&gt;

&lt;p&gt;The prefix combination is really important. Once you get the hang of the prefix combination, you can pretty much bootstrap yourself into learning Tmux with just one command. To display a list of Tmux commands, type: &lt;code&gt;Ctrl-b ?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That means press &lt;code&gt;Control&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; together, release, then press &lt;code&gt;?&lt;/code&gt;. Tmux should display:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind-key        C-b send-prefix
bind-key        C-o rotate-window
bind-key        C-z suspend-client
bind-key      Space next-layout
bind-key          ! break-pane
bind-key          &amp;quot; split-window
bind-key          # list-buffers
bind-key          $ command-prompt -I #S &amp;quot;rename-session &#39;%%&#39;&amp;quot;
bind-key          % split-window -h
bind-key          &amp;amp; confirm-before -p &amp;quot;kill-window #W? (y/n)&amp;quot; kill-window
bind-key          &#39; command-prompt -p index &amp;quot;select-window -t &#39;:%%&#39;&amp;quot;
bind-key          ( switch-client -p
bind-key          ) switch-client -n
bind-key          , command-prompt -I #W &amp;quot;rename-window &#39;%%&#39;&amp;quot;
bind-key          - delete-buffer
bind-key          . command-prompt &amp;quot;move-window -t &#39;%%&#39;&amp;quot;
bind-key          0 select-window -t :0
bind-key          1 select-window -t :1
bind-key          2 select-window -t :2
bind-key          3 select-window -t :3
bind-key          4 select-window -t :4
bind-key          5 select-window -t :5
bind-key          6 select-window -t :6
bind-key          7 select-window -t :7
bind-key          8 select-window -t :8
bind-key          9 select-window -t :9
bind-key          : command-prompt
bind-key          ; last-pane
bind-key          = choose-buffer
bind-key          ? list-keys
bind-key          D choose-client
bind-key          L switch-client -l
bind-key          [ copy-mode
bind-key          ] paste-buffer
bind-key          c new-window
bind-key          d detach-client
bind-key          f command-prompt &amp;quot;find-window &#39;%%&#39;&amp;quot;
bind-key          i display-message
bind-key          l last-window
bind-key          n next-window
bind-key          o select-pane -t :.+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also change the prefix combination (see the Config options section). If you do that, remember to use your prefix combination instead of &lt;code&gt;Ctrl-b&lt;/code&gt; in the examples below.&lt;/p&gt;

&lt;h3 id=&#34;window-control:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Window control&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s look at a key Tmux feature: windows. They&amp;rsquo;re similar to tabs in browsers. Each one is a different terminal from where you can run different commands at the same time. To create a new window press&lt;code&gt;Ctrl-b c&lt;/code&gt;. You can cycle between windows: &lt;code&gt;Ctrl-b n&lt;/code&gt; for the next window and &lt;code&gt;Ctrl-b p&lt;/code&gt; takes you to the prior window. &lt;code&gt;Ctrl-b w&lt;/code&gt; list all windows in a session and let&amp;rsquo;s you select which one to active (using the arrow keys and enter).&lt;/p&gt;

&lt;p&gt;If you know the window number you can also jump straight to it with &lt;code&gt;Ctrl-b #&lt;/code&gt; replacing &amp;ldquo;#&amp;rdquo; with the window number. By default they begin at 0, not 1!&lt;/p&gt;

&lt;p&gt;You might be wondering what&amp;rsquo;s the benefit of using Tmux windows over tabbed terminals. First, with regular terminals if the window manager crashes, you&amp;rsquo;ll lose the terminals as well. This won&amp;rsquo;t happen with Tmux: it will keep the terminals running in the background and you can re-attach a new terminal to them at any time. Windows can also be subdivided into panes, all running pseudo-terminals. Let&amp;rsquo;s look at them now.&lt;/p&gt;

&lt;h3 id=&#34;pane-control:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Pane control&lt;/h3&gt;

&lt;p&gt;Panes are great. You can split a window horizontally, vertically and with any dimensions you like. Have you ever wanted to quickly look up a man page whilst coding? Instead of dropping back to the terminal, looking up the man page and then foregrounding your editor, just open a new vertical pane, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/an-introduction-to-tmux/tmux-split-screen.png&#34; alt=&#34;Tmux Panes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can read the man page and code at the same time; you can even copy and paste between the two panes. Much more convenient!&lt;/p&gt;

&lt;p&gt;Recently I was processing a huge set of data; I arranged my Tmux window with 3 panes running the data processing and 1 pane monitoring the server resources with &lt;a href=&#34;http://hisham.hm/htop/&#34;&gt;htop&lt;/a&gt;. This server is almost overloaded:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/an-introduction-to-tmux/tmux-panes.png&#34; alt=&#34;Tmux Panes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;These are the key pane controls:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ctrl-b &amp;quot;      split pane horizontally
Ctrl-b %      split pane vertically
Ctrl-b o      next pane
Ctrl-b ;      prior pane
Ctrl-b ←↑→↓   jump to pane
Ctrl-b Ctrl-o swap panes
Ctrl-b space  arrange panes
Ctrl-b-←↑→↓   change pane size
Ctrl-b !      pop a pane into a new window
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The arrows &lt;code&gt;←↑→↓&lt;/code&gt; represent the arrow keys, just use one of these. For example to jump to a pane on the right, you&amp;rsquo;d press &lt;code&gt;Ctrl-b →&lt;/code&gt;. The change pane size controls are a little different. To make that work you first have to have more than one pane. Next press &lt;code&gt;Ctrl-b&lt;/code&gt; and keep the control key held down. Now you can repeatedly press an arrow key to change the pane size.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl-b !&lt;/code&gt; is one of my favorite features. It pops the current pane out of the window and moves it to its own window. This is wonderful if you find yourself doing some unrelated activity in one pane and want to re-organize your setup.&lt;/p&gt;

&lt;h3 id=&#34;scrolling-and-copy-paste:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Scrolling and copy/paste&lt;/h3&gt;

&lt;p&gt;If you can master scrolling and copy/paste in Tmux, you can master anything. I won&amp;rsquo;t lie, this is the clunkiest feature. But it&amp;rsquo;s really useful. The interface is modal, so start by entering scroll mode.&lt;/p&gt;

&lt;p&gt;Type &lt;code&gt;Ctrl-b [&lt;/code&gt;. Pressing &lt;code&gt;esc&lt;/code&gt; will exit scroll mode. You should know you&amp;rsquo;re in scroll mode because an orange line count appears in the top-right corner of the pane.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;re in scroll mode, you can move the cursor using the arrow keys and page up and down. By default Tmux doesn&amp;rsquo;t retain much history, but you can change that (see the Config options section).&lt;/p&gt;

&lt;p&gt;You can copy and paste in scroll mode. This is useful when you have split screens as a regular highlight and copy using the mouse won&amp;rsquo;t work across vertically split panes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/an-introduction-to-tmux/tmux-copy-fail.png&#34; alt=&#34;copy fail&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To copy, position the cursor where you want to start copying. Press &lt;code&gt;Ctrl-space&lt;/code&gt; to begin highlighting the text to copy. Press &lt;code&gt;Alt-w&lt;/code&gt; to copy the highlighted text. Pressing &lt;code&gt;Ctrl-b ]&lt;/code&gt; will paste the copied text. There are ways to make copy and paste easier: Tmux has a &amp;ldquo;vim like&amp;rdquo; copy mode (see the Config options section).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/an-introduction-to-tmux/tmux-copy-win.png&#34; alt=&#34;copy win&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;session-control:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Session control&lt;/h3&gt;

&lt;p&gt;Sessions are one of the most useful features of Tmux. They let you group multiple terminal processes into a single Tmux session which can be worked on (attached), put into the background (detached) and discarded as you see fit. Programmers will often have different sessions for different projects. Because Tmux operates under a client-server architecture, even if the original terminal that started Tmux dies or your desktop GUI crashes, the Tmux session will be preserved, along with all of the terminal sessions in it.&lt;/p&gt;

&lt;p&gt;Detach your Tmux session with &lt;code&gt;Ctrl-b d&lt;/code&gt;. This will return you to a regular terminal prompt.&lt;/p&gt;

&lt;p&gt;To list existing Tmux sessions just use the &lt;code&gt;ls&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux ls
0: 1 windows (created Thu Jan 28 08:15:20 2016) [190x50] (attached)
2: 2 windows (created Thu Jan 28 09:11:59 2016) [190x50]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shows that I have two Tmux sessions running, one of which is attached to a terminal window already. To attach to a session just use the &lt;code&gt;attach&lt;/code&gt; command at the terminal prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux attach
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default Tmux attaches to the next unattached session (&amp;ldquo;2&amp;rdquo;) in this case. If I have many different sessions and want to attach to a particular one, I can specify it with &lt;code&gt;-t&lt;/code&gt; for target:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux attach -t 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;config-options:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Config options&lt;/h3&gt;

&lt;p&gt;The file &lt;code&gt;~/.tmux.conf&lt;/code&gt; is a plaintext file used by Tmux for local config. This is what mine looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# set scroll history to 10,000 lines
set-option -g history-limit 10000

# modern encoding and colors
set -g utf8 on set-window-option -g utf8 on
set -g default-terminal screen-256color

# don&#39;t use a login shell
set-option -g default-command /bin/bash

# unbind the prefix and bind it to Ctrl-a like screen
unbind C-b set -g prefix C-a bind C-a send-prefix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default Tmux uses a login shell, so every new pane will execute &lt;code&gt;.bash_profile&lt;/code&gt;. I prefer to disable that behavior and just launch regular non-login shells. Tmux has hundreds more options: many users will switch to a different shell like zsh, enable pane switching with the trackpad, display custom data in the Tmux footer (like weather info!) and so on. Copying other programmers&amp;rsquo; &lt;a href=&#34;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=.tmux.conf&#34;&gt;conf files&lt;/a&gt; is a great way to learn and experiment.&lt;/p&gt;

&lt;p&gt;To reload your &lt;code&gt;.tmux.conf&lt;/code&gt; within a Tmux session, type: &lt;code&gt;Ctrl-b :&lt;/code&gt; then &lt;code&gt;source-file ~/.tmux.conf&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;tmux-resources:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Tmux resources&lt;/h3&gt;

&lt;p&gt;The official Tmux &lt;a href=&#34;https://tmux.github.io/&#34;&gt;website&lt;/a&gt; is a good starting point with summary information, a changelog, downloads and a link to the extensive &lt;a href=&#34;http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man1/tmux.1?query=tmux&amp;amp;sec=1&#34;&gt;man page&lt;/a&gt;. The Arch Linux &lt;a href=&#34;https://wiki.archlinux.org/index.php/Tmux&#34;&gt;tmux documentation&lt;/a&gt; covers advanced features and troubleshooting tips. The book &lt;a href=&#34;https://pragprog.com/book/bhtmux/tmux&#34;&gt;tmux - Productive Mouse-Free Development&lt;/a&gt; by Pragmatic Bookshelf is thorough introduction to Tmux.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/article/153/2015/2/16/Get-to-grips-with-GNU-Screen/&#34;&gt;GNU Screen&lt;/a&gt; is another terminal multiplexer program. It&amp;rsquo;s older than Tmux and a little bit crufty, but it has most of the features Tmux has. The controls for Screen and Tmux are similar enough that if you know one of them you can get by using the other. The Tmux &lt;a href=&#34;https://raw.githubusercontent.com/tmux/tmux/master/FAQ&#34;&gt;FAQ&lt;/a&gt; lists the differences between them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get to grips with GNU Screen</title>
      <link>http://perltricks.com/article/153/2015/2/16/Get-to-grips-with-GNU-Screen/</link>
      <pubDate>Mon, 16 Feb 2015 14:15:50 +0000</pubDate>
      
      <guid>http://perltricks.com/article/153/2015/2/16/Get-to-grips-with-GNU-Screen/</guid>
      <description>

&lt;p&gt;GNU Screen is a terminal multiplexer, a program that manages terminal windows. It&amp;rsquo;s been around for 28 years, which makes it older than Perl 5. So if you thought Perl had some archaic conventions, you ain&amp;rsquo;t seen nothing yet. But despite it&amp;rsquo;s age Screen is a powerful tool for managing terminals; if you often find yourself using more than one terminal, you owe it to yourself to start using a multiplexer for major productivity gains. Screen is the most widely used multiplexer, another popular option is &lt;a href=&#34;http://tmux.sourceforge.net/&#34;&gt;tmux&lt;/a&gt;, but this article is about Screen.&lt;/p&gt;

&lt;h3 id=&#34;getting-started:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Getting started&lt;/h3&gt;

&lt;p&gt;Start Screen by simply typing &lt;code&gt;screen&lt;/code&gt; at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All commands in Screen start with the prefix &lt;code&gt;Control + a&lt;/code&gt;. The first command to learn is the most important; how to display the commands menu! To do this type &lt;code&gt;Control + a, ?&lt;/code&gt; (that is, press Control and the &amp;ldquo;A&amp;rdquo; key, release the keys and then type question mark). If you remember this one command, you can always get yourself out of trouble, even if you forget some of the other commands.&lt;/p&gt;

&lt;h3 id=&#34;managing-windows:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Managing windows&lt;/h3&gt;

&lt;p&gt;To open a new terminal window, type &lt;code&gt;Control + a, c&lt;/code&gt;. Screen will create a new window - this is a new terminal process. To see a list of open windows, type &lt;code&gt;Control + a, &amp;quot;&lt;/code&gt;. You can press up and down to highlight the window you want to use, and press enter to open it.&lt;/p&gt;

&lt;p&gt;You can also cycle through windows, by pressing &lt;code&gt;Control + a, n&lt;/code&gt; to move to the next window and &lt;code&gt;Control + a, p&lt;/code&gt; to move to the previous one. Every window is assigned a number, and you can jump straight to a window with: &lt;code&gt;Control + a, #&lt;/code&gt; where the pound key is the number window to jump to.&lt;/p&gt;

&lt;p&gt;Finally if you want to kill a window type &lt;code&gt;Control + a, k&lt;/code&gt;. To kill all windows and exit screen the combination is: &lt;code&gt;Control + a, \&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;split-screen:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Split Screen&lt;/h3&gt;

&lt;p&gt;Screen can split the terminal window into multiple windows. This is really helpful if you need to look at multiple terminals simultaneously. Any window can be split vertically or horizontally and multiple times, leading to all kinds of &lt;a href=&#34;https://encrypted.google.com/search?tbm=isch&amp;amp;q=gnu%20screen&amp;amp;tbs=imgo:1&#34;&gt;combinations&lt;/a&gt;. To vertically split the screen type: &lt;code&gt;Control + a, |&lt;/code&gt; and to horizontally split type: &lt;code&gt;Control + a, S&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To highlight the next split window, type &lt;code&gt;Control + a, tab&lt;/code&gt; (there&amp;rsquo;s also a config option to select by mouse click, more on that later). The combination &lt;code&gt;Control + a, Q&lt;/code&gt;. will quit split screen mode.&lt;/p&gt;

&lt;h3 id=&#34;copy-and-paste:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Copy and paste&lt;/h3&gt;

&lt;p&gt;Copying and pasting with Screen isn&amp;rsquo;t super easy. So much so that I often found myself using the terminal copy and paste instead (highlight with mouse, then &lt;code&gt;Control + C&lt;/code&gt;, &lt;code&gt;Control + V&lt;/code&gt;). However it&amp;rsquo;s useful to know Screen&amp;rsquo;s copy and paste because terminal copy and paste just crumbles on split screen mode, and you may want to use the mouse select for something more useful anyway.&lt;/p&gt;

&lt;p&gt;Copy and paste is modal, so you first have to enter &amp;ldquo;copy mode&amp;rdquo;. To do that type &lt;code&gt;Control + a, [&lt;/code&gt;. Now move the cursor to the beginning of the text you want to copy. Press &lt;code&gt;space&lt;/code&gt; to mark it and use the arrow keys (or h, j, k, l) to move the cursor to the end of the text you want to copy. Pressing &lt;code&gt;space&lt;/code&gt; again will copy the highlighted text. To paste, type &lt;code&gt;Control + a, ]&lt;/code&gt;. Ew.&lt;/p&gt;

&lt;h3 id=&#34;scrolling:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Scrolling&lt;/h3&gt;

&lt;p&gt;By default Screen prevents scrolling using the X-Window scrollbar (it also doesn&amp;rsquo;t keep much history). This can be get very annoying, so you&amp;rsquo;ll want to know how to scroll. To do so, you need to enter copy mode with &lt;code&gt;Control + a, [&lt;/code&gt;. and then press &lt;code&gt;Control + u&lt;/code&gt; to scroll up and &lt;code&gt;Control + d&lt;/code&gt; to go down. Press &lt;code&gt;escape&lt;/code&gt; to exit copy mode. And until you can remember the combinations for scrolling, you&amp;rsquo;ll find yourself piping output to &lt;code&gt;less&lt;/code&gt; more than you ever imagined.&lt;/p&gt;

&lt;h3 id=&#34;detaching-screen-sessions:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Detaching Screen Sessions&lt;/h3&gt;

&lt;p&gt;Screen sessions can be put into the background just like any other terminal process. Screen will keep open any terminal processes (like ssh sessions). This is very useful - if you find yourself working with more than 5 or 6 windows, it might be easier to detach and start a new screen session than adding more windows. To detach screen, the combination is &lt;code&gt;Control + a, d&lt;/code&gt;. When you detach, screen will print the session name and return to the terminal prompt. To re-attach to a detached session just use &lt;code&gt;screen -r&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have more than one screen session, you can display all detached sessions with &lt;code&gt;-ls&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -ls
There are screens on:
    30549.pts-1.localhost   (Detached)
    30498.pts-1.localhost   (Detached)
    29207.pts-1.localhost   (Detached)
3 Sockets in /var/run/screen/S-sillymoose.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then just re-attach to the session you want by providing the session name as an option to &lt;code&gt;-r&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -r 29207
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if you&amp;rsquo;ve really got multiple Screen sessions going, it can be hard to remember what they&amp;rsquo;re all doing. So when you start Screen, use the &lt;code&gt;-S&lt;/code&gt; option to give the session a name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -S aws_ec2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you name all your sessions, it&amp;rsquo;s much easier to know which one to re-attach to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -ls
There are screens on:
    31155.aws_ec2   (Detached)
    30866.email_servers (Detached)
    30815.ecommerce_app (Detached)
3 Sockets in /var/run/screen/S-sillymoose.

$ screen -r email_servers
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;customizing-screen:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Customizing Screen&lt;/h3&gt;

&lt;p&gt;Screen is highly configurable which is good because you&amp;rsquo;ll probably want to change a few of the default options. The first option you should consider isn&amp;rsquo;t a Screen option at all however.&lt;/p&gt;

&lt;p&gt;To stop your ssh sessions from timing out, add the following to your &lt;code&gt;~/.ssh/config&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# dont timeout connections
ServerAliveInternal 600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the &lt;code&gt;~/.ssh/config&lt;/code&gt; file didn&amp;rsquo;t already exist, you may have to change the permissions on the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ chmod 644 ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This option will have ssh send a byte every 10 minutes to the remote server to keep the session alive. You may want to change the frequency depending on your needs. Now you can have multiple ssh windows within screen, detach them for hours and return and you&amp;rsquo;ll still be logged in.&lt;/p&gt;

&lt;p&gt;Like many other terminal programs, screen will look for a runcom config file (&lt;code&gt;~/.screenrc&lt;/code&gt;). I like the following options:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# no welcome message
startup_message off

# keep running processes on detach
autodetach on

# start windows at 1 instead of 0
bind c screen 1
bind ^c screen 1
bind 0 select 10
screen 1

# large scrollback buffer
defscrollback 5000

# on split screen, switch window focus by clicking
mousetrack on

# refresh screen after closing a program
altscreen on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are loads more options to choose from. Screen has a huge online &lt;a href=&#34;https://www.gnu.org/software/screen/manual/screen.html&#34;&gt;manual&lt;/a&gt; and it&amp;rsquo;s terminal man page is comprehensive too. Any typed command listed in the manual can be run from within screen, or added to the &lt;code&gt;~/.screenrc&lt;/code&gt; file. For instance if you don&amp;rsquo;t like Screen&amp;rsquo;s default key bindings, checkout the &lt;code&gt;bindkey&lt;/code&gt; command for overriding them, as you don&amp;rsquo;t want to be typing them for another 28 years.&lt;/p&gt;

&lt;h3 id=&#34;screen-cheatsheet:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Screen Cheatsheet&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# Type before other commands
Prefix: Control + a

Shortcuts menu: ?

New window:    c      Split Vertical:   |       Copy mode:     [
Close window:  k      Split Horizontal: S       Start copy:    space
Next window:   n      Focus next region: tab    Scroll up:     u
Prior window:  p      Quit split screem: Q      Scroll down:   d
Jump window #: 0-9                              End copy:      space
List windows:  &amp;quot;                                Paste:         ]
                                                End copy mode: escape

Detach: d
Quit:   \

# Terminal commands
Launch Screen:     screen
Named session:     screen -S &amp;lt;name&amp;gt;
List sessions:     screen -ls
Re-attach session: screen -r [name]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Facing the music with Perl</title>
      <link>http://perltricks.com/article/111/2014/8/29/Facing-the-music-with-Perl/</link>
      <pubDate>Fri, 29 Aug 2014 15:03:09 +0000</pubDate>
      
      <guid>http://perltricks.com/article/111/2014/8/29/Facing-the-music-with-Perl/</guid>
      <description>&lt;p&gt;My digital music libraries were messed up. Spread across several devices and a couple of flirtations with iTunes Match and iCloud, I didn&amp;rsquo;t have everything in one place—ironically. Not only that, but Apple had replaced some files with what it considered better versions. Although I don&amp;rsquo;t want to perform the experiment to confirm it, I&amp;rsquo;m sure that the new files had different metadata. I needed to sort it out to start on a better system. I thought the task would be arduous, and it was until I settled on a simpler problem that a couple of Perl modules solved quickly.&lt;/p&gt;

&lt;p&gt;For my first step, I needed to find all the music I had. I had backed up my files before I let Apple replace them with better versions. But I seemed to have made several backups, each with a different subset of my music. One backup would have most of the Led Zepplin but none of the Beatles, while another had no Zepplin and some of the Beatles. Another had all of the Beatles but no Cat Stevens.&lt;/p&gt;

&lt;p&gt;I started by collecting all the unique files from the directories in which I had found music. This program has some of my favorite things about Perl, especially since I still have the wounds from moving files around during my C phase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use strict;
use warnings;

use Digest::MD5 qw(md5_hex);
use File::Copy  qw(copy);
use File::Find;
use File::Map   qw(map_file);
use File::Path  qw(make_path);
use File::Spec::Functions qw(catfile);

my $wanted = sub {
    state $Seen  = {};

    my $full_name = $File::Find::name;
    return if -d $full_name;

    map_file my $map, $full_name, &#39;+&amp;lt;&#39;;
    my $digest_hex = md5_hex( $map );
    return if $Seen-&amp;gt;{ $digest_hex }++;
    
    my( $extension )     = $full_name  =~ /(\.[^.]+)\z/;
    my( $n, $m, $o, $p ) = $digest_hex =~ /\A (..) (..) (..) (..)/x;

    my $basename = $_;
    my $dir = catfile( $new_dir, $n, $m, $o, $p );
    my $new_file = catfile( $dir, $basename );
    return if -e $new_file;

    make_path( $dir ) unless -d $dir;

    copy(
        $full_name, 
        catfile( $dir, $basename )
        );
    };

find( $wanted, @ARGV );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.metacpan.org/module/File::Find&#34;&gt;File::Find&lt;/a&gt; provides the code to traverse the file structure for me. I give find the list of starting directories, in this case those in &lt;code&gt;@ARGV&lt;/code&gt;, and a callback subroutine as a reference. The meat of my program is in that &lt;code&gt;$wanted&lt;/code&gt; subroutine. The hardest part of this code is remembering that &lt;code&gt;$File::Find::name&lt;/code&gt; is the full path and &lt;code&gt;$_&lt;/code&gt; is the filename only. I put those into variables to remind me which is which.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.metacpan.org/pod/File::Map&#34;&gt;File::Map&lt;/a&gt; allows me to access a file&amp;rsquo;s data directly from disk as a memory map rather than reading it into memory. I don&amp;rsquo;t need to change the file to get its digest (using &lt;a href=&#34;http://www.metacpan.org/pod/Digest::MD5&#34;&gt;Digest::MD5&lt;/a&gt;), so memory mapping is a big win across tens of thousands of music files. If I have seen that digest before, I move on to the next file. Otherwise I do some string manipulations to create new file paths, putting the pieces together with the cross-plaform &lt;a href=&#34;http://www.metacpan.org/pod/File::Spec&#34;&gt;File::Spec&lt;/a&gt;. I copy the file to the new location with &lt;a href=&#34;http://www.metacpan.org/pod/File::Copy&#34;&gt;File::Copy&lt;/a&gt;. I specifically make a copy so I leave the original files where they are for now. I anticipate messing up at least a couple of times. The new path is four levels deep with each deeper level based on the next two characters in the file&amp;rsquo;s digest. That way, no directory gets too big, slowing down all directory operations.&lt;/p&gt;

&lt;p&gt;Some rough calculations showed me that no particular music library was more than 85% complete. This was where the real fun began, but also my embarrassing tales of woe. Out of the newly copied files, I needed to select the ones I wanted to keep.&lt;/p&gt;

&lt;p&gt;First, I merely cleaned out my iTunes library and reimported everything to see what I was working with. Most music I had in duplicates, and some in triplicates. iTunes Match had upgraded MP3 files to M4A (encoded in Apple&amp;rsquo;s AAC codec) and had done the same for M4P files, the DRM-ed versions of music I had purchased. Each version had a different digest, so several versions of the same content survived.&lt;/p&gt;

&lt;p&gt;I struggled with the next part of the problem because I have too much computer power at my disposal. I could collect all of the metadata for each file and store it in a database. I could throw it into a NoSQL thingy. I even thought about redis. Any one of these technologies are fun diversions but they require too much work. I started and abandoned several approaches, including a brief attempt to use AppleScript to interact with iTunes directly. Oh, the insanity.&lt;/p&gt;

&lt;p&gt;Working from the digested directory each time was a bad decision. I&amp;rsquo;d have to collect the metadata then group files by album or artist. iTunes had already done that for me, although I didn&amp;rsquo;t realize this for a week. When I imported the music, it copied the files into folders named after the artist and album (something I could have done instead of using the digests). Most of my work would be limited to the files in a single directory. I don&amp;rsquo;t need a data structure to hold all of that. I certainly didn&amp;rsquo;t need a database.&lt;/p&gt;

&lt;p&gt;If I could enter a directory, examine each file in that directory, then process them on the way out of that directory, removing the duplicate files becomes much easier. I remembered that &lt;a href=&#34;http://www.metacpan.org/pod/File::Find&#34;&gt;File::Find&lt;/a&gt; has a &lt;code&gt;post_process&lt;/code&gt; option that allows me to do this, although I haven&amp;rsquo;t used it in years:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::Find qw(find);

find( 
    { 
    wanted      =&amp;gt; $wanted,   #code refs
    postprocess =&amp;gt; $post,
    },
    @ARGV,
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While I was in each directory, I could collect information on each file. Each file is already sorted by artist and album but I still need to choose which one of the duplicate files to keep. After a bit of thought, the solution turned out to be simple. I could sort on file extension, looking up the ordering in a hash. When I have two files with the same extension I&amp;rsquo;ll choose the one with the higher bitrate. When the bitrates match, I&amp;rsquo;ll choose the one with the shortest filename. With the various music libraries, I had some files like &lt;em&gt;Susie Q.m4a&lt;/em&gt; and &lt;em&gt;Susie Q 1.m4a&lt;/em&gt;; essentially the same file except for some slight metadata differences. I used &lt;a href=&#34;http://www.metacpan.org/pod/Music::Tag&#34;&gt;Music::Tag&lt;/a&gt; to get the metadata since it automatically delegated to plugins for the various file formats.&lt;/p&gt;

&lt;p&gt;After sorting, I mark for deletion everything except the first element in the list. I don&amp;rsquo;t delete them right away; I print the list to a file which I can use later to delete files. I&amp;rsquo;ve been around too long to delete files right away.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/Users/brian/bin/perls/perl5.18.1
use v5.18;
use Digest::MD5 qw( md5_hex );
use Data::Dumper;
use File::Basename qw( basename );
use File::Find;
use File::Map   qw( map_file );
use File::Copy  qw( copy );
use File::Path  qw( make_path );
use File::Spec::Functions  qw(abs2rel rel2abs splitdir);
use Music::Tag;

my $extensions_order = {
    m4a =&amp;gt; -2,        
    mp3 =&amp;gt; -1,
    m4p =&amp;gt;  0,
    };

open my $fh, &#39;&amp;gt;&#39;, &#39;delete_files.txt&#39;;

my $hash = {};

my( $wanted, $post ) = make_subs( $dir, $hash );

find( 
    { 
    wanted      =&amp;gt; $wanted,
    postprocess =&amp;gt; $post,
    },
    @ARGV,
    );
    
sub make_subs {
    my( $dir, $hash ) = @_;
    
    sub { # wanted
        # my $path     = $File::Find::name;
        # my $filename = $_;
        
        state $count = 0;

        return if( -d $File::Find::name or -l $File::Find::name );
        return if $_ eq &#39;.DS_Store&#39;;

        my $filename = basename( $File::Find::name );
        my $relative = abs2rel( $File::Find::name, $dir );
        
        my $basename_no_ext = $filename =~ s/\.[^.]+\z//r;

        my( $extension ) = $filename =~ m/ \. ( [^.]+ ) \z /x;
        return unless exists $extensions_order-&amp;gt;{$extension};

        my $this_file = {};

        my $info = eval { Music::Tag-&amp;gt;new( $filename )-&amp;gt;get_tag };
        
        my $title = eval{ $info-&amp;gt;title };
        if( $@ ) { 
            warn &amp;quot;Title had a problem: $@&amp;quot;;
            }

        $this_file-&amp;gt;{tag} = {
            title   =&amp;gt; $title,
            bitrate =&amp;gt; eval{ $info-&amp;gt;bitrate },
            };    
        $this_file-&amp;gt;{file} = {
            extension =&amp;gt; $extension,
            basename  =&amp;gt; $filename,
            relative  =&amp;gt; $relative,
            no_ext    =&amp;gt; $basename_no_ext,
            &#39;File::Find::name&#39; =&amp;gt; $File::Find::name,
            &#39;_&#39; =&amp;gt; $_,
            };    
        
        push @{ $hash-&amp;gt;{$File::Find::dir}{$title} }, $this_file;

        $hash-&amp;gt;{extensions}{$extension}++;
        },
        
    sub { # postprocess        
        my $this = $hash-&amp;gt;{$File::Find::dir};

        TITLE: foreach my $title ( sort keys %$this ) {
            my $songs = $this-&amp;gt;{ $title };
            next if @$songs == 1; # no duplicates, no problem

            my @sorted = sort {
              state $e = $extensions_order;
                
              $e-&amp;gt;{ $a-&amp;gt;{file}{extension} } &amp;lt;=&amp;gt; $e-&amp;gt;{ $b-&amp;gt;{file}{extension} }
                    or
              length $a-&amp;gt;{file}{basename} &amp;lt;=&amp;gt; length $b-&amp;gt;{file}{basename}
                    or
              $b-&amp;gt;{tag}{bitrate} &amp;lt;=&amp;gt; $a-&amp;gt;{tag}{bitrate}
              } @$songs;

            # everything without the chosen key will be deleted
            $sorted[0]{chosen}++;
            
            SONG: foreach my $song ( @sorted ) {
                $hash-&amp;gt;{seen}++;
                next unless exists $extensions_order-&amp;gt;{
                    $song-&amp;gt;{file}{extension} };
                $hash-&amp;gt;{examined}++;
                next if $song-&amp;gt;{chosen};
                
                # ignore other files, such as videos and e-books
                next unless exists $extensions_order-&amp;gt;{
                    $song-&amp;gt;{file}{extension} };

                $hash-&amp;gt;{deleted}++;
                print { $fh } &amp;quot;delete:\t$song-&amp;gt;{file}{relative}\n&amp;quot;;
                }
            }

        delete $hash-&amp;gt;{$File::Find::dir};
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that was it. This left behind a couple of problems, such as messed up metadata, but I wasn&amp;rsquo;t going to be able to solve that programmatically anyway. Getting a complete set of files with no duplicates solved most of the problem and leaves me with the joy of flipping through physical albums that only us grey beards remember.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to build Perl on Android 4.4</title>
      <link>http://perltricks.com/article/97/2014/6/16/How-to-build-Perl-on-Android-4-4/</link>
      <pubDate>Mon, 16 Jun 2014 12:57:21 +0000</pubDate>
      
      <guid>http://perltricks.com/article/97/2014/6/16/How-to-build-Perl-on-Android-4-4/</guid>
      <description>

&lt;p&gt;&lt;em&gt;The recent release of Perl 5.20 came with the exciting news that Perl was now installable on Android, Google&amp;rsquo;s mobile operating system. But before you get grand visions of flying phone-controlled drones via &lt;a href=&#34;https://metacpan.org/pod/UAV::Pilot&#34;&gt;UAV::Pilot&lt;/a&gt;, know that right now, how to get a working Perl binary is just about all that&amp;rsquo;s documented. This article shows you how to get that far - solving the rest is left for the pioneers!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:914b0b08540fea0f7c86094ce2509280&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;To build Perl on Android you&amp;rsquo;ll need a unix-like environment (Cygwin may work too). This article describes installing Perl on an Android Virtual Device (AVD), so you do not need an Android phone to try Perl on Android.&lt;/p&gt;

&lt;h3 id=&#34;preparation:914b0b08540fea0f7c86094ce2509280&#34;&gt;Preparation&lt;/h3&gt;

&lt;p&gt;Download the Android &amp;ldquo;SDK Tools Only&amp;rdquo; &lt;a href=&#34;https://developer.android.com/sdk/index.html&#34;&gt;tarball&lt;/a&gt;, and the NDK &lt;a href=&#34;https://developer.android.com/tools/sdk/ndk/index.html&#34;&gt;tarball&lt;/a&gt;. At the command line, change to the directory where you downloaded the tarballs to and untar both tarballs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ tar xvf android-ndk-r9d-linux-x86_64.tar.bz2
$ tar xvf android-sdk_r22.6.2-linux.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To save typing later, add &amp;ldquo;android-sdk-*/tools&amp;rdquo; and &amp;ldquo;android-sdk-*/platform-tools&amp;rdquo; to $PATH (you&amp;rsquo;ll need to provide the absolute paths to the directories). For example if I had extracted android-sdk-tools to my user directory, on Linux I could add it to PATH with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ export PATH=$PATH:$HOME/android-sdk-linux/tools:$HOME/android-sdk-linux/platform-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With your PATH updated, launch the Android SDK Manager:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will open a GUI menu from where you can download and install the required Android tools and libraries. Using the menu, install Android SDK Tools, Android SDK Platform-tools, Android SDK Build-tools and Android 4.2.2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/97/android_sdk_manager.png&#34; alt=&#34;The Android SDK Manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll also need a copy of the Perl 5.20.0 &lt;a href=&#34;http://www.cpan.org/src/5.0/perl-5.20.0.tar.gz&#34;&gt;tarball&lt;/a&gt;. Untar this at the command line too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ tar xvf perl-5.20.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setup-the-android-emulator:914b0b08540fea0f7c86094ce2509280&#34;&gt;Setup the Android emulator&lt;/h3&gt;

&lt;p&gt;Now we&amp;rsquo;re going to create an Android Virtual Device that can be used by the emulator to run Android on your machine. At the command line type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ android avd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will launch the Android Virtual Device Manager:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/97/android_avd_1.png&#34; alt=&#34;The Android Virtual Device Manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click &amp;ldquo;new&amp;rdquo; to create a new AVD. I created one with the following settings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/97/android_avd_2.png&#34; alt=&#34;Create a new AVD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure you select &amp;ldquo;ARM (androideabi-v7a)&amp;rdquo; as the CPU/ABI option. Keep in mind your platform&amp;rsquo;s hardware when choosing these settings. I found higher resolution devices ran very slowly on my old MacBook. The &amp;ldquo;use snapshot&amp;rdquo; option is a timesaver that saves the virtual device&amp;rsquo;s state post-boot, so saves you from waiting for the virtual device to boot up again after the first time. Once you&amp;rsquo;ve created the AVD, you should see it listed in the AVD Manager window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/97/android_avd_4.png&#34; alt=&#34;The AVD has been created&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Having created a new AVD, you can close the AVD Manager window.&lt;/p&gt;

&lt;h3 id=&#34;installation:914b0b08540fea0f7c86094ce2509280&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;The following commands will create environment variables we&amp;rsquo;ll need for the install. Be sure to adjust the path for ANDROID_NDK to the location where you untarred the Android NDK archive earlier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ export ANDROID_NDK=$HOME/android-ndk-r9d
$ export TARGET_ARCH=arm-linux-androideabi
$ export ANDROID_TOOLCHAIN=/tmp/my-toolchain-arm-linux-androideabi
$ export SYSROOT=$ANDROID_TOOLCHAIN/sysroot
$ export TARGETDIR=/mnt/asec/perl
$ export PATH=$PATH:$ANDROID_NDK/toolchains/$TARGET_ARCH-4.8/prebuilt/linux-x86_64/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create the toolchain, run this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt; $ $ANDROID_NDK/build/tools/make-standalone-toolchain.sh --platform=android-9 --install-dir=$ANDROID_TOOLCHAIN --system=`uname | tr &#39;[A-Z]&#39; &#39;[a-z]&#39;`-x86_64 --toolchain=arm-linux-androideabi-4.8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launch your AVD with the emulator (replace kitkat with the name of the avd you created. If you can&amp;rsquo;t remember the name, just run &amp;ldquo;android avd&amp;rdquo; again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ emulator @kitkat&amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see your emulated device start booting in a new window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/97/android_boot.png&#34; alt=&#34;The loaded AVD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once it&amp;rsquo;s booted, it will look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/97/android_loaded.png&#34; alt=&#34;The AVD is booting&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With the fully booted AVD still running, return to the command line and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ adb devices
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will print out the names of all the connected Android devices.For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;List of devices attached 
emulator-5554   device
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;ve got the device name, we&amp;rsquo;ll use adb to run shell commands on our emulated device. It&amp;rsquo;s important that the AVD is booted and running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;adb -s emulator-5554 shell &amp;quot;echo sh -c &#39;\&amp;quot;mkdir $TARGETDIR\&amp;quot;&#39; | su --&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now change into the untarred perl-5.20.0 directory, and run configure (replace &amp;ldquo;emulator-5554&amp;rdquo; with your device name):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ ./Configure -des -Dusedevel -Dusecrosscompile -Dtargetrun=adb -Dcc=arm-linux-androideabi-gcc -Dsysroot=$SYSROOT -Dtargetdir=$TARGETDIR -Dtargethost=emulator-5554
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now run make and make test to build and test Perl on the device:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ make
$ make test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bear in mind that the make test can take a long time - on my machine it ran for 4 hours. It will appear like the process has hung, this is because adb only prints out the results once the command has completed. Make isntall does not work, but this does not matter, as you can still run the Perl binary and use core modules. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ adb -s emulator-5554 shell &amp;quot;/mnt/asec/perl/perl -v&amp;quot;
This is perl 5, version 20, subversion 0 (v5.20.0) built for linux-androideabi

Copyright 1987-2014, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using &amp;quot;man perl&amp;quot; or &amp;quot;perldoc perl&amp;quot;.  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Core modules are located in /mnt/asec/perl/lib. To load them, just use the -I switch. For example this one liner:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;adb -s emulator-5554 shell &#39;/mnt/asec/perl/perl -I/mnt/asec/perl/lib -MHTTP::Tiny -E &amp;quot;say  HTTP::Tiny-&amp;gt;new-&amp;gt;get(q{http://perltricks.com})-&amp;gt;{content}&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if running a script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;adb -s emulator-5554 shell &#39;/mnt/asec/perl/perl -I/mnt/asec/perl/lib my_script.pl&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Be warned - if you stop the AVD, Perl will be removed.&lt;/strong&gt; You can Google for solutions on how to persist changes across AVD reboots - I have not done this yet. Let me know if you find a reliable solution!&lt;/p&gt;

&lt;h3 id=&#34;conclusion:914b0b08540fea0f7c86094ce2509280&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This is not the only way to get Perl running on Android. For a different approach, checkout the &lt;a href=&#34;https://github.com/damonkohler/sl4a&#34;&gt;Scripting Layer 4 Android&lt;/a&gt; project, however it is under-documented and the project may have stagnated.&lt;/p&gt;

&lt;p&gt;This article would not have been possible without the excellent Android perldoc page by Brian Fraser. You can read it on &lt;a href=&#34;https://github.com/Perl/perl5/blob/blead/README.android&#34;&gt;Github&lt;/a&gt; or with Perl 5.20.0 installed you can read it with perldoc:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks Brian!&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F97%2F2014%2F6%2F16%2FHow-to-build-Perl-on-Android-4-4&amp;amp;text=How+to+build+Perl+on+Android+4.4&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F97%2F2014%2F6%2F16%2FHow-to-build-Perl-on-Android-4-4&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easy application dependency management with Stratopan</title>
      <link>http://perltricks.com/article/71/2014/2/20/Easy-application-dependency-management-with-Stratopan/</link>
      <pubDate>Thu, 20 Feb 2014 03:55:29 +0000</pubDate>
      
      <guid>http://perltricks.com/article/71/2014/2/20/Easy-application-dependency-management-with-Stratopan/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Good Perl authors write modular code and leverage CPAN as much as possible. The downside of this approach is that Perl applications accumulate hundreds of CPAN module dependencies. Fortunately for Perl, Stratopan makes it simple to manage your application dependencies and quickly deploy it to new environments.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-many-dependencies:959cc4bffc976d00afbb89da2cc5599f&#34;&gt;How many dependencies?!&lt;/h3&gt;

&lt;p&gt;Perl application dependencies grow rapidly. This is because every time you import a module, you take on that module&amp;rsquo;s dependencies, and those of its imports and so on. The cover picture above shows the dependencies graph for the PerlTricks.com application; it&amp;rsquo;s 283 modules. That&amp;rsquo;s a lot of code to manage.&lt;/p&gt;

&lt;h3 id=&#34;manage-module-dependencies-with-stratopan:959cc4bffc976d00afbb89da2cc5599f&#34;&gt;Manage module dependencies with Stratopan&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://stratopan.com&#34;&gt;Stratopan&lt;/a&gt;, the cloud-based module hosting service, let&amp;rsquo;s you upload Perl modules to a personal repository in the cloud. On our &lt;a href=&#34;https://stratopan.com/sillymoose/webstuff/perltricks&#34;&gt;PerlTricks&lt;/a&gt; stack, we&amp;rsquo;ve uploaded the exact versions of all of the modules used in our production environment. Many of the modules are not up to date, but that doesn&amp;rsquo;t matter as these are the module versions that &lt;em&gt;work&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;rapid-deployment:959cc4bffc976d00afbb89da2cc5599f&#34;&gt;Rapid Deployment&lt;/h3&gt;

&lt;p&gt;Deploying this stack to a fresh environment couldn&amp;rsquo;t be easier. We can use &lt;a href=&#34;https://metacpan.org/pod/release/MIYAGAWA/App-cpanminus-1.7001/bin/cpanm&#34;&gt;cpanm&lt;/a&gt; to read our Makefile.PL and recursively install our application dependencies, using Stratopan as the source. In the terminal we navigate to the root application directory and enter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpanm -n --installdeps --mirror-only --mirror https://stratopan.com/sillymoose/WebStuff/perltricks .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s review this code: first we use cpanm&amp;rsquo;s &amp;ldquo;-n&amp;rdquo; switch to turn off module tests to install the modules super-fast. The &amp;ldquo;&amp;ndash;installdeps&amp;rdquo; switch makes cpanm look for application dependencies. The &amp;ldquo;mirror&amp;rdquo; switches instruct cpan to use our Stratopan stack as the install source. The trailing period indicates to search for dependencies in the current directory. This is the perfect marriage: Stratopan recursively pulled our module dependencies into our stack, and cpanm recursively installs all dependencies it finds. Even though our Makefile lists ~40 modules, cpanm ends up installing all 283.&lt;/p&gt;

&lt;p&gt;When we want to upgrade our modules we can do it in a controlled way by making a copy of our stack upgrading the modules for testing in a development environment, before upgrading production.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:959cc4bffc976d00afbb89da2cc5599f&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Without Stratopan and cpanm, deploying the PerlTricks application to a new server would be a lot more work. We&amp;rsquo;d either have to list and source the specific module versions and deploy them manually, or else install the newest versions of all of 283 dependencies and hope they still play nice with each other. Two of our dependences are no longer even on CPAN!&lt;/p&gt;

&lt;p&gt;Want to get started with Stratopan? Check out our &lt;a href=&#34;http://perltricks.com/article/48/2013/11/15/A-Stratopan-quick-start-user-guide&#34;&gt;quick start user guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F71%2F2014%2F2%2F20%2FEasy-application-dependency-management-with-Stratopan&amp;amp;text=Easy+application+dependency+management+with+Stratopan&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F71%2F2014%2F2%2F20%2FEasy-application-dependency-management-with-Stratopan&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shazam! Use Image::Magick with Perlbrew in minutes</title>
      <link>http://perltricks.com/article/57/2014/1/1/Shazam--Use-Image--Magick-with-Perlbrew-in-minutes/</link>
      <pubDate>Wed, 01 Jan 2014 23:43:09 +0000</pubDate>
      
      <guid>http://perltricks.com/article/57/2014/1/1/Shazam--Use-Image--Magick-with-Perlbrew-in-minutes/</guid>
      <description>

&lt;p&gt;&lt;em&gt;The open source ImageMagick software provides amazing tools for creating and manipulating images in over 100 formats. Unfortunately, installing ImageMagick&amp;rsquo;s Perl module under Perlbrew can be a frustrating and time-consuming task. However it doesn&amp;rsquo;t have to be this way - with the method described below you can have the module installed in minutes, no root access required!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;update-07-01-2014:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;&lt;em&gt;Update 07-01-2014&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Zaki (&lt;a href=&#34;https://twitter.com/zmughal&#34;&gt;@zhmughal&lt;/a&gt;) has worked up a sweet &lt;a href=&#34;https://gist.github.com/zmughal/8264712/raw/8831e421393143c5b48f22dcfa12eeda51c5cfbf/install-imagemagick-perl&#34;&gt;shell script&lt;/a&gt; to automate the installation process for you, so you can save the finger work for using ImageMagick with your next Perl program:)&lt;/p&gt;

&lt;h3 id=&#34;requirements:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to have Perlbrew and a local Perl installation via Perlbrew on Unix-based platform. This has been tested on Perl 5.16.3 but should work on any modern Perl version.&lt;/p&gt;

&lt;h3 id=&#34;preparation:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Preparation&lt;/h3&gt;

&lt;p&gt;Create a local directory: we will install ImageMagick here. Open up the terminal and enter the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;mkdir ~/local
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-image-magick-don-t-use-cpan:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Installing Image::Magick - don&amp;rsquo;t use CPAN&lt;/h3&gt;

&lt;p&gt;Although the &lt;a href=&#34;https://metacpan.org/pod/Image::Magick&#34;&gt;Image::Magick&lt;/a&gt; module is available on CPAN, installing it via CPAN is usually a fruitless task as the process croaks on make. Instead download the whole &lt;a href=&#34;http://www.imagemagick.org/download/ImageMagick.tar.gz&#34;&gt;ImageMagick tarball&lt;/a&gt;. Once downloaded, navigate to the tarball&amp;rsquo;s parent directory using the terminal and un-tar the archive with the following command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;tar xvfz ImageMagick.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now change into the new directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cd ImageMagick-6.8.8-0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enter the following command, replacing [username], [path to CORE] and [path to Perl bin] with your system&amp;rsquo;s details. Remove the &amp;ldquo;&amp;ndash;without-threads&amp;rdquo; text if your Perl was compiled with threads (here is how to check).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;LDFLAGS=-L/home/[username]/perl5/perlbrew/perls/[path to CORE] \
    ./configure --prefix /home/[username]/local \
    --with-perl=/home/[username]/perl5/perlbrew/perls/[path to Perl bin] \
    --enable-shared --without-threads
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a completed example for my system:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;LDFLAGS=-L/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/lib/5.16.3/x86_64-linux/CORE \
    ./configure --prefix /home/sillymoose/local \
    --with-perl=/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin/perl \
    --enable-shared --without-threads
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this command should cause ImageMagick to run a series of configuration checks, at the end of which it will print a configuration summary, which should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;ImageMagick is configured as follows. Please verify that this configuration
matches your expectations.

Host system type: x86_64-unknown-linux-gnu
Build system type: x86_64-unknown-linux-gnu

                  Option                        Value
-------------------------------------------------------------------------------
Shared libraries  --enable-shared=yes       yes
Static libraries  --enable-static=yes       yes
Module support    --with-modules=no     no
GNU ld            --with-gnu-ld=yes     yes
Quantum depth     --with-quantum-depth=16   16
High Dynamic Range Imagery
                  --enable-hdri=no      no

Delegate Configuration:
BZLIB             --with-bzlib=yes      yes
Autotrace         --with-autotrace=no       no
Dejavu fonts      --with-dejavu-font-dir=default    /usr/share/fonts/dejavu/
DJVU              --with-djvu=yes       no
DPS               --with-dps=yes        no
FFTW              --with-fftw=yes       no
FlashPIX          --with-fpx=yes        no
FontConfig        --with-fontconfig=yes     no
FreeType          --with-freetype=yes       yes
GhostPCL          None              pcl6 (unknown)
GhostXPS          None              gxps (unknown)
Ghostscript       None              gs (9.10)
Ghostscript fonts --with-gs-font-dir=default    /usr/share/fonts/default/Type1/
Ghostscript lib   --with-gslib=no       no
Graphviz          --with-gvc=no     
JBIG              --with-jbig=yes       no
JPEG v1           --with-jpeg=yes       yes
JPEG-2000         --with-jp2=yes        yes
LCMS v1           --with-lcms=yes       yes
LCMS v2           --with-lcms2=yes      no
LQR               --with-lqr=yes        no
LTDL              --with-ltdl=yes       no
LZMA              --with-lzma=yes       yes
Magick++          --with-magick-plus-plus=yes   no (failed tests)
MUPDF             --with-mupdf=no       no
OpenEXR           --with-openexr=yes        no
PANGO             --with-pango=yes      no
PERL              --with-perl=/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin/perl        /home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin/perl
PNG               --with-png=yes        yes
RSVG              --with-rsvg=no        no
TIFF              --with-tiff=yes       yes
WEBP              --with-webp=yes       no
Windows fonts     --with-windows-font-dir=  none
WMF               --with-wmf=no     no
X11               --with-x=         yes
XML               --with-xml=yes        yes
ZLIB              --with-zlib=yes       yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check that the image file formats you expect to be working with are showing as &amp;ldquo;yes&amp;rdquo;. If any are showing as &amp;ldquo;no&amp;rdquo; that you require, you&amp;rsquo;ll need to install the appropriate C library (e.g. libpng for PNG files) and re-run the previous command.&lt;/p&gt;

&lt;p&gt;To install ImageMagick and the Image::Magick Perl module, run this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;confirm-installation:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Confirm Installation&lt;/h3&gt;

&lt;p&gt;Confirming that the Image::Magick module has installed is not quite straightforward either. With version Image Magick 6.8.8, the $VERSION variable is stored in the super class Image::Magick::Q16. Hence you&amp;rsquo;ll need to type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl -MImage::Magick::Q16\ 999
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which should yield:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Image::Magick::Q16 version 999 required--this is only version 6.88.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sources:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Sources&lt;/h3&gt;

&lt;p&gt;Thanks to Jason Galea - his invaluable &lt;a href=&#34;https://github.com/lecstor/DevNotes/wiki/Image-Magick-with-Perlbrew&#34;&gt;GitHub notes&lt;/a&gt; formed the basis of this solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Schedule jobs like a boss with every</title>
      <link>http://perltricks.com/article/55/2013/12/22/Schedule-jobs-like-a-boss-with-every/</link>
      <pubDate>Sun, 22 Dec 2013 15:08:51 +0000</pubDate>
      
      <guid>http://perltricks.com/article/55/2013/12/22/Schedule-jobs-like-a-boss-with-every/</guid>
      <description>&lt;nav&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#requirements:85a5c4939839050f86f705c212d802c2&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#get-every:85a5c4939839050f86f705c212d802c2&#34;&gt;Get every&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scheduling-jobs-with-every:85a5c4939839050f86f705c212d802c2&#34;&gt;Scheduling jobs with every&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#further-info:85a5c4939839050f86f705c212d802c2&#34;&gt;Further info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;

&lt;p&gt;Scheduling jobs on cron is often a trial-and-error process but every, a command line app written in Perl makes it a lot easier.&lt;/p&gt;

&lt;h6 id=&#34;requirements:85a5c4939839050f86f705c212d802c2&#34;&gt;Requirements&lt;/h6&gt;

&lt;p&gt;You need to have cron, which comes with most Unix-based platforms (e.g. Linux, Mac OSX, BSD) and have Perl installed.&lt;/p&gt;

&lt;h6 id=&#34;get-every:85a5c4939839050f86f705c212d802c2&#34;&gt;Get every&lt;/h6&gt;

&lt;p&gt;every was developed by &lt;a href=&#34;http://re-becca.org/&#34;&gt;Rebecca&lt;/a&gt; and is hosted on her &lt;a href=&#34;https://github.com/iarna/App-Every&#34;&gt;Github&lt;/a&gt; page. You can download it directly from the command line using wget:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ wget &#39;https://raw.github.com/iarna/App-Every/master/packed/every&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or curl:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ curl -O &#39;https://raw.github.com/iarna/App-Every/master/packed/every&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save every to /usr/bin or add the parent directory to your PATH variable so you can run every from the command line.&lt;/p&gt;

&lt;h6 id=&#34;scheduling-jobs-with-every:85a5c4939839050f86f705c212d802c2&#34;&gt;Scheduling jobs with every&lt;/h6&gt;

&lt;p&gt;The command to every to schedule a job takes the form: &amp;ldquo;every [num] unit program&amp;rdquo; (num defaults to one). So for example if you wanted to schedule a shell script to run every minute, type the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ every minute script.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which creates the following crontab:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;SHELL=/bin/bash
PATH=/home/sillymoose/perl5/perlbrew/bin:/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/home/sillymoose/.local/bin:/home/sillymoose/bin:
*/1 * * * * cd &amp;quot;/home/sillymoose&amp;quot;;  script.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;every translates the command into a new crontab entry and prints it on the command line. Helpfully it will set the SHELL variable and copy the user&amp;rsquo;s PATH into the crontab. The icing on the cake is that every prepends a change directory command to ensure that cron executes the job from the script&amp;rsquo;s parent directory. By doing these things, every eliminates (probably) the three most common causes of failed cron jobs.&lt;/p&gt;

&lt;p&gt;Other units that every recognizes are: hour, day, week, month and the day of the week (e.g. Wednesday). The following are all valid every commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ every 10 hours script.sh

$ every mon script.sh

$ every 3 months script.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One really cool feature of modern cron installs is that you can schedule a job to run on reboot. every also supports this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ every @reboot script.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;further-info:85a5c4939839050f86f705c212d802c2&#34;&gt;Further info&lt;/h3&gt;

&lt;p&gt;every has more options than described above. Run &amp;ldquo;every &amp;ndash;help&amp;rdquo; to see the full panoply of options.&lt;/p&gt;

&lt;p&gt;every was written in Perl by &lt;a href=&#34;http://re-becca.org/&#34;&gt;Rebecca&lt;/a&gt;. She is also on twitter (&lt;a href=&#34;https://twitter.com/ReBeccaOrg&#34;&gt;@ReBeccaOrg&lt;/a&gt;). So if you use every and find it useful, maybe reach out and say thank you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Stratopan quick start user guide</title>
      <link>http://perltricks.com/article/48/2013/11/15/A-Stratopan-quick-start-user-guide/</link>
      <pubDate>Fri, 15 Nov 2013 04:23:53 +0000</pubDate>
      
      <guid>http://perltricks.com/article/48/2013/11/15/A-Stratopan-quick-start-user-guide/</guid>
      <description>

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt; is a cloud-based Perl module repository service. Users can create repositories of modules in the cloud and use them to manage their local installations of Perl modules. This makes it easy to configure a network of machines to have exactly the same modules (and versions), deploy Perl applications quickly and cleanly and host private (i.e. non CPAN) Perl software in a secure, central location. The &lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt; beta has officially started and so there has never been a better time to check out this amazing service. Read on for an unofficial quick start guide to Stratopan!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;getting-started-create-a-repository:713592ed043727253fc234d9fe0e3d2b&#34;&gt;Getting started - create a repository&lt;/h3&gt;

&lt;p&gt;Head over to Stratopan, sign up to create a new account and login. You should be presented with this message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/Stratopan/stratopan_1_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click the create repository link and complete the information on the following screen. Be sure to select the private option if you want your repository not to be publicly visible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/Stratopan/stratopan_2_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You should now have a new repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/Stratopan/stratopan_19_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;add-or-pull-modules:713592ed043727253fc234d9fe0e3d2b&#34;&gt;Add or pull modules&lt;/h3&gt;

&lt;p&gt;Modules reside in &amp;ldquo;stacks&amp;rdquo; which belong to a repository and helpfully Stratopan creates a default &amp;ldquo;master&amp;rdquo; stack for you. To insert modules into a stack you can &amp;ldquo;pull&amp;rdquo; them from CPAN or &amp;ldquo;add&amp;rdquo; them from a local machine. Let&amp;rsquo;s start by pulling a module onto our master stack. Click the &amp;ldquo;pulling&amp;rdquo; link to launch the pull module screen and start typing the name of the module you want to pull. Note that this must be the distribution name and not the module name. For example to pull the module &amp;ldquo;Method::Signatures&amp;rdquo;, you should type &amp;ldquo;Method-Signatures&amp;rdquo;. Helpfully Stratopan provides a case-insensitive predictive text search and lists the module version numbers available too, in case you need a specific variant. Let&amp;rsquo;s pull my wildly unpopular &lt;a href=&#34;https://metacpan.org/pod/WWW::CheckHTML&#34;&gt;WWW::CheckHTML&lt;/a&gt; module:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/Stratopan/stratopan_3_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Decide if you want Stratopan to recursively pull all module dependencies; this is usually a good option. What&amp;rsquo;s nice about this is the &amp;ldquo;recursive&amp;rdquo; pull will grab all the modules dependent on your chosen module&amp;rsquo;s dependencies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/Stratopan/stratopan_4_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It can be surprising how many dependencies there are - for example &lt;a href=&#34;https://metacpan.org/pod/WWW::CheckHTML&#34;&gt;WWW::CheckHTML&lt;/a&gt; has 5 direct dependencies and 69 indirect ones. Obviously when there are more dependent modules, Stratopan will take longer to pull them into the stack (usually a minute or two). When it&amp;rsquo;s finished, Stratopan will present the the latest view of the stack.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/Stratopan/stratopan_5_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Stratopan provides some useful stack features. A link to &lt;a href=&#34;https://metacpan.org&#34;&gt;metapcan&lt;/a&gt; is provided for every module (except for private modules that have been added from a local machine) and it&amp;rsquo;s possible to browse the *.pm files in a module by clicking on it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/Stratopan/stratopan_20_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Each stack has it&amp;rsquo;s own commit history, accessed via the aptly-named &amp;ldquo;history&amp;rdquo; link:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/Stratopan/stratopan_22_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;graphs&amp;rdquo; link is much more interesting. It opens this cool, rotatable dependencies chart:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/Stratopan/stratopan_21_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally the &amp;ldquo;settings&amp;rdquo; link let&amp;rsquo;s you update the stack name, description and target Perl version. You can also delete the stack from here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/Stratopan/stratopan_23_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;installing-modules-from-your-stratopan-stack:713592ed043727253fc234d9fe0e3d2b&#34;&gt;Installing modules from your Stratopan stack&lt;/h3&gt;

&lt;p&gt;To install modules from Stratopan you&amp;rsquo;ll need &lt;a href=&#34;https://metacpan.org/pod/release/MIYAGAWA/App-cpanminus-1.7001/bin/cpanm&#34;&gt;cpanm&lt;/a&gt;. You can install this via cpan from the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan App::cpanminus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once cpanm has installed, open one of your stacks on Stratopan and copy the stack URL (shown in red below).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/Stratopan/stratopan_24_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At the terminal type &amp;ldquo;cpanm &amp;ndash;mirror-only &amp;ndash;mirror &amp;rdquo; and paste your copied stack URL and enter one or more module names that you wish to install. For example to install &lt;a href=&#34;https://metacpan.org/pod/WWW::CheckHTML&#34;&gt;WWW::CheckHTML&lt;/a&gt; from my master stack:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpanm --mirror-only --mirror 
https://stratopan.com/sillymoose/WebStuff/master WWW::CheckHTML
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all goes well you should see the following installation dialogue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;--&amp;gt; Working on WWW::CheckHTML
Fetching https://stratopan.com/sillymoose/WebStuff/master/authors/id/S/SI/SILLYMOOS/WWW-CheckHTML-0.04.tar.gz ... OK
Configuring WWW-CheckHTML-0.04 ... OK
Building and testing WWW-CheckHTML-0.04 ... OK
Successfully installed WWW-CheckHTML-0.04
1 distribution installed
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion:713592ed043727253fc234d9fe0e3d2b&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://stratopan.com&#34;&gt;Stratopan&lt;/a&gt; is an awesome new service which can hugely simplify the configuration of your Perl platforms. Hopefully this guide has given you a better idea of how to get started with it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Find CPAN mirrors and configure the local CPAN mirror list</title>
      <link>http://perltricks.com/article/44/2013/10/20/Find-CPAN-mirrors-and-configure-the-local-CPAN-mirror-list/</link>
      <pubDate>Sun, 20 Oct 2013 19:07:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/44/2013/10/20/Find-CPAN-mirrors-and-configure-the-local-CPAN-mirror-list/</guid>
      <description>

&lt;p&gt;CPAN mirrors are online repositories which host or &amp;ldquo;mirror&amp;rdquo; the Perl module distributions on CPAN. There are hundreds of CPAN mirrors dispersed throughout the World. When the CPAN program is run for the first time on a machine, it will configure the CPAN mirror list to use for checking for new versions of modules and downloading Perl distributions. All CPAN mirrors are not created equally though: the distribution list&amp;rsquo;s age, speed and the geographic location vary from mirror to mirror and so you may want to re-configure your local CPAN mirror list to suit your needs. This article describes how to find CPAN mirrors and edit the local CPAN mirror configuration.&lt;/p&gt;

&lt;h3 id=&#34;finding-cpan-mirrors:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;Finding CPAN mirrors&lt;/h3&gt;

&lt;p&gt;An online list of public CPAN mirrors can be found &lt;a href=&#34;http://mirrors.cpan.org/&#34;&gt;here&lt;/a&gt;. The list is frequently updated and lists mirrors by location, the scheme used (ftp, http), the age of the module list and some test results. Viewing this list you can see that some mirrors do not refresh their module list for days at a time - if you are using these mirrors you could be missing out on the latest version of your favourite module! A JSON formatted CPAN mirror list can be found &lt;a href=&#34;http://www.cpan.org/indices/mirrors.json&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;start-the-cpan-shell:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;Start the CPAN shell&lt;/h3&gt;

&lt;p&gt;Once you have identified the URLs of the CPAN mirrors you want to use, fire up the terminal and load the cpan shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan

cpan shell -- CPAN exploration and modules installation (v2.00)
Enter &#39;h&#39; for help.

cpan[1]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;view-the-local-cpan-mirror-list:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;View the local CPAN mirror list&lt;/h3&gt;

&lt;p&gt;The CPAN mirror list is stored in the &amp;ldquo;urllist&amp;rdquo; variable. To view the list of mirrors, type &amp;ldquo;o conf urllist&amp;rdquo; in the CPAN shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan[1]&amp;gt;o conf urllist
    urllist           
    0 [http://httpupdate3.cpanel.net/CPAN/]
    1 [http://httpupdate23.cpanel.net/CPAN/]
    2 [http://mirrors.servercentral.net/CPAN/]
    3 [ftp://cpan.cse.msu.edu/]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-a-cpan-mirror:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;Add a CPAN mirror&lt;/h3&gt;

&lt;p&gt;To add a CPAN mirror use the &amp;ldquo;unshift&amp;rdquo; or &amp;ldquo;push&amp;rdquo; functions to add the mirror&amp;rsquo;s url to the front or end of the mirror list. Make sure that the URL for the mirror &lt;strong&gt;includes the scheme&lt;/strong&gt; (http, ftp).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan[2]&amp;gt; o conf urllist push http://mirror.waia.asn.au/pub/cpan/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;remove-a-cpan-mirror:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;Remove a CPAN mirror&lt;/h3&gt;

&lt;p&gt;To remove a CPAN mirror use the &amp;ldquo;shift&amp;rdquo; or &amp;ldquo;pop&amp;rdquo; functions to remove the mirror URL from the front or end of the mirror list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan[3]&amp;gt; o conf urllist pop
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;completely-replace-the-existing-mirror-list:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;Completely replace the existing mirror list&lt;/h3&gt;

&lt;p&gt;To overwrite the existing mirror list with a new one, just provide the URLs to the new mirrors as a space separated list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan[4]&amp;gt; o conf urllist http://mirror.waia.asn.au/pub/cpan/ ftp://mirrors.coopvgg.com.ar/CPAN/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;saving-changes:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;Saving changes&lt;/h3&gt;

&lt;p&gt;Once you have updated the CPAN mirror list, make sure you commit the changes to file so they are saved beyond the current session:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan[5]&amp;gt; o conf commit
commit: wrote &#39;/home/sillymoose/.cpan/CPAN/MyConfig.pm&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;edit-the-cpan-configuration-file-directly:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;Edit the CPAN configuration file directly&lt;/h3&gt;

&lt;p&gt;You can also edit the CPAN config file directly. For local user Perl installations this is */CPAN/MyConfig.pm and system Perl installations */CPAN/Config.pm (the parent directory will depend on the platform). When editing the file, urllist is a hash key for an array reference of mirror urls. Note the urls are quoted using Perl&amp;rsquo;s quoting operator (&amp;ldquo;q&amp;rdquo;). Simply edit and save the file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&#39;urllist&#39; =&amp;gt; [
    q[http://httpupdate3.cpanel.net/CPAN/], 
    q[http://httpupdate23.cpanel.net/CPAN/], 
    q[http://mirrors.servercentral.net/CPAN/], 
    q[ftp://cpan.cse.msu.edu/]
],
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to schedule Perl scripts using cron</title>
      <link>http://perltricks.com/article/43/2013/10/11/How-to-schedule-Perl-scripts-using-cron/</link>
      <pubDate>Fri, 11 Oct 2013 01:54:20 +0000</pubDate>
      
      <guid>http://perltricks.com/article/43/2013/10/11/How-to-schedule-Perl-scripts-using-cron/</guid>
      <description>

&lt;p&gt;Cron is a job scheduling program available on UNIX-like platforms. Most system commands can be scheduled including the execution of Perl programs. Once a job is setup, cron will run it as scheduled even if the user is not logged in, which can be a great way to automate sysadmin tasks or repetitive jobs. This article describes how to run Perl scripts with cron.&lt;/p&gt;

&lt;h3 id=&#34;perl-script-tips:033cbfb4558019e15a0feee3315d7625&#34;&gt;Perl script tips&lt;/h3&gt;

&lt;p&gt;When preparing a script to be run by cron, there a few things to keep in mind. You may want to add a shebang line to the of the script for the Perl binary you want to execute. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/local/bin/perl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you plan to run the script on different platforms, you can omit the shebang line, as the location of the Perl binary may vary from platform to platform (more on this later).&lt;/p&gt;

&lt;p&gt;Also ensure that any paths used in the script are absolute paths (such as for opening filehandles, database connection strings and external program paths).&lt;/p&gt;

&lt;h3 id=&#34;setup-a-crontab:033cbfb4558019e15a0feee3315d7625&#34;&gt;Setup a crontab&lt;/h3&gt;

&lt;p&gt;To schedule a job with cron, the job needs to be added to the user&amp;rsquo;s crontab. To do this open a terminal and type the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will open the crontab in a text editor. To add a job, a line must be added in the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;* * * * * command to be executed
| | | | |
| | | | |
| | | | +----- day of week  (0 - 6, Sunday=0)
| | | +------- month        (1 - 12)
| | +--------- day of month (1 - 31)
| +----------- hour         (0 - 23)
+------------- min          (0 - 59)

An asterisk (*) means all.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are some example crontab entries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# execute every minute
* * * * * perl /path/to/Beacon.pl

# execute every 5 minutes
*/5 * * * * perl /path/to/Beacon.pl

# execute every hour at 0 minutes past the hour
0 * * * * perl /path/to/Beacon.pl

# execute every 12 hours at half past the hour
30 */12 * * * perl /path/to/Beacon.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your script does not contain a shebang line, provide the absolute path to the Perl binary in the crontab. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;30 */12 * * * /usr/local/bin/perl /path/to/Beacon.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the crontab and exit the text editor. To check the job has been scheduled, you can check your crontab with this command from the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;crontab -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will print your current crontab to the terminal.&lt;/p&gt;

&lt;h3 id=&#34;troubleshooting-cron:033cbfb4558019e15a0feee3315d7625&#34;&gt;Troubleshooting cron&lt;/h3&gt;

&lt;p&gt;Working with cron is usually straightforward, but if you are having difficulty getting the Perl script to run, check the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check the cron log to be sure that cron is running the job as you expect. It is usually found here: /var/log/cron&lt;/li&gt;
&lt;li&gt;Check that you are providing the correct absolute path to the Perl binary. Either in the shebang line inside the script or in crontab (if you are not sure what this is type &amp;ldquo;which perl&amp;rdquo; at the terminal).&lt;/li&gt;
&lt;li&gt;Make sure the script permissions allow execution (e.g. &amp;ldquo;chmod +x /path/to/file&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;If you are running additional programs within the Perl script, consider adding their binary paths to the crontab as cron does not have the same PATH as the user.&lt;/li&gt;
&lt;li&gt;If you need to run a script as root, just create a crontab for root using sudo: &amp;ldquo;sudo crontab -e&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good list of general cron tips can be found &lt;a href=&#34;http://askubuntu.com/questions/23009/reasons-why-crontab-does-not-work&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to track new CPAN releases</title>
      <link>http://perltricks.com/article/33/2013/7/29/How-to-track-new-CPAN-releases/</link>
      <pubDate>Mon, 29 Jul 2013 01:11:31 +0000</pubDate>
      
      <guid>http://perltricks.com/article/33/2013/7/29/How-to-track-new-CPAN-releases/</guid>
      <description>

&lt;p&gt;CPAN is a fantastic Perl resource with thousands of modules and new ones being added all the time. But how do you keep track of what&amp;rsquo;s being released? This article describes three techniques for keeping tabs on the latest CPAN releases.&lt;/p&gt;

&lt;h3 id=&#34;cpan-org:1bfc29f171e882ce9b1eb00fa28d0101&#34;&gt;CPAN.org&lt;/h3&gt;

&lt;p&gt;The CPAN website&amp;rsquo;s &lt;a href=&#34;http://search.cpan.org/recent&#34;&gt;recent uploads&lt;/a&gt; page maintains a list of the latest CPAN releases, with links to the module documentation. Additionally it&amp;rsquo;s possible to search the release history using the navigating arrow links at the top of the page.&lt;/p&gt;

&lt;h3 id=&#34;cpan-recent-uploads:1bfc29f171e882ce9b1eb00fa28d0101&#34;&gt;CPAN::Recent::Uploads&lt;/h3&gt;

&lt;p&gt;Chris Williams&amp;rsquo; &lt;a href=&#34;https://metacpan.org/module/CPAN::Recent::Uploads&#34;&gt;CPAN::Recent::Uploads&lt;/a&gt; module offers a programmatic interface to track recent CPAN uploads. It provides a &amp;ldquo;recent&amp;rdquo; function that accepts two optional arguments: the time from which to view uploads since and the URL of the CPAN mirror to use. By default it will return a list of modules released in the past week on the CPAN mirror &amp;ldquo;&lt;a href=&#34;ftp://ftp.funet.fi/pub/CPAN/&amp;quot;&#34;&gt;ftp://ftp.funet.fi/pub/CPAN/&amp;quot;&lt;/a&gt;. The module&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/module/CPAN::Recent::Uploads&#34;&gt;documentation&lt;/a&gt; also has an example Perl one liner. To see CPAN::Recent::Uploads in action, enter this at the command-line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# print a list of this week&#39;s CPAN releases
perl -MCPAN::Recent::Uploads -le &amp;quot;print for CPAN::Recent::Uploads-&amp;gt;recent;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;twitter:1bfc29f171e882ce9b1eb00fa28d0101&#34;&gt;Twitter&lt;/h3&gt;

&lt;p&gt;The Twitter account &lt;a href=&#34;https://twitter.com/cpan_new&#34;&gt;CPAN New Modules&lt;/a&gt; tweets every new CPAN release. The author Punytan has also released the source code on &lt;a href=&#34;https://t.co/K7KnELaYzk&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can subscribe to the stream by clicking this button: &lt;a href=&#34;https://twitter.com/cpan_new&#34;&gt;Follow @cpan_new&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Re-use code with Perl&#39;s anonymous functions</title>
      <link>http://perltricks.com/article/34/2013/7/17/Re-use-code-with-Perl-s-anonymous-functions/</link>
      <pubDate>Wed, 17 Jul 2013 03:10:55 +0000</pubDate>
      
      <guid>http://perltricks.com/article/34/2013/7/17/Re-use-code-with-Perl-s-anonymous-functions/</guid>
      <description>&lt;p&gt;An anonymous function in Perl is an unnamed subroutine. But what are they good for? This article shows how through using anonymous functions it&amp;rsquo;s possible to write more generic, re-usable Perl code.&lt;/p&gt;

&lt;p&gt;Imagine that you&amp;rsquo;ve developed the following script. The script receives a directory path as a parameter and recursively searches the child directories of the path, printing any file name it finds:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use feature qw/say/;

die &amp;quot;Error: you must supply a directory path argument $!&amp;quot; unless @ARGV;

sub listFiles {
    my $dir = shift;
    opendir(my $DH, $dir) or die &amp;quot;Error: failed to open $dir $!&amp;quot;;

    while (readdir $DH) {
        my $path = $dir . $_;
        if(-d $path ){
            # recurse but ignore Linux symlinks . and ..
            listFiles($path .&#39;/&#39;) if $_ !~ /^\.{1,2}$/;
        }
        elsif(-f $path){
            say $path;
        }
    }
}

listFiles($ARGV[0]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most re-usable aspect of this script is the recursive directory searching logic. If you wanted to develop a file name searching script (similar to the find program in Linux), you could start by copying and pasting the script above, and then updating the code to provide the required behavior. An alternative way would be to change the core subroutine to accept an anonymous function as an argument, and then execute that function on every file it finds. Such a subroutine would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use feature qw/say/;

die &amp;quot;Error: you must supply a directory path argument $!&amp;quot; unless @ARGV;

sub walkDir {
    my ($dir, $function) = @_;

    # validate args
    opendir(my $DH, $dir) or die &amp;quot;Error: failed to open $dir $!&amp;quot;;
    ref($function) eq &#39;CODE&#39; or 
        die &amp;quot;Error: second argument to walkDir must be an anonymous function $!&amp;quot;;

    while (readdir $DH) {
        my $path = $dir . $_;
        if(-d $path ){ 
            # recurse but ignore Linux symlinks . and ..
            walkDir($path . &#39;/&#39;, $function) if $_ !~ /^\.{1,2}$/;
        }
        elsif(-f $path){
            $function-&amp;gt;($path);
        }
    }
}

walkDir($ARGV[0], sub { say shift });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;walkDir&amp;rdquo; subroutine in the code above accepts two arguments: the directory path and a function. It recursively searches the directories as before, however when it encounters a file, it de-references and executes the function, passing the file path to the function as an argument. The final line of code provides the file name printing behaviour by calling &amp;ldquo;walkDir&amp;rdquo; and passing the target directory path, and an anonymous function to print (say) the default argument.&lt;/p&gt;

&lt;p&gt;We can re-use the same walkDir subroutine for our file-searching script and all we have to do is update the anonymous function behavior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;walkDir($ARGV[0], 
        sub { 
            my $filename = shift;
            say $filename if $filename =~ /$ARGV[1]/i;
        });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create a grep-like tool, we would replace the previous code with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::Slurp;
walkDir($ARGV[0],
        sub {
            my $filename = shift;
            say $filename if read_file($filename) =~ qr/$ARGV[1]/i;
        });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact we could quickly create a whole library of useful sysadmin scripts with this approach. We could even put the &amp;ldquo;walkDir&amp;rdquo; subroutine code into a module to augment further re-use. Hopefully these examples show how by using anonymous functions, Perl let&amp;rsquo;s you re-use useful code.&lt;/p&gt;

&lt;p&gt;This article was inspired by &lt;a href=&#34;http://hop.perl.plover.com/&#34;&gt;Higher Order Perl&lt;/a&gt; by Mark Jason Dominus. Higher Order Perl explores anonymous functions and other functional programming techniques like recursion, currying and laziness. It&amp;rsquo;s free to read online and in ebook format.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upload to CPAN from the command line</title>
      <link>http://perltricks.com/article/31/2013/6/30/Upload-to-CPAN-from-the-command-line/</link>
      <pubDate>Sun, 30 Jun 2013 03:44:12 +0000</pubDate>
      
      <guid>http://perltricks.com/article/31/2013/6/30/Upload-to-CPAN-from-the-command-line/</guid>
      <description>

&lt;p&gt;The Perl module &lt;a href=&#34;https://metacpan.org/module/CPAN::Uploader&#34;&gt;CPAN::Uploader&lt;/a&gt; comes with a neat command line application called &lt;a href=&#34;https://metacpan.org/module/RJBS/CPAN-Uploader-0.103004/bin/cpan-upload&#34;&gt;cpan-upload&lt;/a&gt; which allows Perl module authors to upload to CPAN from the command line. This article describes how to install cpan-upload and use it.&lt;/p&gt;

&lt;p&gt;To upload modules to CPAN you must have a registered &lt;a href=&#34;http://pause.perl.org/pause/query&#34;&gt;PAUSE&lt;/a&gt; account. Registration is free and an account is usually activated within 24 hours. Once you have a registered PAUSE account, install CPAN::Uploader via the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan CPAN::Uploader
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once CPAN::Uploader has installed (it has a bunch of dependencies, including C libraries for NetSSLeay) at the command line type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan-upload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see the cpan-upload help output displayed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Please provide at least one file name.
usage: cpan-upload [options] file-to-upload
    -v --verbose       enable verbose logging
    -h --help          display this help message
    --dry-run          do not actually upload anything
                     
    -u --user          your PAUSE username
    -p --password      the password to your PAUSE account
    -d --directory     a dir in your CPAN space in which to put the files
    --http-proxy       URL of the http proxy to use in uploading
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-step-method:9253a99b6a8c2591d3b7e3b70155f9ec&#34;&gt;1 Step method&lt;/h3&gt;

&lt;p&gt;To upload a file to PAUSE, the syntax is like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan-upload -u username -p password My-App-0.01.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where username and password are your PAUSE account credentials followed by the filepath(s) to the files you want to upload. On a successful load, cpan-upload will display the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;registering upload with PAUSE web server
POSTing upload for My-App-0.01.tar.gz to https://pause.perl.org/pause/authenquery
PAUSE add message sent ok [200]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-step-method-recommended:9253a99b6a8c2591d3b7e3b70155f9ec&#34;&gt;2 step method (recommended)&lt;/h3&gt;

&lt;p&gt;The 2 step method involves calling cpan-upload with just your username and the filepath to the files to be uploaded. cpan-upload will then prompt for your password, which is entered directly into Perl, in a hidden format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan-upload -u sillymoos My-App-0.01.tar.gz 
PAUSE Password:
POSTing upload for My-App-0.01.tar.gz to https://pause.perl.org/pause/authenquery
PAUSE add message sent ok [200]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; cpan-upload transmits your credentials via HTTPS (encrypted) to the PAUSE server, but with the 1 step method you do have to type your password in plaintext. which is a security risk as many operating systems will store them in logs, and/or process details. Simply searching through the Terminal history will reveal your PAUSE password. Additionally, someone could read your password as it&amp;rsquo;s typed in. The 2 step method reduces this risk as the password is not logged in the terminal, but goes directly into the Perl program, and the password is not visible on the screen when typed. That said, the password can still be extracted from the computer by a stack trace or system call search. cpan-upload does have the ability to read the credentials from a .pause file in your home directory, which is a slightly more secure method than the 1 step method (although storing passwords in plaintext files raises its own security vulnerabilities). Of these three options the 2 step method seems to be the most secure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Perl modules with C library dependencies</title>
      <link>http://perltricks.com/article/19/2013/4/15/Installing-Perl-modules-with-C-library-dependencies/</link>
      <pubDate>Mon, 15 Apr 2013 18:37:26 +0000</pubDate>
      
      <guid>http://perltricks.com/article/19/2013/4/15/Installing-Perl-modules-with-C-library-dependencies/</guid>
      <description>

&lt;p&gt;Some Perl modules have specific C library dependencies that need to be met or else they won&amp;rsquo;t install. These issues can be tricky to solve as CPAN is not able to automatically install or report on non-Perl dependencies and Google isn&amp;rsquo;t good at returning useful results for these types of issues (&lt;a href=&#34;https://metacpan.org/module/MIKEM/Net-SSLeay-1.54/lib/Net/SSLeay.pod&#34;&gt;Net::SSLeay&lt;/a&gt; is a common example of a tricky module to install). Usually you will only find out about missing dependencies when trying to install the module, as the install will fail. What you need to do at this point is &lt;strong&gt;identify&lt;/strong&gt; and &lt;strong&gt;install&lt;/strong&gt; the missing C libraries.&lt;/p&gt;

&lt;h3 id=&#34;identifying-c-library-dependencies:12040641a686db63029ae6c41a9f1d99&#34;&gt;Identifying C Library dependencies&lt;/h3&gt;

&lt;p&gt;Here are some places to check for dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Install error message&lt;/strong&gt; - scan the command line output from the failed install: often Perl developers will write specific error messages that indicate the missing C library.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Module documentation&lt;/strong&gt; - check the main POD page for the module on &lt;a href=&#34;https://metacpan.org/&#34;&gt;metacpan&lt;/a&gt; it may indicate which C libraries are required.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Distribution files&lt;/strong&gt; - check the README and INSTALL files that come with the distribution for the module you are trying to install. If available they will be in the root directory of the tarball. You can browse these files online at &lt;a href=&#34;https://metacpan.org/&#34;&gt;metacpan&lt;/a&gt; by searching for the module, then clicking the &amp;lsquo;browse&amp;rsquo; link on the module&amp;rsquo;s main page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search your package manager&lt;/strong&gt; - look at the technologies and keywords associated with the module. For example &lt;a href=&#34;https://metacpan.org/module/MIKEM/Net-SSLeay-1.54/lib/Net/SSLeay.pod&#34;&gt;Net::SSLeay&lt;/a&gt; probably has something to do with SSL, so search for Perl-related SSL packages (example below).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;installing-c-library-dependencies:12040641a686db63029ae6c41a9f1d99&#34;&gt;Installing C library dependencies&lt;/h3&gt;

&lt;p&gt;Once you have identified the missing C libraries, you need to install them. If you are on Linux, this can be done using a package manager and searching for and installing the package containing the C library:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# yum package manager
$ sudo yum search ssl
...
sudo yum install openssl-perl.x86_64 perl-Net-SSLeay.x86_64 perl-Crypt-SSLeay.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are not on Linux, try downloading the library directly from the C library&amp;rsquo;s homepage - these are easy to find via Google and usually have specific Windows / OSX distributions.&lt;/p&gt;

&lt;p&gt;Once you have installed the requisite libraries, try installing the Perl module again with CPAN.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>List all Perl modules installed via CPAN</title>
      <link>http://perltricks.com/article/14/2013/4/7/List-all-Perl-modules-installed-via-CPAN/</link>
      <pubDate>Sun, 07 Apr 2013 18:52:11 +0000</pubDate>
      
      <guid>http://perltricks.com/article/14/2013/4/7/List-all-Perl-modules-installed-via-CPAN/</guid>
      <description>&lt;p&gt;A quick way to list all non-core modules installed via CPAN using the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perldoc perllocal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that if you are using perlbrew and have several different versions of Perl installed, the perllocal command will only output modules installed for the active Perl version. If you execute the perllocal command and see this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;no documentation found for &amp;quot;perllocal&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that no non-core Perl modules have been installed via CPAN. Try installing a module via CPAN, and then retry the perllocal command.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

