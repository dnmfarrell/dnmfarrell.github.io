<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Social_media on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/social_media/</link>
    <description>Recent content in Social_media on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Jan 2016 13:52:14 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/social_media/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Twitter as a datastore</title>
      <link>https://dnmfarrell.github.io/article/210/2016/1/21/Twitter-as-a-datastore/</link>
      <pubDate>Thu, 21 Jan 2016 13:52:14 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/210/2016/1/21/Twitter-as-a-datastore/</guid>
      <description>&lt;p&gt;Why doesn&amp;rsquo;t anyone talk about Twitter as a data store? It&amp;rsquo;s a free account, they mostly have uptime, and you can easily control who can see the information. If you can do it in 140 characters (and &lt;a href=&#34;http://www.theverge.com/2015/8/12/9134175/twitter-direct-message-character-limit&#34;&gt;soon to be 10,000&lt;/a&gt;), it&amp;rsquo;s an easy way to store data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/excellent_nums&#34;&gt;Tweets by @excellent_nums&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m doing this for my &lt;a href=&#34;http://www.excellentnums.com&#34;&gt;excellent numbers project&lt;/a&gt; that does quite a bit of computing to find numbers with a particular property. This isn&amp;rsquo;t the only way I&amp;rsquo;m storing the numbers, but I had the idea of tweeting them as soon as I found them in case every other method failed. If I accidentally deleted the output files (did that), truncated and overwrote files (did that), or somehow screwed it up in another way (did that), the numbers are still on Twitter.&lt;/p&gt;

&lt;p&gt;I had another compelling reason, though. I wanted to get an alert on my phone when my program found another excellent number. Unfortunately, I&amp;rsquo;ve hitched my wagon to the iPhone. There are all sorts of complicated ways for me to get an alert but I already use Twitter and get alerts for that. So, I can have a backup store and an alert system using stuff I already have installed. I can spend more time on the math and less time on installing and managing Redis (which is easy too and deserves an article here) then coming up with a way to send new entries to my phone.&lt;/p&gt;

&lt;p&gt;I wrote about my setup in nonspecific terms in &lt;a href=&#34;http://www.masteringperl.org/2015/12/ive-found-over-200-excellent-numbers/&#34;&gt;Mastering Perl&lt;/a&gt;. I didn&amp;rsquo;t show any code, although it&amp;rsquo;s all in &lt;a href=&#34;https://github.com/briandfoy/excellent_numbers&#34;&gt;the excellent_numbers GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before you start, you need some Twitter credentials to use their API through the &lt;a href=&#34;https://metacpan.org/pod/Net::Twitter&#34;&gt;Net::Twitter&lt;/a&gt; module. Start at &lt;a href=&#34;http://apps.twitter.com&#34;&gt;Twitter Application Management&lt;/a&gt; to get the four special strings you&amp;rsquo;ll need (&lt;a href=&#34;http://iag.me/socialmedia/how-to-create-a-twitter-app-in-8-easy-steps/&#34;&gt;&amp;ldquo;How to Register a Twitter App in 8 Easy Steps&amp;rdquo; has a good description of the steps&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Consumer Key (API Key)&lt;/p&gt;

&lt;p&gt;Consumer Secret (API Secret)&lt;/p&gt;

&lt;p&gt;Access Token&lt;/p&gt;

&lt;p&gt;Access Token Secret&lt;/p&gt;

&lt;p&gt;The Net::Twitter module needs these strings to create its object. The module handles all of the OAuth details without me having to think about them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Net::Twitter;

my $nt = Net::Twitter-&amp;gt;new(
   traits   =&amp;gt; [qw/OAuth API::RESTv1_1/],
   map { $_ =&amp;gt; $ENV{&amp;quot;$_&amp;quot;} || die &amp;quot;ENV $_ not set&amp;quot; }
           qw(     
                consumer_secret
                consumer_key
                access_token
                access_token_secret
                )
   );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my excellent number program, I wanted to be as simple as possible. I didn&amp;rsquo;t want to re-tweet numbers I already tweeted so I fetched everything I&amp;rsquo;ve tweeted so far and stored it in a hash. Twitter pages in groups of 200 tweets maximum, and this didn&amp;rsquo;t seem like it would be a problem a couple of months ago but I&amp;rsquo;m now up to over 350 of them.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s easy to fetch a bunch of statuses with the &lt;code&gt;user_timeline&lt;/code&gt; method. I need to tell it where to start (&lt;code&gt;min_id&lt;/code&gt; or &lt;code&gt;since_id&lt;/code&gt;). Twitter returns huge JSON structures with lots of information, but Net::Twitter turns that into a Perl data structure for me. I dump what they send and pull out the parts I want:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %tweets;
STATUSES: while( 1 ) {
  state $min_id = 1;
  state $fetch_size = 200;

  my $max_key = $min_id == 1 ? &#39;since_id&#39; : &#39;max_id&#39;;

  my $statuses = $nt-&amp;gt;user_timeline({
          count       =&amp;gt; $fetch_size,
          screen_name =&amp;gt; &#39;excellent_nums&#39;,
          $max_key    =&amp;gt; $min_id,
          });     

  say { interactive } &amp;quot;Found &amp;quot; . @$statuses . &amp;quot; statuses&amp;quot;;
  $min_id = $statuses-&amp;gt;[-1]{id} - 1 if $min_id == 1;

  foreach my $status ( @$statuses ) {
          $min_id = $status-&amp;gt;{id} - 1 if $min_id &amp;gt; $status-&amp;gt;{id};
          my( $number ) = $status-&amp;gt;{text} =~ m/(\d+)/;
          warn &amp;quot;[$number] has more than one tweet!\n&amp;quot; if exists $tweets{$number};
          $tweets{$number} = undef;
          unless( is_excellent( $number ) ) {
                  warn &amp;quot;Tweet for [$number] is an unexcellent error\n&amp;quot;;
                  }       
          }       

  last if @$statuses &amp;lt; $fetch_size; # must be last page
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This part is complicated for another reason. At the start of the project I was generating the excellent numbers sequentially. When that&amp;rsquo;s the case I only needed to look at the previous tweet to see if it was less than the number I just discovered. When I got to the big numbers, I went wide and worked on different parts of the range in parallel and sometimes on several computers simultaneously. I started to discover the numbers out of order and tweet them out of order. Hence, the paging. I could store the list of tweeted numbers locally, but that&amp;rsquo;s a hassle to manage too since that can be out of sync. I still might do that when this method runs out of steam. I&amp;rsquo;m not likely to get far beyond 500 numbers though.&lt;/p&gt;

&lt;p&gt;Notice that I also &lt;code&gt;warn&lt;/code&gt; if I run into a tweet with a number that I think is a duplicate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;warn &amp;quot;[$number] has more than one tweet!\n&amp;quot; if exists $tweets{$number};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this was a bigger problem (and it&amp;rsquo;s not anymore), I could use the &lt;code&gt;destroy_status&lt;/code&gt; method to automatically get rid of it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$nt-&amp;gt;destroy_status( $status-&amp;gt;{id} ) if exists $tweets{$number};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I decided not to delete automatically from the program. It&amp;rsquo;s not a problem to have duplicates. It&amp;rsquo;s a bit messy, but it&amp;rsquo;s more messy to delete stuff I want to keep and to retweet it. That risk makes it not worth it for me. I don&amp;rsquo;t want another possible automated mess to clean up.&lt;/p&gt;

&lt;p&gt;Now I know everything I&amp;rsquo;ve tweeted previously and I&amp;rsquo;ve put them in &lt;code&gt;%tweets&lt;/code&gt;. The next part is to tweet what I&amp;rsquo;ve found and haven&amp;rsquo;t stored yet. I also store that in a local file (but remember I want the alerts and the backup!) that I used to populate &lt;code&gt;%numbers&lt;/code&gt;. I skip the numbers I already tweeted and use &lt;code&gt;update&lt;/code&gt; to make the new tweets. Storing new numbers is easy, and when I do it I want to tweet the new numbers in ascending order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;NUMBER: foreach my $number ( sort { $a &amp;lt;=&amp;gt; $b } keys %numbers ) {
  next NUMBER if exists $tweets{$number};

  $nt-&amp;gt;update( &amp;quot;$number is excellent&amp;quot; );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This used to be part of the program that found the excellent numbers, but I switched to C for a huge performance bump. I still wanted to tweet from Perl, which is easy. Perl&amp;rsquo;s become the glue holding together lots of different things.&lt;/p&gt;

&lt;p&gt;Once I can read from, post to, and delete from twitter, other applications (or even real people) can follow it. It can be public or private. It&amp;rsquo;s not sophisticated. It&amp;rsquo;s uptime isn&amp;rsquo;t going to win any awards. But it&amp;rsquo;s free and easy for my small task.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

