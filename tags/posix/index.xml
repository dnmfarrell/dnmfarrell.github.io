<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posix on Code - a programming blog</title>
    <link>https://blog.dnmfarrell.com/tags/posix/</link>
    <description>Recent content in Posix on Code - a programming blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Nov 2021 09:03:41 -0500</lastBuildDate>
    <atom:link href="https://blog.dnmfarrell.com/tags/posix/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Split a String in POSIX Shell</title>
      <link>https://blog.dnmfarrell.com/post/how-to-split-a-string-in-posix-shell/</link>
      <pubDate>Fri, 12 Nov 2021 09:03:41 -0500</pubDate>
      <guid>https://blog.dnmfarrell.com/post/how-to-split-a-string-in-posix-shell/</guid>
      <description>&lt;p&gt;The POSIX Shell &lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html&#34;&gt;specification&lt;/a&gt; defines a minimalist shell language with few features compared to stalwarts like Bash. Yet POSIX shells are everywhere: &lt;a href=&#34;https://en.wikipedia.org/wiki/Almquist_shell&#34;&gt;Dash&lt;/a&gt; is the default on Ubuntu, and many Docker containers only have busybox &lt;a href=&#34;https://github.com/brgl/busybox/blob/master/shell/ash.c&#34;&gt;ash&lt;/a&gt;. Minimalist shells use less resources and are faster than featureful shells like &lt;a href=&#34;https://www.gnu.org/software/bash/&#34;&gt;Bash&lt;/a&gt; and &lt;a href=&#34;https://www.zsh.org/&#34;&gt;Zsh&lt;/a&gt;ยน. They are more likely to be secure too, as the reduced feature sets are easier to reason about and provide a smaller attack surface for hackers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit Testing Shell Scripts</title>
      <link>https://blog.dnmfarrell.com/post/unit-testing-shell-scripts/</link>
      <pubDate>Fri, 16 Jul 2021 09:32:50 -0400</pubDate>
      <guid>https://blog.dnmfarrell.com/post/unit-testing-shell-scripts/</guid>
      <description>&lt;p&gt;Unit testing is great way to build confidence that your code works. Usually you&amp;rsquo;d write unit tests for libraries; but if you have a particularly long or complicated shell script, it might be worth converting it to a &lt;a href=&#34;https://blog.dnmfarrell.com/post/modulinos-in-bash/&#34;&gt;modulino&lt;/a&gt; just so you can write tests for it. And if you are writing a library in shell code, you need all the help you can get anyway.&lt;/p&gt;&#xA;&lt;p&gt;So let&amp;rsquo;s assume you have some shell code to test, now what? Well most shells have no built-in unit testing capabilities, so you need to write a script to load your code, and check it does the right thing and report the results.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bash Function Names Can Be Almost Anything</title>
      <link>https://blog.dnmfarrell.com/post/bash-function-names-can-be-almost-anything/</link>
      <pubDate>Sun, 20 Jun 2021 20:19:32 -0400</pubDate>
      <guid>https://blog.dnmfarrell.com/post/bash-function-names-can-be-almost-anything/</guid>
      <description>&lt;p&gt;A common misconception about Bash is that function names must follow the same rules that variables do. The Bash &lt;a href=&#34;https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#index-name&#34;&gt;manual&lt;/a&gt; even suggests this:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A word consisting solely of letters, numbers, and underscores, and beginning with a letter or underscore. Names are used as shell variable and function names. Also referred to as an identifier.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;In fact Bash function names can be almost any printable character. For instance I can define my own pre-increment unary function:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Three Ways to Get a Unix Epoch in Bash</title>
      <link>https://blog.dnmfarrell.com/post/three-ways-to-get-a-unix-epoch-in-bash/</link>
      <pubDate>Sun, 13 Jun 2021 11:34:50 -0400</pubDate>
      <guid>https://blog.dnmfarrell.com/post/three-ways-to-get-a-unix-epoch-in-bash/</guid>
      <description>&lt;p&gt;The Unix &lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_time&#34;&gt;epoch time&lt;/a&gt; is the number of elapsed seconds since January 1st, 1970. Epoch times are handy because they&amp;rsquo;re not subject to timezone offsets, and they&amp;rsquo;re numbers, unlike ISO 8601 timestamps for example (&amp;ldquo;1970-01-01T00:00:00Z&amp;rdquo;). That makes them memory efficient, and more importantly, easy to do math with.&lt;/p&gt;&#xA;&lt;p&gt;Here are three ways to get the epoch time in Bash.&lt;/p&gt;&#xA;&lt;h3 id=&#34;use-date&#34;&gt;Use Date&lt;/h3&gt;&#xA;&lt;p&gt;You can use the &lt;code&gt;date&lt;/code&gt; program to generate the epoch time by providing the &lt;code&gt;%s&lt;/code&gt; formatting argument. Here I&amp;rsquo;ve included &lt;code&gt;%N&lt;/code&gt; to append nanoseconds:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
