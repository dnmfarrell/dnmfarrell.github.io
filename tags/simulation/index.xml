<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simulation on Code - a programming blog</title>
    <link>https://blog.dnmfarrell.com/tags/simulation/</link>
    <description>Recent content in Simulation on Code - a programming blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Sep 2024 12:44:03 -0400</lastBuildDate>
    <atom:link href="https://blog.dnmfarrell.com/tags/simulation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simulating AWS IAM with Prolog</title>
      <link>https://blog.dnmfarrell.com/post/simulating-aws-iam-with-prolog/</link>
      <pubDate>Mon, 23 Sep 2024 12:44:03 -0400</pubDate>
      <guid>https://blog.dnmfarrell.com/post/simulating-aws-iam-with-prolog/</guid>
      <description>&lt;p&gt;Of all the AWS services, &lt;a href=&#34;https://docs.aws.amazon.com/iam/&#34;&gt;IAM&lt;/a&gt; seems to be the least well-understood. There is something about its data types, logical rules and runtime conditions that make for an arcane, abstract service that most developers treat like a black box.&lt;/p&gt;&#xA;&lt;p&gt;And that&amp;rsquo;s unfortunate because IAM secures organizations&amp;rsquo; cloud resources, and can be the difference between having a data moat and a data breach.&lt;/p&gt;&#xA;&lt;p&gt;Now whilst there are a bunch of toolsÂ¹ to help manage IAM permissions, they all suffer from one drawback or another. So I wanted to prototype something better.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
