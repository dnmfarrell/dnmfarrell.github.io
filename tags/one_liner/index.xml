<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>One_liner on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/one_liner/</link>
    <description>Recent content in One_liner on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Mar 2015 13:34:06 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/one_liner/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Quickly Debug your Perl code at the command line</title>
      <link>https://dnmfarrell.github.io/article/160/2015/3/13/Quickly-Debug-your-Perl-code-at-the-command-line/</link>
      <pubDate>Fri, 13 Mar 2015 13:34:06 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/160/2015/3/13/Quickly-Debug-your-Perl-code-at-the-command-line/</guid>
      <description>

&lt;p&gt;I remember when I first started programming in Perl, whenever something wasn&amp;rsquo;t working as I expected it to, I would write a quick script to isolate the problem and test it. I didn&amp;rsquo;t give the scripts good names; they were throwaway, and soon I had hundreds of useless Perl scripts littered all over my hard drive.&lt;/p&gt;

&lt;p&gt;I rarely write scripts like that anymore. If I&amp;rsquo;m developing a module, I&amp;rsquo;ll write a unit test to bottom-out whatever problem I&amp;rsquo;m investigating - that way I&amp;rsquo;m making an investment instead of throwing code away. Most of the time however, I just write a one liner, which is a single line of Perl code typed directly into the terminal. One liners are fast to type and they hang around in your terminal history for quick iterations. So if you find yourself needing to test a particular function is doing what you think it does, or are unsure if you&amp;rsquo;re carefully-crafted regex works, write a one liner.&lt;/p&gt;

&lt;h3 id=&#34;one-liner-basics:13cc8d082772e2403612220d551b65fb&#34;&gt;One liner basics&lt;/h3&gt;

&lt;p&gt;Perl has a ton of command line switches (see &lt;code&gt;perldoc perlrun&lt;/code&gt;), but I&amp;rsquo;m just going to cover the ones you&amp;rsquo;ll commonly need to debug code. The most important switch is &lt;code&gt;-e&lt;/code&gt;, for execute (or maybe &amp;ldquo;engage&amp;rdquo; :) ). The &lt;code&gt;-e&lt;/code&gt; switch takes a quoted string of Perl code and executes it. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -e &#39;print &amp;quot;Hello, World!\n&amp;quot;&#39;
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s important that you use single-quotes to quote the code for &lt;code&gt;-e&lt;/code&gt;. This usually means you can&amp;rsquo;t use single-quotes within the one liner code. If you&amp;rsquo;re using Windows cmd.exe or PowerShell, you must use double-quotes instead.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m always forgetting what Perl&amp;rsquo;s predefined special variables do, and often test them at the command line with a one liner to see what they contain. For instance do you remember what &lt;code&gt;$^O&lt;/code&gt; is?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -e &#39;print &amp;quot;$^O\n&amp;quot;&#39;
linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s the operating system name. With that cleared up, let&amp;rsquo;s see what else we can do. If you&amp;rsquo;re using a relatively new Perl (5.10.0 or higher) you can use the &lt;code&gt;-E&lt;/code&gt; switch instead of &lt;code&gt;-e&lt;/code&gt;. This turns on some of Perl&amp;rsquo;s newer features, like &lt;code&gt;say&lt;/code&gt;, which prints a string and appends a newline to it. This saves typing and makes the code cleaner:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -E &#39;say &amp;quot;$^O&amp;quot;&#39;
linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty handy! &lt;code&gt;say&lt;/code&gt; is a nifty feature that you&amp;rsquo;ll use again and again.&lt;/p&gt;

&lt;h3 id=&#34;v-is-for-version:13cc8d082772e2403612220d551b65fb&#34;&gt;V is for version&lt;/h3&gt;

&lt;p&gt;If you ever need to check which version of Perl is installed on your system, use the &lt;code&gt;-v&lt;/code&gt; switch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -v

This is perl 5, version 20, subversion 2 (v5.20.2) built for x86_64-linux
(with 1 registered patch, see perl -V for more detail)

Copyright 1987-2015, Larry Wall
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quick tip: if you need detailed information about the installed Perl version, use a capital: &lt;code&gt;-V&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&#34;load-modules-with-m:13cc8d082772e2403612220d551b65fb&#34;&gt;Load modules with M&lt;/h3&gt;

&lt;p&gt;Modules can be loaded at the command line too. For instance to download and print the PerlTricks.com homepage, I can use &lt;a href=&#34;https://metacpan.org/pod/HTTP::Tiny&#34;&gt;HTTP::Tiny&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -MHTTP::Tiny -E &#39;say HTTP::Tiny-&amp;gt;new-&amp;gt;get(&amp;quot;http://perltricks.com&amp;quot;)-&amp;gt;{content}&#39;;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;PerlTricks.com - Perl programming news, code and culture&amp;lt;/title&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
   ,,,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to import functions from a module, use an equals sign followed by a comma separated list of function names. I can check if an XML file is valid XML with &lt;a href=&#34;https://metacpan.org/pod/XML::Simple&#34;&gt;XML::Simple&lt;/a&gt; and it&amp;rsquo;s &lt;code&gt;XMLin&lt;/code&gt; function just by loading the XML file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -MXML::Simple=XMLin -e &#39;XMLin(&amp;quot;data.xml&amp;quot;)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;XMLin&lt;/code&gt; doesn&amp;rsquo;t emit any warnings or exceptions, the data is probably correctly formatted.&lt;/p&gt;

&lt;h3 id=&#34;turn-on-warnings-with-w:13cc8d082772e2403612220d551b65fb&#34;&gt;Turn on warnings with w&lt;/h3&gt;

&lt;p&gt;This one is pretty simple: use &lt;code&gt;-w&lt;/code&gt; to turn on warnings. This can be incredibly helpful when code is not behaving the way you think it should. Warnings can help you identify issues that would otherwise be hard to spot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -E &#39;$counter = 2; $countor = 3; say $counter&#39;
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm &lt;code&gt;$counter&lt;/code&gt; should be 3 shouldn&amp;rsquo;t it? Turning on warnings quickly identifies the issue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -wE &#39;$counter = 2; $countor = 3; say $counter&#39;
Name &amp;quot;main::countor&amp;quot; used only once: possible typo at -e line 1.
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are plenty of more subtle bugs that warnings won&amp;rsquo;t identify directly, but the fact that Perl issues a warning puts you onto the fact that something is wrong. Take this example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -MTry::Tiny -wE &#39;$pass; try { $pass = &amp;quot;true&amp;quot; } catch { say $_ } return $pass if $pass or die&#39;
Useless use of a variable in void context at -e line 1.
Died at -e line 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can you see what&amp;rsquo;s wrong here? The &lt;code&gt;catch&lt;/code&gt; block is missing a trailing semicolon. With warnings turned on, you can see that &lt;em&gt;something&lt;/em&gt; is up, but it&amp;rsquo;s not obvious what&amp;rsquo;s wrong.&lt;/p&gt;

&lt;h3 id=&#34;use-i-to-include-directories:13cc8d082772e2403612220d551b65fb&#34;&gt;Use I to include directories&lt;/h3&gt;

&lt;p&gt;Sometimes you&amp;rsquo;ll be working with modules that are not installed in Perl&amp;rsquo;s standard locations. This often happens when you&amp;rsquo;re debugging an application but it&amp;rsquo;s not installed via CPAN. To demonstrate this, I&amp;rsquo;ll download my &lt;a href=&#34;https://metacpan.org/pod/WWW::curlmyip&#34;&gt;WWW::curlmyip&lt;/a&gt; module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan -g WWW::curlmyip
$~ tar xzf WWW-curlmyip-0.02.tar.gz 
$ cd WWW-curlmyip-0.02/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WWW::curlmyip exports a function called &lt;code&gt;get_ip&lt;/code&gt; which returns your external IP address. I can use it in a one liner:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -MWWW::curlmyip -E &#39;say get_ip&#39;
Can&#39;t locate WWW/curlmyip.pm in @INC (you may need to install the WWW::curlmyip module) (@INC contains: /home/dfarrell/.plenv/versions/5.20.2/lib/perl5/site_perl/5.20.2/x86_64-linux /home/dfarrell/.plenv/versions/5.20.2/lib/perl5/site_perl/5.20.2 /home/dfarrell/.plenv/versions/5.20.2/lib/perl5/5.20.2/x86_64-linux /home/dfarrell/.plenv/versions/5.20.2/lib/perl5/5.20.2 .).
BEGIN failed--compilation aborted.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That didn&amp;rsquo;t work. Perl is complaining that it can&amp;rsquo;t find WWW::curlmyip. To fix this, I can include the distribution &lt;code&gt;lib&lt;/code&gt; directory that contains the module using &lt;code&gt;-I&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -Ilib -MWWW::curlmyip -E &#39;say get_ip&#39;
100.241.20.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the &lt;code&gt;get_ip&lt;/code&gt; function now works.&lt;/p&gt;

&lt;h3 id=&#34;wrap-up:13cc8d082772e2403612220d551b65fb&#34;&gt;Wrap-up&lt;/h3&gt;

&lt;p&gt;If you ever need to check the one liner syntax, just run &lt;code&gt;perl -h&lt;/code&gt; to get a summary of the available options. Another good resource is the official documentation, which you can read at the terminal with &lt;code&gt;perldoc perlrun&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This article has covered the most common command line switches used for debugging code but a whole book could be written about Perl one liners. In fact, one has: &lt;a href=&#34;http://www.catonmat.net/blog/perl-one-liners-no-starch-press/&#34;&gt;Perl One-Liners&lt;/a&gt; by Peteris Krummins. In the book Peteris describes the various command line switches with example programs. It also has an excellent &amp;ldquo;how to&amp;rdquo; for running one liners on Windows.&lt;/p&gt;

&lt;p&gt;Finally, Perl 6 also has excellent one liner support and the switches are mostly the same as Perl 5. If you&amp;rsquo;re interested, check out our article &lt;a href=&#34;http://perltricks.com/article/136/2014/11/20/Get-started-with-Perl-6-one-liners&#34;&gt;Get started with Perl 6 one liners&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get started with Perl 6 one liners</title>
      <link>https://dnmfarrell.github.io/article/136/2014/11/20/Get-started-with-Perl-6-one-liners/</link>
      <pubDate>Thu, 20 Nov 2014 14:04:56 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/136/2014/11/20/Get-started-with-Perl-6-one-liners/</guid>
      <description>

&lt;p&gt;One thing that sets Perl apart from other languages is the ability to write small programs in a single line of code, known as a &amp;ldquo;one liner&amp;rdquo;. It&amp;rsquo;s often faster to type a program directly into the terminal than to write a throwaway script. And one liners are powerful too; they&amp;rsquo;re complete Perl programs that can load external libraries but also integrate into the terminal. You can pipe data in or out of a one liner.&lt;/p&gt;

&lt;p&gt;Like its predecessor, Perl 6 supports one liners. And in the same way Perl 6 cleaned up Perl 5&amp;rsquo;s warts elsewhere, the one liner syntax is also better. It&amp;rsquo;s cleaner with fewer special variables and options to memorize. This article aims to get you up-and-running with Perl 6 one liners.&lt;/p&gt;

&lt;h3 id=&#34;the-basics:f134c951b57c0f63005d49172b15ce32&#34;&gt;The basics&lt;/h3&gt;

&lt;p&gt;To get started with one liners, all you really need to understand is the &lt;code&gt;-e&lt;/code&gt; option. This tells Perl to execute what follows as a program. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;perl6 -e &#39;say &amp;quot;Hello, World!&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s step through this code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;perl6&lt;/code&gt; invokes the Perl 6 program&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt; tells Perl 6 to execute&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;say &amp;quot;Hello, World!&amp;quot;&#39;&lt;/code&gt; is the program. Every program must be surrounded in single quotes (except on Windows, see (&lt;a href=&#34;https://github.com/sillymoose/Perl6-One-Liners#converting-for-windows&#34;&gt;converting for Windows&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To run a one-liner, just type it into the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; perl6 -e &#39;say &amp;quot;Hello, World!&amp;quot;&#39;
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;file-processing:f134c951b57c0f63005d49172b15ce32&#34;&gt;File processing&lt;/h3&gt;

&lt;p&gt;If you want to load a file, just add the path to the file after the program code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; perl6 -e &#39;for (lines) { say $_ }&#39; /path/to/file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This program prints every line in &lt;code&gt;/path/to/file.txt&lt;/code&gt;. You may know that &lt;code&gt;$_&lt;/code&gt; is the default variable, which in this case is the current line being looped through. &lt;code&gt;lines&lt;/code&gt; is a list that is automatically created for you whenever you pass a filepath to a one-liner. Now let&amp;rsquo;s re-write that one liner, step-by-step. These one liners are all equivalent:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; perl6 -e &#39;for (lines) { say $_ }&#39; /path/to/file.txt
&amp;gt; perl6 -e &#39;for (lines) { $_.say }&#39; /path/to/file.txt
&amp;gt; perl6 -e &#39;for (lines) { .say }&#39; /path/to/file.txt
&amp;gt; perl6 -e &#39;.say for (lines)&#39; /path/to/file.txt
&amp;gt; perl6 -e &#39;.say for lines&#39; /path/to/file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just like &lt;code&gt;$_&lt;/code&gt; is the default variable, methods called on the default variable can omit the variable name. They become default methods. So &lt;code&gt;$_.say&lt;/code&gt; becomes &lt;code&gt;.say&lt;/code&gt;. This brevity pays off with one liners - it&amp;rsquo;s less typing!&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;-n&lt;/code&gt; option changes the behavior of the program: it executes the code once for every line of the file. To uppercase and print every line of &lt;code&gt;/path/to/file.txt&lt;/code&gt; you can type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; perl6 -ne &#39;.uc.say&#39; /path/to/file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-p&lt;/code&gt; option is just like &lt;code&gt;-n&lt;/code&gt; except that it will automatically print &lt;code&gt;$_&lt;/code&gt;. This means that another way we could uppercase a file would be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; perl6 -pe &#39;$_ = $_.uc&#39; /path/to/file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or by applying a shortcut, this does the same thing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; perl6 -pe &#39;.=uc&#39; /path/to/file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-p&lt;/code&gt; options are really useful and often spare the programmer from extra typing.&lt;/p&gt;

&lt;h3 id=&#34;load-modules:f134c951b57c0f63005d49172b15ce32&#34;&gt;Load modules&lt;/h3&gt;

&lt;p&gt;The final thing you should know is how to load a module. This is really powerful as you can extend Perl 6&amp;rsquo;s capabilities by importing external libraries. The &lt;code&gt;-M&lt;/code&gt; switch stands for load module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; perl6 -M URI::Encode -e &#39;say encode_uri(&amp;quot;/10 ways to crush it with Perl 6&amp;quot;)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code &lt;code&gt;-M URI::Encode&lt;/code&gt; loads the URI::Encode module, which exports the &lt;code&gt;encode_uri&lt;/code&gt; subroutine. It prints:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;%2F10%20ways%20to%20crush%20it%20with%20Perl%206
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What if you have a module that is not installed in a standard location? In this case using &lt;code&gt;-M&lt;/code&gt; alone won&amp;rsquo;t work, as Perl won&amp;rsquo;t find the module. For these scenarios, just pass use the &lt;code&gt;-I&lt;/code&gt; switch to include the directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; perl6 -I lib -M URI::Encode -e &#39;say encode_uri(&amp;quot;www.example.com/10 ways to crush it with Perl 6&amp;quot;)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Perl 6 will search for URI::Encode in &lt;code&gt;lib&lt;/code&gt; as well as the standard install locations.&lt;/p&gt;

&lt;p&gt;Finally, if you want a summary of all of these options, just use the &lt;code&gt;-h&lt;/code&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; perl6 -h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will print:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;    With no arguments, enters a REPL. With a &amp;quot;[programfile]&amp;quot; or the &amp;quot;-e&amp;quot; option, compiles the given program and by default also executes the compiled code.
 
    -c                   check syntax only (runs BEGIN and CHECK blocks)
    --doc                extract documentation and print it as text
    -e program           one line of program
    -h, --help           display this help text
    -n                   run program once for each line of input
    -p                   same as -n, but also print $_ at the end of lines
    -I path              adds the path to the module search path
    -M module            loads the module prior to running the program
    --target=[stage]     specify compilation stage to emit
    --optimize=[level]   use the given level of optimization (0..3)
    -t, --trace=[flags]  enable trace flags, see &#39;parrot --help-debug&#39;
    --encoding=[mode]    specify string encoding mode
    -o, --output=[name]  specify name of output file
    -v, --version        display version information
    --stagestats         display time spent in the compilation stages
    --ll-exception       display a low level backtrace on errors
    --profile            print profile information to standard error
    --doc=[module]       Use Pod::To::[module] to render inline documentation.
     
    Note that only boolean single-letter options may be bundled.

    Output from --profile can be visualized by kcachegrind.

    To modify the include path, you can set the PERL6LIB environment variable:

    PERL6LIB=&amp;quot;lib&amp;quot; perl6 example.pl

    For more information, see the perl6(1) man page.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion:f134c951b57c0f63005d49172b15ce32&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This article was adapted from my open source &lt;a href=&#34;https://github.com/sillymoose/Perl6-One-Liners&#34;&gt;book&lt;/a&gt;, which has lots of example Perl 6 one liners, many of which were contributed by the Perl 6 community. If you&amp;rsquo;re interested in learning more Perl 6, I&amp;rsquo;d recommend visiting the official &lt;a href=&#34;http://perl6.org/&#34;&gt;website&lt;/a&gt;, which has links to the IRC channel and official documentation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Download a YouTube video with one line of Perl</title>
      <link>https://dnmfarrell.github.io/article/63/2014/1/26/Download-a-YouTube-video-with-one-line-of-Perl/</link>
      <pubDate>Sun, 26 Jan 2014 22:41:17 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/63/2014/1/26/Download-a-YouTube-video-with-one-line-of-Perl/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Downloading YouTube videos with Perl is easy when you&amp;rsquo;re packing the right module. That module is &lt;a href=&#34;https://metacpan.org/pod/WWW::YouTube::Download&#34;&gt;WWW::YouTube::Download&lt;/a&gt;. Here&amp;rsquo;s how you can download a video in one line of Perl.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;Edit&lt;/strong&gt; - this article was updated on 27/1/2014 to describe the &amp;ldquo;youtube-download&amp;rdquo; app that comes with WWW::YouTube::Download.*&lt;/p&gt;

&lt;h3 id=&#34;warning:530784e281eacfc273aaf409e299faae&#34;&gt;Warning&lt;/h3&gt;

&lt;p&gt;You should only download videos which you have permission to do so. The following is just an example of how to do this, when you have permission.&lt;/p&gt;

&lt;h3 id=&#34;requirements:530784e281eacfc273aaf409e299faae&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to install WWW::YouTube::Download. The CPAN Testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=WWW-YouTube-Download+0.56&#34;&gt;results&lt;/a&gt; for the latest version (0.56 at the time of writing) show that it runs on all major platforms.&lt;/p&gt;

&lt;p&gt;You can install the module via CPAN at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan WWW:YouTube::Download
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;use-the-youtube-download-app:530784e281eacfc273aaf409e299faae&#34;&gt;Use the youtube-download app&lt;/h3&gt;

&lt;p&gt;When you install WWW::YouTube::Download, it comes with a command-line app, &amp;ldquo;youtube-download&amp;rdquo;. Using it couldn&amp;rsquo;t be easier. Simply open the command line and type the program name with the URL or video id of the video to download. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ youtube-download http://www.youtube.com/watch?v=ju1IMxGSuNE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*&lt;strong&gt;NB&lt;/strong&gt; - using the app as shown above is the easiest way to use the tool - however at the time of writing I was not aware of the command line tool. Read on for the one liner example.*&lt;/p&gt;

&lt;h3 id=&#34;download-a-video-in-one-line-of-perl:530784e281eacfc273aaf409e299faae&#34;&gt;Download a video in one line of Perl&lt;/h3&gt;

&lt;p&gt;At the command line, type or paste the following command, replacing $id with the id of the video you want to download:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -MWWW::YouTube::Download -e &#39;WWW::YouTube::Download-&amp;gt;new-&amp;gt;download(q/$id/)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;explaining-the-one-liner:530784e281eacfc273aaf409e299faae&#34;&gt;Explaining the one liner&lt;/h3&gt;

&lt;p&gt;This one liner is simple. First we load WWW::YouTube::Download using the &amp;ldquo;-M&amp;rdquo; switch. Then the &amp;ldquo;-e&amp;rdquo; switch tells Perl to execute the code between the apostrophes. We then initiate a WWW::YouTube::Download object with new, and immediately call the &lt;a href=&#34;https://metacpan.org/pod/WWW::YouTube::Download#download-video_id-args&#34;&gt;download&lt;/a&gt; method on the new object. We use the quoting construct &amp;ldquo;q//&amp;rdquo; to quote strings without using quote marks as this makes the one liner more cross-platform compatible.&lt;/p&gt;

&lt;h3 id=&#34;on-windows:530784e281eacfc273aaf409e299faae&#34;&gt;On Windows&lt;/h3&gt;

&lt;p&gt;On Windows, you&amp;rsquo;ll need to replace the apostrophes with double quotes (&amp;ldquo;).&lt;/p&gt;

&lt;h3 id=&#34;how-to-get-the-video-id:530784e281eacfc273aaf409e299faae&#34;&gt;How to get the video id&lt;/h3&gt;

&lt;p&gt;The video id is the alphanumeric code value for &amp;ldquo;v&amp;rdquo; in the URL of the video you want to download. For example with this URL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;http://www.youtube.com/watch?v=ju1IMxGSuNE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;ju1IMxGSuNE&amp;rdquo; is the video id, because if you look in the URL after the question mark, v=ju1IMxGSuNE, which means &amp;ldquo;the value for v equals ju1IMxGSuNE&amp;rdquo;. If you have a URL but can&amp;rsquo;t work out the video id, WWW::YouTube::Download provides a video_id method. This one liner will print out the video id, just replace $url with the actual YouTube URL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -MWWW::YouTube::Download -E &#39;say WWW::YouTube::Download-&amp;gt;new-&amp;gt;video_id(q{$url})&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-perl-script-to-download-youtube-videos:530784e281eacfc273aaf409e299faae&#34;&gt;A Perl script to download YouTube videos&lt;/h3&gt;

&lt;p&gt;We can expand the concepts used in the one liner into a fully-fledged Perl script, called &amp;ldquo;download.pl&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use strict;
use warnings;
use WWW::YouTube::Download;

if (@ARGV) {
    my $tube = WWW::YouTube::Download-&amp;gt;new;
    my $video_id = $tube-&amp;gt;video_id($ARGV[0]);
    $tube-&amp;gt;download($video_id, { filename =&amp;gt; &#39;{title}{suffix}&#39; }); 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script takes a YouTube URL as an argument. It gets the video id of the URL, then downloads the video into the current directory. As an added bonus, the script will save the file with the title of the video, instead of the default which is the video id. You can run the script at the command line, passing the URL of the YouTube video to download. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ ./download.pl http://www.youtube.com/watch?v=ju1IMxGSuNE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may need to set the script&amp;rsquo;s permissions to executable using chmod:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ chmod 755 download.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion:530784e281eacfc273aaf409e299faae&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;WWW::YouTube::Download is easy to use, fast and just works. The module&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/WWW::YouTube::Download&#34;&gt;documentation&lt;/a&gt; is easy to follow. Thanks to Yuji Shimada for writing it!&lt;/p&gt;

&lt;p&gt;There is more to WWW::YouTube::Download than shown here - one interesting feature is that you can specify the video format (if more than one is available). By default the module downloads the highest quality video available.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get 30% off the new Perl One Liners book</title>
      <link>https://dnmfarrell.github.io/article/56/2013/12/25/Get-30--off-the-new-Perl-One-Liners-book/</link>
      <pubDate>Wed, 25 Dec 2013 23:50:00 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/56/2013/12/25/Get-30--off-the-new-Perl-One-Liners-book/</guid>
      <description>&lt;p&gt;&lt;em&gt;Merry Christmas and happy holidays! Those generous folks at No Starch Press are offering a 30% discount on the new Perl book: Perl One Liners by Peteris Krumins until 15th January 2014. Read on to find out how to purchase.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The 30% discount is available at the No Starch Press web page for the &lt;a href=&#34;http://www.nostarch.com/perloneliners&#34;&gt;Perl One Liners book&lt;/a&gt;. The offer is valid on both the paper and ebook versions. Just add the product to your cart and when checking out use the discount code: &lt;strong&gt;perltricks&lt;/strong&gt;. This offer is available until 15th January 2014. This is not an affiliate link - PerlTricks receives no payment for these sales.&lt;/p&gt;

&lt;p&gt;The ebook is currently available on &lt;a href=&#34;http://www.amazon.com/gp/product/B00GS9BZLU/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B00GS9BZLU&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;Amazon.com priced at $9.99&lt;/a&gt; which is cheaper than the No Starch Press offer (affiliate link). However with Amazon you only get the kindle version, whereas with the No Starch Press ebook you get it in: pdf, mobi and epub formats.&lt;/p&gt;

&lt;p&gt;Whoever you buy the book from, it&amp;rsquo;s highly recommended. We also &lt;a href=&#34;http://perltricks.com/article/54/2013/12/18/An-interview-with-Peteris-Krumins&#34;&gt;recently interviewed&lt;/a&gt; the book&amp;rsquo;s author, Peteris Krumins. If you haven&amp;rsquo;t read the interview yet, &lt;a href=&#34;http://perltricks.com/article/54/2013/12/18/An-interview-with-Peteris-Krumins&#34;&gt;check it out&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An interview with Peteris Krumins</title>
      <link>https://dnmfarrell.github.io/article/54/2013/12/18/An-interview-with-Peteris-Krumins/</link>
      <pubDate>Wed, 18 Dec 2013 03:47:38 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/54/2013/12/18/An-interview-with-Peteris-Krumins/</guid>
      <description>&lt;p&gt;&lt;em&gt;Peteris Krumins is a Perl author, start-up founder and all-around hacker. He also runs the popular blog CatOnMat.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;re a really busy guy; running catonmat, Browserling and publishing books. What&amp;rsquo;s your secret?&lt;/strong&gt;
 I just work like crazy. It&amp;rsquo;s pretty much all I do! I&amp;rsquo;m a list person; one of my recent posts on catonmat was about how I work: I use Google Calendar to track the most important tasks; interviews, payments, important events, that kind of thing. Then I also use to-do lists, actually several to-do lists for each one of my projects - &lt;a href=&#34;http://www.browserling.com&#34;&gt;Browserling&lt;/a&gt;, &lt;a href=&#34;%0Ahttp://www.testling.com&#34;&gt;Testling&lt;/a&gt;, books, blog posts, a reading list, stuff like that. &lt;a href=&#34;http://www.catonmat.net/images/codeproject-interview/todo-list.jpg&#34;&gt;Here is an example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We&amp;rsquo;re talking because you&amp;rsquo;re famous for writing one liners in Perl. How did you get into that?&lt;/strong&gt;
 So there was this guy, Eric Pement and he collected hundreds of Awk one liners in this file &amp;ldquo;&lt;a href=&#34;http://www.pement.org/awk/awk1line.txt&#34;&gt;awk1line.txt&lt;/a&gt;&amp;rdquo; and he published it on UseNet, like 10 years ago. So I found his file and it was really interesting. I went through all of his one liners and learned Awk. Then I found that he had done the same thing for Sed (&lt;a href=&#34;http://www.pement.org/sed/sed1line.txt&#34;&gt;sed1line.txt&lt;/a&gt;) and I went through that and learned Sed. So that inspired me to create my own file for Perl, &lt;a href=&#34;http://www.catonmat.net/download/perl1line.txt&#34;&gt;perl1line.txt&lt;/a&gt; and it started from there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I read that that your post &amp;ldquo;Perl One Liners Explained&amp;rdquo; has something like 500,000 hits?&lt;/strong&gt;
 It&amp;rsquo;s an article series made out of eight separate posts. It&amp;rsquo;s actually more like 800,000 now for all posts combined.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wow! Was that an outlier for you, did it make you think there was a lot of interest in this topic?&lt;/strong&gt;
 Well I had already written perl1line.txt by then. I wrote eight blog posts following the structure used by Eric Pement in his files; for example he had a section called &amp;ldquo;How to do line spacing in Awk&amp;rdquo;, so I wrote one post called &amp;ldquo;How to do line spacing with Perl one liners&amp;rdquo; and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your Perl One Liners book was originally self-published, then picked up by No Starch Press. How did that happen?&lt;/strong&gt;
 It was amazing. I just got an email from Bill, who runs No Starch Press and he asked me if I wanted to turn my self-published book into a real book. And I said &amp;ldquo;yeah!&amp;rdquo; and we got it published. Here&amp;rsquo;s the result - &lt;a href=&#34;http://nostarch.com/perloneliners&#34;&gt;Perl One Liners book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The new No Starch Press version has 30+ more pages of content, did No Starch help you with that?&lt;/strong&gt;
 Yes, we took the original text and improved it mainly by adding more examples. We added examples for most of the one liners. And we also added a section about running Perl on Windows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I wanted to ask you about that. That seemed like a topic that hasn&amp;rsquo;t been well-covered elsewhere?&lt;/strong&gt;
 It was really hard to write. I had to test all of the one liners on PowerShell and the command line (cmd.exe) to make sure they worked, find all of the workarounds, handle special symbols, it was very challenging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Was that a section that No Starch Press encouraged?&lt;/strong&gt;
 Not really. I run Windows as well, it&amp;rsquo;s my primary workstation although I do have a bunch of Linux servers which I ssh into. Sometimes I need to run Perl one liners on Windows, so I thought a lot of my readers would be interested in how to run the one liners on Windows as well. We spent about a month on that section, it delayed the book for about a month and a half, because of it. It was very challenging and hard to write but it should help a lot of Windows users as it&amp;rsquo;s probably the best guide to running Perl from the command line on Windows.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I thought a lot of my readers would be interested in how to run the one liners on Windows&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Would you still use Unix tools over PowerShell on a Windows?&lt;/strong&gt;
 Well, I run Windows XP and don&amp;rsquo;t have PowerShell. I use Cygwin, but sometimes when I don&amp;rsquo;t want to use that, I just run bash.exe from &lt;a href=&#34;http://win-bash.sourceforge.net/&#34;&gt;win-bash&lt;/a&gt;. My setup is that I have Linux server mounted through Samba as a virtual drive. So if I have to do serious editing, I throw the file onto the shared drive and shh into my Linux server, so I don&amp;rsquo;t need to use the Linux tools on Windows that much.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your book is full of interesting command line shortcuts and hidden features. Do you have a favourite one liner or code trick in Perl?&lt;/strong&gt;
 I love one liners that are like puzzles - you can&amp;rsquo;t understand them just by looking at them. You have to tinker around and try them out to see what it does. For example a regular expression like: &amp;ldquo;/[ -~]/&amp;rdquo; is fun, which matches every printable ASCII character from space to tilde.&lt;/p&gt;

&lt;p&gt;Another one liner which I like because it has no code in it is: &amp;ldquo;perl -00pe0&amp;rdquo;, for paragraph slurping.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So how did you find out about that? I don&amp;rsquo;t think it&amp;rsquo;s even documented in perlrun.&lt;/strong&gt;
 I don&amp;rsquo;t know how I came up with this one. I remember something about being on the #perl freenode IRC channel. When I was writing the book I was often on there asking people for advice. Maybe someone told me about it or I found it myself, but it&amp;rsquo;s fun.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;ve also written about Sed and Awk. If you know Perl one liners, do you need to learn Sed or Awk as well?&lt;/strong&gt;
 No, you don&amp;rsquo;t. But sometimes when you write a Perl one liner the equivalent one liner in Awk / Sed would be shorter. For example to reference the fifth word on a line in Awk it&amp;rsquo;s &amp;ldquo;$5&amp;rdquo; but in Perl it&amp;rsquo;s &amp;ldquo;$F[4]&amp;ldquo;, besides you&amp;rsquo;d have to turn on autosplitting and use a bunch of other command line arguments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What text editor / IDE do you use to code in Perl?&lt;/strong&gt;
 I use Vim. I have a bunch of customizations and shortcuts that I use. I have an article series on my site called &amp;ldquo;&lt;a href=&#34;http://www.catonmat.net/series/vim-plugins-you-should-know-about&#34;&gt;Vim plugins you should know about&lt;/a&gt;&amp;rdquo; that covers this. One of my favourite plugins is &amp;ldquo;&lt;a href=&#34;http://www.catonmat.net/blog/vim-plugins-surround-vim/&#34;&gt;surround.vim&lt;/a&gt;&amp;rdquo; - if you have a single-quoted string and want to change them to double-quotes, you type: cs&amp;rsquo;&amp;rdquo; and it will change them. You can change parentheses and many other things that surround something. Another plugin I like is &amp;ldquo;&lt;a href=&#34;http://www.catonmat.net/blog/vim-plugins-matchit-vim/&#34;&gt;matchit.vim&lt;/a&gt;&amp;rdquo;, which extends the shift + F5 (%) parenthesis matching in Vim to match HTML tags and if/then/else statements and other constructs. Some of my other favorites are &amp;ldquo;&lt;a href=&#34;http://www.catonmat.net/blog/vim-plugins-snipmate-vim/%0A&#34;&gt;snipmate.vim&lt;/a&gt;&amp;rdquo; for code snippets, &amp;ldquo;&lt;a href=&#34;http://www.catonmat.net/blog/vim-plugins-ragtag-allml-vim/&#34;&gt;ragtag.vim&lt;/a&gt;&amp;rdquo; for working with HTML tags and &amp;ldquo;&lt;a href=&#34;http://www.catonmat.net/blog/vim-plugins-nerdtree-vim/&#34;&gt;nerd_tree.vim&lt;/a&gt;&amp;rdquo; for browsing files in vim.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about color schemes, do you have a favourite?&lt;/strong&gt;
 I don&amp;rsquo;t really care about color schemes - Vim does color the code but I don&amp;rsquo;t change it. I also don&amp;rsquo;t care about programming fonts. The font just have to be constant width and that&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;ve also written about EMACS before. Why do you stick with Vim over other tools?&lt;/strong&gt;
 I was working at this company once and I thought that from day one I would use EMACS (as a way of learning it) and see how it goes. After a few weeks I went back to Vim. I had to learn so many new key combinations it was hurting my productivity.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m programming in C and C++, I use Visual Studio. The best thing about using Visual Studio is if I forget a command or method, I can quickly look it up using IntelliSense.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apart from one liners, do you develop Perl applications or modules?&lt;/strong&gt;
 Perl is my preferred programming language for writing quick tools, for example: uploading / downloading videos from YouTube, or parsing HTML pages. I&amp;rsquo;m incredibly fast at that and there are so many modules that can help - I wouldn&amp;rsquo;t be able to be that productive in other languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have you used any Perl code analysis tools like Perl::Critic ?&lt;/strong&gt;
 I have used &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; but I don&amp;rsquo;t like it when someone criticizes my code! (even if it&amp;rsquo;s from Damian Conway&amp;rsquo;s Perl best practices book!) I just write sane code and apply most of the best practices. Other people usually don&amp;rsquo;t have problems with my code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have used Perl::Critic but I don&amp;rsquo;t like it when someone criticizes my code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;re a real polyglot as apart from Perl, your Github page hosts projects in C++, JavaScript, Python, OCaml, PHP! Are there any features of those languages would you like to see in Perl?&lt;/strong&gt;
 It&amp;rsquo;s hard to take a feature from another language and put it into Perl as it&amp;rsquo;s already very expressive and supports many different programming paradigms. I often get asked this, but I don&amp;rsquo;t have a good answer! I&amp;rsquo;m very productive with Perl as it is, whereas I could definitely name features of Perl that I would like to see in other languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about Perl versions, do you keep up to date?&lt;/strong&gt;
 Yeah, right now I&amp;rsquo;m using Perl 5.18 and that&amp;rsquo;s all thanks to &lt;a href=&#34;http://perlbrew.pl/&#34;&gt;Perlbrew&lt;/a&gt;. I remember a few years ago before I knew about Perlbrew it was huge pain to have several different Perl versions and I always had the system Perl and maybe one local version of Perl. Managing packages was a pain, too. Once I found out about Perlbrew, I installed every version of Perl, going back to 5.6. One cool feature is &amp;ldquo;perlbrew exec&amp;rdquo; which I used to test my one liners against every version of Perl to see which ones work and don&amp;rsquo;t.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m using Perl 5.18 and that&amp;rsquo;s all thanks to Perlbrew.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;What are your favourite Perl modules and tools?&lt;/strong&gt;
 I really like &lt;a href=&#34;https://metacpan.org/pod/Try::Tiny&#34;&gt;Try::Tiny&lt;/a&gt; for better exception handling, &lt;a href=&#34;https://metacpan.org/pod/File::Slurp&#34;&gt;File::Slurp&lt;/a&gt; for quickly working with files, &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize&#34;&gt;WWW::Mechanize&lt;/a&gt; and [](&lt;a href=&#34;https://metacpan.org/pod/HTML::TreeBuilder)HTML::TreeBuilder&#34;&gt;https://metacpan.org/pod/HTML::TreeBuilder)HTML::TreeBuilder&lt;/a&gt; for scraping the web.&lt;/p&gt;

&lt;p&gt;Talking about tools I also like &lt;a href=&#34;https://metacpan.org/pod/Regexp::Debugger&#34;&gt;rxrx&lt;/a&gt; by Damian Conway (&lt;a href=&#34;http://www.youtube.com/watch?v=zcSFIUiMgAs&#34;&gt;here&amp;rsquo;s a demo at YAPC&lt;/a&gt;). It&amp;rsquo;s this interactive regexp debugger. Another tool that I use is &lt;a href=&#34;http://beyondgrep.com/&#34;&gt;ack&lt;/a&gt; that&amp;rsquo;s a better version of grep!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And one last final question - what is it that you&amp;rsquo;re doing in your profile picture? Making a cigarette?&lt;/strong&gt;
 Haha, no! I&amp;rsquo;m actually holding a piece of scotch tape. I was making a raft that day from empty bottles so I was taping them together. It turned out to be a really good raft and it worked. &lt;a href=&#34;%0Ahttp://www.flickr.com/photos/pkrumins/11391256906/&#34;&gt;Here&amp;rsquo;s a photo.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

