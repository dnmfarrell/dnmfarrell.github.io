<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Filehandle on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/filehandle/</link>
    <description>Recent content in Filehandle on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jul 2015 12:19:04 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/filehandle/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Stupid open() tricks</title>
      <link>https://dnmfarrell.github.io/article/182/2015/7/15/Stupid-open---tricks/</link>
      <pubDate>Wed, 15 Jul 2015 12:19:04 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/182/2015/7/15/Stupid-open---tricks/</guid>
      <description>

&lt;p&gt;The &lt;code&gt;open&lt;/code&gt; function can do much more than you probably realize. If you read enough about Perl, you&amp;rsquo;ll start to notice the theme that everyone expects you to use the three-argument &lt;code&gt;open&lt;/code&gt;. There&amp;rsquo;s much more that the &lt;code&gt;open&lt;/code&gt; can do. Some of these &amp;ldquo;stupid open() tricks&amp;rdquo; may be useful, but they may also be dangerous. These tricks were performed on a closed course by a professional driver. Do not attempt at home. Or work. And, to focus on &lt;code&gt;open&lt;/code&gt;, I&amp;rsquo;ve left off all of the error checking.&lt;/p&gt;

&lt;h3 id=&#34;no-explicit-filename:71880d4d5f641ca9776afe8033e8612a&#34;&gt;No explicit filename&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a one-argument form of &lt;code&gt;open&lt;/code&gt; that takes only a bareword filehandle. In this example, when I open the filehandle &lt;code&gt;F&lt;/code&gt; with no other arguments, Perl uses the package scalar variable of the same name as the filename:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;our $F;
while( $F = shift @ARGV ) {
  open F;
  while(  ) { print }
  close F;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This might seem a bit silly, but as many shortcuts like this, consider the one-liner and scripting side of Perl. Imagine I want to go through a bunch of files on the command line, but some of those I want to skip. I can&amp;rsquo;t simply use &lt;code&gt;-n&lt;/code&gt; because that opens all the files for me. I have to handle that myself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl -e &#39;while($F=shift){next if$F=~/\.jpg/;open F;while(&amp;lt;F&amp;gt;){print;exit if /Perl/}}&#39; *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe you&amp;rsquo;ll need that once in life. Maybe you&amp;rsquo;ll never want to use it. Still, there it is.&lt;/p&gt;

&lt;h3 id=&#34;create-an-anonymous-temporary-file:71880d4d5f641ca9776afe8033e8612a&#34;&gt;Create an anonymous temporary file&lt;/h3&gt;

&lt;p&gt;If I give &lt;code&gt;open&lt;/code&gt; a filename of an explicit &lt;code&gt;undef&lt;/code&gt; and the read-write mode (&lt;code&gt;+&amp;gt;&lt;/code&gt; or &lt;code&gt;+&amp;lt;&lt;/code&gt;), Perl opens an anonymous temporary file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;+&amp;gt;&#39;, undef;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perl actually creates a named file and opens it, but immediately unlinks the name. No one else will be able to get to that file because no one else has the name for it. If I had used &lt;a href=&#34;https://metacpan.org/pod/File::Temp&#34;&gt;File::Temp&lt;/a&gt;, I might leave the temporary file there, or something else might be able to see it while I&amp;rsquo;m working with it.&lt;/p&gt;

&lt;h3 id=&#34;print-to-a-string:71880d4d5f641ca9776afe8033e8612a&#34;&gt;Print to a string&lt;/h3&gt;

&lt;p&gt;If my &lt;strong&gt;perl&lt;/strong&gt; is compiled with PerlIO (it probably is), I can open a filehandle on a scalar variable if the filename argument is a reference to that variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;gt;&#39;, \ my $string;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is handy when I want to capture output for an interface that expects a filehandle:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;something_that_prints( $fh );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;$string&lt;/code&gt; contains whatever was printed by the function. I can inspect it by printing it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;say &amp;quot;I captured:\n$string&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;read-lines-from-a-string:71880d4d5f641ca9776afe8033e8612a&#34;&gt;Read lines from a string&lt;/h3&gt;

&lt;p&gt;I can also read from a scalar variable by opening a filehandle on it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;lt;&#39;, \ $string;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can play with the string line-by-line without messing around with regex anchors or line endings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;while( &amp;lt;$fh&amp;gt; ) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I write about these sorts of filehandle-on-string tricks in &lt;a href=&#34;http://www.effectiveperlprogramming.com&#34;&gt;Effective Perl Programming&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;make-a-pipeline:71880d4d5f641ca9776afe8033e8612a&#34;&gt;Make a pipeline&lt;/h3&gt;

&lt;p&gt;Most Unix programmers probably already know that they can read the output from a command as the input for another command. I can do that with Perl&amp;rsquo;s &lt;code&gt;open&lt;/code&gt; too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;

open my $pipe, &#39;-|&#39;, &#39;date&#39;;
while( &amp;lt;$pipe&amp;gt; ) {
  say &amp;quot;$_&amp;quot;;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This reads the output of the &lt;code&gt;date&lt;/code&gt; system command and prints it. But, I can have more than one command in that pipeline. I have to abandon the three-argument form which purposely prevents this nonsense:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $pipe, qq(cat &#39;$0&#39; | sort |);
while( &amp;lt;$pipe&amp;gt; ) {
  print &amp;quot;$.: $_&amp;quot;;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This captures the text of the current program, sorts each line alphabetically and prints the output with numbered lines. I might get a &lt;a href=&#34;http://www.smallo.ruhr.de/award.html&#34;&gt;Useless Use of cat Award&lt;/a&gt; for that program that sorts the lines of the program, but it&amp;rsquo;s still a feature.&lt;/p&gt;

&lt;h3 id=&#34;gzip-on-the-fly:71880d4d5f641ca9776afe8033e8612a&#34;&gt;gzip on the fly&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;http://perltricks.com/article/162/2015/3/27/Gzipping-data-directly-from-Perl&#34;&gt;Gzipping data directly from Perl&lt;/a&gt;, I showed how I could compress data on the fly by using Perl&amp;rsquo;s gzip IO layer. This is handy when I have limited disk space:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;gt;:gzip&#39; $filename 
  or die &amp;quot;Could not write to $filename: $!&amp;quot;;

while( $_ = something_interesting() ) {
  print { $fh } $_;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can go the other direction as well, reading directly from compressed files when I don&amp;rsquo;t have enough space to uncompress them first:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;lt;:gzip&#39; $filename 
  or die &amp;quot;Could not read from $filename: $!&amp;quot;;

while( &amp;lt;$fh&amp;gt; ) {
  print;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;change-stdout:71880d4d5f641ca9776afe8033e8612a&#34;&gt;Change STDOUT&lt;/h3&gt;

&lt;p&gt;I can change the default output filehandle with &lt;code&gt;select&lt;/code&gt; if I don&amp;rsquo;t like standard output, but I can do that in another way. I can change &lt;code&gt;STDOUT&lt;/code&gt; for the times when the easy way isn&amp;rsquo;t fun enough. David Farrell showed some of this in &lt;a href=&#34;http://perltricks.com/article/45/2013/10/27/How-to-redirect-and-restore-STDOUT&#34;&gt;How to redirect and restore STDOUT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First I can say the &amp;ldquo;dupe&amp;rdquo; the standard output filehandle with the special &lt;code&gt;&amp;amp;&lt;/code&gt;mode:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;

open my $STDOLD, &#39;&amp;gt;&amp;amp;&#39;, STDOUT;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any of the file modes will work there as long as I append the &lt;code&gt;&amp;amp;&lt;/code&gt; to it.&lt;/p&gt;

&lt;p&gt;I can then re-open &lt;code&gt;STDOUT&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open STDOUT, &#39;&amp;gt;&amp;gt;&#39;, &#39;log.txt&#39;;
say &#39;This should be logged to log.txt.&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I&amp;rsquo;m ready to change it back, I do the same thing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open STDOUT, &#39;&amp;gt;&amp;amp;&#39;, $STDOLD;
say &#39;This should show in the terminal&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I only have the file descriptor, perhaps because I&amp;rsquo;m working with an old Unix programmer who thinks &lt;strong&gt;vi&lt;/strong&gt; is a crutch, I can use that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &amp;quot;&amp;lt;&amp;amp;=$fd&amp;quot; 
  or die &amp;quot;Could not open filehandle on $fd\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file descriptor has a three-argument form too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;lt;&amp;amp;=&#39;, $fd
  or die &amp;quot;Could not open filehandle on $fd\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can have multiple filehandles that go to the same place since they are different names for the same file descriptor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;

open my $fh, &#39;&amp;gt;&amp;gt;&amp;amp;=&#39;, fileno(STDOUT);

say         &#39;Going to default&#39;;
say $fh     &#39;Going to duped version. fileno &#39; . fileno($fh);
say STDOUT  &#39;Going to STDOUT. fileno &#39; . fileno($fh);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of these print to STDOUT.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to redirect and restore STDOUT</title>
      <link>https://dnmfarrell.github.io/article/45/2013/10/27/How-to-redirect-and-restore-STDOUT/</link>
      <pubDate>Sun, 27 Oct 2013 17:48:34 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/45/2013/10/27/How-to-redirect-and-restore-STDOUT/</guid>
      <description>

&lt;p&gt;STDOUT is the Perl filehandle for printing standard output. Unless a filehandle is specified, all standard printed output in Perl will go to the terminal. Because STDOUT is just a global variable, it can be redirected and restored. Want to implement logging on a program without changing every print statement in the source code? Want to capture the standard output of a perl CRON job? Read on.&lt;/p&gt;

&lt;h3 id=&#34;terminal-redirects:9e03003b05f671fa59d2fc87f91ddfba&#34;&gt;Terminal redirects&lt;/h3&gt;

&lt;p&gt;Before you launch your favourite text editor and start hacking Perl code, you may just need to redirect the program output in the terminal. On UNIX-based systems you can write to a file using &amp;ldquo;&amp;gt;&amp;rdquo; and append to a file using &amp;ldquo;&amp;gt;&amp;gt;&amp;rdquo;. Both write and append will create the file if it doesn&amp;rsquo;t exist.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl program.pl &amp;gt; /path/to/log.txt
perl program.pl &amp;gt;&amp;gt; /path/to/log.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On Windows a similar effect can be achieved using PowerShell using a pipe operator (&amp;ldquo;|&amp;rdquo;) and &amp;ldquo;set-content&amp;rdquo; to write, or &amp;ldquo;add-content&amp;rdquo; to append (the pipe will not redirect STDERR).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl program.pl | set-content /path/to/log.txt
perl program.pl | add-content /path/to/log.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;perl-solutions:9e03003b05f671fa59d2fc87f91ddfba&#34;&gt;Perl solutions&lt;/h3&gt;

&lt;p&gt;If a terminal redirect is not specific enough for your needs, you can use one of the following Perl solutions. All of the following solutions use &lt;a href=&#34;https://metacpan.org/pod/autodie&#34;&gt;autodie&lt;/a&gt; which removes the need for the classic &amp;ldquo;|| or die $!&amp;rdquo; syntax to be appended to every open statement in the code.&lt;/p&gt;

&lt;h3 id=&#34;redirect-stdout-using-select:9e03003b05f671fa59d2fc87f91ddfba&#34;&gt;Redirect STDOUT using select&lt;/h3&gt;

&lt;p&gt;Perl&amp;rsquo;s built-in function &lt;a href=&#34;http://perldoc.perl.org/functions/select.html&#34;&gt;select&lt;/a&gt; changes the standard output filehandle to the filehandle provided as an argument. This makes it easy to globally redirect and restore standard output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
use autodie;

# open filehandle log.txt
open (my $LOG, &#39;&amp;gt;&amp;gt;&#39;, &#39;log.txt&#39;);

# select new filehandle
select $LOG;

say &#39;This should be logged.&#39;;

# restore STDOUT
select STDOUT;

say &#39;This should show in the terminal&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;redirect-stdout-using-local:9e03003b05f671fa59d2fc87f91ddfba&#34;&gt;Redirect STDOUT using local&lt;/h3&gt;

&lt;p&gt;Perl&amp;rsquo;s &lt;a href=&#34;http://perldoc.perl.org/functions/local.html&#34;&gt;local&lt;/a&gt; built-in function is another option for redirecting STDOUT. The local function creates a lexically-scoped copy of any variable passed to it. By enclosing local in a do block, the code below limits the STDOUT redirect to the block scope and STDOUT is automatically restored after the closing block brace (&amp;ldquo;}&amp;rdquo;). By definition this is not a global solution for redirecting STDOUT.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
use autodie;

do {
    local *STDOUT;

    # redirect STDOUT to log.txt
    open (STDOUT, &#39;&amp;gt;&amp;gt;&#39;, &#39;log.txt&#39;);

    say &#39;This should be logged.&#39;;
};
say &#39;This should show in the terminal&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;redirect-stdout-using-a-filehandle:9e03003b05f671fa59d2fc87f91ddfba&#34;&gt;Redirect STDOUT using a filehandle&lt;/h3&gt;

&lt;p&gt;A third way to redirect and restore STDOUT is to copy the STDOUT filehandle before replacing it. This copy can then be restored when required. As with select, this will have a global affect on the Perl program.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
use autodie;

# copy STDOUT to another filehandle
open (my $STDOLD, &#39;&amp;gt;&amp;amp;&#39;, STDOUT);

# redirect STDOUT to log.txt
open (STDOUT, &#39;&amp;gt;&amp;gt;&#39;, &#39;log.txt&#39;);

say &#39;This should be logged.&#39;;

# restore STDOUT
open (STDOUT, &#39;&amp;gt;&amp;amp;&#39;, $STDOLD);

say &#39;This should show in the terminal&#39;;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Execute Perl code stored in a text file with eval</title>
      <link>https://dnmfarrell.github.io/article/26/2013/5/28/Execute-Perl-code-stored-in-a-text-file-with-eval/</link>
      <pubDate>Tue, 28 May 2013 12:25:15 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/26/2013/5/28/Execute-Perl-code-stored-in-a-text-file-with-eval/</guid>
      <description>

&lt;p&gt;The Perl &lt;a href=&#34;http://perldoc.perl.org/functions/eval.html&#34;&gt;eval function&lt;/a&gt; will execute any Perl code contained in a string that is passed to it. This article shows how eval can be used to execute Perl code stored in text files.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s imagine that we want to execute this Perl statement stored in &amp;lsquo;print.txt&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;print &amp;quot;it works! \n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can write a simple Perl script called &amp;lsquo;eval.pl&amp;rsquo; that will slurp &amp;lsquo;print.txt&amp;rsquo; into a string, and then call eval on the string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::Slurp;
use strict;
use warnings;

my $command = read_file(&#39;print.txt&#39;);
eval $command;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can run &amp;lsquo;eval.pl&amp;rsquo; to prove it works:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl eval.pl
it works!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;injecting-code:bbcd8770a04941299600be476a082762&#34;&gt;Injecting code&lt;/h3&gt;

&lt;p&gt;When eval is called on a string containing Perl code, the code is executed within a sub lexical scope in main - similar to as if it was written within a block. This makes it possible to declare variables in the main program, and execute them in code contained in text files with eval. Let&amp;rsquo;s update &amp;lsquo;print.txt&amp;rsquo; to print a variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;print $message;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &amp;lsquo;eval.pl&amp;rsquo; to declare $message and set the text to be printed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::Slurp;
use strict;
use warnings;

my $command = read_file(&#39;print.txt&#39;);
my $message = &amp;quot;We injected this message\n&amp;quot;;

eval $command;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now running the code we can see the injected message is printed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl eval.pl
We injected this message
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although it is a cool feature, any technique which allows the execution of arbitrary code stored in text files is rife with risk. So exercise the proper caution and checks before employing this method!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Read an entire file into a string</title>
      <link>https://dnmfarrell.github.io/article/21/2013/4/21/Read-an-entire-file-into-a-string/</link>
      <pubDate>Sun, 21 Apr 2013 20:54:15 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/21/2013/4/21/Read-an-entire-file-into-a-string/</guid>
      <description>

&lt;p&gt;There are several ways in Perl to read an entire file into a string, (a procedure also known as &amp;ldquo;slurping&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;If you have access to CPAN, you can use the &lt;a href=&#34;https://metacpan.org/module/File::Slurp&#34;&gt;File::Slurp&lt;/a&gt; module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::Slurp;

my $file_content = read_file(&#39;text_document.txt&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;File::Slurp&amp;rsquo;s &lt;code&gt;read_file&lt;/code&gt; function to reads the entire contents of a file with the file name and returns it as a string. It&amp;rsquo;s simple and usually does what it&amp;rsquo;s expected to do. However use of &lt;code&gt;File::Slurp&lt;/code&gt; is discouraged as it has some encoding layer problems that may cause issues. &lt;a href=&#34;https://metacpan.org/pod/File::Slurper&#34;&gt;File::Slurper&lt;/a&gt; aims to be a safer alternative that, regrettably is still described as experimental:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::Slurper;

my $content = read_text(&#39;text_document.txt&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;File::Slurper&amp;rsquo;s &lt;code&gt;read_text&lt;/code&gt; function accepts an optional encoding argument, and can automatically decode &lt;code&gt;crlf&lt;/code&gt; line endings if you request it (for Windows files).&lt;/p&gt;

&lt;h3 id=&#34;slurping-files-without-modules:6e7298651c4cb8ae2dfdff77b8dd1aac&#34;&gt;Slurping files without modules&lt;/h3&gt;

&lt;p&gt;Slurping files is not complicated though and requires just a few lines of Perl. First I open a filehandle:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;lt;&#39;, &#39;text_document.txt&#39; or die &amp;quot;Can&#39;t open file $!&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can read the file contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $file_content = do { local $/; &amp;lt;$fh&amp;gt; };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within the &lt;code&gt;do&lt;/code&gt; block it localizes Perl&amp;rsquo;s record separator variable &lt;code&gt;$/&lt;/code&gt; to &lt;code&gt;undef&lt;/code&gt;, so that the diamond &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator will read all the lines of the file at once (usually &lt;code&gt;$/&lt;/code&gt; is set to newline).&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve opened a filehandle to the file you want to slurp, instead of a &lt;code&gt;do&lt;/code&gt; block, you can also use &lt;code&gt;read&lt;/code&gt; to slurp a file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;read $fh, my $file_content, -s $fh;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;read&lt;/code&gt; requires a filehandle, a target variable to read content into and a length argument. To get the length of the file, we use the &lt;code&gt;-s&lt;/code&gt; function on the filehandle, which returns the file size in bytes. For large files, this approach is faster than the &lt;code&gt;do&lt;/code&gt; block method.&lt;/p&gt;

&lt;h3 id=&#34;perlio-layers:6e7298651c4cb8ae2dfdff77b8dd1aac&#34;&gt;PerlIO Layers&lt;/h3&gt;

&lt;p&gt;When slurping a file, you may want to add a PerlIO layer &lt;a href=&#34;http://perldoc.perl.org/PerlIO.html&#34;&gt;instruction&lt;/a&gt; to the open argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open my $fh, &#39;&amp;lt;:unix&#39;, &#39;text_document.txt&#39; or die &amp;quot;Couldn&#39;t open $filename: $!&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this code the first line looks the same except &lt;code&gt;:unix&lt;/code&gt; has been appended to the file open direction. You can read more about the PerlIO layers &lt;a href=&#34;http://perldoc.perl.org/PerlIO.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;yet-another-way:6e7298651c4cb8ae2dfdff77b8dd1aac&#34;&gt;Yet another way&lt;/h3&gt;

&lt;p&gt;In the comments section of a blog &lt;a href=&#34;http://blogs.perl.org/users/leon_timmermans/2013/05/why-you-dont-need-fileslurp.html&#34;&gt;post&lt;/a&gt;, Damien Krotkine showed that it&amp;rsquo;s also possible to slurp a file in &amp;ldquo;one line&amp;rdquo; of Perl, or at least without using &lt;code&gt;open&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $file_content = do{local(@ARGV,$/)=$filename;&amp;lt;&amp;gt;};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool, huh? This works by localizing &lt;code&gt;@ARGV&lt;/code&gt; and saving &lt;code&gt;$filename&lt;/code&gt; as the first element of &lt;code&gt;@ARGV&lt;/code&gt;. The empty diamond operator &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; automatically opens a filehandle to the first element of &lt;code&gt;@ARGV&lt;/code&gt;, which is the filename. If you need to set a PerlIO layer, the filehandle name is &lt;code&gt;ARGV&lt;/code&gt; so you can use binmode to set the layer (&lt;em&gt;before&lt;/em&gt; the file is read!):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;binmode ARGV, $layer;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; changed to give more examples, File::Slurp warning and include File::Slurper. 2015-06-26&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

