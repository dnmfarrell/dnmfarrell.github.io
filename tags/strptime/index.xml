<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Strptime on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/strptime/</link>
    <description>Recent content in Strptime on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jan 2014 04:24:25 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/strptime/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Solve almost any datetime need with Time::Piece</title>
      <link>https://dnmfarrell.github.io/article/59/2014/1/10/Solve-almost-any-datetime-need-with-Time--Piece/</link>
      <pubDate>Fri, 10 Jan 2014 04:24:25 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/59/2014/1/10/Solve-almost-any-datetime-need-with-Time--Piece/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Datetimes come up all the time in programming, so being fluent in handling them is an essential skill. There are &lt;a href=&#34;https://metacpan.org/search?q=date+time&#34;&gt;many modules&lt;/a&gt; on CPAN for dealing with datetimes, but for most tasks you only need one: &lt;a href=&#34;https://metacpan.org/pod/Time::Piece&#34;&gt;Time::Piece&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:15c12906ca779ac02701e8af216e915b&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;Time::Piece has been in Perl core since version 5.8, so you should already have it installed. If you don&amp;rsquo;t have it, you can install it via cpan at the terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Time::Piece
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-time-piece-object:15c12906ca779ac02701e8af216e915b&#34;&gt;Create a Time::Piece object&lt;/h3&gt;

&lt;p&gt;To create a new Time::Piece object with the current system time, use new:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;

my $time = Time::Piece-&amp;gt;new;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;get-a-datetime-string-in-any-format:15c12906ca779ac02701e8af216e915b&#34;&gt;Get a datetime string in any format&lt;/h3&gt;

&lt;p&gt;Time::Piece provides many methods for printing the datetime in common formats. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$time;           # Thu Jan  9 21:21:36 2014
$time-&amp;gt;datetime; # 2014-01-09T21:21:36
$time-&amp;gt;date;     # 2014-01-09
$time-&amp;gt;mdy;      # 01-09-2014
$time-&amp;gt;fullday;  # Thursday
$time-&amp;gt;hms;      # 21:21:36
$time-&amp;gt;epoch;    # 1389320496 (Unix time)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to get the datetime in a custom format, Time::Piece provides a &amp;ldquo;strftime&amp;rdquo; method which takes a custom string format. A complete list of formatting codes is on the &lt;a href=&#34;http://man7.org/linux/man-pages/man3/strftime.3.html&#34;&gt;man page&lt;/a&gt;. Here are some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;

my $time = Time::Piece-&amp;gt;new;
$time-&amp;gt;strftime(&#39;%y/%m/%d %H:%M&#39;); # 14/01/09 21:21
$time-&amp;gt;strftime(&#39;%y_%m_%d&#39;);       # 14_01_09
$time-&amp;gt;strftime(&#39;%s&#39;);             # 1389320496 (Unix time)
$time-&amp;gt;strftime(&#39;%Y %y %G %g&#39;);    # 2014 14 2014 14 (4 different years,really)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;read-a-datetime-string-in-any-format:15c12906ca779ac02701e8af216e915b&#34;&gt;Read a datetime string in any format&lt;/h3&gt;

&lt;p&gt;Time::Piece also provides a strptime method which takes a string, and a string format and initializes a new Time::Piece object with that datetime. If either the date or time component is missing, Time::Piece assumes the current date or time. Here are some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;

my $yesterday    = Time::Piece-&amp;gt;strptime(&#39;01-08-2014&#39;, &#39;%m-%d-%Y&#39;);
my $yesterdayDMY = Time::Piece-&amp;gt;strptime(&#39;08-01-14&#39;, &#39;%d-%m-%y&#39;);
my $lunchhour24  = Time::Piece-&amp;gt;strptime(&#39;12:30&#39;, &#39;%H:%M&#39;);
my $bedtime      = Time::Piece-&amp;gt;strptime(&#39;12:30 AM&#39;, &#39;%l:%M %p&#39;);

# timezones are easy too
my $utc_datetime = Time::Piece-&amp;gt;strptime(&#39;Mon, 19 Jan 2015 14:56:20 +0000&#39;,&#39;%a, %d %b %Y %H:%M:%S %z&#39;);
my $eastern_datetime = Time::Piece-&amp;gt;strptime(&#39;2015-10-05T09:34:19 -0400&#39;,&#39;%Y-%m-%dT%T %z&#39;);
my $pacific_datetime = Time::Piece-&amp;gt;strptime(&#39;2015-10-05T09:34:19 -0700&#39;,&#39;%Y-%m-%dT%T %z&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;strptime uses the same formatting codes as strftime, you can get the full list &lt;a href=&#34;http://man7.org/linux/man-pages/man3/strftime.3.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;compare-datetimes:15c12906ca779ac02701e8af216e915b&#34;&gt;Compare datetimes&lt;/h3&gt;

&lt;p&gt;This is easy. Just initialize two Time::Piece objects and compare them with an operator (&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt; and &amp;lt;=&amp;gt;). For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;

my $today = Time::Piece-&amp;gt;new;
my $yesterday = Time::Piece-&amp;gt;strptime(&#39;01/08/2014&#39;, &#39;%m/%d/%Y&#39;);

if ($today &amp;gt; $yesterday) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;datetime-math:15c12906ca779ac02701e8af216e915b&#34;&gt;Datetime math&lt;/h3&gt;

&lt;p&gt;The first thing to know is that Time::Piece objects are &lt;strong&gt;immutable&lt;/strong&gt; so any operation performed on them will return a new object.&lt;/p&gt;

&lt;p&gt;Time::Piece provides a couple of methods for adding months and years (&amp;ldquo;add_months&amp;rdquo;, &amp;ldquo;add_years&amp;rdquo;) from Time::Piece objects. Simply use a negative integer to subtract. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;

my $datetime = Time::Piece-&amp;gt;new;
my $nextMonth   = $datetime-&amp;gt;add_months(1);   # plus one month
my $lastQuarter = $datetime-&amp;gt;add_months(-3);  # minus three months
my $nextDecade  = $datetime-&amp;gt;add_years(10);   # plus 10 years
my $lastYear    = $datetime-&amp;gt;add_years(-1);   # minus 1 year
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll often need more granular control over the datetime, and that&amp;rsquo;s where the &lt;a href=&#34;https://metacpan.org/pod/Time::Seconds&#34;&gt;Time::Seconds&lt;/a&gt; module comes in. Just include it in your program, and it will export several constants which can be used to adjust the datetime. The constants are: ONE_MINUTE, ONE_HOUR, ONE_DAY, ONE_WEEK, ONE_MONTH, ONE_YEAR, ONE_FINANCIAL_MONTH, LEAP_YEAR, NON_LEAP_YEAR.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how to use the constants:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;
use Time::Seconds;

my $time = Time::Piece-&amp;gt;new;
my $tomorrow  = $time + ONE_DAY;
my $lastWeek  = $time - ONE_WEEK;
my $lastMonth = $time - ONE_MONTH;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to change the datetime by seconds, with you can simply use integer arithmetic.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;

my $now = Time::Piece-&amp;gt;new;
my $30SecondsAgo = $now - 30; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;documentation:15c12906ca779ac02701e8af216e915b&#34;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Time::Piece&#34;&gt;Time::Piece&lt;/a&gt; has excellent documentation, you can read it on the command line with perldoc:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc Time::Piece
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; &lt;em&gt;Added timezone strptime example 2015-01-28&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

