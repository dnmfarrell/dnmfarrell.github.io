<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bit Array on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/bit-array/</link>
    <description>Recent content in Bit Array on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Sep 2016 17:40:12 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/bit-array/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using bit arrays with large integers</title>
      <link>http://perltricks.com/article/using-bitmasks-with-large-integers/</link>
      <pubDate>Thu, 15 Sep 2016 17:40:12 +0000</pubDate>
      
      <guid>http://perltricks.com/article/using-bitmasks-with-large-integers/</guid>
      <description>

&lt;p&gt;A few weeks ago I wrote &lt;a href=&#34;http://perltricks.com/article/save-space-with-bit-arrays/&#34;&gt;Save space with bit arrays&lt;/a&gt; and employed some hand-waving around maximum bitmask lengths. Specifically, I said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;using a module like bigint may not work because of addressable memory limitations&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now I&amp;rsquo;m not sure exactly where the &amp;ldquo;addressable memory limitation&amp;rdquo; line is, but this was something that I&amp;rsquo;d read elsewhere, and believed to be true, but didn&amp;rsquo;t have time to research. The more I thought about it, the less sense that sentence made. The amount of memory a system can address is controlled by &lt;a href=&#34;https://superuser.com/questions/168114/how-much-memory-can-a-64bit-machine-address-at-a-time#168121&#34;&gt;many factors&lt;/a&gt;, but I don&amp;rsquo;t believe you&amp;rsquo;d ever want to create a bit array using all the addressable memory just for storing bitmasks. I decided to test bit arrays with large integers and see if they behaved correctly under &lt;a href=&#34;https://metacpan.org/pod/bigint&#34;&gt;bigint&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;testing-large-bitmasks:45b406225733c523a87ffdfd363b9d74&#34;&gt;Testing large bitmasks&lt;/h3&gt;

&lt;p&gt;For these tests I wanted to check the typical operations that a bit array would be used for: setting / unsetting a bitmask and converting the bit array into a binary string. I came up with the follow test script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use strict;
use warnings;
use bigint;
use Test::More tests =&amp;gt; 60;

for my $shift_size (8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096) {
  my $bitmask  = 1 &amp;lt;&amp;lt; ($shift_size - 1);
  my $bit_array = 0;

  ok !($bit_array &amp;amp; $bitmask),  &#39;bitmask is not set&#39;;
  ok $bit_array |= $bitmask,    &#39;set bitmask&#39;;
  ok $bit_array  &amp;amp; $bitmask,    &#39;bitmask is set&#39;;
  ok !($bit_array &amp;amp;= ~$bitmask),&#39;bitmask is unset&#39;;
  ok !($bit_array &amp;amp; $bitmask),  &#39;bitmask is not set&#39;;

  cmp_ok length(sprintf &amp;quot;%b&amp;quot;, $bitmask), &#39;==&#39;, $shift_size,
    &#39;bitmask string is correct length&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script loops over numbers of increasing size, creating bitmasks with them, and then testing the bit array against the bitmask. The bitwise operations were explained in my previous &lt;a href=&#34;http://perltricks.com/article/save-space-with-bit-arrays/&#34;&gt;article&lt;/a&gt;. Finally the script uses &lt;code&gt;sprintf&lt;/code&gt; to convert the bitmask to a binary string, and check its length is correct. Running this script I got some interesting failures. Here&amp;rsquo;s a snippet of the output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
not ok 24 - bitmask string is correct length
#   Failed test &#39;bitmask string is correct length&#39;
#   at ./bigint-test line 18.
#          got: 64
#     expected: 128
ok 25 - bitmask is not set
ok 26 - set bitmask
ok 27 - bitmask is set
ok 28 - bitmask is unset
ok 29 - bitmask is not set
not ok 30 - bitmask string is correct length
#   Failed test &#39;bitmask string is correct length&#39;
#   at ./bigint-test line 18.
#          got: 64
#     expected: 256
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whilst all of the bitwise operations passed, the string length test failed as soon as the bitmask size was larger than 64 bits (my machine is 64 bit, I expect on a 32 bit compiled Perl it would fail after 32 bits). So what to do about this? Is it that &lt;code&gt;sprintf&lt;/code&gt; cannot print integers larger than 64 bit? After trying a bunch of different functions, I tried the simplest: including a length argument to &lt;code&gt;sprintf&lt;/code&gt;. So this line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cmp_ok length(sprintf &amp;quot;%b&amp;quot;, $bitmask), &#39;==&#39;, $shift_size,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Became:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cmp_ok length(sprintf &amp;quot;%0${shift_size}b&amp;quot;, $bitmask), &#39;==&#39;, $shift_size,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m pleased to report that the change worked, and all tests passed (on Perl 5.10 and higher). Here is the finished script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use strict;
use warnings;
use bigint;
use Test::More tests =&amp;gt; 60;

for my $shift_size (8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096) {
  my $bitmask  = 1 &amp;lt;&amp;lt; ($shift_size - 1);
  my $bit_array = 0;

  ok !($bit_array &amp;amp; $bitmask),  &#39;bitmask is not set&#39;;
  ok $bit_array |= $bitmask,    &#39;set bitmask&#39;;
  ok $bit_array  &amp;amp; $bitmask,    &#39;bitmask is set&#39;;
  ok !($bit_array &amp;amp;= ~$bitmask),&#39;bitmask is unset&#39;;
  ok !($bit_array &amp;amp; $bitmask),  &#39;bitmask is not set&#39;;

  cmp_ok length(sprintf &amp;quot;%0${shift_size}b&amp;quot;, $bitmask), &#39;==&#39;, $shift_size,
    &#39;bitmask string is correct length&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m not sure at what point you would hit &amp;ldquo;addressable memory limitations&amp;rdquo;, but a 4096 bit integer is a huge number. This suggests to me that you &lt;em&gt;could&lt;/em&gt; use a 4096 bit array with Perl, although whether you &lt;em&gt;should&lt;/em&gt; is another question, TIMTOWTDI.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Save space with bit arrays</title>
      <link>http://perltricks.com/article/save-space-with-bit-arrays/</link>
      <pubDate>Tue, 23 Aug 2016 08:58:54 +0000</pubDate>
      
      <guid>http://perltricks.com/article/save-space-with-bit-arrays/</guid>
      <description>

&lt;p&gt;&amp;ldquo;Big data&amp;rdquo; is an overused term, but when you&amp;rsquo;re actually working with big data, every bit can count. Shaving several bits from data structure used billions of times can save a lot of space. A few months ago I was working on a job distribution system; it would send millions of jobs out every day. We wanted to capture every decision made by the system, so that a user could later query the system to understand &lt;em&gt;why&lt;/em&gt; a job had or hadn&amp;rsquo;t been sent to a partner.&lt;/p&gt;

&lt;p&gt;The problem was that the system was making billions of decisions a day, so we needed a way to pack those decisions as efficiently as possible. A colleague of mine had the bright idea to use a &lt;a href=&#34;https://en.wikipedia.org/wiki/Bit_array&#34;&gt;bit array&lt;/a&gt;, and it worked very well - we were able to compress the data by a factor of 18 or more. If you&amp;rsquo;re not familiar with bit arrays, or a little rusty on the code, keep reading and I&amp;rsquo;ll show you how to use them with Perl.&lt;/p&gt;

&lt;h3 id=&#34;bit-array-basics:a332d1994b52ca26596563ea047b2f1d&#34;&gt;Bit array basics&lt;/h3&gt;

&lt;p&gt;Bit arrays are a way of storing multiple booleans in single number. Consider the number 0 as a byte/octet represented as bits:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of treating it like a number, using &lt;a href=&#34;https://en.wikipedia.org/wiki/Bitwise_operation&#34;&gt;bitwise operators&lt;/a&gt; we can treat each bit as a separate column. As this is an 8 bit number, we can store up to 8 booleans in it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0|0|0|0|0|0|0|0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To store a boolean in the first bit of the array, we can use bitwise or equals (&lt;code&gt;|=&lt;/code&gt;). Here&amp;rsquo;s how that looks in C pseudocode:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;short bit_array = 0;
bit_array |= 1 &amp;lt;&amp;lt; 6;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s take this one step at a time. First I initialize an 8 bit integer called &lt;code&gt;bit_array&lt;/code&gt;. Next, I create a binary number with the bit set that I wish to set in &lt;code&gt;bit_array&lt;/code&gt;. I do this with the left bitshift code &lt;code&gt;1 &amp;lt;&amp;lt; 6&lt;/code&gt;. This means, &amp;ldquo;shift the bits in the number on the left, 6 places to the left&amp;rdquo;, which does this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00000001 &amp;lt;&amp;lt; 6;
01000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is called a bitmask. Next I use or equals to update &lt;code&gt;bit_array&lt;/code&gt; with the bitmask &lt;code&gt;01000000&lt;/code&gt;. Bitwise or (&lt;code&gt;|&lt;/code&gt;) works by setting any bit to 1 in its left operand that is set to 1 in its right operand. Adding a equals sign on the end simply assigns the resulting value to &lt;code&gt;bit_array&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we wanted to store a boolean in the fourth bit, we&amp;rsquo;d do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;bit_array |= 1 &amp;lt;&amp;lt; 3;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now the &lt;code&gt;bit_array&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;01001000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test if a particular bit is set, I can use bitwise and (&lt;code&gt;&amp;amp;&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;if (bit_array &amp;amp; (1 &amp;lt;&amp;lt; 6)) {
  /* the seventh column is true */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bitwise and returns a number with every bit set to 0 in its left operand which is 0 in its right operand. So the code &lt;code&gt;1 &amp;lt;&amp;lt; 6&lt;/code&gt; bitshifts a number that only has one particular bit set to 1 (&lt;code&gt;01000000&lt;/code&gt;). This is the bitmask. If the bit array has that bit set to 1, it will return non-zero (true), else it returns zero (false).&lt;/p&gt;

&lt;h3 id=&#34;bit-arrays-in-perl:a332d1994b52ca26596563ea047b2f1d&#34;&gt;Bit arrays in Perl&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m going to use a contrived example to show how bit arrays work in Perl. Imagine we&amp;rsquo;re working on an ordering system at a pizza restaurant. We need to store all the toppings required for the pizza. In Perl we store numbers in scalars, which are usually 32 or 64 bits long; that&amp;rsquo;s a lot of toppings we can pack into a single number!&lt;/p&gt;

&lt;p&gt;Here is the class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Pizza::Order;
use utf8;

my %toppings = (
  tomato        =&amp;gt; 1 &amp;lt;&amp;lt; 0,
  cheese        =&amp;gt; 1 &amp;lt;&amp;lt; 1,
  onion         =&amp;gt; 1 &amp;lt;&amp;lt; 2,
  sausage       =&amp;gt; 1 &amp;lt;&amp;lt; 3,
  pepperoni     =&amp;gt; 1 &amp;lt;&amp;lt; 4,
  ham           =&amp;gt; 1 &amp;lt;&amp;lt; 5,
  chicken       =&amp;gt; 1 &amp;lt;&amp;lt; 6,
  bbq_chicken   =&amp;gt; 1 &amp;lt;&amp;lt; 7,
  olives        =&amp;gt; 1 &amp;lt;&amp;lt; 8,
  vegetables    =&amp;gt; 1 &amp;lt;&amp;lt; 9,
  jalapeńo      =&amp;gt; 1 &amp;lt;&amp;lt; 10,
  ranch         =&amp;gt; 1 &amp;lt;&amp;lt; 11,
  eggplant      =&amp;gt; 1 &amp;lt;&amp;lt; 12,
  garlic        =&amp;gt; 1 &amp;lt;&amp;lt; 13,
);

sub new {
  my $class = shift;
  my $self = 0;
  return bless \$self, $class;
}

sub print_state {
  my $self = shift;
  printf &amp;quot;%014b\n&amp;quot;, $$self;
}

sub available_toppings {
  return keys %toppings;
}

sub add_topping {
  my ($self, $topping) = @_;
  # bitwise OR equals to set a bit field
  return $$self |= $toppings{ $topping };
}

sub remove_topping {
  my ($self, $topping) = @_;
  # bitwise NOT to invert a field and bitwise AND equals to unset it
  return $$self &amp;amp;= ~$toppings{ $topping };
}

sub get_toppings {
  my $self = shift;
  my @ordered_toppings = ();
  for my $topping (keys %toppings) {
    push @ordered_toppings, $topping
      # bitwise AND to test if this bit is set
      if $$self &amp;amp; $toppings{ $topping };
  }
  return @ordered_toppings;
}
1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I create a class called &lt;code&gt;Pizza::Order&lt;/code&gt;. The &lt;code&gt;%toppings&lt;/code&gt; hash stores names of pizza toppings and their associated bitmask. I could only think of 14 toppings, leaving 18 spare slots for the future (if we want to stick to 32 bit integers). The &lt;code&gt;new&lt;/code&gt; subroutine is a constructor which creates a blessed scalar as the &lt;code&gt;Pizza::Order&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;print_state&lt;/code&gt; method uses &lt;a href=&#34;http://perldoc.perl.org/functions/printf.html&#34;&gt;printf&lt;/a&gt; to print the Pizza::Order object state as a binary number. This is a really useful feature of &lt;code&gt;printf&lt;/code&gt; which many other languages don&amp;rsquo;t have (C &amp;amp; Python for example). Both &lt;code&gt;add_topping&lt;/code&gt; and &lt;code&gt;get_toppings&lt;/code&gt; use the techniques described earlier to set and check for set bits.&lt;/p&gt;

&lt;p&gt;More interesting perhaps, is the &lt;code&gt;remove_topping&lt;/code&gt; method. This uses bitwise not (&lt;code&gt;~&lt;/code&gt;) to invert a bitmask and then bitwise and (&lt;code&gt;&amp;amp;&lt;/code&gt;) equals to unset it. Pretty nifty, huh? Here&amp;rsquo;s a quick script to test it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/perl
use Pizza::Order;

my $order = Pizza::Order-&amp;gt;new();
$order-&amp;gt;add_topping(&#39;cheese&#39;);
$order-&amp;gt;add_topping(&#39;eggplant&#39;);
$order-&amp;gt;remove_topping(&#39;cheese&#39;);
$order-&amp;gt;add_topping(&#39;tomato&#39;);
$order-&amp;gt;print_state();
print &amp;quot;$_\n&amp;quot; for $order-&amp;gt;get_toppings();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This prints:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;01000000000001
eggplant
tomato
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line is the current state of the &lt;code&gt;$order&lt;/code&gt; object. It shows the first, and second-to-last bits set, which correspond to the tomato and eggplant bitmasks. It then prints out those toppings. Yay, it works!&lt;/p&gt;

&lt;h3 id=&#34;bit-array-limitations:a332d1994b52ca26596563ea047b2f1d&#34;&gt;Bit array limitations&lt;/h3&gt;

&lt;p&gt;One thing to watch out for when storing bit arrays on disk is code change. Imagine if I had several years&amp;rsquo; worth of pizza orders saved in a database. Then one day, we stopped offering bbq chicken. It would be tempting to update the toppings hash like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %toppings = (
  tomato        =&amp;gt; 1 &amp;lt;&amp;lt; 0,
  cheese        =&amp;gt; 1 &amp;lt;&amp;lt; 1,
  onion         =&amp;gt; 1 &amp;lt;&amp;lt; 2,
  sausage       =&amp;gt; 1 &amp;lt;&amp;lt; 3,
  pepperoni     =&amp;gt; 1 &amp;lt;&amp;lt; 4,
  ham           =&amp;gt; 1 &amp;lt;&amp;lt; 5,
  chicken       =&amp;gt; 1 &amp;lt;&amp;lt; 6,
  olives        =&amp;gt; 1 &amp;lt;&amp;lt; 7, # deleted bbq_chicken
  vegetables    =&amp;gt; 1 &amp;lt;&amp;lt; 8,
  jalapeńo      =&amp;gt; 1 &amp;lt;&amp;lt; 9,
  ranch         =&amp;gt; 1 &amp;lt;&amp;lt; 10,
  eggplant      =&amp;gt; 1 &amp;lt;&amp;lt; 11,
  garlic        =&amp;gt; 1 &amp;lt;&amp;lt; 12,
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I deleted the &lt;code&gt;bbq_chicken&lt;/code&gt; entry and bumped up the remaining toppings bitmasks. The problem is compatibility: in all the historical pizza orders, &lt;code&gt;olives&lt;/code&gt; (for example) had a bitmask of &lt;code&gt;00000010000000&lt;/code&gt; but in the new code, its bitmask is one lower. So if I tried to load a historical order with this class, the toppings data would be wrong. One way to handle this is remove, but not reuse, the bitmask for the deleted entry.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %toppings = (
  tomato        =&amp;gt; 1 &amp;lt;&amp;lt; 0,
  cheese        =&amp;gt; 1 &amp;lt;&amp;lt; 1,
  onion         =&amp;gt; 1 &amp;lt;&amp;lt; 2,
  sausage       =&amp;gt; 1 &amp;lt;&amp;lt; 3,
  pepperoni     =&amp;gt; 1 &amp;lt;&amp;lt; 4,
  ham           =&amp;gt; 1 &amp;lt;&amp;lt; 5,
  chicken       =&amp;gt; 1 &amp;lt;&amp;lt; 6,
  # reserved
  olives        =&amp;gt; 1 &amp;lt;&amp;lt; 8,
  vegetables    =&amp;gt; 1 &amp;lt;&amp;lt; 9,
  jalapeńo      =&amp;gt; 1 &amp;lt;&amp;lt; 10,
  ranch         =&amp;gt; 1 &amp;lt;&amp;lt; 11,
  eggplant      =&amp;gt; 1 &amp;lt;&amp;lt; 12,
  garlic        =&amp;gt; 1 &amp;lt;&amp;lt; 13,
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This limitation makes bitmasks less useful for long-term storage of data, unless the existing bitmasks are unlikely to change. Note that it&amp;rsquo;s fine to add additional toppings and bitmasks, it&amp;rsquo;s just re-using existing bitmasks that causes issues.&lt;/p&gt;

&lt;p&gt;Another thing to consider is upper limits. If you want your Perl code to be compatible with 32 bit and 64 bit Perls, you should probably stick to a maximum of 32 bitmasks (using a module like &lt;a href=&#34;https://metacpan.org/pod/bigint&#34;&gt;bigint&lt;/a&gt; may &lt;em&gt;not&lt;/em&gt; work because of addressable memory limitations). You can see the settings your Perl has been compiled with by typing &lt;code&gt;perl -V | grep longsize&lt;/code&gt; at the command line. The longsize value is the number of bytes your Perl can store in an integer natively.&lt;/p&gt;

&lt;p&gt;Finally, in order to get the data back out of a bit array it needs to be tested with all the available bitmasks. Consider the &lt;code&gt;get_toppings&lt;/code&gt; method in &lt;code&gt;Pizza::Order&lt;/code&gt;. To find out what toppings are set, the code has to check every topping&amp;rsquo;s bitmask. This is pretty inefficient. So bitmasks are good for compact data storage, but not fast access.&lt;/p&gt;

&lt;h3 id=&#34;references:a332d1994b52ca26596563ea047b2f1d&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Wikipedia has useful entries on &lt;a href=&#34;https://en.wikipedia.org/wiki/Bit_array&#34;&gt;bit arrays&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Bitwise_operation&#34;&gt;bitwise operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Perl&amp;rsquo;s official &lt;a href=&#34;http://perldoc.perl.org/perlop.html&#34;&gt;operator documentation&lt;/a&gt; covers the bitwise operators. You can read it in the terminal with the command &lt;code&gt;perldoc perlop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use Perl&amp;rsquo;s builtin functions &lt;a href=&#34;http://perldoc.perl.org/functions/sprintf.html&#34;&gt;sprintf&lt;/a&gt; (&lt;code&gt;perldoc -f sprintf&lt;/code&gt;) and &lt;a href=&#34;http://perldoc.perl.org/functions/printf.html&#34;&gt;printf&lt;/a&gt; (&lt;code&gt;perldoc -f printf&lt;/code&gt;) to inspect binary values&lt;/li&gt;
&lt;li&gt;Stringifying / printing numbers as binary isn&amp;rsquo;t the only nice binary feature Perl has over other languages. Another is the ability to write binary numbers inline, just like octal and hexadecimal numbers, for example: &lt;code&gt;0b00001000&lt;/code&gt;. This is great for comparing binary numbers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/bigint&#34;&gt;bigint&lt;/a&gt; is one of several modules on CPAN for working with large integers, but watch out for bitwise operator limitations!&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

