<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>generics on Code - a programming blog</title>
    <link>https://blog.dnmfarrell.com/tags/generics/</link>
    <description>Recent content in generics on Code - a programming blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Feb 2023 07:39:14 -0500</lastBuildDate><atom:link href="https://blog.dnmfarrell.com/tags/generics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Monads Can Simplify Go&#39;s Error Handling</title>
      <link>https://blog.dnmfarrell.com/post/monads-simplify-go-error-handling/</link>
      <pubDate>Fri, 24 Feb 2023 07:39:14 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/monads-simplify-go-error-handling/</guid>
      <description>Roughly a year ago I wrote about my attempts to tackle Go&amp;rsquo;s error handling problem using generics. I wasn&amp;rsquo;t very successful:
 This code is almost as long as the original and frankly, hurts my eyes.
 Since then I&amp;rsquo;ve continued experimenting with the idea and think I have something worth sharing. But first, let me recap the problem with an example.
Parsing Truthiness Many programming languages have the concept of truthiness, that decides whether or not an expression will evaluate as true or false in a boolean context.</description>
    </item>
    
    <item>
      <title>Can Generics Rescue Golang&#39;s Clunky Error Handling?</title>
      <link>https://blog.dnmfarrell.com/post/can-generics-rescue-golangs-clunky-error-handling/</link>
      <pubDate>Mon, 10 Jan 2022 23:41:35 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/can-generics-rescue-golangs-clunky-error-handling/</guid>
      <description>One of the most complained about aspects of programming in Go is error handling. However - Go is getting generics! Generics have already been merged to master and are slated for inclusion in the 1.18 release. So can generics raiseÂ¹ Go&amp;rsquo;s error handling out of the doldrums?
The problem Here&amp;rsquo;s some typical error-handling code:
str, err := foobar() if err != nil { // handle error }  The function foobar returns two values; the second one is an error.</description>
    </item>
    
  </channel>
</rss>
