<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reddit on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/reddit/</link>
    <description>Recent content in Reddit on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 May 2016 08:53:36 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/reddit/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Promoting Perl community articles</title>
      <link>http://perltricks.com/article/promoting-perl-community-articles/</link>
      <pubDate>Thu, 26 May 2016 08:53:36 +0000</pubDate>
      
      <guid>http://perltricks.com/article/promoting-perl-community-articles/</guid>
      <description>

&lt;p&gt;The last part of Justin Searls&amp;rsquo; &lt;a href=&#34;https://vimeo.com/165527044#t=28m10s&#34;&gt;talk&lt;/a&gt; has some great advice for promoting Ruby that applies to Perl too. If you haven&amp;rsquo;t seen it, I&amp;rsquo;d encourage you to watch it. Justin points out that some tech projects like Ruby on Rails are essentially, done. They&amp;rsquo;re feature complete and achieve everything they set out to accomplish. This means that they&amp;rsquo;re no longer cutting edge tech, and consequently fewer articles are written about them.&lt;/p&gt;

&lt;p&gt;We see this with Perl too. Modules like &lt;a href=&#34;https://metacpan.org/pod/Moose&#34;&gt;Moose&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Mojolicious&#34;&gt;Mojolicious&lt;/a&gt; are battle-tested, proven libraries that do a wonderful job. So we don&amp;rsquo;t see many hype articles about them either. The solution to this is to focus on evergreen story telling:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tell stories that help people solve problems. And if you love Ruby, tell your story in Ruby.&lt;/p&gt;

&lt;p&gt;Justin Searls&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As Perl programmers we&amp;rsquo;re using the language to solve problems every day. And we&amp;rsquo;ll never run out of problems to solve: there are always new systems to integrate, new data challenges, algorithms to implement and bugs to fix. That&amp;rsquo;s why it doesn&amp;rsquo;t matter that so much has already been written about Perl - new experiences will always be around the corner. And new is good.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s tell more stories in Perl.&lt;/p&gt;

&lt;h3 id=&#34;promoting-content:80ed17a713a6abb8e6d084fd1190752e&#34;&gt;Promoting content&lt;/h3&gt;

&lt;p&gt;Many Perl programmers are regularly writing about Perl, so another thing we can always improve on is promoting new Perl content. This isn&amp;rsquo;t an exhaustive list, just a few suggestions on how to help.&lt;/p&gt;

&lt;p&gt;Last week I added the &amp;ldquo;Community Articles&amp;rdquo; toolbar to this website. It&amp;rsquo;s a JavaScript widget that&amp;rsquo;s powered by &lt;a href=&#34;https://github.com/dnmfarrell/Perly-Bot&#34;&gt;Perly::Bot&lt;/a&gt;. You can add this widget to your website with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;https://perltricks.com/widgets/toplinks/toplinks.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;div id=&amp;quot;toplinks&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The list of links is updated hourly, served over HTTPS and hosted on GitHub pages. The widget is clever enough to skip links to articles from the host domain too (it never shows links to PerlTricks.com on this site).&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d rather not add that sidebar, consider adding a &lt;a href=&#34;https://www.reddit.com/r/perl/widget&#34;&gt;widget&lt;/a&gt; for &lt;code&gt;/r/perl&lt;/code&gt;. The Reddit widget respects Do Not Track.&lt;/p&gt;

&lt;p&gt;Finally, participate on &lt;a href=&#34;https://reddit.com/r/perl&#34;&gt;/r/perl&lt;/a&gt; and Twitter! Link to Perl resources and content you like; upvote or retweet Perl-related tweets. If you have something to say, reply to tweets or add yours comments to the subreddit links. Use the &lt;code&gt;#perl&lt;/code&gt; hashtag.&lt;/p&gt;

&lt;h3 id=&#34;stuff-we-re-already-good-at:80ed17a713a6abb8e6d084fd1190752e&#34;&gt;Stuff we&amp;rsquo;re already good at&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/perl&#34;&gt;StackOverflow.com&lt;/a&gt; has excellent Perl answers that are regularly updated; this is a great resource for Perl programmers. &lt;a href=&#34;http://perlweekly.com&#34;&gt;PerlWeekly&lt;/a&gt; is a fantastic newsletter that links to the best Perl content of the week, subscribe if you haven&amp;rsquo;t already. &lt;a href=&#34;http://perlmonks.org&#34;&gt;PerlMonks&lt;/a&gt; has tonnes of in-depth Perl guides and resources.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;em&gt;Cover image by &lt;a href=&#34;http://newspaper.jaguarpaw.co.uk/&#34;&gt;jaguarpaw&lt;/a&gt;&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cache::Reddit or: how to use social media as a temporary data store</title>
      <link>http://perltricks.com/article/171/2015/5/4/Cache--Reddit-or--how-to-use-social-media-as-a-temporary-data-store/</link>
      <pubDate>Mon, 04 May 2015 12:28:31 +0000</pubDate>
      
      <guid>http://perltricks.com/article/171/2015/5/4/Cache--Reddit-or--how-to-use-social-media-as-a-temporary-data-store/</guid>
      <description>

&lt;p&gt;Sometimes crazy ideas are brilliant, but most of the time they are just crazy. I recently uploaded a new module to CPAN: &lt;a href=&#34;https://metacpan.org/pod/Cache::Reddit&#34;&gt;Cache::Reddit&lt;/a&gt;. It&amp;rsquo;s a caching module with a twist: it saves cached data as text posts on Reddit. Is that a good idea? Probably not, it&amp;rsquo;s definitely crazy.&lt;/p&gt;

&lt;h3 id=&#34;setup:915623acbd42e6947b356ad2ec9d95c4&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;You probably don&amp;rsquo;t want to do this, but if you were considering using the module, here&amp;rsquo;s how. First you&amp;rsquo;ll need a Reddit account with enough karma to use the API (usually handful of upvoted links and comments is enough). Second you should create your own &lt;a href=&#34;http://www.reddit.com/subreddits/create/&#34;&gt;subreddit&lt;/a&gt; to post to. Install &lt;a href=&#34;https://metacpan.org/pod/Cache::Reddit&#34;&gt;Cache::Reddit&lt;/a&gt; using the command line clients cpan or cpanm&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Cache::Reddit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpanm Cache::Reddit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally set the environment variables: &lt;code&gt;reddit_username&lt;/code&gt;, &lt;code&gt;reddit_password&lt;/code&gt;, and &lt;code&gt;reddit_subreddit&lt;/code&gt; (the name of the subreddit that data will be posted to). On Linux / OSX you can do this at the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ export reddit_username=somename
$ export reddit_password=itsasecret
$ export reddit_subreddit=mycache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To set environment variables on Windows 8, these &lt;a href=&#34;http://winaero.com/blog/how-to-edit-environment-variables-quickly-in-windows-8-1-and-windows-8/&#34;&gt;steps&lt;/a&gt; might work.&lt;/p&gt;

&lt;h3 id=&#34;using-cache-reddit:915623acbd42e6947b356ad2ec9d95c4&#34;&gt;Using Cache::Reddit&lt;/h3&gt;

&lt;p&gt;The module exports the typical caching functions you&amp;rsquo;d expect: &lt;code&gt;set&lt;/code&gt; for saving data, &lt;code&gt;get&lt;/code&gt; for retrieval and &lt;code&gt;remove&lt;/code&gt; for removal. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Cache::Reddit; #exports get, set, remove

my $monthly_revenues = { jan =&amp;gt; 25000, feb =&amp;gt; 23500, mar =&amp;gt; 31000, apr =&amp;gt; 15000 };
my $key = set($monthly_revenues); # serialize and save on reddit
...
my $revenue_data = get($key);
remove($key);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;limitations:915623acbd42e6947b356ad2ec9d95c4&#34;&gt;Limitations&lt;/h3&gt;

&lt;p&gt;Although the data is stored in a failsafe, redundant, backed-up environment in the cloud, frequent users of Reddit will appreciate that the service is likely to unavailable for a few seconds multiple times a day.&lt;/p&gt;

&lt;p&gt;Retrieval from the cache using &lt;code&gt;get&lt;/code&gt; doesn&amp;rsquo;t use a hash lookup; instead Cache::Reddit iterates through all available posts on the subreddit until it finds a match. This yields 0(n) performance, which means that the &lt;code&gt;get&lt;/code&gt; function will get slower the more items are cached. This is not likely to be a performance bottleneck though, as typically a subreddit only holds 1,000 links before they are lost to the ether.&lt;/p&gt;

&lt;p&gt;The data is serialized and deserialized using &lt;a href=&#34;https://metacpan.org/pod/Storable&#34;&gt;Storable&lt;/a&gt;, which may open pose a security risk if the cached data is edited by a mod. Up to 40,000 characters of data can be stored at one time. Unless the subreddit permits both links and text posts, in which case the limit is 10,000 characters. But Cache::Reddit does boast 100% test coverage.&lt;/p&gt;

&lt;h3 id=&#34;looking-forwards:915623acbd42e6947b356ad2ec9d95c4&#34;&gt;Looking forwards&lt;/h3&gt;

&lt;p&gt;In the future I&amp;rsquo;d like to take advantage of Reddit&amp;rsquo;s voting system to implement a crude &lt;a href=&#34;https://en.wikipedia.org/wiki/Least_Recently_Used#LRU&#34;&gt;LRU&lt;/a&gt; cache. Comments could prove to be a powerful version control system. Patches welcome, the source code is on Instagram.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build a Twitter bot with Perl</title>
      <link>http://perltricks.com/article/154/2015/2/23/Build-a-Twitter-bot-with-Perl/</link>
      <pubDate>Mon, 23 Feb 2015 14:12:06 +0000</pubDate>
      
      <guid>http://perltricks.com/article/154/2015/2/23/Build-a-Twitter-bot-with-Perl/</guid>
      <description>

&lt;p&gt;Following on from last week&amp;rsquo;s Reddit bot &lt;a href=&#34;http://perltricks.com/article/151/2015/2/9/Build-a-Reddit-bot-with-Perl&#34;&gt;article&lt;/a&gt;, let&amp;rsquo;s look at how to build a Twitter bot using Perl. As you&amp;rsquo;d expect, Perl makes it easy to do, but before we get to the code, let&amp;rsquo;s talk about advantages.&lt;/p&gt;

&lt;p&gt;Adding tweet automation to an existing app can bring several benefits. Firstly it&amp;rsquo;s a time saver, allowing you to focus on other higher-value activities. Automation provides protection from manual transcription errors like misspelled words and broken urls. Automation also means it&amp;rsquo;s cheaper to increase your tweet volume and all else being equal, a higher tweet volume will lead to more Twitter followers. Sound good? Excellent, let&amp;rsquo;s get to the code then!&lt;/p&gt;

&lt;h3 id=&#34;writing-tweets:12c8fd35ec6bfe5464697c6b32eba8bb&#34;&gt;Writing tweets&lt;/h3&gt;

&lt;p&gt;The core code for writing tweets is very simple. I&amp;rsquo;m using the &lt;a href=&#34;https://metacpan.org/pod/Net::Twitter::Lite&#34;&gt;Net::Twitter::Lite&lt;/a&gt; distribution, which supports the latest version of the Twitter &lt;a href=&#34;https://dev.twitter.com/rest/public&#34;&gt;API&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use Net::Twitter::Lite::WithAPIv1_1;

sub tweet
{
  my ($text) = @_;

  my $twitter = Net::Twitter::Lite::WithAPIv1_1-&amp;gt;new(
    access_token_secret =&amp;gt; $ENV{TWITTER_ACCESS_SECRET},
    consumer_secret     =&amp;gt; $ENV{TWITTER_CONSUMER_SECRET},
    access_token        =&amp;gt; $ENV{TWITTER_ACCESS_TOKEN},
    consumer_key        =&amp;gt; $ENV{TWITTER_CONSUMER_KEY},
    user_agent          =&amp;gt; &#39;TwitterBotExample&#39;,
    ssl =&amp;gt; 1,
  );
  $twitter-&amp;gt;update($text);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code imports &lt;code&gt;Net::Twitter::Lite::WithAPIv1_1&lt;/code&gt; to use the new Twitter API. The subroutine &lt;code&gt;tweet&lt;/code&gt; takes some text as an argument. It then creates a new &lt;code&gt;Net::Twitter::Lite::WithAPIv1_1&lt;/code&gt; object, using environment vars as credentials. If you don&amp;rsquo;t have these credentials already, it&amp;rsquo;s free to register an application for your own Twitter account and &lt;a href=&#34;https://dev.twitter.com/oauth/overview/application-owner-access-tokens&#34;&gt;generate the tokens&lt;/a&gt;. Finally the subroutine calls the &lt;code&gt;update&lt;/code&gt; method to tweet the text.&lt;/p&gt;

&lt;p&gt;Now I can send one tweet by adding this line to my code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;tweet(&amp;quot;This is a computer speaking!&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;safety-first:12c8fd35ec6bfe5464697c6b32eba8bb&#34;&gt;Safety first&lt;/h3&gt;

&lt;p&gt;So far so good huh? However this code isn&amp;rsquo;t very safe. What if &lt;code&gt;$text&lt;/code&gt; is not provided as an argument, or our environment variables are not declared, or the call to Twitter fails? I&amp;rsquo;ll add some checks to handle these scenarios:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use Net::Twitter::Lite::WithAPIv1_1;
use Try::Tiny;

sub tweet
{
  my ($text) = @_;

  die &#39;tweet requires text as an argument&#39; unless $text;

  unless ($ENV{TWITTER_CONSUMER_KEY}
          &amp;amp;&amp;amp; $ENV{TWITTER_CONSUMER_SECRET}
          &amp;amp;&amp;amp; $ENV{TWITTER_ACCESS_TOKEN}
          &amp;amp;&amp;amp; $ENV{TWITTER_ACCESS_SECRET})
  {
    die &#39;Required Twitter Env vars are not all defined&#39;;
  }

  try
  {
    my $twitter = Net::Twitter::Lite::WithAPIv1_1-&amp;gt;new(
      access_token_secret =&amp;gt; $ENV{TWITTER_ACCESS_SECRET},
      consumer_secret     =&amp;gt; $ENV{TWITTER_CONSUMER_SECRET},
      access_token        =&amp;gt; $ENV{TWITTER_ACCESS_TOKEN},
      consumer_key        =&amp;gt; $ENV{TWITTER_CONSUMER_KEY},
      user_agent          =&amp;gt; &#39;TwitterBotExample&#39;,
      ssl =&amp;gt; 1,
    );
    $twitter-&amp;gt;update($text);
  }
  catch
  {
    die join(&#39; &#39;, &amp;quot;Error tweeting $text&amp;quot;,
                   $_-&amp;gt;code, $_-&amp;gt;message, $_-&amp;gt;error);
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code is largely the same as before, except now it checks for the required variables before processing. The code also imports &lt;a href=&#34;https://metacpan.org/pod/Try::Tiny&#34;&gt;Try::Tiny&lt;/a&gt; as I added a try/catch block around the twitter code. The catch block will activate if the Twitter interaction throws an exception. Because Net::Twitter::Lite throws structured exceptions, the catch block builds an exception string by extracting information from the structured exception, then calls &lt;code&gt;die&lt;/code&gt; itself.&lt;/p&gt;

&lt;p&gt;You might be wondering if it&amp;rsquo;s necessary to call &lt;code&gt;die&lt;/code&gt; at all. Can&amp;rsquo;t we just return &lt;code&gt;undef&lt;/code&gt; instead and keep our code running? The advantage of calling &lt;code&gt;die&lt;/code&gt; is that the caller of the &lt;code&gt;tweet&lt;/code&gt; subroutine is better placed to decide how to handle the issue, and so we defer that decision to them. If the calling code doesn&amp;rsquo;t handle &lt;code&gt;die&lt;/code&gt; correctly, we know the program will exit. But if we returned &lt;code&gt;undef&lt;/code&gt;, we would have no such assurances. This doesn&amp;rsquo;t mean however that the code &lt;em&gt;has&lt;/em&gt; to exit. Let&amp;rsquo;s assume I had hundreds of tweets to send out, maybe I just want to log the error somewhere and keep going:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;foreach my $text (@tweet_texts)
{
  try
  {
    tweet($text);
  }
  catch
  {
    log_error($_);
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I was printing a sequence of tweets, where ordering is important, I could still log the error but then call &lt;code&gt;die&lt;/code&gt; to exit the program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;foreach my $text (@sequence_of_texts)
{
  try
  {
    tweet($text);
  }
  catch
  {
    log_error($_);
    die $_; # exit the program
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;better-text-handling:12c8fd35ec6bfe5464697c6b32eba8bb&#34;&gt;Better text handling&lt;/h3&gt;

&lt;p&gt;So now the code is safer, how else can it be improved? One famous restriction is that a tweet cannot be longer than 140 characters. Right now if the &lt;code&gt;tweet()&lt;/code&gt; subroutine received a text string longer than 140 characters, the Twitter API would reject it, raise and exception and the code would die. I think we can do better than that.&lt;/p&gt;

&lt;p&gt;When I think about the contents of tweets that I send, I&amp;rsquo;m usually tweeting links to articles about Perl. Invariably they will include some text, a url and a hashtag. It&amp;rsquo;s useful to break these out into separate arguments to &lt;code&gt;tweet()&lt;/code&gt; because to make everything fit, you could truncate the text, but you wouldn&amp;rsquo;t want to truncate a url or hashtag as it might change the meaning and/or break the url.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use Net::Twitter::Lite::WithAPIv1_1;
use Try::Tiny;

sub tweet
{
  my ($text, $url, $hashtag) = @_;

  unless ($text &amp;amp;&amp;amp; $url &amp;amp;&amp;amp; $hashtag)
  {
    die &#39;tweet requires text, url and hashtag arguments&#39;;
  }

  unless ($ENV{TWITTER_CONSUMER_KEY}
          &amp;amp;&amp;amp; $ENV{TWITTER_CONSUMER_SECRET}
          &amp;amp;&amp;amp; $ENV{TWITTER_ACCESS_TOKEN}
          &amp;amp;&amp;amp; $ENV{TWITTER_ACCESS_SECRET})
  {
    die &#39;Required Twitter Env vars are not all defined&#39;;
  }

  # build tweet, max 140 chars
  my $tweet;
  
  if (length(&amp;quot;$text $hashtag&amp;quot;) &amp;lt; 118)
  {
    $tweet = &amp;quot;$text $url $hashtag&amp;quot;;
  }
  elsif (length($text) &amp;lt; 118)
  {
    $tweet = &amp;quot;$text $url&amp;quot;;
  }
  else # shorten text, drop the hashtag
  {
    $tweet = substr($text, 0, 113) . &amp;quot;... &amp;quot; . $url;
  }

  try
  {
    my $twitter = Net::Twitter::Lite::WithAPIv1_1-&amp;gt;new(
      access_token_secret =&amp;gt; $ENV{TWITTER_ACCESS_SECRET},
      consumer_secret     =&amp;gt; $ENV{TWITTER_CONSUMER_SECRET},
      access_token        =&amp;gt; $ENV{TWITTER_ACCESS_TOKEN},
      consumer_key        =&amp;gt; $ENV{TWITTER_CONSUMER_KEY},
      user_agent          =&amp;gt; &#39;TwitterBotExample&#39;,
      ssl =&amp;gt; 1,
    );
    $twitter-&amp;gt;update($tweet);
  }
  catch
  {
    die join(&#39; &#39;, &amp;quot;Error tweeting $text $url $hashtag&amp;quot;,
                   $_-&amp;gt;code, $_-&amp;gt;message, $_-&amp;gt;error);
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Twitter treats urls as having a length of 12 characters. Now the code checks the length of our arguments, truncating &lt;code&gt;$text&lt;/code&gt; if necessary. The hashtag will be included only if there is enough space.&lt;/p&gt;

&lt;p&gt;This code works for me, but you may want to do things a little differently. The Twitter credentials could be stored in a &lt;a href=&#34;http://perltricks.com/article/29/2013/9/17/How-to-Load-YAML-Config-Files&#34;&gt;configuration&lt;/a&gt; file, instead of environment variables. The &lt;code&gt;$hashtag&lt;/code&gt; argument could be an arrayref of hashtags, that are incrementally added to the tweet text, instead of a single text string which restricts it to an all-or-nothing basis.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build a Reddit bot with Perl</title>
      <link>http://perltricks.com/article/151/2015/2/9/Build-a-Reddit-bot-with-Perl/</link>
      <pubDate>Mon, 09 Feb 2015 13:41:04 +0000</pubDate>
      
      <guid>http://perltricks.com/article/151/2015/2/9/Build-a-Reddit-bot-with-Perl/</guid>
      <description>

&lt;p&gt;One of my goals for this year was to post more links to the Perl &lt;a href=&#34;http://www.reddit.com/r/perl&#34;&gt;subreddit&lt;/a&gt;. I&amp;rsquo;m usually good at linking to PerlTricks articles, but not so good at linking to other content. And that&amp;rsquo;s a shame because there are a lot of active Perl blogs out there (I know of at least 25-30).&lt;/p&gt;

&lt;p&gt;A busier Perl subreddit is good for the community; more links on /r/perl should lead to more visitors, and more activity on the subreddit and so on - a virtuous circle. So I built a bot to automate the posting of links. In this article I&amp;rsquo;m going to show you how I did it.&lt;/p&gt;

&lt;h3 id=&#34;reddit-api:f338286cb816fcc4501664bb4edd9fd0&#34;&gt;Reddit API&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need a Reddit account to use the API. I like to use &lt;a href=&#34;https://metacpan.org/pod/Reddit::Client&#34;&gt;Reddit::Client&lt;/a&gt; as it works well, has good documentation and maintains a session cache. This is a subroutine for posting links to Reddit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use warnings;
use strict;
use Reddit::Client;

sub post_reddit_link
{
    my ($title, $url, $subreddit) = @_; 

    my $reddit       = Reddit::Client-&amp;gt;new(
        session_file =&amp;gt; &#39;logs/session_data.json&#39;,
        user_agent   =&amp;gt; &#39;perly_bot/v0.01&#39;,
    );  

    unless ( $reddit-&amp;gt;is_logged_in ) { 
        $reddit-&amp;gt;login( $ENV{REDDIT_USERNAME}, 
                        $ENV{REDDIT_PASSWORD} );
        $reddit-&amp;gt;save_session();
    }   
    
    $reddit-&amp;gt;submit_link(
            subreddit =&amp;gt; $subreddit,
            title     =&amp;gt; $title,
            url       =&amp;gt; $url
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code should be fairly self-explanatory. The &lt;code&gt;post_reddit_link&lt;/code&gt; subroutine accepts three parameters: the subreddit to post to, the title of the post, and the URL of the link. It initializes a new Reddit::Client object, passing the path of the session file and the user agent string to use when calling the Reddit API. The session file is just a cache for storing a session cookie.&lt;/p&gt;

&lt;p&gt;Next, the subroutine checks if the &lt;code&gt;$reddit&lt;/code&gt; object has an active session or not, triggering a login request if necessary. I like to store credentials in environment variables: that way the code and any config files can still be hosted on a public repository, without risk of sharing your login details with anyone. The last bit of code calls &lt;code&gt;submit_link&lt;/code&gt; method to post the link to the Reddit API.&lt;/p&gt;

&lt;p&gt;This code will work in ideal scenarios, but what if something goes wrong? For example, Reddit imposes restrictions on the posting of links: the same link cannot be posted twice to the same subreddit, proxy domains are banned and links cannot be posted too frequently. In order to capture the error messages, I&amp;rsquo;m going to wrap the &lt;code&gt;submit_link&lt;/code&gt; method in a try/catch block.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use warnings;
use strict;
use Reddit::Client;
use Try::Tiny;
use Time::Piece;

open my $ERROR_LOG, &#39;&amp;gt;&amp;gt;&#39;, &#39;logs/error.log&#39; or die $!;

sub post_reddit_link
{
    my ($title, $url, $subreddit) = @_; 

    my $reddit       = Reddit::Client-&amp;gt;new(
        session_file =&amp;gt; &#39;logs/session_data.json&#39;,
        user_agent   =&amp;gt; &#39;perly_bot/v0.01&#39;,
    );  

    unless ( $reddit-&amp;gt;is_logged_in ) { 
        $reddit-&amp;gt;login( $ENV{REDDIT_USERNAME}, 
                        $ENV{REDDIT_PASSWORD} );
        $reddit-&amp;gt;save_session();
    }   
    
    try {
        $reddit-&amp;gt;submit_link(
            subreddit =&amp;gt; $subreddit,
            title     =&amp;gt; $title,
            url       =&amp;gt; $url
        );
    } catch {
        log_error(&amp;quot;Error posting $title $url $_&amp;quot;);
    };
}

sub log_error
{
    my $datetime = localtime;
    say $ERROR_LOG $datetime_now-&amp;gt;datetime . &amp;quot;\t$_[0]&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to the try/catch, I&amp;rsquo;ve added a &lt;code&gt;log_error&lt;/code&gt; subroutine which will write error messages to the error log.&lt;/p&gt;

&lt;h3 id=&#34;reading-blog-feeds:f338286cb816fcc4501664bb4edd9fd0&#34;&gt;Reading blog feeds&lt;/h3&gt;

&lt;p&gt;Now I have a subroutine for posting links to Reddit, I need a way to monitor blog feeds and post links to new articles. Most blogs provide feed data via RSS or atom data, for example &lt;a href=&#34;http://blogs.perl.org&#34;&gt;blogs.perl.org&lt;/a&gt; uses atom. I can monitor this feed using &lt;a href=&#34;https://metacpan.org/pod/HTTP::Tiny&#34;&gt;HTTP::Tiny&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/XML::Atom::Client&#34;&gt;XML::Atom::Client&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use XML::Atom::Client;
use HTTP::Tiny;

sub check_feed
{
    my ($url) = @_;

    my $ua = HTTP::Tiny-&amp;gt;new;
    my $response = $ua-&amp;gt;get($url);
    if ( $response-&amp;gt;{success} )
    {
        my $posts = 
          XML::Atom::Feed-&amp;gt;new( Stream =&amp;gt; \$response-&amp;gt;{content} );

        foreach my $post ( $posts-&amp;gt;entries )
        {
            post_reddit_link(
                $post-&amp;gt;title,
                $post-&amp;gt;link-&amp;gt;href,
                &#39;perl&#39;
            );
        }
    }
    else
    {
        log_error(
&amp;quot;Error requesting $url. $response-&amp;gt;{status} $response-&amp;gt;{reason}&amp;quot;
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code declares a subroutine called &lt;code&gt;check_feed&lt;/code&gt; which accepts a URL as parameter. It fetches the URL content using HTTP::Tiny, and if successful, loops through every blog post in an atom feed, calling &lt;code&gt;post_reddit_link&lt;/code&gt; on each post. As it stands, this code is going to cause problems. We only want to post relevant and new content to the Perl subreddit, but this code will post a link for every blog post returned by the feed URL.&lt;/p&gt;

&lt;p&gt;To check for relevant content, I can use a regex to match against keywords. If the text contains words like &amp;ldquo;Perl&amp;rdquo; or &amp;ldquo;CPAN&amp;rdquo;, I assume it&amp;rsquo;s Perl related. This is the regex:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#  must contain a Perl keyword to be considered relevant
my $looks_perly = qr/\b(?:perl|cpan|cpanminus|moose|metacpan|modules?)\b/i;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To filter out stale content, I need to set a threshold for how long posts should be considered fresh. I can then subtract the publication date of the blog post from the current datetime to see if the publication date exceeds my threshold or not. I&amp;rsquo;m going to use 24 hours as my threshold:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;
use Time::Seconds;

my $datetime_post = 
  Time::Piece-&amp;gt;strptime($post-&amp;gt;published, &#39;%Y-%m-%dT%H:%M:%SZ&#39;);
my $datetime_now = localtime;

if ( $datetime_post &amp;gt; $datetime_now - ONE_DAY )
{
   ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code uses the &lt;code&gt;strptime&lt;/code&gt; function in Time::Piece to extract the publication datetime of the post. It then compares the datetime of the post with the current datetime minus 24 hours (&amp;ldquo;ONE_DAY&amp;rdquo; is a constant for 24 hours that is exported by Time::Seconds).&lt;/p&gt;

&lt;h3 id=&#34;wrap-up:f338286cb816fcc4501664bb4edd9fd0&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;Putting it all together, the code looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use warnings;
use strict;
use Reddit::Client;
use Try::Tiny;
use Time::Piece;
use Time::Seconds;
use XML::Atom::Client;
use HTTP::Tiny;

open my $ERROR_LOG, &#39;&amp;gt;&amp;gt;&#39;, &#39;logs/error.log&#39; or die $!;

#  must contain a Perl keyword to be considered relevant
my $looks_perly = qr/\b(?:perl|cpan|cpanminus|moose|metacpan|modules?)\b/i;

# post links for new posts on blogs.perl.org
check_feed(&#39;http://blogs.perl.org/atom.xml&#39;);

sub post_reddit_link
{
    my ($title, $url, $subreddit) = @_;

    my $reddit       = Reddit::Client-&amp;gt;new(
        session_file =&amp;gt; &#39;logs/session_data.json&#39;,
        user_agent   =&amp;gt; &#39;perly_bot/v0.01&#39;,
    );

    unless ( $reddit-&amp;gt;is_logged_in ) {
        $reddit-&amp;gt;login( $ENV{REDDIT_USERNAME},
                        $ENV{REDDIT_PASSWORD} );
        $reddit-&amp;gt;save_session();
    }

    try {
        $reddit-&amp;gt;submit_link(
            subreddit =&amp;gt; $subreddit,
            title     =&amp;gt; $title,
            url       =&amp;gt; $url
        );
    } catch {
        log_error(&amp;quot;Error posting $title $url $_&amp;quot;);
    };
}

sub log_error
{
    my $datetime = localtime;
    say $ERROR_LOG $datetime-&amp;gt;datetime . &amp;quot;\t$_[0]&amp;quot;;
}

sub check_feed
{
    my ($url) = @_;

    my $ua = HTTP::Tiny-&amp;gt;new;
    my $response = $ua-&amp;gt;get($url);

    if ( $response-&amp;gt;{success} )
    {
        my $posts =
          XML::Atom::Feed-&amp;gt;new( Stream =&amp;gt; \$response-&amp;gt;{content} );

        foreach my $post ( $posts-&amp;gt;entries )
        {
            my $datetime_post =
              Time::Piece-&amp;gt;strptime($post-&amp;gt;published, &#39;%Y-%m-%dT%H:%M:%SZ&#39;);
            my $datetime_now = localtime;

            # if fresh post and contains Perl keyword
            if (   $datetime_post &amp;gt; $datetime_now - ONE_DAY
                &amp;amp;&amp;amp; $post-&amp;gt;summary =~ $looks_perly)
            {
                post_reddit_link(
                    $post-&amp;gt;title,
                    $post-&amp;gt;link-&amp;gt;href,
                    &#39;perl&#39;
                );
            }
        }
    }
    else
    {
        log_error(
&amp;quot;Error requesting $url. $response-&amp;gt;{status} $response-&amp;gt;{reason}&amp;quot;
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When run, this script will check blogs.perl.org for new posts, and submit them to /r/perl.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot more that could be done with this script: for instance it only supports atom feeds, but many blog feeds use RSS. The URLs to check must be hard coded into the script - it would be better to take them from a configurable list. Finally, there is no URL caching, so running this script twice in 24 hours will lead to it attempting to post the same links to Reddit twice. For an extended example that addresses these issues and more, check out my Perly-Bot GitHub &lt;a href=&#34;https://github.com/dnmfarrell/Perly-Bot&#34;&gt;repo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

