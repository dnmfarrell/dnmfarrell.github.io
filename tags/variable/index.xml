<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Variable on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/variable/</link>
    <description>Recent content in Variable on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Mar 2014 18:03:49 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/variable/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Perl references: create, dereference and debug with confidence</title>
      <link>https://dnmfarrell.github.io/article/80/2014/3/27/Perl-references--create--dereference-and-debug-with-confidence/</link>
      <pubDate>Thu, 27 Mar 2014 18:03:49 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/80/2014/3/27/Perl-references--create--dereference-and-debug-with-confidence/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Learning Perl&amp;rsquo;s references is a rite-of-passage for Perl programmers. Until you &amp;ldquo;get&amp;rdquo; references, large parts of the language will remain alien to you. References have their own special syntax and rules, which can make them seem strange and hard to understand. The good news is that the core features of references are easy to learn and use. This article describes the main ways to use references and some handy tools to get you out of trouble if you run into it. So even if you&amp;rsquo;re not completely comfortable with references, you&amp;rsquo;ll be able to write code that works.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-are-references:6a29add5aea08a862cc77cb68480c39b&#34;&gt;What are references?&lt;/h3&gt;

&lt;p&gt;A reference is a scalar variable whose value is a pointer to another Perl variable. If you were to print out a reference, you would see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;SCALAR(0x509ea0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value looks like a memory address, bu it&amp;rsquo;s actually an internal key for Perl, which points to another variable. A reference can refer to any of Perl&amp;rsquo;s variable types: scalars, arrays, hashes, filehandles, subroutines and globs. References are useful because they:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;save memory - why create two copies of the same variable when you only need one?&lt;/li&gt;
&lt;li&gt;enable subroutines to return values that are not in a scalar or list format. (the reference is a scalar pointer to values that can be in any kind of format).&lt;/li&gt;
&lt;li&gt;can encapsulate complex data structures comprising of nested arrays, hashes, scalars and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Accessing the value that a reference points to is called &amp;ldquo;dereferencing&amp;rdquo;. When you dereference a reference, instead of returning the value of it&amp;rsquo;s pointer, Perl will fetch the actual variable that the reference is pointing to. The need to dereference a reference variable in order to use it&amp;rsquo;s underlying value is the main disadvantage of references; direct variable access will always be faster.&lt;/p&gt;

&lt;h3 id=&#34;declaring-and-accessing-references:6a29add5aea08a862cc77cb68480c39b&#34;&gt;Declaring and accessing references&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re going to focus on array and hash references as those are the most commonly encountered reference types. Working them is easy. For arrays, use square brackets instead of parentheses to declare, and the arrow operator (&amp;ldquo;-&amp;gt;&amp;rdquo;) to dereference:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @array       = (&#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39;);
my $array_ref   = [&#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39;];

print $array[1];       #banana
print $array_ref-&amp;gt;[1]; #banana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For hashes, use curly braces instead of parentheses to declare, and the same arrow operator to dereference:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %hash        = (one =&amp;gt; 1, two =&amp;gt; 2, three =&amp;gt; 3);
my $hash_ref    = {one =&amp;gt; 1, two =&amp;gt; 2, three =&amp;gt; 3};

print $hash{three};       #3
print $hash_ref-&amp;gt;{three}; #3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the coolest things about references is the ability to create complex data structures to hold any kind of data you need. Let&amp;rsquo;s look at a more realistic data structure for a fictional customer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $customer = { name   =&amp;gt; &#39;Mr Smith&#39;,
                 dob    =&amp;gt; &#39;01/18/1987&#39;,
                 phones =&amp;gt; { home   =&amp;gt; &#39;212-608-5787&#39;,
                             work   =&amp;gt; &#39;347-558-0352&#39;},
                 last_3_purchase_values =&amp;gt; [ 78.92, 98.36, 131.00 ],
                 addresses =&amp;gt; [ {   street =&amp;gt; &#39;37 Allright Ave&#39;,
                                    zip    =&amp;gt; &#39;11025&#39;,
                                    city   =&amp;gt; &#39;New York&#39;,
                                    state  =&amp;gt; &#39;NY&#39;,
                                }, 
                                {   street =&amp;gt; &#39;23 Broadway&#39;,
                                    zip    =&amp;gt; &#39;10125&#39;,
                                    city   =&amp;gt; &#39;New York&#39;,
                                    state  =&amp;gt; &#39;NY&#39;,
                                },
                               ],
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$customer is a hash ref with 5 keys. Two of the keys (&amp;ldquo;name&amp;rdquo; and &amp;ldquo;dob&amp;rdquo;) have the usual scalar values. The other key values though are nested references: &amp;ldquo;phones&amp;rdquo; is a nested hashref, and &amp;ldquo;last_3_purchase_values&amp;rdquo; and &amp;ldquo;addresses&amp;rdquo; are arrayrefs. So how would you access any of the values in $customer data structure? Check this out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;print $customer-&amp;gt;{name}; # Mr Smith
print $customer-&amp;gt;{phones}{home}; # 212-608-5787
print $customer-&amp;gt;{last_3_purchase_values}[0]; # 78.92
print $customer-&amp;gt;{addresses}[1]{street}; # 23 Broadway
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To dereference a value in $customer, we start by using the arrow operator. From there, we add the required key or index to access the next level of data. The main challenge when working with references is to understand the datatype you are dereferencing: if it is an array, you&amp;rsquo;ll need to use the array accessor syntax &amp;ldquo;[#]&amp;ldquo;, whereas if it&amp;rsquo;s a hash, you need to pass the key in curly braces &amp;ldquo;{key_value}&amp;ldquo;.&lt;/p&gt;

&lt;h3 id=&#34;working-with-arrayrefs:6a29add5aea08a862cc77cb68480c39b&#34;&gt;Working with arrayrefs&lt;/h3&gt;

&lt;p&gt;Sometimes you&amp;rsquo;ll need to loop through an arrayref. The syntax for this is the same as an ordinary array, except that you need to dereference the entire array, rather than a single element of it. This is done by enclosing the arrayref in with a dereferencing array block: &amp;ldquo;@{ $array_ref }&amp;ldquo;. Let look at some examples using $customer&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature &#39;say&#39;;

#iterate through a nested array
foreach my $purchase_value (@{ $customer-&amp;gt;{last_3_purchase_values} }) {
    say $purchase_value;
}

#iterate through a nested array and dereference and print the street
foreach my $address (@{ $customer-&amp;gt;{addresses} }) {
    say $address-&amp;gt;{street};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arrays support other operations like push and shift. In these cases you will need a dereferencing array block too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;push @{$customer-&amp;gt;{addresses}}, { street =&amp;gt; &#39;157 Van Cordant Street&#39;,
                                  zip    =&amp;gt; &#39;10008&#39;,
                                  city   =&amp;gt; &#39;New York&#39;,
                          state  =&amp;gt; &#39;NY&#39;,
                                 };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have pushed a new address on to the &amp;ldquo;addresses&amp;rdquo; arrayref. We used a dereferencing array block to dereference &amp;ldquo;addresses&amp;rdquo; so that we could perform a push on it.&lt;/p&gt;

&lt;h3 id=&#34;working-with-hashrefs:6a29add5aea08a862cc77cb68480c39b&#34;&gt;Working with hashrefs&lt;/h3&gt;

&lt;p&gt;Dereferencing blocks can be used for hash operations too. Probably the most common operation is looping through the keys of the hash, using the &amp;ldquo;keys&amp;rdquo; function. In this case, you&amp;rsquo;ll need to use a dereferencing hash block &amp;ldquo;%{ $hash_ref }&amp;ldquo;. Let&amp;rsquo;s look at an example using $customer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature &#39;say&#39;;

# iterate through a nested hash
foreach my $key (keys %{ $customer-&amp;gt;{phones} }) {
    say $customer-&amp;gt;{phones}{$key};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;troubleshooting-references:6a29add5aea08a862cc77cb68480c39b&#34;&gt;Troubleshooting References&lt;/h3&gt;

&lt;p&gt;References can be harder to debug than normal variables as you need to dereference the reference in order to see what variable it is pointing to. Imagine you wanted to print out the contents of $customer. This doesn&amp;rsquo;t work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;print $customer; # HASH(0x2683b30)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fortunately you can use Data::Dumper&amp;rsquo;s &amp;ldquo;Dumper&amp;rdquo; function to dereference and pretty-print a reference for you:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Data::Dumper;

print Dumper($customer);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Would print:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$VAR1 = {
          &#39;last_3_purchase_values&#39; =&amp;gt; [
                                        &#39;78.92&#39;,
                                        &#39;98.36&#39;,
                                        &#39;131&#39;
                                      ],
          &#39;dob&#39; =&amp;gt; &#39;01/18/1987&#39;,
          &#39;addresses&#39; =&amp;gt; [
                           {
                             &#39;city&#39; =&amp;gt; &#39;New York&#39;,
                             &#39;zip&#39; =&amp;gt; &#39;11025&#39;,
                             &#39;street&#39; =&amp;gt; &#39;37 Allright Ave&#39;,
                             &#39;state&#39; =&amp;gt; &#39;NY&#39;
                           },
                           {
                             &#39;city&#39; =&amp;gt; &#39;New York&#39;,
                             &#39;zip&#39; =&amp;gt; &#39;10125&#39;,
                             &#39;street&#39; =&amp;gt; &#39;23 Broadway&#39;,
                             &#39;state&#39; =&amp;gt; &#39;NY&#39;
                           },
                           {
                             &#39;city&#39; =&amp;gt; &#39;New York&#39;,
                             &#39;zip&#39; =&amp;gt; &#39;10008&#39;,
                             &#39;street&#39; =&amp;gt; &#39;157 Van Cordant Street&#39;,
                             &#39;state&#39; =&amp;gt; &#39;NY&#39;
                           }
                         ],
          &#39;name&#39; =&amp;gt; &#39;Mr Smith&#39;,
          &#39;phones&#39; =&amp;gt; {
                        &#39;work&#39; =&amp;gt; &#39;347-558-0352&#39;,
                        &#39;home&#39; =&amp;gt; &#39;212-608-5787&#39;
                      }
        };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another useful tool is the Perl&amp;rsquo;s &lt;a href=&#34;http://perldoc.perl.org/functions/ref.html&#34;&gt;ref&lt;/a&gt; function. Just pass the reference variable into ref, and it will return which variable type the reference points to.&lt;/p&gt;

&lt;h3 id=&#34;creating-references-from-variables:6a29add5aea08a862cc77cb68480c39b&#34;&gt;Creating references from variables&lt;/h3&gt;

&lt;p&gt;To create a reference to an existing variable, use the backslash operator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $array_ref   = \@array;
my $hash_ref    = \%hash;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The backslash operator often comes into play when working within a subroutine. For instance consider these three subs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# example 1 - processor &amp;amp; memory inefficient
sub return_array {
    my @array = (1, 2, 3);
    foreach my $element (@array) {
        calculate($element);
    }
    return @array;
}

# example 2 - processor inefficient
sub return_array {
    my $array = [1, 2, 3];
    foreach my $element (@$array) {
        calculate($element);
    }
    return $array;
}

# example 3 - best option
sub return_array {
    my @array = (1, 2, 3);
    foreach my $element (@array) {
        calculate($element);
    }
    return \@array;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of these subs are trying to do the same thing - declare an array, loop through it and then return it. Example 1 will return a list of the the array&amp;rsquo;s elements. This is inefficient as the list comprises of scalar copies of the original array&amp;rsquo;s elements, which means: Perl makes the copies, returns them and then throws away the original array when it goes out of scope.&lt;/p&gt;

&lt;p&gt;Example 2&amp;rsquo;s main drawback is that by starting with a reference, Perl has to dereference the array in order to loop though it, which is a waste of processing. Example 3 has none of these disadvantages, as it begins with an array, loops through it and then returns a reference to the array. This is a popular Perl programming pattern.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:6a29add5aea08a862cc77cb68480c39b&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If references were a mystery to you before, hopefully this article helps to kickstart you into using them with confidence. Are you thirsty for more references? There&amp;rsquo;s a lot more to them than described here. Check out Perl&amp;rsquo;s official documentation, perldoc which has a &lt;a href=&#34;http://perldoc.perl.org/perlreftut.html&#34;&gt;tutorial&lt;/a&gt; and more &lt;a href=&#34;http://perldoc.perl.org/perlref.html&#34;&gt;detailed guide&lt;/a&gt;. &lt;a href=&#34;http://www.amazon.com/gp/product/1449393098/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1449393098&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;Intermediate Perl&lt;/a&gt; is fantastic book that has over 100 pages on references (affiliate link).&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F80%2F2014%2F3%2F27%2FPerl-references-create-dereference-and-debug-with-confidence&amp;amp;text=Perl+references%3A+create%2C+dereference+and+debug+with+confidence&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F80%2F2014%2F3%2F27%2FPerl-references-create-dereference-and-debug-with-confidence&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl hash basics: create, update, loop, delete and sort</title>
      <link>https://dnmfarrell.github.io/article/27/2013/6/16/Perl-hash-basics--create--update--loop--delete-and-sort/</link>
      <pubDate>Sun, 16 Jun 2013 21:32:18 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/27/2013/6/16/Perl-hash-basics--create--update--loop--delete-and-sort/</guid>
      <description>

&lt;p&gt;Hashes are one of Perl&amp;rsquo;s core data types. This article describes the main functions and syntax rules for for working with hashes in Perl.&lt;/p&gt;

&lt;h3 id=&#34;declaration-and-initialization:bc250e2ef05172708bd06f3d4b57f148&#34;&gt;Declaration and initialization&lt;/h3&gt;

&lt;p&gt;A hash is an unsorted collection of key value pairs. Within a hash a key is a unique string that references a particular value. A hash can be modified once initialized. Because a hash is unsorted, if it&amp;rsquo;s contents are required in a particular order then they must be sorted on output. Perl uses the &amp;lsquo;%&amp;rsquo; symbol as the variable sigil for hashes. This command will &lt;strong&gt;declare an empty hash&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %hash;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similar to the syntax for arrays, hashes can also be declared using a list of comma separated values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %weekly_temperature = (&#39;monday&#39;, 65, &#39;tuesday&#39;, 68, &#39;wednesday&#39;, 71, &#39;thursday&#39;, 53, &#39;friday&#39;, 60);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above, Perl takes the first entry in the list as a key (&amp;lsquo;monday&amp;rsquo;), and the second entry as that key&amp;rsquo;s value (65). The third entry in the list (&amp;lsquo;tuesday&amp;rsquo;) would then be declared as a key, and the fourth entry (68) as its value and so on.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&amp;lsquo;fat comma&amp;rsquo;&lt;/strong&gt; operator looks like an arrow (&amp;lsquo;=&amp;gt;&amp;rsquo;) and allows the declaration of key value pairs instead of using a comma. This makes for cleaner and more readable code. Additionally there is no need to quote strings for keys when using the fat comma. Using the fat comma, the same declaration of %weekly_temperature would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %weekly_temperature = (
    monday    =&amp;gt; 65, 
    tuesday   =&amp;gt; 68,
    wednesday =&amp;gt; 71, 
    thursday  =&amp;gt; 53, 
    friday    =&amp;gt; 60,
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;access-a-value:bc250e2ef05172708bd06f3d4b57f148&#34;&gt;Access a value&lt;/h3&gt;

&lt;p&gt;To access the value of a key value pair, Perl requires the key encased in curly brackets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %weekly_temperature = (
    monday    =&amp;gt; 65, 
    tuesday   =&amp;gt; 68,
    wednesday =&amp;gt; 71, 
    thursday  =&amp;gt; 53, 
    friday    =&amp;gt; 60,
);
my $monday_temp = $weekly_temperature{monday};
#65
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that strings do not need to be quoted when placed between the curly brackets for hash keys and that the scalar sigil (&amp;lsquo;$&amp;rsquo;) is used when accessing a single scalar value instead of (&amp;lsquo;%&amp;rsquo;).&lt;/p&gt;

&lt;h3 id=&#34;take-a-slice-of-a-hash:bc250e2ef05172708bd06f3d4b57f148&#34;&gt;Take a slice of a hash&lt;/h3&gt;

&lt;p&gt;A slice is a list of values. In Perl a slice can be read into an array, assigned to individual scalars, or used as an input to a function or subroutine. Slices are useful when you only want to extract a handful of values from a hash. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %weekly_temperature = (
    monday    =&amp;gt; 65,
    tuesday   =&amp;gt; 68,
    wednesday =&amp;gt; 71,
    thursday  =&amp;gt; 53,
    friday    =&amp;gt; 60,
);

my ($tuesday_temp, $friday_temp) = @weekly_temperature{(&#39;tuesday&#39;, &#39;friday&#39;)};

print &amp;quot;$tuesday_temp\n&amp;quot;;
#68

print &amp;quot;$friday_temp\n&amp;quot;;
#60
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above declares the &amp;lsquo;weekly_temperature&amp;rsquo; hash as usual. What&amp;rsquo;s unusual here is that to get the slice of values, the array sigil (&amp;lsquo;@&amp;rsquo;) is used by pre-pending it to the hash variable name. With this change the has will then lookup a list of values.&lt;/p&gt;

&lt;h3 id=&#34;access-all-values-with-the-values-function:bc250e2ef05172708bd06f3d4b57f148&#34;&gt;Access all values with the values function&lt;/h3&gt;

&lt;p&gt;The values function returns a list of the values contained in a hash. It&amp;rsquo;s possible to loop through the list of returned values and perform operations on them (e.g. print). For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %weekly_temperature = (
    monday    =&amp;gt; 65, 
    tuesday   =&amp;gt; 68,
    wednesday =&amp;gt; 71, 
    thursday  =&amp;gt; 53, 
    friday    =&amp;gt; 60,
);
foreach my $value (values %weekly_temperature){
    print $value . &amp;quot;\n&amp;quot;;
}
#71 
#53 
#60
#65 
#68
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A couple more tips when working with key value pairs of a hash: the code is more readable if you vertically align the fat comma (&amp;lsquo;=&amp;gt;&amp;rsquo;) operators and unlike C, Perl allows the last element to have a trailing comma, which makes it easier to add elements later without generating a compile error.&lt;/p&gt;

&lt;h3 id=&#34;access-all-keys-with-the-keys-function:bc250e2ef05172708bd06f3d4b57f148&#34;&gt;Access all keys with the keys function&lt;/h3&gt;

&lt;p&gt;The keys function returns a list of the keys contained in a hash. A common way to access all the key value pairs of a hash is to use loop through the list returned by the keys function. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %consultant_salaries = (
    associate        =&amp;gt; 25000,
    senior_associate =&amp;gt; 40000,
    manager          =&amp;gt; 80000,
    director         =&amp;gt; 120000,
    partner          =&amp;gt; 250000,
);
foreach my $grade (keys %consultant_salaries) {
    print &amp;quot;$grade: $consultant_salaries{$grade}\n&amp;quot;;
}
#associate: 25000
#partner: 250000
#director: 120000
#manager: 80000
#senior_associate: 40000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above code we used the keys function to return a list of keys, looped though the list with foreach, and then printed the key and the value of each pair. Note that the print order of the pairs is different from intialization - that&amp;rsquo;s because hashes store their pairs in a random internal order. Also we used an interpreted quoted string using speech marks (&amp;ldquo;). This allows us to mix variables with plain text and escape characters like newline (&amp;rsquo;\n&amp;rsquo;) for convenient printing.&lt;/p&gt;

&lt;h3 id=&#34;access-all-key-value-pairs-with-the-each-function:bc250e2ef05172708bd06f3d4b57f148&#34;&gt;Access all key value pairs with the each function&lt;/h3&gt;

&lt;p&gt;The each function returns all keys and values of a hash, one at a time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %consultant_salaries = (
    associate        =&amp;gt; 25000,
    senior_associate =&amp;gt; 40000,
    manager          =&amp;gt; 80000,
    director         =&amp;gt; 120000,
    partner          =&amp;gt; 250000,
);
while (my ($key, $value) = each %consultant_salaries) {
    print &amp;quot;$key: $value\n&amp;quot;;
}
#associate: 25000
#partner: 250000
#director: 120000
#manager: 80000
#senior_associate: 40000
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-a-new-key-value-pair:bc250e2ef05172708bd06f3d4b57f148&#34;&gt;Add a new key value pair&lt;/h3&gt;

&lt;p&gt;To add a new pair to a hash, use this syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# declare the hash as usual
my %fruit_pairs = (apples =&amp;gt; &#39;oranges&#39;);

# add a new key value pair
$fruit_pairs{oranges} = &#39;lemons&#39;;

# prove the new pair exists by printing the hash
while (my ($key, $value) = each %fruit_pairs) {
    print &amp;quot;$key: $value\n&amp;quot;;
}
#apples: oranges
#oranges: lemons
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;delete-a-key-value-pair:bc250e2ef05172708bd06f3d4b57f148&#34;&gt;Delete a key value pair&lt;/h3&gt;

&lt;p&gt;To remove a key value pair from a hash use the delete function. Delete requires the key of the pair in order to delete it from the hash:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %fruit_pairs = (apples =&amp;gt; &#39;oranges&#39;);

# use the delete function with the pair&#39;s key
delete $fruit_pairs{apples};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;update-a-value-of-a-pair:bc250e2ef05172708bd06f3d4b57f148&#34;&gt;Update a value of a pair&lt;/h3&gt;

&lt;p&gt;To update the value of a pair, simply assign it a new value using the same syntax as to add a new key value pair. The difference here is that the key already exists in the hash:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %fruit_pairs = (apples =&amp;gt; &#39;oranges&#39;);
# assign a new value to the pair
$fruit_pairs{apples} = &#39;bananas&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;empty-a-hash:bc250e2ef05172708bd06f3d4b57f148&#34;&gt;Empty a hash&lt;/h3&gt;

&lt;p&gt;To empty a hash, re-declare it with no members:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %fruit_pairs = (apples =&amp;gt; &#39;oranges&#39;);

# empty the hash
%fruit_pairs = ();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;increment-decrement-a-value:bc250e2ef05172708bd06f3d4b57f148&#34;&gt;increment / decrement a value&lt;/h3&gt;

&lt;p&gt;Quick answer: use the same syntax for assigning / updating a value with the increment or decrement operator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %common_word_count = (
    the =&amp;gt; 54,
    and =&amp;gt; 98,
    a   =&amp;gt; 29,
);

# increment the value of the pair with the key &#39;the&#39; by 1
$common_word_count{the}++;

# decrement the key value pair with the key &#39;a&#39;
$common_word_count{a}--;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sort-a-hash-alphabetically:bc250e2ef05172708bd06f3d4b57f148&#34;&gt;Sort a hash alphabetically&lt;/h3&gt;

&lt;p&gt;Although the internal ordering of a hash is random, it is possible to sort the output from a hash into a more useful sequence. Perl provides the sort function to (obviously) sort lists of data. By default it sorts alphabetically:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %common_word_count = (
    the =&amp;gt; 54,
    and =&amp;gt; 98,
    a   =&amp;gt; 29,
);
# use sort with keys to sort the keys of a hash
foreach my $key (sort keys %common_word_count){
   print &amp;quot;$key\n&amp;quot;;
}
#a
#and
#the

# to sort values use keys to lookup the values and a compare block to compare them
foreach my $key (sort {$common_word_count{$a} cmp $common_word_count{$b}} keys %common_word_count){
       print &amp;quot;$key: $common_word_count{$key}\n&amp;quot;;
}
#a: 29
#the: 54
#and: 98
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s review the code above. The compare block receives the hash keys using the keys function. It then compares the values of each key using $a and $b as special variables to lookup and compare the values of the two keys. This sorted list of keys is then passed to the foreach command and looped through as usual. Note how the order is printed in value order - however it is still alphabetical ordering.&lt;/p&gt;

&lt;h3 id=&#34;sort-a-hash-numerically:bc250e2ef05172708bd06f3d4b57f148&#34;&gt;Sort a hash numerically&lt;/h3&gt;

&lt;p&gt;Numerically sorting a hash requires using a compare block as in the previous example, but substituting the &amp;lsquo;cmp&amp;rsquo; operator for the numerical comparison operator (&amp;rsquo;&amp;lt;=&amp;gt;&amp;rsquo;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %common_word_count = (
            the =&amp;gt; 54,
            and =&amp;gt; 98,
            a   =&amp;gt; 29,
);

foreach my $key (sort {$common_word_count{$a} &amp;lt;=&amp;gt; $common_word_count{$b}} keys %common_word_count) {
    print &amp;quot;$key: $common_word_count{$key}\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;get-the-hash-size:bc250e2ef05172708bd06f3d4b57f148&#34;&gt;Get the hash size&lt;/h3&gt;

&lt;p&gt;To get the size of a hash, simply call the keys function in a scalar context. This can be done by assigning the return value of keys to a scalar variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %common_word_count = (
            the =&amp;gt; 54,
            and =&amp;gt; 98,
            a   =&amp;gt; 29,
);

my $count =  keys %common_word_count;
print &amp;quot;$count\n&amp;quot;;
#3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Perl tokens you should know</title>
      <link>https://dnmfarrell.github.io/article/24/2013/5/11/Perl-tokens-you-should-know/</link>
      <pubDate>Sat, 11 May 2013 11:17:52 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/24/2013/5/11/Perl-tokens-you-should-know/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Perl has many global variables, a few of which are stored in a special literal format as: __NAME__. It&amp;rsquo;s good to be aware of these special literals, (aka tokens) as they appear frequently in Perl code and provide useful functionality.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;package:312653f903a23a965a58cfb9108566a6&#34;&gt;PACKAGE&lt;/h3&gt;

&lt;p&gt;This token contains the name of the package which is declared at the top of any Perl module e.g:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Perltricks::Example;
use strict;
use warnings;

sub print_package_name {
    print __PACKAGE__ . &amp;quot;\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, the subroutine &amp;lsquo;print_package_name&amp;rsquo; would print &amp;lsquo;Perltricks::Example&amp;rsquo;. __PACKAGE__ is one of the most useful (and frequently used) tokens, as it has applications in code generation and class inheritance, where the programmer does not know the name of the package ahead of time. In a Perl program (.pl file) __PACKAGE__ returns &amp;lsquo;main&amp;rsquo;.&lt;/p&gt;

&lt;h3 id=&#34;line-file:312653f903a23a965a58cfb9108566a6&#34;&gt;LINE, FILE&lt;/h3&gt;

&lt;p&gt;The __LINE__ token returns the value of the current line number. __FILE__ provides the filename. Similar to __PACKAGE__ these tokens can be used with string and numeric functions as appropriate (such as print).&lt;/p&gt;

&lt;h3 id=&#34;end-data:312653f903a23a965a58cfb9108566a6&#34;&gt;END, DATA&lt;/h3&gt;

&lt;p&gt;__END__ defines the end of the Perl code in the file. Any text that appears after __END__ is ignored by the Perl compiler. Perl programmers often put module documentation after an __END__ token. Even though POD markup language is ignored by the Perl compiler, using __END__ provides the guarantee that even if the POD markup contains a syntax error, the Perl compiler will not scan that part of the file. A clear example of that can be seen in the &lt;a href=&#34;https://metacpan.org/source/GAAS/libwww-perl-6.05/lib/LWP.pm&#34;&gt;LWP source code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;__DATA__ is similar to __END__ in that it defines the end of the Perl code in any file. However, any text that appears on the line immediately after __DATA__ until the end of the file, is read into the filehandle PACKAGENAME::DATA, (where package name is the name of the package that __DATA__ appeared in). The documentation for &lt;a href=&#34;http://perldoc.perl.org/SelfLoader.html&#34;&gt;SelfLoader&lt;/a&gt; discusses __DATA__ and __END__ in more detail.&lt;/p&gt;

&lt;h3 id=&#34;sub:312653f903a23a965a58cfb9108566a6&#34;&gt;SUB&lt;/h3&gt;

&lt;p&gt;__SUB__ returns a reference to the current subroutine. It&amp;rsquo;s available in Perl 5.16 and higher via the &amp;lsquo;use feature&amp;rsquo; pragma.&lt;/p&gt;

&lt;p&gt;*This article was updated on 15th May 2013 including corrections to information relating to __SUB__. Thanks to &lt;strong&gt;Jochen Hayek&lt;/strong&gt; for the correction.*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dynamic variable names with a dereferencing block</title>
      <link>https://dnmfarrell.github.io/article/23/2013/5/2/Dynamic-variable-names-with-a-dereferencing-block/</link>
      <pubDate>Thu, 02 May 2013 20:16:55 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/23/2013/5/2/Dynamic-variable-names-with-a-dereferencing-block/</guid>
      <description>&lt;p&gt;Perl is remarkably flexible and allows you to achieve all kinds of wizardry with the language. One example of this is using a dereferencing block to use a scalar value as a variable name. This allows you to use variables with dynamic names.&lt;/p&gt;

&lt;p&gt;An interesting example of this can be seen in &lt;a href=&#34;https://metacpan.org/source/NRG/Nginx-ParseLog-1.01/lib/Nginx/ParseLog.pm&#34;&gt;Nginx::ParseLog&lt;/a&gt;, I&amp;rsquo;ve reproduced the relevant code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;if ( $log_string =~ m/^($ip)\s-\s (.*?)\s         \[(.*?)\]\s  &amp;quot;(.*?)&amp;quot;\s  (\d+)\s  (\d+)\s     &amp;quot;(.*?)&amp;quot;\s  &amp;quot;(.*?)&amp;quot;$/x) {
    my $deparsed = { };
    my $c = 0;
         
    my @field_list = qw/
            ip     
        remote_user
            time    
            request
            status 
            bytes_send
            referer 
            user_agent
    /;
 
    {
        no strict &#39;refs&#39;; # some Perl magic
 
        for (@field_list) {
            $deparsed-&amp;gt;{ $_  } = ${ ++$c };
            }
    }
     
    return $deparsed;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this code does is match $log_string against a regex - if the match is successful, it iterates through the regex capture global variables ($1-$8), using the values of @field_list as the key values for the captures. The dynamic variable name is stored in $c.&lt;/p&gt;

&lt;p&gt;Using dynamic variable names can provide useful shortcuts when used in the right context. Dynamic variables can also increase the risk of error (note that strict &amp;lsquo;refs&amp;rsquo; had to be disabled for this code to work). What&amp;rsquo;s nice about this example is using the regex match in the if statement provides the assurance that every capture was successful, hence in this context it should be ok to turn strict refs off briefly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Test if the user is root</title>
      <link>https://dnmfarrell.github.io/article/16/2013/4/10/Test-if-the-user-is-root/</link>
      <pubDate>Wed, 10 Apr 2013 21:48:42 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/16/2013/4/10/Test-if-the-user-is-root/</guid>
      <description>&lt;p&gt;When Perl is executing a program, it maintains the user id of the process owner in a global variable ($&amp;lt;). When a Perl program is executed by root or a user with root privileges (e.g. using the sudo command), the user id variable is always set to zero. This can be checked at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -e &#39;print $&amp;lt; . \n;&#39;
1000
$ sudo perl -e &#39;print $&amp;lt; . \n;&#39;
0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the root user id is always zero and in Perl zero is treated as false, it is a trivial task to test if the user is root during runtime. This can be used to for flow control, such as exiting the program early:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Carp qw/croak/;

if ($&amp;lt;) {
    croak &amp;quot;Error: exiting program as not executed by root\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Windows the user id variable is always set to zero and is of limited use. However the Perl &lt;a href=&#34;https://metacpan.org/module/Win32&#34;&gt;Win32&lt;/a&gt; module has the Win32::IsAdminUser() method that can be used instead of $&amp;lt;, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Win32;
use Carp qw/croak/;

if (not Win32::IsAdminUser()) {
    croak &amp;quot;Error: exiting program as not executed by root\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade your list printing using field separator variables</title>
      <link>https://dnmfarrell.github.io/article/12/2013/4/3/Upgrade-your-list-printing-using-field-separator-variables/</link>
      <pubDate>Wed, 03 Apr 2013 22:24:28 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/12/2013/4/3/Upgrade-your-list-printing-using-field-separator-variables/</guid>
      <description>&lt;p&gt;A typical way to print every element of an array in Perl is using a foreach loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @sportscar_brands = qw/Ferrari Aston_Martin Lambourgini/;
foreach my $brand (@sportscar_brands){
    print &amp;quot;$brand\n&amp;quot;;
}
# Ferrari
# Aston_Martin
# Lambourgini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An alternative method is to set value of the the output field separator variable ($,). When printing a list or array Perl injects this variable between elements. Hence, if you set the output field separator to a newline (\n) you will achieve the same affect as the previous example, without the foreach loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$, = &amp;quot;\n&amp;quot;; # set the output field separator to newline
my @sportscar_brands = qw/Ferrari Aston_Martin Lambourgini/;
print @sportscar_brands;
# Ferrari
# Aston_Martin
# Lambourgini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output field separator also works on lists:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$, = &amp;quot;\n&amp;quot;;
print qw/Ferrari Aston_Martin Lambourgini/;
# Ferrari
# Aston_Martin
# Lambourgini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is another variable called the list separator ($&amp;ldquo;). Perl injects the value of $&amp;rdquo; between the elements of an array in an interpolated string. The subtle difference here is that the output field separator will apply when using print, however the list separator applies to all arrays in an interpolated string context. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$&amp;quot; = &amp;quot;\n&amp;quot;; # set the list separator to newline
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @normalcar_brands = qw/Ford Honda Toyota Fiat/;
print @normalcar_brands; # not inside an interpolated string
# FordHondaToyotaFiat

print &amp;quot;@normalcar_brands&amp;quot; # works in interpolated string
# Ford
# Honda
# Toyota
# Fiat

my $separated_list_string = &amp;quot;@normalcar_brands&amp;quot;; # injects the separator
print $separated_list_string;
# Ford
# Honda
# Toyota
# Fiat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One additional difference: despite its name, the list separator variable ($&amp;ldquo;) does not work on lists whilst the output field separator ($,) does (in Perl 5.16.3).&lt;/p&gt;

&lt;p&gt;Finally if you have set both $, and $&amp;rdquo; and print an interpolated array, $&amp;rdquo; will be injected and $, will be ignored.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quoting strings in Perl - even ones containing apostrophes and quote or speech marks</title>
      <link>https://dnmfarrell.github.io/article/7/2013/3/30/Quoting-strings-in-Perl---even-ones-containing-apostrophes-and-quote-or-speech-marks/</link>
      <pubDate>Sat, 30 Mar 2013 18:49:41 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/7/2013/3/30/Quoting-strings-in-Perl---even-ones-containing-apostrophes-and-quote-or-speech-marks/</guid>
      <description>

&lt;p&gt;Broadly speaking Perl has two types of strings: quotes that are interpolated at runtime and literal quotes that are not interpolated. Let&amp;rsquo;s review each of these in turn.&lt;/p&gt;

&lt;h3 id=&#34;interpolated-strings:ef0b8c484fe51c5b018df719d3cd6116&#34;&gt;Interpolated Strings&lt;/h3&gt;

&lt;p&gt;These strings are declared by encapsulating the quote in speech marks (&amp;ldquo;). If the encapsulated quote contains variables or escape-sequences, these will be processed at runtime.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $integer = 10;
#Declare an interpolated string
my $sentence = &amp;quot;I will count to $integer.\nThen I am coming for you!&amp;quot;;
print $sentence;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will print:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;I will count to 10. 
Then I am coming for you!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how the $integer variable was interpolated to print it&amp;rsquo;s value, and how the newline escape sequence (\n) was applied too.&lt;/p&gt;

&lt;h3 id=&#34;literal-strings-not-interpolated:ef0b8c484fe51c5b018df719d3cd6116&#34;&gt;Literal strings (not interpolated)&lt;/h3&gt;

&lt;p&gt;Literal strings need to be encapsulated by apostrophes (&amp;lsquo;). The content of these strings will be preserved as quoted, and not interpolated at runtime. Using literal strings is also more efficient as the Perl parser does not have to examine the the string for variables and escape sequences for interpolation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $integer = 10;
#Declare a literal string
my $sentence = &#39;I will count to $integer.\nThen I am coming for you!&#39;;
print $sentence;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will print:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;I will count to $integer.\nThen I am coming for you!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;strings-that-contain-quote-speech-marks:ef0b8c484fe51c5b018df719d3cd6116&#34;&gt;Strings that contain quote / speech marks&lt;/h3&gt;

&lt;p&gt;To quote a string that contains speech marks or apostrophes, Perl provides two quote operators: &lt;strong&gt;q&lt;/strong&gt; for literal quotes and &lt;strong&gt;qq&lt;/strong&gt; for interpolated quotes. The quote operators let the programmer define the encapsulating characters for the string - simply choose characters that are not contained in your string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $user = &amp;quot;sillymoose&amp;quot;;
my $difficult_string_interpolated = qq{Welcome $user\n. Whilst you are are here, you can &amp;quot;do as they do in Rome&amp;quot; and enjoy yourself};
print $difficult_string_interpolated;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will print:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Welcome sillymoose
Whilst you are are here, you can &amp;quot;do as they do in Rome&amp;quot; and enjoy yourself
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although the example above used curly braces ({,}) to encapsulate the string, Perl will accept most symbol characters such as those on the top of your keyboard(!@£$%^&amp;amp;*-+). Contrary to popular belief, Perl &lt;strong&gt;will not accept any character&lt;/strong&gt; as the delimiter - the letters of the alphabet (a-z) do not work for example.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

