<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Js on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/js/</link>
    <description>Recent content in Js on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Dec 2015 14:13:13 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/js/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kitchen coding nightmares: JavaScript scope</title>
      <link>http://perltricks.com/article/204/2015/12/17/Kitchen-coding-nightmares--JavaScript-scope/</link>
      <pubDate>Thu, 17 Dec 2015 14:13:13 +0000</pubDate>
      
      <guid>http://perltricks.com/article/204/2015/12/17/Kitchen-coding-nightmares--JavaScript-scope/</guid>
      <description>

&lt;p&gt;Lately at the &lt;a href=&#34;https://www.recurse.com/&#34;&gt;Recurse Center&lt;/a&gt; I&amp;rsquo;ve been developing a JavaScript client for my &lt;a href=&#34;https://github.com/dnmfarrell/Settlers-Game&#34;&gt;Settlers game&lt;/a&gt;. As a Perl developer working with JavaScript, it has been a fun experience. JavaScript feels very perly - both share a flexible syntax, first class functions and objects as hashes. And both languages have a lax interpreter which should have been put in strict mode in the first place (ha-ha!). One way in which JavaScript is very different from Perl is its scoping rules. I was burned by these more than once, and so if you&amp;rsquo;re new to JavaScript, you might find the following summary and recommendations useful.&lt;/p&gt;

&lt;h3 id=&#34;functional-scoping:6e2e047097a9f672ac378602b99db31f&#34;&gt;Functional scoping&lt;/h3&gt;

&lt;p&gt;Variables are declared with the &lt;code&gt;var&lt;/code&gt; keyword:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;var name = &amp;quot;David&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables are functionally-scoped, which means that if declared within a function, the variable is private to the function block. Variables declared outside of functions are globally scoped. And there is no other type of block scoping (such as within if-else or for loops).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;var name = &amp;quot;David&amp;quot;;

function log_name (name) // private
{
  console.log(name);
}

var names = [&amp;quot;Jen&amp;quot;, &amp;quot;Jim&amp;quot;, &amp;quot;Jem&amp;quot;, &amp;quot;Jon&amp;quot;];
for (var i = 0; i &amp;lt; names.length; i++)
{
  var name = names[i]; // overwriting the global
}
console.log(name); // Jon NOT David
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;functions-as-variables:6e2e047097a9f672ac378602b99db31f&#34;&gt;Functions as variables&lt;/h3&gt;

&lt;p&gt;Function names are stored as variables under the same scoping rules as ordinary variables. There are two ways to declare functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;function log_name () { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;var log_name = function () { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both of these are the same. Which means it&amp;rsquo;s possible to inadvertently overwrite a function with another variable declaration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;function name () { return &amp;quot;David&amp;quot;; }
var name = &amp;quot;John&amp;quot;;
name(); // error, name is not a function anymore
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hoisting:6e2e047097a9f672ac378602b99db31f&#34;&gt;Hoisting&lt;/h3&gt;

&lt;p&gt;JavaScript interpreters have a initial-runtime phase, (similar to Perl&amp;rsquo;s &lt;code&gt;BEGIN&lt;/code&gt;), where all variable declarations are executed before other code. This is known as &amp;ldquo;hoisting&amp;rdquo;, but practically what it means is that you can use a variable before you declare it!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;console.log(name); // yep, this works
var name = &amp;quot;David&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bind:6e2e047097a9f672ac378602b99db31f&#34;&gt;Bind&lt;/h3&gt;

&lt;p&gt;JavaScript makes heavy use of anonymous functions and callbacks.To modify the scope of a function, JavaScript&lt;sup&gt;1&lt;/sup&gt; provides &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind?redirectlocale=en-US&amp;amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fbind&#34;&gt;bind&lt;/a&gt;. This is easier to understand by example. If I have a point object and I want a method to draw it to the canvas, by loading an image:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Point.prototype.draw = function()
{
  var ctx = get_canvas_context(); // declared elsewhere
  var img = new Image();
  img.onload = function () {  // anonymous function
    ctx.drawImage(img, this.x, this.y);   
  }.bind(this);
  img.src = &amp;quot;/point.png&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I use &lt;code&gt;bind&lt;/code&gt; to inject the point object&amp;rsquo;s scope into the anonymous function. Otherwise I wouldn&amp;rsquo;t be able to access the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; properties of the point as &lt;code&gt;this&lt;/code&gt; would be referencing something else.&lt;/p&gt;

&lt;p&gt;For a more thorough explanation of JavaScript scope, I recommend Todd Motto&amp;rsquo;s article, &lt;a href=&#34;https://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope/&#34;&gt;Everything you wanted to know about JavaScript scope&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;coping-with-scoping:6e2e047097a9f672ac378602b99db31f&#34;&gt;Coping with scoping&lt;/h3&gt;

&lt;p&gt;OK so that was the bad news; the good news is there are plenty of techniques for handling JavaScript&amp;rsquo;s scoping rules. Depending on the context you may find some or all of these methods useful.&lt;/p&gt;

&lt;h4 id=&#34;naming-conventions:6e2e047097a9f672ac378602b99db31f&#34;&gt;Naming conventions&lt;/h4&gt;

&lt;p&gt;The first thing you can do to avoid clashes is adopt a naming convention. For example, name all functions with verb-noun constructs (like &amp;ldquo;get_address&amp;rdquo;) and all value variables with plain nouns (like &amp;ldquo;addresses&amp;rdquo;). This is not a complete solution, but at a minimum it will reduce the chances of a function being replaced by a value variable.&lt;/p&gt;

&lt;h4 id=&#34;one-var-per-scope:6e2e047097a9f672ac378602b99db31f&#34;&gt;One var per scope&lt;/h4&gt;

&lt;p&gt;Another technique for managing variable scope is to only allow one &lt;code&gt;var&lt;/code&gt; statement per scope. So a typical program might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;// declare global scope variables
var foo = &amp;quot;/root/assets&amp;quot;,
    bar = 0;

function execute (foo)
{
  var i, j, bar; // functional scope

  for (i = 0; i &amp;lt; foo.length; i++)
  {
    for (j = 0; j &amp;lt; foo.length; j++)
    {
      // do something
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;use-strict:6e2e047097a9f672ac378602b99db31f&#34;&gt;Use strict&lt;/h4&gt;

&lt;p&gt;This is a convention all Perl programmers should be comfortable with. Enable &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&#34;&gt;strict mode&lt;/a&gt; in JavaScript. Just like with Perl, JavaScript&amp;rsquo;s strict mode can catch &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#Changes_in_strict_mode&#34;&gt;several&lt;/a&gt;cases of variable-related bugs. Enable it globally with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;quot;use strict&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generally JavaScript experts &lt;a href=&#34;http://yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/&#34;&gt;recommend&lt;/a&gt; using a functionally-scoped version of strict - in this case the declaration is placed inside a function block. This is useful to prevent script concatenation errors (where an imported script does not satisfy the strict rules).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;(function () {
   &amp;quot;use strict&amp;quot;;
   // this function is strict...
}());
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;objects-as-namespaces:6e2e047097a9f672ac378602b99db31f&#34;&gt;Objects as namespaces&lt;/h4&gt;

&lt;p&gt;If you were thinking a simple way to solve all of the namespace clashes was with modules, allow me to be the first to tell you that JavaScript has no notion of modules (being a &lt;a href=&#34;https://en.wikipedia.org/wiki/Prototype-based_programming&#34;&gt;prototyped language&lt;/a&gt;). There is no &lt;code&gt;import&lt;/code&gt; keyword. In HTML any code that is loaded with a &lt;code&gt;script&lt;/code&gt; tag is simply concatenated to the current scope.&lt;/p&gt;

&lt;p&gt;There are solutions to this limitation though. In &lt;a href=&#34;http://www.amazon.com/JavaScript-Definitive-Guide-Activate-Guides/dp/0596805527/ref=dp_ob_title_bk&#34;&gt;JavaScript the Definitive Guide&lt;/a&gt;, author David Flanagan proposes using objects as namespaces (sixth edition, section 9.9.1). Each object&amp;rsquo;s scope can be used to encapsulate the behavior and data specific to that domain. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;// everything is scoped to point.*
var point = {};
point.Point = function (_x, _y) {
  this.x = _x;
  this.y = _y
}

point.Point.prototype.coordinates = function ()
{
  return [this.x, this.y];
}

// now lets try it out ...
var p = new point.Point(1,3);
console.log(p.coordinates());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To package code as modules, there is the &lt;a href=&#34;http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html&#34;&gt;module pattern&lt;/a&gt;. Finally although JavaScript has no native import method, there are several external libraries that can provide that behavior, like &lt;a href=&#34;http://www.requirejs.org/&#34;&gt;RequireJS&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;let:6e2e047097a9f672ac378602b99db31f&#34;&gt;Let&lt;/h4&gt;

&lt;p&gt;The next major version of JavaScript, ES6 provides &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let&#34;&gt;let&lt;/a&gt;. This keyword provides block-level scoping of variables, similar to other mainstream languages. ES6 is not supported everywhere yet, but you can use a transpiler like &lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt; to convert ES6 JavaScript back to ES5.&lt;/p&gt;

&lt;h4 id=&#34;use-a-code-linter:6e2e047097a9f672ac378602b99db31f&#34;&gt;Use a code linter&lt;/h4&gt;

&lt;p&gt;Browsers do not throw enough exceptions when processing JavaScript. Instead they try to soldier on and do what the programmer &lt;em&gt;meant&lt;/em&gt; rather than what they typed. This is good&lt;sup&gt;2&lt;/sup&gt; for users as they get a uninterrupted browsing experience, but for us programmers this is definitely a bad thing™. Browser robustness makes JavaScript difficult to debug, and which is where a code linter steps in - it analyzes code and reports any errors or warnings they find. For JavaScript I like &lt;a href=&#34;http://jshint.com/&#34;&gt;JSHint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Introduced in ES5 JavaScript - which is supported by all modern browsers. For solutions for older JavaScript versions, use &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; It&amp;rsquo;s probably a bad thing for users too - the overhead in processing syntactically wrong code degrades performance and worse, encourages more incorrect code to be written.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The best of what&#39;s new on CPAN 2014</title>
      <link>http://perltricks.com/article/145/2015/1/15/The-best-of-what-s-new-on-CPAN-2014/</link>
      <pubDate>Thu, 15 Jan 2015 14:44:40 +0000</pubDate>
      
      <guid>http://perltricks.com/article/145/2015/1/15/The-best-of-what-s-new-on-CPAN-2014/</guid>
      <description>

&lt;p&gt;2014 has come and gone, which means that we&amp;rsquo;ve completed 12 editions of &amp;ldquo;What&amp;rsquo;s New on CPAN&amp;rdquo;. This seems like an appropriate moment to take stock and reflect on the past year of new CPAN uploads. I&amp;rsquo;ve compiled a shortlist of modules by using the scientific approach of &amp;ldquo;stuff that I remember&amp;rdquo;. Have a think about what would be on your &amp;ldquo;best of&amp;rdquo; list, and maybe let the author know, or better, write about it and let the World know.&lt;/p&gt;

&lt;h3 id=&#34;config-devops:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;p&gt;Ingy and David&amp;rsquo;s grant work on the next generation of &lt;a href=&#34;https://metacpan.org/pod/Inline&#34;&gt;Inline&lt;/a&gt; generated a lot of excitement. But along with re-furbishing the whole Inline ecosystem, a number of side-effect modules were created too. One of those is &lt;a href=&#34;https://metacpan.org/pod/Devel::PerlLog&#34;&gt;Devel::PerlLog&lt;/a&gt; which simply logs a configurable message every time a Perl process starts.&lt;/p&gt;

&lt;p&gt;C-related Perl libraries got a big boost in 2014. Asides from Ingy&amp;rsquo;s refreshed &lt;a href=&#34;https://metacpan.org/pod/Inline::C&#34;&gt;Inline::C&lt;/a&gt;, Graham Ollis has been working and &lt;a href=&#34;https://www.youtube.com/watch?v=cY-yqQ_nmtw&amp;amp;list=PLvxiAPPfDjyP293FgDJjK0CXaZq6EH0pC&#34;&gt;presenting&lt;/a&gt; on another XS alternative: FFI. &lt;a href=&#34;https://metacpan.org/pod/FFI::CheckLib&#34;&gt;FFI::CheckLib&lt;/a&gt; will check that a particular C library is available as well as &lt;a href=&#34;https://metacpan.org/pod/FFI::TinyCC&#34;&gt;FFI::TinyCC&lt;/a&gt;, a compiler interface.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Module::Loader&#34;&gt;Module::Loader&lt;/a&gt; is a nifty way of loading plugins at runtime.&lt;/p&gt;

&lt;h3 id=&#34;data:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Data&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Hash::Ordered&#34;&gt;Hash::Ordered&lt;/a&gt; was a best-in-class implementation of an ordered hash class by David Golden. He also gave an in-depth &lt;a href=&#34;https://www.youtube.com/watch?v=p4U6FWyRBoQ&amp;amp;feature=youtu.be&#34;&gt;talk&lt;/a&gt; of the trade offs of the solution and the alternatives on CPAN (slides &lt;a href=&#34;http://www.dagolden.com/wp-content/uploads/2009/04/Adventures-in-Optimization-NYpm-July-2014.pdf&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Did you know that &lt;a href=&#34;https://metacpan.org/pod/File::Slurp&#34;&gt;File::Slurp&lt;/a&gt; can have issues with the Perl encoding layer? (among other &lt;a href=&#34;http://blogs.perl.org/users/leon_timmermans/2013/05/why-you-dont-need-fileslurp.html&#34;&gt;issues&lt;/a&gt;). Leon Timmermans wrote &lt;a href=&#34;https://metacpan.org/pod/File::Slurper&#34;&gt;File::Slurper&lt;/a&gt; as a better alternative.&lt;/p&gt;

&lt;p&gt;Ah &lt;a href=&#34;https://metacpan.org/pod/Sereal&#34;&gt;Sereal&lt;/a&gt;, the super-fast seralizer software. &lt;a href=&#34;https://metacpan.org/pod/SerealX::Store&#34;&gt;SerealX::Store&lt;/a&gt; was an attempt to create a storable-like interface over Sereal, except tastier. &lt;a href=&#34;https://metacpan.org/pod/XML::Dataset&#34;&gt;XML::Dataset&lt;/a&gt; implements a simple DSL for extracting data from XML/XHTML documents.&lt;/p&gt;

&lt;h3 id=&#34;databases:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Databases&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Raw&#34;&gt;DBIx::Raw&lt;/a&gt; provides both low level SQL control and time-saving abstractions to fill a niche role for DB access. Divine the database datatype of a scalar using &lt;a href=&#34;https://metacpan.org/pod/SQL::Type::Guess&#34;&gt;SQL::Type::Guess&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;fun:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Fun&lt;/h3&gt;

&lt;p&gt;Remember the big debate about Perl 5&amp;rsquo;s version numbering? Whilst some tirelessly debating the topic, others were hard at work at real solutions™. This is &lt;a href=&#34;https://metacpan.org/pod/Acme::Futuristic::Perl&#34;&gt;Acme::Futuristic::Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Speaking of real solutions™, check out &lt;a href=&#34;https://metacpan.org/pod/bare&#34;&gt;bare&lt;/a&gt; which removes the need to use sigils for scalars. Finally, the last barrier to mass adoption of Perl has been solved!&lt;/p&gt;

&lt;h3 id=&#34;hardware:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Hardware&lt;/h3&gt;

&lt;p&gt;CPAN advanced more in hardware-related modules than perhaps any other area. YAPC NA 2014 was awash with drones. This really does seem like a promising area for Perl to lay claim. Several modules stand out in particular. Let&amp;rsquo;s start with the shiny: Timm Murray&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/UAV::Pilot::ARDrone&#34;&gt;UAV::Pilot::ARDrone&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/release/UAV-Pilot-WumpusRoverr&#34;&gt;UAV::Pilot::WumpusRover&lt;/a&gt; enables WiFi remote control (with video) of drones! Timm&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Device::WebIO&#34;&gt;Device::WebIO&lt;/a&gt; provides a standardized interface for accessing many devices with drivers available for Raspberry Pi and Arduino among others.&lt;/p&gt;

&lt;p&gt;Another significant development was Paul Evan&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Device::BusPirate&#34;&gt;Device::BusPirate&lt;/a&gt;, for the Bus Pirate hardware tool. Finally, check out &lt;a href=&#34;https://metacpan.org/pod/VIC&#34;&gt;VIC&lt;/a&gt;, Vikas Kumar&amp;rsquo;s amazing DSL for PIC micro-controllers.&lt;/p&gt;

&lt;h3 id=&#34;presenting-software:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Presenting Software&lt;/h3&gt;

&lt;p&gt;Pretend you&amp;rsquo;re a command line wizard with &lt;a href=&#34;https://metacpan.org/pod/App::Cleo&#34;&gt;App::Cleo&lt;/a&gt;, which will playback a list of commands from a file for airtight demos. No more typos!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/App::revealup&#34;&gt;App::revealup&lt;/a&gt; enables markdown driven presentations with Reveal.js, by implementing a mini HTTP server. I &lt;a href=&#34;http://perltricks.com/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup&#34;&gt;wrote&lt;/a&gt; about it (&lt;a href=&#34;http://perltricks.com/article/134/2014/11/13/Advanced-slideshow-maneuvers&#34;&gt;twice&lt;/a&gt;) and use it all the time, highly recommended.&lt;/p&gt;

&lt;h3 id=&#34;testing:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;There was a tonne of new testing stuff this year, but not much stuck with me. One module that did was &lt;a href=&#34;https://metacpan.org/pod/Test::RequiresInternet&#34;&gt;Test::RequiresInternet&lt;/a&gt;. Import this module with &lt;code&gt;use&lt;/code&gt; and it will skip over the unit tests in your test file unless an active internet connection is found. Very handy!&lt;/p&gt;

&lt;p&gt;Not exactly testing related, but surely useful for debugging, &lt;a href=&#34;https://metacpan.org/pod/Regexp::Lexer&#34;&gt;Regexp::Lexer&lt;/a&gt; tokenizes regexes, which is just cool.&lt;/p&gt;

&lt;h3 id=&#34;web:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Web&lt;/h3&gt;

&lt;p&gt;Masahiro Nagano created &lt;a href=&#34;https://metacpan.org/pod/Gazelle&#34;&gt;Gazelle&lt;/a&gt;, a highly optimized pre-forking Plack handler with Nginx-like performance. Incredible stuff!&lt;/p&gt;

&lt;p&gt;2014 also brought the usual flood of plugins for the major web frameworks. Big news for Mojo fans was the announcement of the platform moving away from MongoDB support and embracing a Postgres backend instead with &lt;a href=&#34;https://metacpan.org/pod/Mojo::Pg&#34;&gt;Mojo::Pg&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Web scrapers and QA testers did well: &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize::PhantomJS&#34;&gt;WWW::Mechanize::PhantomJS&lt;/a&gt; implements a headless, JavaScript enabled browser with the typical friendly mechanize interface. &lt;a href=&#34;https://metacpan.org/pod/Selenium::Screenshot&#34;&gt;Selenium::Screenshot&lt;/a&gt; combines Selenium&amp;rsquo;s screenshot ability with &lt;a href=&#34;https://metacpan.org/pod/Image::Compare&#34;&gt;Image::Compare&lt;/a&gt; to detect changes in web pages.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

