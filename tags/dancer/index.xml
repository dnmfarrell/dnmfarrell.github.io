<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dancer on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/dancer/</link>
    <description>Recent content in Dancer on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Jul 2015 13:17:10 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/dancer/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - June 2015</title>
      <link>http://perltricks.com/article/181/2015/7/9/What-s-new-on-CPAN---June-2015/</link>
      <pubDate>Thu, 09 Jul 2015 13:17:10 +0000</pubDate>
      
      <guid>http://perltricks.com/article/181/2015/7/9/What-s-new-on-CPAN---June-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Class::Storage&#34;&gt;Class::Storage&lt;/a&gt; is a module for serializing blessed references (objects). Once serialized, an object can be transmitted via JSON, XML, YAML or saved in a data store. Serializing objects can also make IPC easier: coroutines, threads and other processes can pass text but blessed references are often an issue.&lt;/p&gt;

&lt;p&gt;Module author Peter Valdemar MÃ¸rch has pulled together excellent documentation. A welcome addition to CPAN, check out the acknowledgements &lt;a href=&#34;https://metacpan.org/pod/Class::Storage#ACKNOWLEDGEMENTS&#34;&gt;section&lt;/a&gt; for some interesting background on the module. For an alternative approach, you might be interested in &lt;a href=&#34;https://metacpan.org/pod/Object::Serializer&#34;&gt;Object::Serializer&lt;/a&gt;. For non-readable serializers, checkout &lt;a href=&#34;https://metacpan.org/pod/Storable&#34;&gt;Storable&lt;/a&gt; and the newer and faster &lt;a href=&#34;https://metacpan.org/pod/Sereal&#34;&gt;Sereal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; - when working with object serializers like Class::Storage, only deserialize trusted data, as malicious code can be injected into the data, and when the data is deserialized, the code will be executed automatically. See for example this bug &lt;a href=&#34;https://rt.cpan.org/Public/Bug/Display.html?id=105772&#34;&gt;report&lt;/a&gt; (&lt;em&gt;Thanks to Reini Urban for the reminder&lt;/em&gt;).&lt;/p&gt;

&lt;h3 id=&#34;apis-apps:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::Zendesk&#34;&gt;API::Zendesk&lt;/a&gt; provides a Perl interface for the customer support app&lt;/li&gt;
&lt;li&gt;Painlessly install libsvm, the support vector machine library using &lt;a href=&#34;https://metacpan.org/pod/Alien::LIBSVM&#34;&gt;Alien::LIBSVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use Slack? Of course you do. Check out &lt;a href=&#34;https://metacpan.org/pod/AnyEvent::SlackRTM&#34;&gt;AnyEvent::SlackRTM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Develop your first Slack bot with &lt;a href=&#34;https://metacpan.org/pod/Bot::Backbone::Service::SlackChat&#34;&gt;Bot::Backbone::Service::SlackChat&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Interchange::Search::Solr&#34;&gt;Interchange::Search::Solr&lt;/a&gt; let&amp;rsquo;s you use Solr search with Perl&lt;/li&gt;
&lt;li&gt;Be popular, send your co-workers Bonusly with &lt;a href=&#34;https://metacpan.org/pod/WebService::Bonusly&#34;&gt;WebService::Bonusly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebDriver::Tiny&#34;&gt;WebDriver::Tiny&lt;/a&gt; is an all-new implementation of a Selenium webdriver API for Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::App&#34;&gt;Config::App&lt;/a&gt; implements &amp;ldquo;cascading configurations&amp;rdquo; - looks like a convenient way to have context-specific configurations without resorting to Perl code&lt;/li&gt;
&lt;li&gt;Quickly rind files on your Mac using &lt;a href=&#34;https://metacpan.org/pod/Mac::FindFile&#34;&gt;Mac::FindFile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Perl::Critic::Freenode&#34;&gt;Perl::Critic::Freenode&lt;/a&gt; is a compilation of policies recommended by the folks on the #perl channel on freenode IRC&lt;/li&gt;
&lt;li&gt;Include ditaa diagrams in pod with &lt;a href=&#34;https://metacpan.org/pod/Pod::Weaver::Plugin::Ditaa&#34;&gt;Pod::Weaver::Plugin::Ditaa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract data from your Zoom 5341J cable modem with &lt;a href=&#34;https://metacpan.org/pod/Device::CableModem::Zoom5341J&#34;&gt;Device::CableModem::Zoom5341J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::Dispatch::HipChat&#34;&gt;Log::Dispatch::HipChat&lt;/a&gt; will send your log messages to HipChat&lt;/li&gt;
&lt;li&gt;Moving averages are easy to implement, and easy to get wrong. The next time you need one, consider &lt;a href=&#34;https://metacpan.org/pod/Math::SMA&#34;&gt;Math::SMA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re working with 35mm film and DX codes, you might like &lt;a href=&#34;https://metacpan.org/pod/Photography::DX&#34;&gt;Photography::DX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-version-control:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Development and Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When stuck in Git merge conflict hell, sometimes it&amp;rsquo;s easier to say &amp;ldquo;I&amp;rsquo;m right&amp;rdquo;. &lt;a href=&#34;https://metacpan.org/pod/App::Git::Workflow::Command::Take&#34;&gt;App::Git::Workflow::Command::Take&lt;/a&gt; let&amp;rsquo;s you tell Git to merge your changes. You win!&lt;/li&gt;
&lt;li&gt;If you have a load of Git repos that you&amp;rsquo;d like to execute a command against, you might like &lt;a href=&#34;https://metacpan.org/pod/App::Multigit&#34;&gt;App::Multigit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Assert::Conditional&#34;&gt;Assert::Conditional&lt;/a&gt; from Tom Christiansen let&amp;rsquo;s you conditionally compile assertions into your Perl programs, ala C&amp;rsquo;s assert.h. Wow&lt;/li&gt;
&lt;li&gt;Daemonize &lt;em&gt;anything&lt;/em&gt; with &lt;a href=&#34;https://metacpan.org/pod/JIP::Daemon&#34;&gt;JIP::Daemon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;text-language:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Text &amp;amp; Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::Unicodify&#34;&gt;Acme::Unicodify&lt;/a&gt; can convert ASCII text into Unicode-esque characters&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::RS14_PP&#34;&gt;Crypt::RS14_PP&lt;/a&gt; is a pure Perl implementation of the RS14 encryption algorithm&lt;/li&gt;
&lt;li&gt;Convert HTML into FreeStyleWiki markup using &lt;a href=&#34;https://metacpan.org/pod/HTML::WikiConverter::FreeStyleWiki&#34;&gt;HTML::WikiConverter::FreeStyleWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Awesome! detect the language with &lt;a href=&#34;https://metacpan.org/pod/Lingua::Identify::CLD2&#34;&gt;Lingua::Identify::CLD2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Hogan&#34;&gt;Text::Hogan&lt;/a&gt; is a Perl clone of hogan.js, the JavaScript template engine. Supports pre-compilation!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-and-mathematics:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Science and Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Algorithm::BloomFilter&#34;&gt;Algorithm::BloomFilter&lt;/a&gt; is a simple, superfast bloom filter implementation written in XS&lt;/li&gt;
&lt;li&gt;Not a new module, but it is new to CPAN, &lt;a href=&#34;https://metacpan.org/pod/App::Chart&#34;&gt;App::Chart&lt;/a&gt; the visual charting library is useful&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/BioX::Workflow&#34;&gt;BioX::Workflow&lt;/a&gt; is an &amp;ldquo;opinionated template based workflow writer&amp;rdquo;, hailing from the Bioinformatics World, but not just for BioX&lt;/li&gt;
&lt;li&gt;The Longest Common Subsequence algorithm is used for diffing text, among other uses. &lt;a href=&#34;https://metacpan.org/pod/LCS::XS&#34;&gt;LCS::XS&lt;/a&gt; is a supercharged version, written in XS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract all of the supported URLs from your Catalyst app using &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::ActionPaths&#34;&gt;Catalyst::Plugin::ActionPaths&lt;/a&gt; (disclosure, I&amp;rsquo;m the module author)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Piwik&#34;&gt;Dancer::Plugin::Piwik&lt;/a&gt; helps you integrate Pwik analytics with a Dancer app&lt;/li&gt;
&lt;li&gt;Use MongoDB with Minion, the job queue application using &lt;a href=&#34;https://metacpan.org/pod/Minion::Backend::MongoDB&#34;&gt;Minion::Backend::MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::Reactor::UV&#34;&gt;Mojo::Reactor::UV&lt;/a&gt; let&amp;rsquo;s you use the C library, libuv as the backend event loop for your Mojo application&lt;/li&gt;
&lt;li&gt;Rapidly expand shortened URLs with &lt;a href=&#34;https://metacpan.org/pod/WWW::Expand::More&#34;&gt;WWW::Expand::More&lt;/a&gt;. Cool!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Updated to include other example serializer modules and deserialization warning - 2015-07-09&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Perl Review of the ODROID-C1</title>
      <link>http://perltricks.com/article/152/2015/2/11/A-Perl-Review-of-the-ODROID-C1/</link>
      <pubDate>Wed, 11 Feb 2015 13:53:33 +0000</pubDate>
      
      <guid>http://perltricks.com/article/152/2015/2/11/A-Perl-Review-of-the-ODROID-C1/</guid>
      <description>&lt;p&gt;The success of the Raspberry Pi has opened up a whole new market of System on a Chip devices, where a single chip integrates most of the basic functions of a computer. Many of these systems run some kind of Linux distribution. Naturally, Perl comes along for the ride.&lt;/p&gt;

&lt;p&gt;The last year saw the emergence of several competitors to the Raspberry Pi, though few have managed to hit the same formula - just enough RAM, just enough CPU, Ethernet, USB, and cheap. Some have been faster or have more RAM, but miss that $35 price point of the Model B+. One that has done it is the &lt;a href=&#34;http://www.hardkernel.com/main/products/prdt_info.php&#34;&gt;ODROID-C1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With a Cortex-A5 processor running at 1.5GHz, and 1GB of RAM, it&amp;rsquo;s ahead of the Raspberry Pi version 1, and may still keep ahead of the recently released Pi version 2. In addition to booting off a MicroSD card, it can instead take an eMMC module, which promises to be much faster.&lt;/p&gt;

&lt;p&gt;SD card quality can vary, even when buying Class 6 or Class 10 cards, which can affect your program&amp;rsquo;s performance if it does a lot of I/O. I bought an 8GB SD card from the ODROID store preloaded with Xubuntu. From a subjective standpoint, I found it quite peppy compared to the random SD cards I usually use with my Raspberry Pi&amp;rsquo;s. If you need something extra, the eMMC are about twice the cost for the same size, but may be a worthwhile option.&lt;/p&gt;

&lt;p&gt;Since installing CPAN modules (especially ones that don&amp;rsquo;t have official OS packages) involves a lot of downloading, unpacking, reading, and copying, the process can be harsh on cheap SD cards. Even worse (in my experience) is the PCDuino v3&amp;rsquo;s built-in flash, which is glacially slow. Too bad, because it otherwise could have been an interesting alternative to the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve spent entire evenings waiting for layers of CPAN dependencies to install on a Raspberry Pi&amp;rsquo;s SD card. Using &lt;a href=&#34;https://vonbienenstock.de/hiveberry/&#34;&gt;Hiveberry&amp;rsquo;s images&lt;/a&gt; can certainly help here. Of course, most people will be starting from the official OS images, and may hesitate to use a third-party; understandably so.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a quick-and-dirty benchmark of installing &lt;a href=&#34;https://metacpan.org/pod/Device::WebIO&#34;&gt;Device::WebIO&lt;/a&gt; from a fresh deployment on an SD card bought directly from the ODROID store:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ time sudo cpanm Device::WebIO
...
real    5m0.980s
user    3m46.290s
sys     0m18.780s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then &lt;a href=&#34;https://metacpan.org/pod/Dancer&#34;&gt;Dancer&lt;/a&gt; immediately after that (which has quite the dependency list):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ time sudo cpanm Dancer
...
real    18m40.347s
user    13m53.190s
sys     1m32.360s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compared to what I&amp;rsquo;ve seen on random SD cards, this is nice and quick!&lt;/p&gt;

&lt;p&gt;Power comes from a 5V/2A adapter with a 2.5mm plug, which deviates from the micro USB plugs that have become common with SoC devices. I consider this a good thing; people would often use old cellphone chargers with inadequate amp ratings and tons of noise in the signal. It might boot the board up fine, but things would go wrong at random, and they&amp;rsquo;d get frustrated and give up. In retrospect, micro USB on these boards might have been a bad idea. Encouraging a specific, vetted power source with a less ubiquitous kind of plug is something I hope other boards will copy, provided that it doesn&amp;rsquo;t lead to gouging on proprietary plugs.&lt;/p&gt;

&lt;p&gt;You will also want to be sure to have an adapter for the HDMI Micro Type-D port. This is even smaller than the HDMI Mini found on some similar boards, such as the BeagleBone Black.&lt;/p&gt;

&lt;p&gt;Booting the board up, using a random monitor laying around the hackerspace, it showed only a blank screen, flickering with the occasional noisy image. The reason is that the boot.ini file on the first partition of the SD card has a hardcoded resolution for the HDMI output. This partition is a simple FAT32 format, so you can mount it on just about any computer and edit the file to choose the right resolution.&lt;/p&gt;

&lt;p&gt;The preinstalled perl is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -v

This is perl 5, version 18, subversion 2 (v5.18.2) built for arm-linux-gnueabihf-thread-multi-64int
(with 41 registered patches, see perl -V for more detail)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is more up to date than the 5.14 that comes on Raspbian images. Note the enabling of threads and 64-bit integers on this build, which is also the case on Raspbian. No doubt this is because perls built for a default system installation need to be compatible with every Perl script in existence (or as much as possible, anyway). Most Linux-based Perl applications don&amp;rsquo;t use threads, and can usually get away with native 32-bit integers. Threads, in particular, give a noticeable slowdown to every execution, even in apps that don&amp;rsquo;t use them. If you need to get a little extra speed out of your app, go for a custom Perl compile without these features.&lt;/p&gt;

&lt;p&gt;So far, I&amp;rsquo;m liking this little board. Once past the screen resolution issues, setup is a breeze. It&amp;rsquo;s nice and fast, with a reasonably up to date Perl. On the downside, the community is smaller, and so you&amp;rsquo;ll often be on your own to figure things out. Recommended for any trailblazers in the Perl community.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - December 2014</title>
      <link>http://perltricks.com/article/142/2015/1/5/What-s-new-on-CPAN---December-2014/</link>
      <pubDate>Mon, 05 Jan 2015 13:50:44 +0000</pubDate>
      
      <guid>http://perltricks.com/article/142/2015/1/5/What-s-new-on-CPAN---December-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis-apps:781422e3702289a467e387c701331822&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easily setup a TCP proxy server for analyzing web traffic with &lt;a href=&#34;https://metacpan.org/pod/tcpproxy.pl&#34;&gt;App::tcpproxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Prove::Watch&#34;&gt;App::Prove::Watch&lt;/a&gt; runs your unit tests every time your code changes&lt;/li&gt;
&lt;li&gt;Monitor Bitcoin prices from several sources using &lt;a href=&#34;https://metacpan.org/pod/Finance::Bitcoin::Feed&#34;&gt;Finance::Bitcoin::Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Tesco&#34;&gt;Net::Tesco&lt;/a&gt; provides a Perly API for Tesco, one of the World&amp;rsquo;s largest retailers&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Vultr&#34;&gt;WebService::Vultr&lt;/a&gt; is an API for the cloud server company&lt;/li&gt;
&lt;li&gt;If you use Instapaper, the bookmarking service, check out&lt;a href=&#34;https://metacpan.org/pod/WebService::Instapaper&#34;&gt;WebService::Instapaper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:781422e3702289a467e387c701331822&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Debug::Statements&#34;&gt;Debug::Statements&lt;/a&gt; provides a convenient way of managing debug statements in code&lt;/li&gt;
&lt;li&gt;Log every time a Perl process starts using &lt;a href=&#34;https://metacpan.org/pod/Devel::PerlLog&#34;&gt;Devel::PerlLog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;There are already several Dist::Zilla plugins for auto-generating a distribution readme from pod, but &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Pod2Readme&#34;&gt;Dist::Zilla::Plugin::Pod2Readme&lt;/a&gt; aims to be as simple as possible. Very useful for GitHub hosted distributions&lt;/li&gt;
&lt;li&gt;Add a timeout to command line prompts, including default options with &lt;a href=&#34;https://metacpan.org/pod/IO::Prompt::Timeout&#34;&gt;IO::Prompt::Timeout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Version::Compare&#34;&gt;Version::Compare&lt;/a&gt; can compare version numbers and determine which is greater&lt;/li&gt;
&lt;li&gt;Allow certain exceptions to not be caught using &lt;a href=&#34;https://metacpan.org/pod/Try::Tiny::Except&#34;&gt;Try::Tiny::Except&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Regexp::SAR&#34;&gt;Regexp::SAR&lt;/a&gt; implements event handling on regexp matching conditions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:781422e3702289a467e387c701331822&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Color::RGB::Util&#34;&gt;Color::RGB::Util&lt;/a&gt; provides a bunch of useful functions for manipulating RGB colors&lt;/li&gt;
&lt;li&gt;Implement a circular list with &lt;a href=&#34;https://metacpan.org/pod/Data::CircularList&#34;&gt;Data::CircularList&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Embed&#34;&gt;Data::Embed&lt;/a&gt; provides read / write accessors for data embedded in files&lt;/li&gt;
&lt;li&gt;Looking for a faster Excel reader? Check out &lt;a href=&#34;https://metacpan.org/pod/Data::XLSX::Parser&#34;&gt;Data::XLSX::Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/ETL::Yertl&#34;&gt;ETL::Yertl&lt;/a&gt; is a command line data ETL tool. At an early stage of development, but looks interesting&lt;/li&gt;
&lt;li&gt;Only access part of a file using &lt;a href=&#34;https://metacpan.org/pod/IO::Slice&#34;&gt;IO::Slice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/SQL::Interpol&#34;&gt;SQL::Interpol&lt;/a&gt; can interpolate Perl variables into SQL queries&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PQL::Cache&#34;&gt;PQL::Cache&lt;/a&gt; is an in-memory Perl database with many useful features&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;math-science-language:781422e3702289a467e387c701331822&#34;&gt;Math, Science &amp;amp; Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::Coder::All&#34;&gt;Geo::Coder::All&lt;/a&gt; is an all-in-one wrapper for geocoding data that works with Google, Bing, TomTom etc.&lt;/li&gt;
&lt;li&gt;Compare image hashes with &lt;a href=&#34;https://metacpan.org/pod/Image::Hash&#34;&gt;Image::Hash&lt;/a&gt;. Very cool!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Map::Metro&#34;&gt;Map::Metro&lt;/a&gt; is another implementation of public transport graphing with some useful features&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Safely&lt;/em&gt; truncate unicode text using &lt;a href=&#34;https://metacpan.org/pod/Unicode::Truncate&#34;&gt;Unicode::Truncate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:781422e3702289a467e387c701331822&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add an auto-timeout to your Dancer routes with &lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::TimeoutManager&#34;&gt;Dancer::Plugin::TimeoutManager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lavoco::Website&#34;&gt;Lavoco::Website&lt;/a&gt; is an experimental micro web framework for hosting template toolkit templates&lt;/li&gt;
&lt;li&gt;Check if a URL is active with &lt;a href=&#34;https://metacpan.org/pod/URL::Exists&#34;&gt;URL::Exists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - October 2014</title>
      <link>http://perltricks.com/article/132/2014/11/7/What-s-new-on-CPAN---October-2014/</link>
      <pubDate>Fri, 07 Nov 2014 13:22:17 +0000</pubDate>
      
      <guid>http://perltricks.com/article/132/2014/11/7/What-s-new-on-CPAN---October-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::HackerNews&#34;&gt;WebService::HackerNews&lt;/a&gt; provides an interface to HackerNews, woohoo!&lt;/li&gt;
&lt;li&gt;Like music album cover art? &lt;a href=&#34;https://metacpan.org/pod/WWW::Search::Coveralia&#34;&gt;WWW::Search::Coveralia&lt;/a&gt; provides a search API for Coveralia.com&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Games::Dukedom&#34;&gt;Games::Dukedom&lt;/a&gt; implements the land management game in the terminal&lt;/li&gt;
&lt;li&gt;Convert anything to anything in the cloud using &lt;a href=&#34;https://metacpan.org/pod/App::cloudconvert&#34;&gt;App::cloudconvert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::DistSync&#34;&gt;App::DistSync&lt;/a&gt; is a file synchronization app&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;async-concurrency:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Async &amp;amp; Concurrency&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Async::HTTP&#34;&gt;Test::Async::HTTP&lt;/a&gt; is a mock class for testing the asynchronous user agent&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lock::Socket&#34;&gt;Lock::Socket&lt;/a&gt; is a clever module that provides process locking via sockets&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Slurp with confidence using &lt;a href=&#34;https://metacpan.org/pod/File::Slurper&#34;&gt;File::Slurper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;It has a long title but it&amp;rsquo;s worth it: &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::InflateColumn::Serializer::Sereal&#34;&gt;DBIx::Class::InflateColumn::Serializer::Sereal&lt;/a&gt; inflates / deflates into DBIx columns using the super-fast Sereal!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Couchbase::README&#34;&gt;Couchbase&lt;/a&gt; is a new Perl client for the NoSQL database, implemented in XS&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::Address::Formatter&#34;&gt;Geo::Address::Formatter&lt;/a&gt; formats addresses from all over the World.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FFI::TinyCC&#34;&gt;FFI::TinyCC&lt;/a&gt; provides an interface to the super-fast (compile time) TinyCC compiler&lt;/li&gt;
&lt;li&gt;Another useful FFI library, &lt;a href=&#34;https://metacpan.org/pod/FFI::CheckLib&#34;&gt;FFI::CheckLib&lt;/a&gt; will check that a C library is available for FFI to use&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;math-science-language:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Math, Science &amp;amp; Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Generate random, normally distributed numbers with &lt;a href=&#34;https://metacpan.org/pod/Math::Random::Normal::Leva&#34;&gt;Math::Random::Normal::Leva&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Related, &lt;a href=&#34;https://metacpan.org/pod/Rand::Urandom%20&#34;&gt;Rand::Urandom&lt;/a&gt;will generate better pseudo random numbers&lt;/li&gt;
&lt;li&gt;Do efficient fuzzy matching with &lt;a href=&#34;https://metacpan.org/pod/Tree::BK&#34;&gt;Tree::BK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Rstats&#34;&gt;Rstats&lt;/a&gt; exports R functions, an interesting alternative to Statistics::R. Next step, Inline::R!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;object-oriented:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Object Oriented&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::Role::Hashable&#34;&gt;MooseX::Role::Hashable&lt;/a&gt; enables Moose object to be convertible into hashes!&lt;/li&gt;
&lt;li&gt;Get some useful extra type constraint methods from &lt;a href=&#34;https://metacpan.org/pod/MooseX::Types::MoreUtils&#34;&gt;MooseX::Types::MoreUtils&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing-exceptions:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Testing &amp;amp; Exceptions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Devel::DidYouMean&#34;&gt;Devel::DidYouMean&lt;/a&gt; intercepts failed subroutine calls and suggests useful alternatives (disclaimer - I am the module author.)&lt;/li&gt;
&lt;li&gt;Conveniently test that numbers are within tolerance using &lt;a href=&#34;https://metacpan.org/pod/Test::Deep::NumberTolerant&#34;&gt;Test::Deep::NumberTolerant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Per the documention: &lt;a href=&#34;https://metacpan.org/pod/Mojo::Pg&#34;&gt;Mojo::Pg&lt;/a&gt; &amp;ldquo;makes PostgreSQL a lot of fun to use with the Mojolicious&amp;rdquo;. Check it out!&lt;/li&gt;
&lt;li&gt;Want to generate a sitemap for a web app? Check out &lt;a href=&#34;https://metacpan.org/pod/WWW::Sitemap::Simple&#34;&gt;WWW::Sitemap::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::Auth::OAuth&#34;&gt;Dancer2::Plugin::Auth::OAuth&lt;/a&gt; makes is easy to incorporate open auth into a Dancer2 web app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Help us&lt;/strong&gt; make &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo; better! Add your suggestions to the r/perl &lt;a href=&#34;http://www.reddit.com/r/perl/comments/2lkrq7/whats_new_on_cpan_october/&#34;&gt;post&lt;/a&gt; for this article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updates&lt;/strong&gt;: &lt;em&gt;additional web modules added to article 2014-11-08.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - June 2014</title>
      <link>http://perltricks.com/article/100/2014/7/3/What-s-new-on-CPAN---June-2014/</link>
      <pubDate>Thu, 03 Jul 2014 14:00:46 +0000</pubDate>
      
      <guid>http://perltricks.com/article/100/2014/7/3/What-s-new-on-CPAN---June-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:abf366ff55bb196a64a3099d4c922c90&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a REST API for your database with &lt;a href=&#34;https://metacpan.org/pod/Cookieville&#34;&gt;Cookieville&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::SaleaeLogic&#34;&gt;Device::SaleaeLogic&lt;/a&gt; provides a Perl interface to Saleae Logic devices&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Etcd&#34;&gt;Etcd&lt;/a&gt; is a Perl API for etcd, a key value store&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::Coder::OpenCage&#34;&gt;Geo::Coder::OpenCage&lt;/a&gt; is a Perl API for OpenCage a geocoding service&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::OEIS&#34;&gt;Math::OEIS&lt;/a&gt; provides an interface to Online Encyclopaedia of Integer Sequences. Who knew there was such a thing!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::PMP&#34;&gt;Net::PMP&lt;/a&gt; is an interface for the Public Media Platform&lt;/li&gt;
&lt;li&gt;Manage GNU Screen windows easily with &lt;a href=&#34;https://metacpan.org/pod/Term::GnuScreen::WindowArrayLike&#34;&gt;Term::GnuScreen::WindowArrayLike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Spotify&#34;&gt;WWW::Spotify&lt;/a&gt; provide an interface to the Spotify API&lt;/li&gt;
&lt;li&gt;Interact with a RabbitMQ broker using &lt;a href=&#34;https://metacpan.org/pod/WWW::RabbitMQ::Broker&#34;&gt;WWW::RabbitMQ::Broker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::GoKGS&#34;&gt;WWW::GoKGS&lt;/a&gt; is a scraper for the KGS Go server&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Amazon::Route53::Caching&#34;&gt;WebService::Amazon::Route53::Caching&lt;/a&gt; implements a caching layer for the Amazon Route 53 DNS service&lt;/li&gt;
&lt;li&gt;Send error reports to raygun.io from your Plack middleware with &lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::Raygun&#34;&gt;Plack::Middleware::Raygun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:abf366ff55bb196a64a3099d4c922c90&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Run CPANTS Kwalitee tests on your distribution with &lt;a href=&#34;https://metacpan.org/pod/App::CPANTS::Lint&#34;&gt;App::CPANTS::Lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Goto::Amazon&#34;&gt;App::Goto::Amazon&lt;/a&gt; provides a shortcut command for connecting to Amazon EC2 instances&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::HPGL2Cadsoft&#34;&gt;App::HPGL2Cadsoft&lt;/a&gt; converts HPGL files to Cadsoft Eagle script (a circuit board design tool)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:abf366ff55bb196a64a3099d4c922c90&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Pg::Pool::Multiserver&#34;&gt;AnyEvent::Pg::Pool::Multiserver&lt;/a&gt; let&amp;rsquo;s you make asynchronous DB calls to multiple Postgres servers, using AnyEvent::Pg&lt;/li&gt;
&lt;li&gt;Convert CSS into a Regexp::Grammar parse tree with &lt;a href=&#34;https://metacpan.org/pod/CSS::Selector::Grammar&#34;&gt;CSS::Selector::Grammar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run massive numbers of insert and update statements on a MySQL database using &lt;a href=&#34;https://metacpan.org/pod/DBIx::TxnPool&#34;&gt;DBIx::TxnPool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Deeme&#34;&gt;Deeme&lt;/a&gt; is a &amp;ldquo;Database-agnostic driven Event Emitter&amp;rdquo; with support for multiple backends&lt;/li&gt;
&lt;li&gt;Auto-release your distributions to Stratopan with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::UploadToStratopan&#34;&gt;Dist::Zilla::Plugin::UploadToStratopan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lookup USA state names and capitals with &lt;a href=&#34;https://metacpan.org/pod/Geo::States&#34;&gt;Geo::States&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MySQL::Explain::Parser&#34;&gt;MySQL::Explain::Parser&lt;/a&gt; converts MySQL&amp;rsquo;s explain output into Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:abf366ff55bb196a64a3099d4c922c90&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBG&#34;&gt;DBG&lt;/a&gt; provides a collection of useful debugging functions for Perl code&lt;/li&gt;
&lt;li&gt;Another useful debugging too: get a stack trace for all system calls with &lt;a href=&#34;https://metacpan.org/pod/Devel::Trace::Syscall&#34;&gt;Devel::Trace::Syscall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Quickly generate Perl data structures using &lt;a href=&#34;https://metacpan.org/pod/Data::Random::Structure&#34;&gt;Data::Random::Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::AuthorizedMethodRoles&#34;&gt;MooseX::AuthorizedMethodRoles&lt;/a&gt; provides role checking through whitelist methods&lt;/li&gt;
&lt;li&gt;Get Pango constants without the heft of Glib and Gtk2 libraries with &lt;a href=&#34;https://metacpan.org/pod/PangoConst&#34;&gt;PangoConst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Sort::Key::Domain&#34;&gt;Sort::Key::Domain&lt;/a&gt; sorts domain names&lt;/li&gt;
&lt;li&gt;Get Jenkins compatible TAP test output with &lt;a href=&#34;https://metacpan.org/pod/TAP::Formatter::Jenkins&#34;&gt;TAP::Formatter::Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::RequiresInternet&#34;&gt;Test::RequiresInternet&lt;/a&gt; will check for Internet connectivity before running tests - very useful.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:abf366ff55bb196a64a3099d4c922c90&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Looking for the gramatically correct version of &amp;ldquo;Buffalo buffalo &amp;hellip;&amp;rdquo;? Look no further because &lt;a href=&#34;https://metacpan.org/pod/Acme::Buffalo::Buffalo&#34;&gt;Acme::Buffalo::Buffalo&lt;/a&gt; has got you covered&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::MilkyHolmes&#34;&gt;Acme::MilkyHolmes&lt;/a&gt; provides character information on the famous Japanese animated cartoon&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Games::Go::Referee&#34;&gt;Games::Go::Referee&lt;/a&gt; analyses sgf files for Go rule violations&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:abf366ff55bb196a64a3099d4c922c90&#34;&gt;Web&lt;/h3&gt;

&lt;p&gt;Conveniently run A/B testing on CGI applications with &lt;a href=&#34;https://metacpan.org/pod/CGI::Application::Plugin::AB&#34;&gt;CGI::Application::Plugin::AB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/CGI::Application::Plugin::Throttle&#34;&gt;CGI::Application::Plugin::Throttle&lt;/a&gt; implements a throttling function for users (identifies by IP address)&lt;/p&gt;

&lt;p&gt;Avoid connecting to blacklisted URLs with &lt;a href=&#34;https://metacpan.org/pod/HTTP::Tiny::Paranoid&#34;&gt;HTTP::Tiny::Paranoid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New Dancer modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::CORS&#34;&gt;Dancer::Plugin::CORS&lt;/a&gt; configures cross-origin sharing rules&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Negotiate&#34;&gt;Dancer::Plugin::Negotiate&lt;/a&gt; wraps HTTP::Negotiate&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Swig&#34;&gt;Dancer::Plugin::Swig&lt;/a&gt; implements a Swig wrapper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;New Mojolicious modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Logf&#34;&gt;Mojolicious::Plugin::Logf&lt;/a&gt; flattens and logs complex data structures using sprintf&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::MoreUtilHelpers&#34;&gt;Mojolicious::Plugin::MoreUtilHelpers&lt;/a&gt; implements some utility methods&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::NetsPayment&#34;&gt;Mojolicious::Plugin::NetsPayment&lt;/a&gt; is an experimental module for making payments using Nets&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::PayPal&#34;&gt;Mojolicious::Plugin::PayPal&lt;/a&gt; is an experimental module for making payments using PayPal&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MojoX::GlobalEvents&#34;&gt;MojoX::GlobalEvents&lt;/a&gt; is an event handler&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Just how much heavier is Catalyst than Dancer2?</title>
      <link>http://perltricks.com/article/85/2014/5/5/Just-how-much-heavier-is-Catalyst-than-Dancer2-/</link>
      <pubDate>Mon, 05 May 2014 12:29:09 +0000</pubDate>
      
      <guid>http://perltricks.com/article/85/2014/5/5/Just-how-much-heavier-is-Catalyst-than-Dancer2-/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Within the Perl community it is received wisdom that Catalyst is a heavyweight web framework with many dependencies and that Dancer2 is a micro web framework that&amp;rsquo;s more agile than a Cirque du Soleil acrobat. But is it true?&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;tech-specs:e19552eba592fbca5a97d9be32189ba0&#34;&gt;Tech Specs&lt;/h3&gt;

&lt;p&gt;The comparison was between &lt;a href=&#34;https://metacpan.org/pod/release/JJNAPIORK/Catalyst-Runtime-5.90062/lib/Catalyst/Runtime.pm&#34;&gt;Catalyst 5.90062&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/release/XSAWYERX/Dancer2-0.140000&#34;&gt;Dancer2 0.14&lt;/a&gt;. For local tests the machine used was a 2011 MacBook Air running Fedora 19 and Perl 5.16.3.&lt;/p&gt;

&lt;h3 id=&#34;number-of-dependencies:e19552eba592fbca5a97d9be32189ba0&#34;&gt;Number of Dependencies&lt;/h3&gt;

&lt;p&gt;The greatest perceived difference between Catalyst and Dancer2 is the number of dependencies each has, with Catalyst being thought to have &amp;ldquo;too many&amp;rdquo;. For example at the recent German Perl workshop, Dancer2 development lead Sawyer X &lt;a href=&#34;http://www.youtube.com/watch?v=91xDp_Eus5c&amp;amp;t=12m09s&#34;&gt;joked&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We&amp;rsquo;re not pulling off half of CPAN like maybe a different web framework [Catalyst]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To compare the two frameworks, we need to compare all of their dependencies; not just those first-order dependencies used by the framework, but also those used by the modules used by the framework and so on. Fortunately this is an easy comparison to make using &lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created two stacks, one for &lt;a href=&#34;https://stratopan.com/sillymoose/WebStuff/Catalyst/graphs&#34;&gt;Catalyst&lt;/a&gt; and one for &lt;a href=&#34;https://stratopan.com/sillymoose/WebStuff/Dancer2/graphs&#34;&gt;Dancer2&lt;/a&gt;. Their respective dependency graphs are shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/85/catalyst%20dependencies.png&#34; alt=&#34;Catalyst framework&#34; /&gt;
&lt;img src=&#34;http://perltricks.com/images/85/dancer2%20dependencies.png&#34; alt=&#34;Dancer2 framework&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Tabulating the Stratopan data for the two stacks we get:&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Framework&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Direct Dependencies&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Recursive Dependencies&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Catalyst&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;44&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;114&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Dancer2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;29&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Stratopan reveals that while Catalyst required 15 more modules than Dancer2 (+52%), when considering recursive dependencies, the Catalyst stack is only 19% larger than the Dancer2 stack. Interestingly, over 61% of the 96 distributions Dancer2 uses are used by Catalyst.&lt;/p&gt;

&lt;h3 id=&#34;testing:e19552eba592fbca5a97d9be32189ba0&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;When installing a CPAN module, the module tests usually take the longest time of the installation process and can contribute to the perceived &amp;ldquo;size&amp;rdquo; of the module. As the maturer framework, perhaps Catalyst simply has more tests than Dancer2, and therefore it&amp;rsquo;s installation process takes longer?&lt;/p&gt;

&lt;p&gt;To check for this, I tested both frameworks installation tests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl Makefile.PL
$ make
$ make test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Catalyst&amp;rsquo;s test results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Files=166, Tests=3374, 179 wallclock secs ( 0.85 usr  0.16 sys + 172.95 cusr  4.56 csys = 178.52 CPU)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dancer2&amp;rsquo;s results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Files=78, Tests=1112, 21 wallclock secs ( 0.38 usr  0.07 sys + 19.68 cusr  1.46 csys = 21.59 CPU)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These results show that Catalyst ran 3,374 tests over 3 minutes compared to Dancer2&amp;rsquo;s 1,112 tests over 21 seconds. So while Catalyst did run more tests, it was also slower in executing them; Dancer2 executed 53 tests per second and Catalyst managed 19 tests per second.&lt;/p&gt;

&lt;p&gt;What would explain this discrepancy? Perhaps Dancer2 has more trivial tests that run quicker than Catalyst&amp;rsquo;s tests. As a control I checked the code coverage of each framework&amp;rsquo;s test suite using &lt;a href=&#34;https://metacpan.org/pod/Devel::Cover&#34;&gt;Devel::Cover&lt;/a&gt;. Dancer2&amp;rsquo;s total test coverage was 84.7% whilst Catalyst&amp;rsquo;s was 85.5% - a negligible difference.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:e19552eba592fbca5a97d9be32189ba0&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So is Catalyst&amp;rsquo;s &amp;ldquo;heavyweight&amp;rdquo; reputation deserved? Whilst it does not have a significantly greater number of dependencies than Dancer2, during installation Dancer2&amp;rsquo;s test suite runs far faster than Catalyst&amp;rsquo;s and with a similar code coverage. This doesn&amp;rsquo;t mean Dancer2&amp;rsquo;s test suite is better than Catalyst&amp;rsquo;s (Catalyst&amp;rsquo;s test suite could have higher cyclomatic complexity). But it does show that Dancer2&amp;rsquo;s simpler micro-framework approach offers benefits beyond fast startups and application development time. As a Catalyst user, I&amp;rsquo;ve found Catalyst to be plenty fast for my needs (like PerlTricks.com), however its startup time is noticeably slow and during installation tests the Catalyst test application is started and stopped multiple times. I expect that contributes more to discrepancy in installation times between Dancer2 and Catalyst than anything else.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F85%2F2014%2F5%2F5%2FJust-how-much-heavier-is-Catalyst-than-Dancer2-&amp;amp;text=Just+how+much+heavier+is+Catalyst+than+Dancer2%3F&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F85%2F2014%2F5%2F5%2FJust-how-much-heavier-is-Catalyst-than-Dancer2-&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl web application security - HTTP headers</title>
      <link>http://perltricks.com/article/81/2014/3/31/Perl-web-application-security---HTTP-headers/</link>
      <pubDate>Mon, 31 Mar 2014 12:27:39 +0000</pubDate>
      
      <guid>http://perltricks.com/article/81/2014/3/31/Perl-web-application-security---HTTP-headers/</guid>
      <description>

&lt;p&gt;&lt;em&gt;HTTP headers are included in every HTTP response from a web server. Setting the appropriate HTTP headers can reduce the risk of man-in-the-middle and cross-site-scripting attacks on a web application. You can also reduce information leaks about the web application configuration - vital data that gives a would-be attacker clues about potential vulnerabilities. Read on to find out how to set the appropriate headers in your Perl web application.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;application:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Application&lt;/h3&gt;

&lt;p&gt;All three of major Perl web frameworks provide some kind of identifying header. Dancer and Mojolicious use &amp;ldquo;X-Powered-By&amp;rdquo; and Catalyst uses &amp;ldquo;X-Catalyst&amp;rdquo;. The problem with this header is it informs the requester the language of the application (Perl) and the web framework being used. In some cases it also reveals the version number. With this information a would-be attacker can focus on exploits that are specific to Perl or the web framework. Here&amp;rsquo;s how you can disable it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By default Catalyst does not turn on its application header. The header is controlled by the &amp;ldquo;enable_catalyst_header&amp;rdquo; config option, normally located in the root application class (e.g. lib/MyApp.pm) or the application config file.&lt;/li&gt;
&lt;li&gt;Mojolicious does not set this header since &lt;a href=&#34;https://github.com/kraih/mojo/blob/b5da0c7afcdd793c85e8e2a67eb29f7f36bdb601/Changes#L538&#34;&gt;version 4.00&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dancer (and Dancer2) use the &lt;a href=&#34;http://search.cpan.org/~xsawyerx/Dancer2-0.11/lib/Dancer2/Config.pod#server_tokens_%28boolean%29&#34;&gt;server tokens&lt;/a&gt; directive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;server:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;Web servers often broadcast information about themselves by default. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Server: nginx/1.4.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is risky for the same reason that revealing information about the underlying Perl web application is. To disable the server header in nginx, just add this line to your nginx.conf or virtual host file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;server_tokens off;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Apache 1.3x add these lines to your virtual host file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;ServerTokens Prod
ServerSignature Off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Apache 2.x, these lines will load the mod_headers module, and remove the server header:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;LoadModule headers_module /usr/lib/apache/modules/mod_headers.so
Header unset Server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the major Perl web frameworks ship with web servers that set the server header:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
Server: HTTP::Server::PSGI

# mojolicious
Server: Mojolicious (Perl)

# Dancer
Server: Perl Dancer 1.3121
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These headers can be overwritten within the application code. For instance, if we wanted to change the server to appear to be nginx:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;Server&#39; =&amp;gt; &#39;nginx&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;Server&#39; =&amp;gt; &#39;nginx&#39;);

# Dancer / Dancer2
header &#39;Server&#39; =&amp;gt; &#39;nginx&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;x-frame-options:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;X-Frame-Options&lt;/h3&gt;

&lt;p&gt;This header can prevent your application responses from being loaded within frame or iframe HTML elements (see the &lt;a href=&#34;http://tools.ietf.org/html/rfc7034&#34;&gt;spec&lt;/a&gt;). This is to prevent clickjacking requests where your application response is displayed on another website, within an invisible iframe, which then hijacks the user&amp;rsquo;s request when they click a link on your website. Here&amp;rsquo;s how to disable it in the respective web frameworks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-Frame-Options&#39; =&amp;gt; &#39;DENY&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-Frame-Options&#39; =&amp;gt; &#39;DENY&#39;);

# Dancer / Dancer2
header &#39;X-Frame-Options&#39; =&amp;gt; &#39;DENY&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;strict-transport-security:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Strict-Transport-Security&lt;/h3&gt;

&lt;p&gt;This header instructs the requester to load all content from the domain via HTTPS and not load any content unless there is a valid ssl certificate. This header can help prevent man-in-middle attacks as it ensures that all HTTP requests and responses are encrypted. The Strict-Transport-Security header has a max-age parameter that defines how long in seconds to enforce the policy for. Here&amp;rsquo;s how to add it to your Perl web application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;Strict-Transport-Security&#39; =&amp;gt; &#39;max-age=3600&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;Strict-Transport-Security&#39; =&amp;gt; &#39;max-age=3600&#39;);

# Dancer / Dancer2
header &#39;Strict-Transport-Security&#39; =&amp;gt; &#39;max-age=3600&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;content-security-policy:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Content-Security-Policy&lt;/h3&gt;

&lt;p&gt;The CSP header sets a whitelist of domains from which content can be safely loaded. This prevents most types of XSS attack, assuming the malicious content is not hosted by a whitelisted domain. For example this line specifies that all content should only be loaded from the responding domain:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;X-Content-Security-Policy: default-src &#39;self&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is &lt;a href=&#34;http://www.html5rocks.com/en/tutorials/security/content-security-policy%0A&#34;&gt;a lot to CSP&lt;/a&gt; (&lt;a href=&#34;http://www.w3.org/TR/CSP/&#34;&gt;spec&lt;/a&gt;) and browser support is &lt;a href=&#34;http://caniuse.com/#feat=contentsecuritypolicy&#34;&gt;fairly good&lt;/a&gt;. One downside to the whitelist approach is it&amp;rsquo;s not compatible with ad services like Google&amp;rsquo;s adsense as you won&amp;rsquo;t know the domains in advance in order to whitelist them. To set the header in your facourite Perl web application, use on of these lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-Content-Security-Policy&#39; =&amp;gt; &amp;quot;default-src &#39;self&#39;&amp;quot;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-Content-Security-Policy&#39; =&amp;gt; &amp;quot;default-src &#39;self&#39;&amp;quot;);

# Dancer / Dancer2
header &#39;X-Content-Security-Policy&#39; =&amp;gt; &amp;quot;default-src &#39;self&#39;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;x-content-type-options:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;X-Content-Type-Options&lt;/h3&gt;

&lt;p&gt;This is an IE only header that is used to disable mime sniffing. The vulnerability is that IE will auto-execute any script code contained in a file when IE attempts to detect the file type. This is disabled by default in IE anyway, but to enforce it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-Content-Type-Options&#39; =&amp;gt; &#39;nosniff&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-Content-Type-Options&#39; =&amp;gt; &#39;nosniff&#39;);

# Dancer / Dancer2
header &#39;X-Content-Type-Options&#39; =&amp;gt; &#39;nosniff&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;x-download-options:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;X-Download-Options&lt;/h3&gt;

&lt;p&gt;This is another IE-only header that prevents IE from opening an HTML file directly on download from a website. The security issue here is, if a browser opens the file directly, it can run as if it were part of the site. To add this header, use one of these lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-Download-Options&#39; =&amp;gt; &#39;noopen&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-Download-Options&#39; =&amp;gt; &#39;noopen&#39;);

# Dancer / Dancer2
header &#39;X-Download-Options&#39; =&amp;gt; &#39;noopen&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;x-xss-protection:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;X-XSS-Protection&lt;/h3&gt;

&lt;p&gt;This is the final IE-only header. It was introduced in IE8 as part of the cross-site-scripting (XSS) filter functionality (more &lt;a href=&#34;http://blogs.msdn.com/b/ieinternals/archive/2011/01/31/controlling-the-internet-explorer-xss-filter-with-the-x-xss-protection-http-header.aspx&#34;&gt;here&lt;/a&gt;). The header can force IE to turn on its XSS filter. Additionally it has an optional setting called &amp;ldquo;mode&amp;rdquo; that can force IE to block the entire page if an XSS attempt is detected. Here&amp;rsquo;s how to add it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-XSS-Protection&#39; =&amp;gt; &amp;quot;1; &#39;mode=block&#39;&amp;quot;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-XSS-Protection&#39; =&amp;gt; &amp;quot;1; &#39;mode=block&#39;&amp;quot;);

# Dancer / Dancer2
header &#39;X-XSS-Protection&#39; =&amp;gt; &amp;quot;1; &#39;mode=block&#39;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adding-headers-in-the-web-server:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Adding headers in the web server&lt;/h3&gt;

&lt;p&gt;You may prefer to add these headers in the web server configuration, rather than at the application level. For nginx, use the &amp;ldquo;add_header&amp;rdquo; directive - see &lt;a href=&#34;https://gist.github.com/plentz/6737338&#34;&gt;here&lt;/a&gt; for a good example. For Apache use the &amp;ldquo;Header set&amp;rdquo; directive in mod_headers (&lt;a href=&#34;http://moko.ru/doc/apache/mod/mod_headers.html&#34;&gt;1.3&lt;/a&gt;, &lt;a href=&#34;http://httpd.apache.org/docs/2.0/de/mod/mod_headers.html&#34;&gt;2.x&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;testing-the-headers:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Testing the headers&lt;/h3&gt;

&lt;p&gt;tThere are a number of ways to check which headers your application is returning. Firstly you can use curl (replace perltricks.com with the URL to check):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;curl -I perltricks.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return the HTTP headers only:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;HTTP/1.1 200 OK
Server: nginx
Date: Mon, 31 Mar 2014 01:54:59 GMT
Content-Type: text/html; charset=utf-8
Connection: keep-alive
Cache-Control: max-age=3600
X-Frame-Options: DENY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use &lt;a href=&#34;https://securityheaders.com/&#34;&gt;SecurityHeaders.com&amp;rsquo;s&lt;/a&gt; excellent checking tool. Or you can inspect the headers yourself by using your browser&amp;rsquo;s developer mode.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;These HTTP headers are easy to add and can make a reduce your application&amp;rsquo;s vulnerability to XSS and man-in-the-middle attacks, particularly for applications that allow users to upload content.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F81%2F2014%2F3%2F31%2FPerl-web-application-security-HTTP-headers&amp;amp;text=Perl+web+application+security+-+HTTP+headers&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F81%2F2014%2F3%2F31%2FPerl-web-application-security-HTTP-headers&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover photo Â© &lt;a href=&#34;http://www.flickr.com/photos/rightee/259084010/in/photostream/&#34;&gt;Andy Wright&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updates: Mojolicious application header corrected. Web frameworks server header added. (31/3/2014)&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple web framework FastCGI caching with nginx - part 2</title>
      <link>http://perltricks.com/article/77/2014/3/17/Simple-web-framework-FastCGI-caching-with-nginx---part-2/</link>
      <pubDate>Mon, 17 Mar 2014 01:54:09 +0000</pubDate>
      
      <guid>http://perltricks.com/article/77/2014/3/17/Simple-web-framework-FastCGI-caching-with-nginx---part-2/</guid>
      <description>

&lt;p&gt;&lt;em&gt;In &lt;a href=&#34;http://perltricks.com/article/76/2014/3/11/Simple-web-framework-FastCGI-caching-with-nginx-part-1&#34;&gt;part 1&lt;/a&gt; of this series, we covered how to cache FastCGI responses with nginx and how to purge the cache on demand. We saw how easy it is to setup caching with the main Perl web frameworks (Catalyst, Dancer and Mojolicious). In this article we&amp;rsquo;ll use Nginx::FastCGI::Cache to manage our cached responses and gain some useful benefits along the way.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need Perl v5.12.3 or greater to install &lt;a href=&#34;https://metacpan.org/pod/Nginx::FastCGI::Cache&#34;&gt;Nginx::FastCGI::Cache&lt;/a&gt;. The CPAN Testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=Nginx-FastCGI-Cache+0.008&#34;&gt;results&lt;/a&gt; show that it runs on most platforms including Windows. To install the module using CPAN, just open the terminal and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Nginx::FastCGI::Cache
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;nginx-fastcgi-caching-explained:fa5e57e16e5afa820891a6788e36f753&#34;&gt;nginx fastcgi caching explained&lt;/h3&gt;

&lt;p&gt;In an nginx virtual host file, the &amp;ldquo;fastcgi_cache_path&amp;rdquo; directive sets the root directory from where nginx will build the cache. nginx uses the variables of the &amp;ldquo;fastcgi_cache_key&amp;rdquo; directive to create an md5 hexadecimal hash key as the filename. The &amp;ldquo;levels&amp;rdquo; value determines the number of subdirectories and the subdirectories name length. For example, with this configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache_path  /var/cache/nginx levels=1:2
                    keys_zone=app_cache:50m
                    inactive=60m;
fastcgi_cache_key &amp;quot;$scheme$request_method$host$request_uri&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A GET request for &amp;ldquo;&lt;a href=&#34;http://perltricks.com/&amp;quot;&#34;&gt;http://perltricks.com/&amp;quot;&lt;/a&gt; would have a key of &amp;ldquo;httpGETperltricks.com/&amp;rdquo;, and be stored at: &amp;ldquo;/var/cache/nginx/4/85/200d51ef65b0a76de421f8f1ec047854&amp;rdquo;. Note that the name of the first subdirectory is the last letter of the md5 hash (&amp;ldquo;4&amp;rdquo;) and the second subdirectory name the previous two letters (&amp;ldquo;85&amp;rdquo;) - this is because of the levels value of &amp;ldquo;1:2&amp;rdquo; set in the nginx virtual host file. Deleting the file &amp;ldquo;/var/cache/nginx/4/85/200d51ef65b0a76de421f8f1ec047854 will purge it from nginx&amp;rsquo;s cache.&lt;/p&gt;

&lt;h3 id=&#34;introducing-nginx-fastcgi-cache:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Introducing Nginx::FastCGI::Cache&lt;/h3&gt;

&lt;p&gt;I wrote &lt;a href=&#34;https://metacpan.org/pod/Nginx::FastCGI::Cache&#34;&gt;Nginx::FastCGI::Cache&lt;/a&gt; to make it easy to purge individually cached fastcgi responses from the nginx cache. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Nginx::FastCGI::Cache;
 
my $nginx_cache = Nginx::FastCGI::Cache-&amp;gt;new({ location =&amp;gt; &#39;/var/cache/nginx&#39; });
$nginx_cache-&amp;gt;purge_file(&amp;quot;http://perltricks.com/&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will convert the URL into the md5 hashed cache key, and delete it from the nginx cache directory. By default &amp;ldquo;purge_file&amp;rdquo; assumes the HTTP request type is GET. If you want to purge a file for a different request type, simply include it as a parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$nginx_cache-&amp;gt;purge_file(&amp;quot;http://perltricks.com/&amp;quot;, &amp;quot;HEAD&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to blow away the whole cache, use the &amp;ldquo;purge_cache&amp;rdquo; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$nginx_cache-&amp;gt;purge_cache;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two methods should be all that&amp;rsquo;s required to conveniently manage the nginx cache from your favourite Perl web application.&lt;/p&gt;

&lt;h3 id=&#34;portability:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Portability&lt;/h3&gt;

&lt;p&gt;In part 1 our purge cache code used a system call to the GNU find program to delete all the files in the cache. Whilst this is fine as a quick hack, using an external program limits the portability of the code (it wouldn&amp;rsquo;t run on Windows for example). Nginx::FastCGI::Cache uses Perl&amp;rsquo;s opendir and unlink functions to read the cache directory and delete files, which should work on all platforms that Perl runs on.&lt;/p&gt;

&lt;h3 id=&#34;safety-first:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Safety First&lt;/h3&gt;

&lt;p&gt;Whenever you have a program that is going to recursively delete all files in a directory, you want to be sure that it&amp;rsquo;s looking at the correct directory. That&amp;rsquo;s why the &amp;ldquo;location&amp;rdquo; is a mandatory parameter for the Nginx::FastCGI::Cache constructor - no default location is assumed. Additionally, should the Perl process not have sufficient permissions to read the cache directory or delete a cached file, Nginx::FastCGI::Cache will &lt;a href=&#34;http://perldoc.perl.org/Carp.html#NAME&#34;&gt;croak&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;other-nginx-considerations:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Other nginx considerations&lt;/h3&gt;

&lt;p&gt;By default, nginx will not cache a fastcgi response that includes a &amp;ldquo;Set-Cookie&amp;rdquo; header. Depending on how you are using cookies, you may want to have nginx cache the response and ignore the &amp;ldquo;Set-Cookie&amp;rdquo; header. This can be done by adding this line to your virtual host file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_ignore_headers &amp;quot;Set-Cookie&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bear in mind that the &amp;ldquo;set-Cookie&amp;rdquo; header will be removed from the response altogether, so this is useful when serving uniform responses that do not distinguish between users with session cookies and those without.&lt;/p&gt;

&lt;p&gt;By default nginx will only cache GET and HEAD requests. This is a good default, but you may want to restrict the cache to just GET responses, or enable other kinds of HTTP requests such as POST. If so, add the fastcgi_cache_methods directive to your nginx virtual host file. For example to only cache GET requests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache_methods GET;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nginx &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&#34;&gt;documentation&lt;/a&gt; provides comprehensive detail on the fastcgi module.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Whether you are using Catalyst, Dancer or Mojolicious, setting the appropriate caching headers is easy (see &lt;a href=&#34;http://perltricks.com/article/76/2014/3/11/Simple-web-framework-FastCGI-caching-with-nginx-part-1&#34;&gt;part 1&lt;/a&gt;). Consider using &lt;a href=&#34;https://metacpan.org/pod/Nginx::FastCGI::Cache&#34;&gt;Nginx::FastCGI::Cache&lt;/a&gt; with nginx to conveniently purge the cache on demand.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F77%2F2014%2F3%2F16%2FSimple-web-framework-FastCGI-caching-with-nginx-part-2&amp;amp;text=Simple+web+framework+FastCGI+caching+with+nginx+-+part+2&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F77%2F2014%2F3%2F16%2FSimple-web-framework-FastCGI-caching-with-nginx-part-2&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple web framework FastCGI caching with nginx - part 1</title>
      <link>http://perltricks.com/article/76/2014/3/11/Simple-web-framework-FastCGI-caching-with-nginx---part-1/</link>
      <pubDate>Tue, 11 Mar 2014 03:18:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/76/2014/3/11/Simple-web-framework-FastCGI-caching-with-nginx---part-1/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Fastcgi server caching is a wonderful technique for improving response times and reducing load on a web application. In part 1 of this series we look at how to cache responses with Catalyst, Dancer and Mojolocious and how to clear the cache on-demand when using the nginx web server. Before you know it, your web application will be faster than a racing llama!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;fastcgi-server-caching-explained:8c253a4acb451f68f821b231698a79ac&#34;&gt;FastCGI server caching explained&lt;/h3&gt;

&lt;p&gt;FastCGI server caching is when the FastCGI application sets a caching header in its response to an upstream server. The &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.3&#34;&gt;max-age header&lt;/a&gt; defines in seconds from the time of the request how long to cache the response message for. If it&amp;rsquo;s correctly configured, the upstream server will cache the response, and for the duration of the max-age value, return the cached response to all requests to the same URL. As a bonus the max-age header can be passed back to the requester, and it will be cached in their browser as well.&lt;/p&gt;

&lt;p&gt;FastCGI server caching brings the following benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cut response times by as much as 95%.&lt;/li&gt;
&lt;li&gt;Reduce load on the the FastCGI application (imagine 1 request per hour per URL).&lt;/li&gt;
&lt;li&gt;Reduce load on the the web server with browser caching.&lt;/li&gt;
&lt;li&gt;Avoid corrupt memory risks of simultaneous read/write when caching responses in the FastCGI application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;how-to-cache-your-catalyst-mojolicious-dancer-response:8c253a4acb451f68f821b231698a79ac&#34;&gt;How to cache your Catalyst / Mojolicious / Dancer response&lt;/h3&gt;

&lt;p&gt;All of the major Perl frameworks support server caching and the good news is it&amp;rsquo;s easy to implement. For example, if $seconds is number of seconds to cache the response for, in Catalyst add this line to a controller method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$c-&amp;gt;response-&amp;gt;header(&#39;Cache-Control&#39; =&amp;gt; &amp;quot;max-age=$seconds&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Mojolicious, add this code to your controller action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$self-&amp;gt;res-&amp;gt;headers-&amp;gt;cache_control(&#39;max-age=$seconds&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for Dancer, update a route with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;header &#39;max-age&#39; =&amp;gt; &#39;$seconds&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-setup-nginx-fastcgi-caching:8c253a4acb451f68f821b231698a79ac&#34;&gt;How to setup nginx FastCGI caching&lt;/h3&gt;

&lt;p&gt;To enable nginx caching, add the fastcgi cache directives to to your virtual host config file. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache_path  /var/nginx/cache levels=1:2
                    keys_zone=fcgi_cache:50m
                    inactive=60m;
fastcgi_cache_key &amp;quot;$scheme$request_method$host$request_uri&amp;quot;;
fastcgi_buffers 256 4k; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code specifies the cache directory, zone name, cache key and buffers (see the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&#34;&gt;manual&lt;/a&gt; for details). The code should be outside your server declaration. Within your server declaration, add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache fcgi_cache;
fastcgi_cache_valid 200 1s;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code defines the cache zone to use (&amp;ldquo;fcgi_cache&amp;rdquo;), sets the cache size to 200mb and by default caches a response for 1 second. The max-age header will override the default cache time, but you may want to choose a value other than 1 second, depending on your application&amp;rsquo;s needs. Here is a complete example virtual host file with fastcgi caching:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache_path  /var/nginx/cache levels=1:2
                    keys_zone=PerlTricks:50m
                    inactive=60m;
fastcgi_cache_key &amp;quot;$scheme$request_method$host$request_uri&amp;quot;;
fastcgi_buffers 256 4k;

server {
    listen 80 default;
    server_name perltricks.com;
    try_files $uri @fcgi;
    location @fcgi {
        fastcgi_cache PerlTricks;
        fastcgi_cache_valid 200 5m;
        fastcgi_pass unix:/tmp/perltricks.socket;
        include /etc/nginx/fastcgi.conf;
        fastcgi_param SCRIPT_NAME /;
    }   
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For an in-depth look at the configuring the nginx fastcgi cache, check out this &lt;a href=&#34;https://www.digitalocean.com/community/articles/how-to-setup-fastcgi-caching-with-nginx-on-your-vps&#34;&gt;useful article&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;clearing-the-cache:8c253a4acb451f68f821b231698a79ac&#34;&gt;Clearing the cache&lt;/h3&gt;

&lt;p&gt;Whilst caching responses can deliver huge benefits, it would be nice to be able to clear the cache on-demand, in case the application state changes. Fortunately with nginx this is super-easy with Perl - all you have to do is delete all files in the fastcgi_cache_path declared in the virtual host config file. For example, on Unix-based systems this works:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub clear_cache {
    if (-e &#39;/var/nginx/cache&#39;) {
        system(&#39;find /var/nginx/cache -type f -exec rm -f {} \;&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion:8c253a4acb451f68f821b231698a79ac&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;All of the major Perl web frameworks support FastCGI server caching. It&amp;rsquo;s easy to set up and with nginx, easy to manage. However there is more that can be done: in part 2 of this series we&amp;rsquo;ll make our cache management more precise by adding the ability to clear specific URL responses from the cache, rather than obliterating the whole cache in one go. We&amp;rsquo;ll also look at how to make the &amp;ldquo;clear_cache&amp;rdquo; subroutine safer and Windows compatible.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F76%2F2014%2F3%2F11%2FSimple-web-framework-FastCGI-caching-with-nginx-part-1&amp;amp;text=Simple+web+framework+FastCGI+caching+with+nginx+-+part+1&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F76%2F2014%2F3%2F11%2FSimple-web-framework-FastCGI-caching-with-nginx-part-1&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover picture Â© David Hoshor licensed via &lt;a href=&#34;http://creativecommons.org/licenses/by/2.0/&#34;&gt;Creative Commons&lt;/a&gt;. The picture has been digitally enhanced.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

