<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mvc on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/mvc/</link>
    <description>Recent content in Mvc on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Jul 2014 12:44:13 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/mvc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Create static web apps with Wget</title>
      <link>https://dnmfarrell.github.io/article/103/2014/7/22/Create-static-web-apps-with-Wget/</link>
      <pubDate>Tue, 22 Jul 2014 12:44:13 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/103/2014/7/22/Create-static-web-apps-with-Wget/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Last week we covered &lt;a href=&#34;https://metacpan.org/pod/distribution/App-Wallflower/bin/wallflower&#34;&gt;Wallflower&lt;/a&gt; an awesome utility for generating static websites from Perl web applications. This week we&amp;rsquo;re covering an alternative method, that uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Wget&#34;&gt;Wget&lt;/a&gt;. One benefit of this method is it can be used on any dynamic web application, not just Perl ones.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need Wget installed - if you&amp;rsquo;re using Linux it should already be installed. OSX users can install it with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; and there is a Windows &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages/wget.htm&#34;&gt;version&lt;/a&gt; available. To follow this example you&amp;rsquo;ll also need Dancer2 installed, which you can get via cpan:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Dancer2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-the-application:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Create the application&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll use Dancer2 to create a basic skeleton app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ dancer2 -a MyApp
+ MyApp
+ MyApp/config.yml
+ MyApp/MANIFEST.SKIP
+ MyApp/Makefile.PL
+ MyApp/views
+ MyApp/views/index.tt
+ MyApp/views/layouts
+ MyApp/views/layouts/main.tt
+ MyApp/t
+ MyApp/t/002_index_route.t
+ MyApp/t/001_base.t
+ MyApp/bin
+ MyApp/bin/app.pl
+ MyApp/lib
+ MyApp/lib/MyApp.pm
+ MyApp/environments
+ MyApp/environments/production.yml
+ MyApp/environments/development.yml
+ MyApp/public
+ MyApp/public/500.html
+ MyApp/public/404.html
+ MyApp/public/favicon.ico
+ MyApp/public/dispatch.cgi
+ MyApp/public/dispatch.fcgi
+ MyApp/public/css
+ MyApp/public/css/error.css
+ MyApp/public/css/style.css
+ MyApp/public/javascripts
+ MyApp/public/javascripts/jquery.js
+ MyApp/public/images
+ MyApp/public/images/perldancer.jpg
+ MyApp/public/images/perldancer-bg.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets start the app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ ./MyApp/bin/app.pl
&amp;gt;&amp;gt; Dancer2 v0.143000 server 435 listening on http://0.0.0.0:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-the-static-site:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Create the static site&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll point Wget at the site in recursive mode, so that it pulls all the files we need (up to a depth of 5 by default).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ wget -r 0:3000 -d 0:3000 --page-requisites
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we pass Wget the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;rdquo;-r 0:3000&amp;rdquo; to recursively follow links from 0:3000&lt;/li&gt;
&lt;li&gt;-&amp;ldquo;d 0:3000&amp;rdquo; to only save static files from the local domain&lt;/li&gt;
&lt;li&gt;&amp;rdquo;&amp;ndash;page-requisites&amp;rdquo; to pull all required files for a page, even if beyond our depth limit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default Wget will create a directory named after the domain (&amp;ldquo;0:3000&amp;rdquo;) and place all static files there. And that&amp;rsquo;s it, all the files for our static site have been generated.&lt;/p&gt;

&lt;h3 id=&#34;wget-vs-wallflower:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Wget vs Wallflower&lt;/h3&gt;

&lt;p&gt;So if both apps can generate static sites, which one is better? If you&amp;rsquo;re working with a non-Perl site, then Wget is obviously the way to go. In terms of speed, Wget is faster if you combine the command with xargs and request the urls in parallel:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cat urls.txt | xargs -P16 wget -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To take advantage of the parallel GET requests, you&amp;rsquo;ll need to serve the application on a web server though.&lt;/p&gt;

&lt;p&gt;Wallflower has nice option (&amp;ldquo;-F&amp;rdquo;) to take a list of URLs to download, which can be useful if the entire site cannot be downloaded by following links from the root application page. &lt;a href=&#34;https://metacpan.org/pod/Wallflower&#34;&gt;App::Wallflower&lt;/a&gt; is the source library for Wallflower, and extendible through Perl code, so you can further tailor the process to meet your needs. This can be used for post-processing actions like generating a sitemap.xml or advanced setups like a hybrid application, where the public pages of the site are static, but the secure parts remain dynamic. With Wallflower all of this can be scripted in Perl, with Wget you&amp;rsquo;d need to a combination of shell scripts and Perl, which is less convenient.&lt;/p&gt;

&lt;p&gt;As was recommended in last week&amp;rsquo;s &lt;a href=&#34;http://perltricks.com/article/102/2014/7/15/Generate-static-websites-from-dynamic-Perl-web-apps#h3Wallflower%20Tips&#34;&gt;article&lt;/a&gt; make sure you&amp;rsquo;re using absolute urls in your template code to avoid deployment issues with your static files.&lt;/p&gt;

&lt;h3 id=&#34;thanks:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Thanks to Steve Schnepp for contacting us with this tip. Thanks to Philippe Bruhat for creating Wallflower and providing additional technical guidance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;Correction:&lt;/strong&gt; technical comparison of Wallflower and Wget updated following clarification from module author. 2014-08-02*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generate static websites from dynamic Perl web apps</title>
      <link>https://dnmfarrell.github.io/article/102/2014/7/15/Generate-static-websites-from-dynamic-Perl-web-apps/</link>
      <pubDate>Tue, 15 Jul 2014 12:26:52 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/102/2014/7/15/Generate-static-websites-from-dynamic-Perl-web-apps/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Static websites aren&amp;rsquo;t suitable for every situation, but they have several advantages over dynamic apps; they&amp;rsquo;re more efficient, more secure and simpler to deploy. That said, developing and maintaining a static site is a pain, there&amp;rsquo;s just too much repetitive boilerplate code. Enter &lt;a href=&#34;https://metacpan.org/pod/wallflower&#34;&gt;Wallflower&lt;/a&gt;, it generates static websites from PSGI compatible Perl web applications. You get the best of both worlds: develop the routes, templates and unit tests in your favourite web framework but deploy it as a static website with Wallflower.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:29419c887d0bf32d7cca4c904ddd08fe&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;The CPAN Testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=App-Wallflower+1.004&#34;&gt;results&lt;/a&gt; for the latest version (v1.004) of App::Wallflower show it runs on just about any Perl and operating system, including Windows. You can install it from CPAN by going to the command line and typing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan App::Wallflower
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wallflower-in-action:29419c887d0bf32d7cca4c904ddd08fe&#34;&gt;Wallflower in action&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s create a simple application using &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer2&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ dancer2 -a MyApp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a skeleton application for us. Now change into the root application directory and create a new directory to hold the static files, we&amp;rsquo;ll call it &amp;ldquo;static&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cd MyApp
$ mkdir static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s all we need to generate the static site with wallflower:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ wallflower --a bin/app.pl --d static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wallflower will request the application root page (&amp;lsquo;/&amp;rsquo;) and spider all links it finds from there, copying the files to the static folder. This includes files referenced in your html and css, such as JavaScript files. If your app has links to all of its pages, this is all you need.&lt;/p&gt;

&lt;h3 id=&#34;test-the-static-site-with-nginx:29419c887d0bf32d7cca4c904ddd08fe&#34;&gt;Test the static site with nginx&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s deploy the site with nginx locally (you&amp;rsquo;ll need nginx installed for this). First create the virtual host file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;server {
    listen 80;
    server_name localhost;
    root /var/www/MyApp/static;
    location / {
        index index.html;
        rewrite ^/$ /index.html break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming a unix-like platform, save the virtual host file to &amp;ldquo;/etc/nginx/sites-available/localhost&amp;rdquo;. Next enter these commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ sudo mkdir /var/www/MyApp
$ sudo cp static /var/www/MyApp
$ cd /etc/nginx/sites-enabled
$ sudo ln -s ../sites-available/localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to start nginx. On RHEL/Fedora/CentOS you can start nginx with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ sudo nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On Ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sudo service nginx start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now check out the site at &lt;a href=&#34;http://localhost:&#34;&gt;http://localhost:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/102/dancer2.png&#34; title=&#34;The default Dancer app - statically deployed&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/102/dancer2_small.png&#34; alt=&#34;The default Dancer app - statically deployed&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks pretty good to me!&lt;/p&gt;

&lt;h3 id=&#34;wallflower-tips:29419c887d0bf32d7cca4c904ddd08fe&#34;&gt;Wallflower Tips&lt;/h3&gt;

&lt;p&gt;A few things I&amp;rsquo;ve found whilst using Wallflower:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use absolute urls over relative ones. So if you host your font files in your css directory, use: &amp;ldquo;/css/MyFont.ttf&amp;rdquo; instead of &amp;ldquo;MyFont.ttf&amp;rdquo; in your css files.&lt;/li&gt;
&lt;li&gt;Think about files you use but aren&amp;rsquo;t directly linked to in your app&amp;rsquo;s HTML pages, the sitemap.xml file for example. Feed urls for these files to Wallflower with the -F option.&lt;/li&gt;
&lt;li&gt;Watch out for urls in commented code as Wallflower will copy these too!&lt;/li&gt;
&lt;li&gt;The Wallflower docs recommend using extensions in your urls to ensure the correct content-type is set. I found this wasn&amp;rsquo;t required when I deployed the files with nginx.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;conclusion:29419c887d0bf32d7cca4c904ddd08fe&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Whether you prefer developing applications with Catalyst, Dancer or Mojolicious, Wallflower is a useful tool that can be incorporated into your development and deployment process. For further examples of Wallflower in action, check out the &lt;a href=&#34;https://metacpan.org/pod/Wallflower::Tutorial&#34;&gt;tutorial&lt;/a&gt; and advent calendar &lt;a href=&#34;http://www.perladvent.org/2012/2012-12-22.html&#34;&gt;entry&lt;/a&gt; by Wallflower creator Philippe Bruhat (BooK).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/ruthanddave/9432335346/in/photolist-9YgULK-6CwkPH-m68vYZ-4P7TsV-4Pc9dL-7UqEXc-8rbEQq-mPFbgf-Hw6fU-2JcQ24-7ZdMJc-5q1xn5-fnvbFu-fpNhu5-bY6j7J-6HC9cQ-7Y666Z-4RGjZ5-c5bJ5A-5Ma2Kx-7UshUJ-buamir-qLy2D-26mzb-nUfKdk-818aoT-4ne9U5-azaNvR-c7Ztsj-sbu9W-4hrgcG-8r8yrv-hdmVrd-a72iqb-4Kebyi-aEpfqd-6cdRLZ-7iqNqm-6XsteA-b8crZZ-ubPgJ-8pBxDZ-6R63RH-6AnSCX-byKj2-8b97G8-d6X7B-dddPtT-6pUqhf-ejhHg3|&#34;&gt;Ruth Hartnup&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Just how much heavier is Catalyst than Dancer2?</title>
      <link>https://dnmfarrell.github.io/article/85/2014/5/5/Just-how-much-heavier-is-Catalyst-than-Dancer2-/</link>
      <pubDate>Mon, 05 May 2014 12:29:09 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/85/2014/5/5/Just-how-much-heavier-is-Catalyst-than-Dancer2-/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Within the Perl community it is received wisdom that Catalyst is a heavyweight web framework with many dependencies and that Dancer2 is a micro web framework that&amp;rsquo;s more agile than a Cirque du Soleil acrobat. But is it true?&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;tech-specs:e19552eba592fbca5a97d9be32189ba0&#34;&gt;Tech Specs&lt;/h3&gt;

&lt;p&gt;The comparison was between &lt;a href=&#34;https://metacpan.org/pod/release/JJNAPIORK/Catalyst-Runtime-5.90062/lib/Catalyst/Runtime.pm&#34;&gt;Catalyst 5.90062&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/release/XSAWYERX/Dancer2-0.140000&#34;&gt;Dancer2 0.14&lt;/a&gt;. For local tests the machine used was a 2011 MacBook Air running Fedora 19 and Perl 5.16.3.&lt;/p&gt;

&lt;h3 id=&#34;number-of-dependencies:e19552eba592fbca5a97d9be32189ba0&#34;&gt;Number of Dependencies&lt;/h3&gt;

&lt;p&gt;The greatest perceived difference between Catalyst and Dancer2 is the number of dependencies each has, with Catalyst being thought to have &amp;ldquo;too many&amp;rdquo;. For example at the recent German Perl workshop, Dancer2 development lead Sawyer X &lt;a href=&#34;http://www.youtube.com/watch?v=91xDp_Eus5c&amp;amp;t=12m09s&#34;&gt;joked&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We&amp;rsquo;re not pulling off half of CPAN like maybe a different web framework [Catalyst]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To compare the two frameworks, we need to compare all of their dependencies; not just those first-order dependencies used by the framework, but also those used by the modules used by the framework and so on. Fortunately this is an easy comparison to make using &lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created two stacks, one for &lt;a href=&#34;https://stratopan.com/sillymoose/WebStuff/Catalyst/graphs&#34;&gt;Catalyst&lt;/a&gt; and one for &lt;a href=&#34;https://stratopan.com/sillymoose/WebStuff/Dancer2/graphs&#34;&gt;Dancer2&lt;/a&gt;. Their respective dependency graphs are shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/85/catalyst%20dependencies.png&#34; title=&#34;Stratopan Catalyst stack&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/85/catalyst%20dependencies_small.png&#34; alt=&#34;Catalyst framework&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://dnmfarrell.github.io/static/images/85/dancer2%20dependencies.png&#34; title=&#34;Stratopan Dancer2 stack&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/85/dancer2%20dependencies_small.png&#34; alt=&#34;Dancer2 framework&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tabulating the Stratopan data for the two stacks we get:&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Framework&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Direct Dependencies&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Recursive Dependencies&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Catalyst&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;44&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;114&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Dancer2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;29&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Stratopan reveals that while Catalyst required 15 more modules than Dancer2 (+52%), when considering recursive dependencies, the Catalyst stack is only 19% larger than the Dancer2 stack. Interestingly, over 61% of the 96 distributions Dancer2 uses are used by Catalyst.&lt;/p&gt;

&lt;h3 id=&#34;testing:e19552eba592fbca5a97d9be32189ba0&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;When installing a CPAN module, the module tests usually take the longest time of the installation process and can contribute to the perceived &amp;ldquo;size&amp;rdquo; of the module. As the maturer framework, perhaps Catalyst simply has more tests than Dancer2, and therefore it&amp;rsquo;s installation process takes longer?&lt;/p&gt;

&lt;p&gt;To check for this, I tested both frameworks installation tests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl Makefile.PL
$ make
$ make test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Catalyst&amp;rsquo;s test results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Files=166, Tests=3374, 179 wallclock secs ( 0.85 usr  0.16 sys + 172.95 cusr  4.56 csys = 178.52 CPU)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dancer2&amp;rsquo;s results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Files=78, Tests=1112, 21 wallclock secs ( 0.38 usr  0.07 sys + 19.68 cusr  1.46 csys = 21.59 CPU)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These results show that Catalyst ran 3,374 tests over 3 minutes compared to Dancer2&amp;rsquo;s 1,112 tests over 21 seconds. So while Catalyst did run more tests, it was also slower in executing them; Dancer2 executed 53 tests per second and Catalyst managed 19 tests per second.&lt;/p&gt;

&lt;p&gt;What would explain this discrepancy? Perhaps Dancer2 has more trivial tests that run quicker than Catalyst&amp;rsquo;s tests. As a control I checked the code coverage of each framework&amp;rsquo;s test suite using &lt;a href=&#34;https://metacpan.org/pod/Devel::Cover&#34;&gt;Devel::Cover&lt;/a&gt;. Dancer2&amp;rsquo;s total test coverage was 84.7% whilst Catalyst&amp;rsquo;s was 85.5% - a negligible difference.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:e19552eba592fbca5a97d9be32189ba0&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So is Catalyst&amp;rsquo;s &amp;ldquo;heavyweight&amp;rdquo; reputation deserved? Whilst it does not have a significantly greater number of dependencies than Dancer2, during installation Dancer2&amp;rsquo;s test suite runs far faster than Catalyst&amp;rsquo;s and with a similar code coverage. This doesn&amp;rsquo;t mean Dancer2&amp;rsquo;s test suite is better than Catalyst&amp;rsquo;s (Catalyst&amp;rsquo;s test suite could have higher cyclomatic complexity). But it does show that Dancer2&amp;rsquo;s simpler micro-framework approach offers benefits beyond fast startups and application development time. As a Catalyst user, I&amp;rsquo;ve found Catalyst to be plenty fast for my needs (like PerlTricks.com), however its startup time is noticeably slow and during installation tests the Catalyst test application is started and stopped multiple times. I expect that contributes more to discrepancy in installation times between Dancer2 and Catalyst than anything else.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F85%2F2014%2F5%2F5%2FJust-how-much-heavier-is-Catalyst-than-Dancer2-&amp;amp;text=Just+how+much+heavier+is+Catalyst+than+Dancer2%3F&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F85%2F2014%2F5%2F5%2FJust-how-much-heavier-is-Catalyst-than-Dancer2-&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is your login page secure?</title>
      <link>https://dnmfarrell.github.io/article/84/2014/4/28/Is-your-login-page-secure-/</link>
      <pubDate>Mon, 28 Apr 2014 03:14:13 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/84/2014/4/28/Is-your-login-page-secure-/</guid>
      <description>

&lt;p&gt;How many criteria do you think there are for a web application to securely login its users? &lt;a href=&#34;http://www.amazon.com/gp/product/1118026470/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1118026470&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;The Web Application Hacker&amp;rsquo;s Handbook&lt;/a&gt; (affiliate link) lists 5:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prevent information leaks&lt;/li&gt;
&lt;li&gt;Handle credentials secretively&lt;/li&gt;
&lt;li&gt;Validate credentials properly&lt;/li&gt;
&lt;li&gt;Prevent brute-force attacks&lt;/li&gt;
&lt;li&gt;Log, monitor and notify&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So there are 5 criteria, but how you do implement them? I&amp;rsquo;ve created a &lt;a href=&#34;https://github.com/sillymoose/SecApp_login&#34;&gt;new web application&lt;/a&gt; called &amp;ldquo;SecApp&amp;rdquo; using Perl&amp;rsquo;s Catalyst web framework that attempts to satisfy these criteria - we&amp;rsquo;ll step through each one and you can judge for yourself if it does.&lt;/p&gt;

&lt;h3 id=&#34;how-to-setup-the-app:ba4c9275de3995b673588b08da4e28c2&#34;&gt;How to setup the app&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;d like to download the app and follow along you can, but this step is optional. You&amp;rsquo;re going to need at least Perl 5.14.4 and a git installed. To download the app from our github page, just open up the command line and enter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ git clone https://github.com/sillymoose/SecApp_login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s no way around it; this app has a lot of dependencies. To ease the burden, start by installing &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanminus&lt;/a&gt; at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan App::cpanminus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I prefer to use cpanminus when installing lots of modules: it&amp;rsquo;s less of a memory hog than cpan, outputs less line noise by default, and has the useful &amp;ldquo;&amp;ndash;notest&amp;rdquo; option if you want to install modules without testing them (and save a lot of time). Now change into the newly cloned app directory, and use cpanminus to install the app&amp;rsquo;s dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cd SecApp_login
$ cpanm --installdeps .
--&amp;gt; Working on .
Configuring SecApp-0.01 ... OK
&amp;lt;== Installed dependencies for .. Finishing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;&amp;ndash;installdeps&amp;rdquo; switch instructs cpanminus to search the current directory for dependencies. All of of the app&amp;rsquo;s dependencies are listed in Makefile.PL, so cpanminus finds those and begins installing all of the Perl modules that the app requires but your system does not have installed. If you&amp;rsquo;re working with a fresh install of Perl, this can take up to an hour or so, so go make a cup of coffee or something else whilst the installs happen.&lt;/p&gt;

&lt;p&gt;Once all the modules are installed, test run the application with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ TESTING=1 script/secapp_server.pl 
HTTP::Server::PSGI: Accepting connections at http://0:3000/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open your browsers and navigate to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;. You see this simple welcome message:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/84/secapp_welcome.png&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/84/secapp_welcome_600.png&#34; alt=&#34;secapp&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you visit &lt;a href=&#34;http://localhost/login&#34;&gt;http://localhost/login&lt;/a&gt;, it should load the login page:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/84/secapp_login.png&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/84/secapp_login_600.png&#34; alt=&#34;secapp&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the username &amp;ldquo;test_user_01&amp;rdquo; and &amp;ldquo;Hfa *-£(&amp;amp;&amp;amp;%HBbWqpV%&amp;rdquo;_=asd&amp;rdquo; you should be able to login.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/84/secapp_login_credentials.png&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/84/secapp_login_credentials_600.png&#34; alt=&#34;secapp&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A successful login will display a simple message and logout link:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/84/secapp_landing.png&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/84/secapp_landing_600.png&#34; alt=&#34;secapp&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-prevent-information-leaks:ba4c9275de3995b673588b08da4e28c2&#34;&gt;1. Prevent information leaks&lt;/h3&gt;

&lt;p&gt;Information leaks give would-be attackers clues that undermine the login security. One way they do this is by giving information about the software running the web application (which may have known weaknesses).&lt;/p&gt;

&lt;p&gt;In SecApp I&amp;rsquo;ve turned off the typical Catalyst information leaks. In the root application file &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/lib/SecApp.pm&#34;&gt;SecApp.pm&lt;/a&gt; the &amp;ldquo;-Debug&amp;rdquo; plugin has been removed, which prints a full stack trace in the case of an error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Catalyst qw/
    Static::Simple
    Authentication
    Session
    Session::Store::File
    Session::State::Cookie
/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Further down the same file, the &amp;ldquo;X-Catalyst&amp;rdquo; HTTP header has been disabled by modifying the package configuration. This stops the header from being inserted to every response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Disable X-Catalyst header
enable_catalyst_header =&amp;gt; 0,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two changes stop the application from informing users the underlying application framework and language. Now they won&amp;rsquo;t know if they&amp;rsquo;re dealing with a Ruby, Python or Perl application!&lt;/p&gt;

&lt;p&gt;The other type of information leak we need to prevent is indicating logical vulnerabilities by responding differently to similar requests. For example, by responding to login attempts with incorrect usernames with the error message &amp;ldquo;incorrect username&amp;rdquo;, attackers can brute-force attack the username until they receive the message &amp;ldquo;incorrect password&amp;rdquo;, at which point they know they have guessed a correct username.&lt;/p&gt;

&lt;p&gt;In SecApp, we want to respond with a generic message every time the login attempt fails, and not indicate which field was incorrect. The login function is implemented in our &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L42&#34;&gt;Root.pm&lt;/a&gt; controller - we&amp;rsquo;ll look at the code later, but for now you can see that there is only one error message returned.&lt;/p&gt;

&lt;h3 id=&#34;2-handle-credentials-secretively:ba4c9275de3995b673588b08da4e28c2&#34;&gt;2. Handle credentials secretively&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.amazon.com/gp/product/1118026470/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1118026470&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;The Web Application Hacker&amp;rsquo;s Handbook&lt;/a&gt; summarizes this as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All credentials should be created, stored, and transmitted in a manner that does not lead to unauthorized disclosure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In SecApp &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L11&#34;&gt;Root.pm&lt;/a&gt;, we use Catalyst&amp;rsquo;s auto Controller function to check that every request is over SSL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# this method will be called everytime
sub auto :Private {
    my ($self, $c) = @_;

    # 404 unless https/testing &amp;amp; request method is GET/HEAD/POST
    unless( ( $c-&amp;gt;req-&amp;gt;secure or $c-&amp;gt;config-&amp;gt;{testing} == 1 )
            &amp;amp;&amp;amp; grep /^(?:GET|HEAD|POST)$/, $c-&amp;gt;req-&amp;gt;method )
        {
            $c-&amp;gt;detach(&#39;default&#39;);
        }
    ...
    return 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The method &amp;ldquo;$c-&amp;gt;req-&amp;gt;secure&amp;rdquo; will return true if the connection is via SSL. If it isn&amp;rsquo;t we detach the request to the &amp;ldquo;default&amp;rdquo; method, which returns a 404 request error. The clause &amp;ldquo;or $c-&amp;gt;config-&amp;gt;{testing} == 1&amp;rdquo; is so that when testing the application we can try out the functions without needing SSL, as Catalyst&amp;rsquo;s test server does not support it.&lt;/p&gt;

&lt;p&gt;Now it could be irritating for users who try to load the login page and get a 404 error. So using Catalyst&amp;rsquo;s end method, we also set the Strict-Transport-Security HTTP header which instructs browsers to load all pages via https. This is the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub end : ActionClass(&#39;RenderView&#39;) {
  my ($self, $c) = @_;

  # don&#39;t require TLS for testing
  unless ($c-&amp;gt;config-&amp;gt;{testing} == 1) {
    $c-&amp;gt;response-&amp;gt;header(&#39;Strict-Transport-Security&#39; =&amp;gt; &#39;max-age=3600&#39;);
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SecApp sets several other security headers in the &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L90&#34;&gt;end method&lt;/a&gt;, you can read about what they do &lt;a href=&#34;http://perltricks.com/article/81/2014/3/31/Perl-web-application-security-HTTP-headers&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SecApp only authenticates login requests received via POST. We achieve this by using Catalyst&amp;rsquo;s chained dispatching and HTTP method matching:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub login :Chained(&#39;/&#39;) PathPart(&#39;login&#39;) CaptureArgs(0) {}

sub login_auth :Chained(&#39;login&#39;) PathPart(&#39;&#39;) Args(0) POST {
    # authentication code
    ...

    # authentication failed, load the login form
    $c-&amp;gt;forward(&#39;login_form&#39;);
}

sub login_form :Chained(&#39;login&#39;) PathPart(&#39;&#39;) Args(0) GET {
    my ($self, $c) = @_;

    # load the login template
    $c-&amp;gt;stash(template =&amp;gt; &#39;login.tt&#39;);
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L42&#34;&gt;code&lt;/a&gt; has been abbreviated here for clarity. But effectively the &amp;ldquo;login_auth&amp;rdquo; subroutine will only fire if the request to &amp;ldquo;/login&amp;rdquo; was made via POST, else just load the login page with the &amp;ldquo;login_form&amp;rdquo; sub. Cool right? Catalyst project manager John Napiorkowski mused on these features in an illustrative &lt;a href=&#34;http://jjnapiorkowski.typepad.com/modern-perl/2013/08/thoughts-on-catalyst-soa-and-web-services.html#.U11rEjnXvqg&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, SecApp stores the passwords in an hashed format, using a relatively strong algorithm (bcrypt). The following code in &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/lib/SecApp/Schema/Result/User.pm#L130&#34;&gt;User.pm&lt;/a&gt; adds the functionality:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;__PACKAGE__-&amp;gt;add_columns(
            &#39;password&#39; =&amp;gt; {
                passphrase =&amp;gt; &#39;rfc2307&#39;,
                passphrase_class =&amp;gt; &#39;BlowfishCrypt&#39;,
                passphrase_args =&amp;gt; {
                    cost =&amp;gt; 14,
                    salt_random =&amp;gt; 20,
                },
                passphrase_check_method =&amp;gt; &#39;check_password&#39;,
            });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So even if attackers obtained the application password file, the passwords are salted and hashed and not easily broken. SecApp comes with a sample SQLite3 test database with one test user account already created.&lt;/p&gt;

&lt;h3 id=&#34;3-validate-credentials-properly:ba4c9275de3995b673588b08da4e28c2&#34;&gt;3. Validate credentials properly&lt;/h3&gt;

&lt;p&gt;The code that validates credentials can also contain weaknesses. Passwords should be validated in full, without modification or truncation and in a case-sensitive comparison. Multi-stage login processes are particularly susceptible to attacks. The login code should be peer-reviewed and substantially tested for errors.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Authentication&#34;&gt;Catalyst::Plugin::Authentication&lt;/a&gt; module makes authentication easy. SecApp keeps the login process simple: just a username and password form, with an optional CAPTCHA. Here is the full login code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub login_auth :Chained(&#39;login&#39;) PathPart(&#39;&#39;) Args(0) POST {
  my ($self, $c) = @_;
  my $captcha_response 
    = $c-&amp;gt;request-&amp;gt;params-&amp;gt;{recaptcha_response_field};
  my $captcha_challenge 
    = $c-&amp;gt;request-&amp;gt;params-&amp;gt;{recaptcha_challenge_field};

  # proceed if config has switched off CAPTCHA, or if the submission is valid, proceed
  if ($c-&amp;gt;config-&amp;gt;{Captcha}-&amp;gt;{enabled} == 0
      || Captcha::reCAPTCHA-&amp;gt;new-&amp;gt;check_answer(
                   $c-&amp;gt;config-&amp;gt;{Captcha}-&amp;gt;{private_key},
                   $c-&amp;gt;request-&amp;gt;address,
                   $captcha_challenge,
                   $captcha_response)-&amp;gt;{is_valid})
  {
    $username = $c-&amp;gt;req-&amp;gt;params-&amp;gt;{username};
    my $password = $c-&amp;gt;req-&amp;gt;params-&amp;gt;{password};

    # if username and passwords were supplied, authenticate
    if ($username &amp;amp;&amp;amp; $password) {
      if ($c-&amp;gt;authenticate({ username =&amp;gt; $username,
                             password =&amp;gt; $password } ))
      {
      # authentication success, check user active and redirect to the secure landing page
        if ($c-&amp;gt;user-&amp;gt;get_object-&amp;gt;active) {
          $c-&amp;gt;response-&amp;gt;redirect($c-&amp;gt;uri_for($c-&amp;gt;controller(&#39;Admin&#39;)-&amp;gt;action_for(&#39;landing&#39;)));
          return;
        }
      }
      else {
        $c-&amp;gt;stash(error_msg =&amp;gt; &amp;quot;Bad username or password.&amp;quot;);
      }
    }
  }
  $c-&amp;gt;forward(&#39;login_form&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s walk through the code. If the CAPTCHA functionality is enabled, the login function will attempt to validate the CAPTCHA. If successful, the code then retrieves the username and password, and if they exist, attempts to validate them using the authenticate method. The authenticate method checks both username and password in full against the database. If the username and password are validated, then the user will be re-directed to the landing page which is in the secure Admin.pm controller. Else an error message will set indicating a bad username or password. In all failing cases, the login form will be reloaded and displayed.&lt;/p&gt;

&lt;p&gt;So the code looks good, but how do we know if it will do the right thing in all cases? Fortunately &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Test&#34;&gt;Catalyst::Test&lt;/a&gt; can make unit testing an application&amp;rsquo;s methods easy. SecApp has the test file &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/t/Root.t&#34;&gt;Root.t&lt;/a&gt; which tests the login function with many different combinations of credentials, such as null, zero-length string, correct username incorrect password etc. Running these tests makes it easy to confirm that the login function does the right thing. Want to check for yourself? At the command line run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ TESTING=1 perl -Ilib t/Root.t
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-prevent-brute-force-attacks:ba4c9275de3995b673588b08da4e28c2&#34;&gt;4. Prevent brute-force attacks&lt;/h3&gt;

&lt;p&gt;Brute force attacks are attempts to crack the username and password of an account by repeatedly trying different combinations until one succeeds. SecApp uses &lt;a href=&#34;https://metacpan.org/pod/Captcha::reCAPTCHA&#34;&gt;Captcha::reCAPTCHA&lt;/a&gt; to prevent automated brute force attacks. You&amp;rsquo;ll need a Google account and web domain to sign up for it (it&amp;rsquo;s free). The difficulty of the captcha puzzles presented are very difficult to reliably pass with automation. If you do have a Google &lt;a href=&#34;https://www.google.com/recaptcha/intro/index.html&#34;&gt;reCAPtCHA account&lt;/a&gt;, you can try it out with SecApp by updating &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/lib/SecApp.pm#L54&#34;&gt;SecApp.pm&lt;/a&gt; with your account credentials.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/84/secapp_login_catpcha.png&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/84/secapp_login_catpcha_600.png&#34; alt=&#34;secapp&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seeing as brute-force attacks can only succeed if they can try millions of attempts, why not just add a time-delay like &amp;ldquo;sleep(2)&amp;rdquo; to the login function? The problem with that defence is that it opens the web application up to another attack-vector: denial of service. If an attacker can issue several requests every 2 seconds to the login function, it may tie up all of the application&amp;rsquo;s processes and stop it from responding to regular web requests. Not good!&lt;/p&gt;

&lt;p&gt;Using CAPTCHA combined with front-end proxy web server request and connection limiting methods that can largely eliminate the brute-force risk.&lt;/p&gt;

&lt;h3 id=&#34;5-log-monitor-and-notify:ba4c9275de3995b673588b08da4e28c2&#34;&gt;5. Log, monitor and notify&lt;/h3&gt;

&lt;p&gt;Catalyst comes with built-in logging capabilities. If you&amp;rsquo;re using Catalyst::Plugin::Authentication, any failed login attempt automatically logs a critical error. So the good news is if you&amp;rsquo;re using a web server like nginx, Catalyst will write the critical error to the server error log (this is a simplification). SecApp does not implement any monitoring or notification services, but I think this is more the domain of the server and not the web application. It&amp;rsquo;s trivial to configure &lt;a href=&#34;http://www.fail2ban.org/wiki/index.php/Main_Page&#34;&gt;fail2ban&lt;/a&gt; to monitor the error.log and jail any suspicious repeat login attempts.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:ba4c9275de3995b673588b08da4e28c2&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Is the SecApp login function secure? One thing to consider is that although it utilizes many good practices, user registration and password reset is not implemented. These features must be secure too, else they can undermine the login security altogether, for example by allowing weak passwords to be set. We&amp;rsquo;ll consider these areas of authentication in a future article. In the meantime, SecApp is released under the Artistic 2.0 license, feel free to use it.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F84%2F2014%2F4%2F28%2FIs-your-login-page-secure-&amp;amp;text=Is+your+login+page+secure%3F&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F84%2F2014%2F4%2F28%2FIs-your-login-page-secure-&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;Updated:&lt;/strong&gt; corrected hashing algorithm name and description 04/28/2014*&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/motograf/1269439152/in/photolist-2Wbd2W-9VxeqP-8v6WhC-8v3ToK-8v6W4h-fcDhWQ-6boP72-LNv8s-4pkUnM-aj6wD3-4rL1UA-9Ziy7V-jP5Sc-51f4ck-4ppX9S-dWGQed-dWGuMs-dQRyD-b9SUT-9cBRYL-5UB8BE-8BFgnW-6boNpR-6bsWUQ-6bsX9C-FXJTL-8AuQei-8AuRVc-8AuSzH-6gA6Lx-8v5M9x-91rH7R-dWsFmy-ZQRR-jP6a9-4HKkvg-4HPzk1-5eWG8T-8v8Q6d-8v8Q7N-4HKmZ6-kJrvqx-fcp9cZ-4rsdJ3-aFebHa-4HPALy-7HrEuY-6Pk9RC-hX3MVF-7xoEF6&#34;&gt;motograf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl web application security - HTTP headers</title>
      <link>https://dnmfarrell.github.io/article/81/2014/3/31/Perl-web-application-security---HTTP-headers/</link>
      <pubDate>Mon, 31 Mar 2014 12:27:39 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/81/2014/3/31/Perl-web-application-security---HTTP-headers/</guid>
      <description>

&lt;p&gt;&lt;em&gt;HTTP headers are included in every HTTP response from a web server. Setting the appropriate HTTP headers can reduce the risk of man-in-the-middle and cross-site-scripting attacks on a web application. You can also reduce information leaks about the web application configuration - vital data that gives a would-be attacker clues about potential vulnerabilities. Read on to find out how to set the appropriate headers in your Perl web application.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;application:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Application&lt;/h3&gt;

&lt;p&gt;All three of major Perl web frameworks provide some kind of identifying header. Dancer and Mojolicious use &amp;ldquo;X-Powered-By&amp;rdquo; and Catalyst uses &amp;ldquo;X-Catalyst&amp;rdquo;. The problem with this header is it informs the requester the language of the application (Perl) and the web framework being used. In some cases it also reveals the version number. With this information a would-be attacker can focus on exploits that are specific to Perl or the web framework. Here&amp;rsquo;s how you can disable it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By default Catalyst does not turn on its application header. The header is controlled by the &amp;ldquo;enable_catalyst_header&amp;rdquo; config option, normally located in the root application class (e.g. lib/MyApp.pm) or the application config file.&lt;/li&gt;
&lt;li&gt;Mojolicious does not set this header since &lt;a href=&#34;https://github.com/kraih/mojo/blob/b5da0c7afcdd793c85e8e2a67eb29f7f36bdb601/Changes#L538&#34;&gt;version 4.00&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dancer (and Dancer2) use the &lt;a href=&#34;http://search.cpan.org/~xsawyerx/Dancer2-0.11/lib/Dancer2/Config.pod#server_tokens_%28boolean%29&#34;&gt;server tokens&lt;/a&gt; directive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;server:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;Web servers often broadcast information about themselves by default. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Server: nginx/1.4.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is risky for the same reason that revealing information about the underlying Perl web application is. To disable the server header in nginx, just add this line to your nginx.conf or virtual host file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;server_tokens off;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Apache 1.3x add these lines to your virtual host file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;ServerTokens Prod
ServerSignature Off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Apache 2.x, these lines will load the mod_headers module, and remove the server header:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;LoadModule headers_module /usr/lib/apache/modules/mod_headers.so
Header unset Server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the major Perl web frameworks ship with web servers that set the server header:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
Server: HTTP::Server::PSGI

# mojolicious
Server: Mojolicious (Perl)

# Dancer
Server: Perl Dancer 1.3121
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These headers can be overwritten within the application code. For instance, if we wanted to change the server to appear to be nginx:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;Server&#39; =&amp;gt; &#39;nginx&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;Server&#39; =&amp;gt; &#39;nginx&#39;);

# Dancer / Dancer2
header &#39;Server&#39; =&amp;gt; &#39;nginx&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;x-frame-options:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;X-Frame-Options&lt;/h3&gt;

&lt;p&gt;This header can prevent your application responses from being loaded within frame or iframe HTML elements (see the &lt;a href=&#34;http://tools.ietf.org/html/rfc7034&#34;&gt;spec&lt;/a&gt;). This is to prevent clickjacking requests where your application response is displayed on another website, within an invisible iframe, which then hijacks the user&amp;rsquo;s request when they click a link on your website. Here&amp;rsquo;s how to disable it in the respective web frameworks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-Frame-Options&#39; =&amp;gt; &#39;DENY&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-Frame-Options&#39; =&amp;gt; &#39;DENY&#39;);

# Dancer / Dancer2
header &#39;X-Frame-Options&#39; =&amp;gt; &#39;DENY&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;strict-transport-security:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Strict-Transport-Security&lt;/h3&gt;

&lt;p&gt;This header instructs the requester to load all content from the domain via HTTPS and not load any content unless there is a valid ssl certificate. This header can help prevent man-in-middle attacks as it ensures that all HTTP requests and responses are encrypted. The Strict-Transport-Security header has a max-age parameter that defines how long in seconds to enforce the policy for. Here&amp;rsquo;s how to add it to your Perl web application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;Strict-Transport-Security&#39; =&amp;gt; &#39;max-age=3600&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;Strict-Transport-Security&#39; =&amp;gt; &#39;max-age=3600&#39;);

# Dancer / Dancer2
header &#39;Strict-Transport-Security&#39; =&amp;gt; &#39;max-age=3600&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;content-security-policy:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Content-Security-Policy&lt;/h3&gt;

&lt;p&gt;The CSP header sets a whitelist of domains from which content can be safely loaded. This prevents most types of XSS attack, assuming the malicious content is not hosted by a whitelisted domain. For example this line specifies that all content should only be loaded from the responding domain:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;X-Content-Security-Policy: default-src &#39;self&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is &lt;a href=&#34;http://www.html5rocks.com/en/tutorials/security/content-security-policy%0A&#34;&gt;a lot to CSP&lt;/a&gt; (&lt;a href=&#34;http://www.w3.org/TR/CSP/&#34;&gt;spec&lt;/a&gt;) and browser support is &lt;a href=&#34;http://caniuse.com/#feat=contentsecuritypolicy&#34;&gt;fairly good&lt;/a&gt;. One downside to the whitelist approach is it&amp;rsquo;s not compatible with ad services like Google&amp;rsquo;s adsense as you won&amp;rsquo;t know the domains in advance in order to whitelist them. To set the header in your facourite Perl web application, use on of these lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-Content-Security-Policy&#39; =&amp;gt; &amp;quot;default-src &#39;self&#39;&amp;quot;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-Content-Security-Policy&#39; =&amp;gt; &amp;quot;default-src &#39;self&#39;&amp;quot;);

# Dancer / Dancer2
header &#39;X-Content-Security-Policy&#39; =&amp;gt; &amp;quot;default-src &#39;self&#39;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;x-content-type-options:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;X-Content-Type-Options&lt;/h3&gt;

&lt;p&gt;This is an IE only header that is used to disable mime sniffing. The vulnerability is that IE will auto-execute any script code contained in a file when IE attempts to detect the file type. This is disabled by default in IE anyway, but to enforce it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-Content-Type-Options&#39; =&amp;gt; &#39;nosniff&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-Content-Type-Options&#39; =&amp;gt; &#39;nosniff&#39;);

# Dancer / Dancer2
header &#39;X-Content-Type-Options&#39; =&amp;gt; &#39;nosniff&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;x-download-options:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;X-Download-Options&lt;/h3&gt;

&lt;p&gt;This is another IE-only header that prevents IE from opening an HTML file directly on download from a website. The security issue here is, if a browser opens the file directly, it can run as if it were part of the site. To add this header, use one of these lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-Download-Options&#39; =&amp;gt; &#39;noopen&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-Download-Options&#39; =&amp;gt; &#39;noopen&#39;);

# Dancer / Dancer2
header &#39;X-Download-Options&#39; =&amp;gt; &#39;noopen&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;x-xss-protection:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;X-XSS-Protection&lt;/h3&gt;

&lt;p&gt;This is the final IE-only header. It was introduced in IE8 as part of the cross-site-scripting (XSS) filter functionality (more &lt;a href=&#34;http://blogs.msdn.com/b/ieinternals/archive/2011/01/31/controlling-the-internet-explorer-xss-filter-with-the-x-xss-protection-http-header.aspx&#34;&gt;here&lt;/a&gt;). The header can force IE to turn on its XSS filter. Additionally it has an optional setting called &amp;ldquo;mode&amp;rdquo; that can force IE to block the entire page if an XSS attempt is detected. Here&amp;rsquo;s how to add it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-XSS-Protection&#39; =&amp;gt; &amp;quot;1; &#39;mode=block&#39;&amp;quot;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-XSS-Protection&#39; =&amp;gt; &amp;quot;1; &#39;mode=block&#39;&amp;quot;);

# Dancer / Dancer2
header &#39;X-XSS-Protection&#39; =&amp;gt; &amp;quot;1; &#39;mode=block&#39;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adding-headers-in-the-web-server:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Adding headers in the web server&lt;/h3&gt;

&lt;p&gt;You may prefer to add these headers in the web server configuration, rather than at the application level. For nginx, use the &amp;ldquo;add_header&amp;rdquo; directive - see &lt;a href=&#34;https://gist.github.com/plentz/6737338&#34;&gt;here&lt;/a&gt; for a good example. For Apache use the &amp;ldquo;Header set&amp;rdquo; directive in mod_headers (&lt;a href=&#34;http://moko.ru/doc/apache/mod/mod_headers.html&#34;&gt;1.3&lt;/a&gt;, &lt;a href=&#34;http://httpd.apache.org/docs/2.0/de/mod/mod_headers.html&#34;&gt;2.x&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;testing-the-headers:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Testing the headers&lt;/h3&gt;

&lt;p&gt;tThere are a number of ways to check which headers your application is returning. Firstly you can use curl (replace perltricks.com with the URL to check):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;curl -I perltricks.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return the HTTP headers only:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;HTTP/1.1 200 OK
Server: nginx
Date: Mon, 31 Mar 2014 01:54:59 GMT
Content-Type: text/html; charset=utf-8
Connection: keep-alive
Cache-Control: max-age=3600
X-Frame-Options: DENY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use &lt;a href=&#34;https://securityheaders.com/&#34;&gt;SecurityHeaders.com&amp;rsquo;s&lt;/a&gt; excellent checking tool. Or you can inspect the headers yourself by using your browser&amp;rsquo;s developer mode.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;These HTTP headers are easy to add and can make a reduce your application&amp;rsquo;s vulnerability to XSS and man-in-the-middle attacks, particularly for applications that allow users to upload content.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F81%2F2014%2F3%2F31%2FPerl-web-application-security-HTTP-headers&amp;amp;text=Perl+web+application+security+-+HTTP+headers&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F81%2F2014%2F3%2F31%2FPerl-web-application-security-HTTP-headers&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover photo © &lt;a href=&#34;http://www.flickr.com/photos/rightee/259084010/in/photostream/&#34;&gt;Andy Wright&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updates: Mojolicious application header corrected. Web frameworks server header added. (31/3/2014)&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

