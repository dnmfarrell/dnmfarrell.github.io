<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eval on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/eval/</link>
    <description>Recent content in Eval on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Jun 2013 13:22:52 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/eval/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use do to execute Perl code stored in files</title>
      <link>https://dnmfarrell.github.io/article/28/2013/6/5/Use-do-to-execute-Perl-code-stored-in-files/</link>
      <pubDate>Wed, 05 Jun 2013 13:22:52 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/28/2013/6/5/Use-do-to-execute-Perl-code-stored-in-files/</guid>
      <description>&lt;p&gt;Following our &lt;a href=&#34;http://perltricks.com/article/26/2013/5/28/Execute-Perl-code-stored-in-a-text-file-with-eval&#34;&gt;recent article&lt;/a&gt; on how to execute Perl code stored in a file using eval, Perl programmer mithaldu pointed out that the Perl built-in function do provides similar functionality.&lt;/p&gt;

&lt;p&gt;This is a the text file &amp;lsquo;print.txt&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;print &amp;quot;it works! \n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the original solution using eval:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::Slurp;
use strict;
use warnings;

my $command = read_file(&#39;print.txt&#39;);
eval $command;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and here is the same code re-written using do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;

do &#39;print.txt&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using do requires fewer lines of code then the eval solution and there is no need to open a filehandle or use a module to slurp the file (such as &lt;a href=&#34;https://metacpan.org/module/File::Slurp&#34;&gt;File::Slurp&lt;/a&gt;). The do function also updates @INC and %INC, so it can be used to load modules which are then used later in the program (eval does not do this).&lt;/p&gt;

&lt;p&gt;One scenario where the eval approach would be needed instead of do would be if the text file contained non-Perl code that required parsing before the file is ready to be executed.&lt;/p&gt;

&lt;p&gt;Using do does not replace the inherent risks associated with executing code stored in a separate file - this is a cool trick, not a recommended solution.&lt;/p&gt;

&lt;p&gt;The official Perl documentation, Perldoc has more information on both &lt;a href=&#34;http://perldoc.perl.org/functions/do.html&#34;&gt;do&lt;/a&gt; and &lt;a href=&#34;http://perldoc.perl.org/functions/eval.html&#34;&gt;eval&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Execute Perl code stored in a text file with eval</title>
      <link>https://dnmfarrell.github.io/article/26/2013/5/28/Execute-Perl-code-stored-in-a-text-file-with-eval/</link>
      <pubDate>Tue, 28 May 2013 12:25:15 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/26/2013/5/28/Execute-Perl-code-stored-in-a-text-file-with-eval/</guid>
      <description>

&lt;p&gt;The Perl &lt;a href=&#34;http://perldoc.perl.org/functions/eval.html&#34;&gt;eval function&lt;/a&gt; will execute any Perl code contained in a string that is passed to it. This article shows how eval can be used to execute Perl code stored in text files.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s imagine that we want to execute this Perl statement stored in &amp;lsquo;print.txt&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;print &amp;quot;it works! \n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can write a simple Perl script called &amp;lsquo;eval.pl&amp;rsquo; that will slurp &amp;lsquo;print.txt&amp;rsquo; into a string, and then call eval on the string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::Slurp;
use strict;
use warnings;

my $command = read_file(&#39;print.txt&#39;);
eval $command;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can run &amp;lsquo;eval.pl&amp;rsquo; to prove it works:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl eval.pl
it works!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;injecting-code:bbcd8770a04941299600be476a082762&#34;&gt;Injecting code&lt;/h3&gt;

&lt;p&gt;When eval is called on a string containing Perl code, the code is executed within a sub lexical scope in main - similar to as if it was written within a block. This makes it possible to declare variables in the main program, and execute them in code contained in text files with eval. Let&amp;rsquo;s update &amp;lsquo;print.txt&amp;rsquo; to print a variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;print $message;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &amp;lsquo;eval.pl&amp;rsquo; to declare $message and set the text to be printed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::Slurp;
use strict;
use warnings;

my $command = read_file(&#39;print.txt&#39;);
my $message = &amp;quot;We injected this message\n&amp;quot;;

eval $command;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now running the code we can see the injected message is printed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl eval.pl
We injected this message
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although it is a cool feature, any technique which allows the execution of arbitrary code stored in text files is rife with risk. So exercise the proper caution and checks before employing this method!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

