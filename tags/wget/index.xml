<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wget on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/wget/</link>
    <description>Recent content in Wget on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Jul 2014 12:44:13 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/wget/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Create static web apps with Wget</title>
      <link>https://dnmfarrell.github.io/article/103/2014/7/22/Create-static-web-apps-with-Wget/</link>
      <pubDate>Tue, 22 Jul 2014 12:44:13 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/103/2014/7/22/Create-static-web-apps-with-Wget/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Last week we covered &lt;a href=&#34;https://metacpan.org/pod/distribution/App-Wallflower/bin/wallflower&#34;&gt;Wallflower&lt;/a&gt; an awesome utility for generating static websites from Perl web applications. This week we&amp;rsquo;re covering an alternative method, that uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Wget&#34;&gt;Wget&lt;/a&gt;. One benefit of this method is it can be used on any dynamic web application, not just Perl ones.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need Wget installed - if you&amp;rsquo;re using Linux it should already be installed. OSX users can install it with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; and there is a Windows &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages/wget.htm&#34;&gt;version&lt;/a&gt; available. To follow this example you&amp;rsquo;ll also need Dancer2 installed, which you can get via cpan:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Dancer2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-the-application:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Create the application&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll use Dancer2 to create a basic skeleton app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ dancer2 -a MyApp
+ MyApp
+ MyApp/config.yml
+ MyApp/MANIFEST.SKIP
+ MyApp/Makefile.PL
+ MyApp/views
+ MyApp/views/index.tt
+ MyApp/views/layouts
+ MyApp/views/layouts/main.tt
+ MyApp/t
+ MyApp/t/002_index_route.t
+ MyApp/t/001_base.t
+ MyApp/bin
+ MyApp/bin/app.pl
+ MyApp/lib
+ MyApp/lib/MyApp.pm
+ MyApp/environments
+ MyApp/environments/production.yml
+ MyApp/environments/development.yml
+ MyApp/public
+ MyApp/public/500.html
+ MyApp/public/404.html
+ MyApp/public/favicon.ico
+ MyApp/public/dispatch.cgi
+ MyApp/public/dispatch.fcgi
+ MyApp/public/css
+ MyApp/public/css/error.css
+ MyApp/public/css/style.css
+ MyApp/public/javascripts
+ MyApp/public/javascripts/jquery.js
+ MyApp/public/images
+ MyApp/public/images/perldancer.jpg
+ MyApp/public/images/perldancer-bg.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets start the app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ ./MyApp/bin/app.pl
&amp;gt;&amp;gt; Dancer2 v0.143000 server 435 listening on http://0.0.0.0:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-the-static-site:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Create the static site&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll point Wget at the site in recursive mode, so that it pulls all the files we need (up to a depth of 5 by default).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ wget -r 0:3000 -d 0:3000 --page-requisites
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we pass Wget the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;rdquo;-r 0:3000&amp;rdquo; to recursively follow links from 0:3000&lt;/li&gt;
&lt;li&gt;-&amp;ldquo;d 0:3000&amp;rdquo; to only save static files from the local domain&lt;/li&gt;
&lt;li&gt;&amp;rdquo;&amp;ndash;page-requisites&amp;rdquo; to pull all required files for a page, even if beyond our depth limit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default Wget will create a directory named after the domain (&amp;ldquo;0:3000&amp;rdquo;) and place all static files there. And that&amp;rsquo;s it, all the files for our static site have been generated.&lt;/p&gt;

&lt;h3 id=&#34;wget-vs-wallflower:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Wget vs Wallflower&lt;/h3&gt;

&lt;p&gt;So if both apps can generate static sites, which one is better? If you&amp;rsquo;re working with a non-Perl site, then Wget is obviously the way to go. In terms of speed, Wget is faster if you combine the command with xargs and request the urls in parallel:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cat urls.txt | xargs -P16 wget -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To take advantage of the parallel GET requests, you&amp;rsquo;ll need to serve the application on a web server though.&lt;/p&gt;

&lt;p&gt;Wallflower has nice option (&amp;ldquo;-F&amp;rdquo;) to take a list of URLs to download, which can be useful if the entire site cannot be downloaded by following links from the root application page. &lt;a href=&#34;https://metacpan.org/pod/Wallflower&#34;&gt;App::Wallflower&lt;/a&gt; is the source library for Wallflower, and extendible through Perl code, so you can further tailor the process to meet your needs. This can be used for post-processing actions like generating a sitemap.xml or advanced setups like a hybrid application, where the public pages of the site are static, but the secure parts remain dynamic. With Wallflower all of this can be scripted in Perl, with Wget you&amp;rsquo;d need to a combination of shell scripts and Perl, which is less convenient.&lt;/p&gt;

&lt;p&gt;As was recommended in last week&amp;rsquo;s &lt;a href=&#34;http://perltricks.com/article/102/2014/7/15/Generate-static-websites-from-dynamic-Perl-web-apps#h3Wallflower%20Tips&#34;&gt;article&lt;/a&gt; make sure you&amp;rsquo;re using absolute urls in your template code to avoid deployment issues with your static files.&lt;/p&gt;

&lt;h3 id=&#34;thanks:11eb354f02100c5b1eef8d7dfa4efa33&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Thanks to Steve Schnepp for contacting us with this tip. Thanks to Philippe Bruhat for creating Wallflower and providing additional technical guidance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;Correction:&lt;/strong&gt; technical comparison of Wallflower and Wget updated following clarification from module author. 2014-08-02*&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

