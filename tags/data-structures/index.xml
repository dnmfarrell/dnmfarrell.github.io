<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data-structures on Code Matters - a tech blog</title>
    <link>https://blog.dnmfarrell.com/tags/data-structures/</link>
    <description>Recent content in data-structures on Code Matters - a tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Oct 2021 16:09:50 -0400</lastBuildDate><atom:link href="https://blog.dnmfarrell.com/tags/data-structures/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Our Standard Stack Analogy Is Wrong</title>
      <link>https://blog.dnmfarrell.com/post/our-standard-stack-analogy-is-wrong/</link>
      <pubDate>Thu, 07 Oct 2021 16:09:50 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/our-standard-stack-analogy-is-wrong/</guid>
      <description>The most common way we introduce the stack data structure is by saying it&amp;rsquo;s like a spring-loaded plate dispenser, the kind normally found in a cafeteria:
Indeed when I looked up an old computer architecture textbookÂ¹ of mine I found:
 stacks are frequently described by the way plates are stored and used in a cafeteria. New plates are added to the top of the stack, or pushed, and plates already on the stack move down to make room for them.</description>
    </item>
    
  </channel>
</rss>
