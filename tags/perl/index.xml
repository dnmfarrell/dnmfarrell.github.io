<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl on Code - a programming blog</title>
    <link>https://blog.dnmfarrell.com/tags/perl/</link>
    <description>Recent content in Perl on Code - a programming blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Feb 2022 22:09:53 -0500</lastBuildDate>
    <atom:link href="https://blog.dnmfarrell.com/tags/perl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Is Golang&#39;s Grammar Context Free?</title>
      <link>https://blog.dnmfarrell.com/post/is-golangs-grammar-context-free/</link>
      <pubDate>Sun, 27 Feb 2022 22:09:53 -0500</pubDate>
      <guid>https://blog.dnmfarrell.com/post/is-golangs-grammar-context-free/</guid>
      <description>&lt;p&gt;Most programming language grammars are not context-free. That means the parser has to maintain state in order to process a snippet of the language.&lt;/p&gt;&#xA;&lt;p&gt;Often when discussing context somebody will point out the parsing strings, parentheses and so on also require a kind of state in order to match their terminators. That is not the same thing. The question here is given valid input, can a parser using the language grammar alone, assemble it into an unambiguous parse tree or not.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Much Memory Is My Program Really Using?</title>
      <link>https://blog.dnmfarrell.com/post/how-much-memory-is-my-program-really-using/</link>
      <pubDate>Thu, 10 Feb 2022 22:34:09 -0500</pubDate>
      <guid>https://blog.dnmfarrell.com/post/how-much-memory-is-my-program-really-using/</guid>
      <description>&lt;p&gt;It sounds like such a simple question - but virtual memory makes measuring real memory use complicated. Popular tools like ps and top report virtual, resident and shared memory consumption, but these are unsatisfactory:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Shared memory is not apportioned per process using it so it is overstated.&lt;/li&gt;&#xA;&lt;li&gt;Resident memory includes shared memory, so it overstates as well.&lt;/li&gt;&#xA;&lt;li&gt;Virtual memory includes resident memory plus data held in swap, which is not in main memory.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Fortunately unless you are running a Linux kernel older than the last financial crisis, you have a better option: Proportional Set Size (PSS)¹. This is the amount of private memory the process is using, plus its proportional allocation of shared memory. The kernel reports this data per PID in &lt;code&gt;/proc/$pid/smaps&lt;/code&gt;. The file lists each memory block mapped to the process, and its properties. You &lt;em&gt;could&lt;/em&gt; wrangle the smaps data with shell code, but you don&amp;rsquo;t have to! The &lt;a href=&#34;https://www.selenic.com/smem/&#34;&gt;smem tool&lt;/a&gt; does that, and it can filter/format too. Modern kernels also aggregate the data in &lt;code&gt;/proc/$pid/smaps_rollup&lt;/code&gt; which is convenient to grep and less error prone than rolling your own aggregator².&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Trouble with Reference Counting</title>
      <link>https://blog.dnmfarrell.com/post/the-trouble-with-reference-counting/</link>
      <pubDate>Mon, 25 Jan 2021 12:05:23 +0000</pubDate>
      <guid>https://blog.dnmfarrell.com/post/the-trouble-with-reference-counting/</guid>
      <description>&lt;p&gt;Perl uses a simple form of garbage collection (GC) called &lt;a href=&#34;https://en.wikipedia.org/wiki/Reference_counting&#34;&gt;reference counting&lt;/a&gt;. Every variable created by a Perl program has a &lt;a href=&#34;https://perldoc.perl.org/perlguts#Reference-Counts-and-Mortality&#34;&gt;refcnt&lt;/a&gt; associated with it. If the program creates a reference to the variable, Perl increments its &lt;code&gt;refcnt&lt;/code&gt;. Whenever Perl exits a block it reclaims any variables that belong to the block scope. If any are references, their referenced values&amp;rsquo; &lt;code&gt;refcnt&lt;/code&gt; are either decremented or they&amp;rsquo;re reclaimed as well if no other references to them remain.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Perl Closures As Objects</title>
      <link>https://blog.dnmfarrell.com/post/closures-as-objects/</link>
      <pubDate>Sun, 13 Dec 2020 12:57:03 +0000</pubDate>
      <guid>https://blog.dnmfarrell.com/post/closures-as-objects/</guid>
      <description>&lt;p&gt;Perl&amp;rsquo;s object system is not one of its most admired qualities. Included in the 1993 Perl 5.0 release, objects were a bolt-on. A big improvement at the time, in today&amp;rsquo;s context the Perl 5 object system requires too much boilerplate and is under-powered compared to other language offerings (no private state, no type checking, no traits, no multimethods). Perl programmers have been trying to upgrade it for years (&lt;a href=&#34;https://gist.github.com/Ovid/68b33259cb81c01f9a51612c7a294ede&#34;&gt;Cor&lt;/a&gt; is a recent example).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inspecting Catalyst</title>
      <link>https://blog.dnmfarrell.com/post/inspecting-catalyst/</link>
      <pubDate>Mon, 11 Nov 2019 10:34:07 +0000</pubDate>
      <guid>https://blog.dnmfarrell.com/post/inspecting-catalyst/</guid>
      <description>&lt;p&gt;One of the convenient things about &lt;a href=&#34;https://metacpan.org/pod/Catalyst&#34;&gt;Catalyst&lt;/a&gt; is it lets you register controller methods as actions, so you don&amp;rsquo;t need a separate routing table of URIs to controller methods. A consequence of this though, is that when the web app gets large enough it can be tricky to keep track of all the different paths the app is responding to.&lt;/p&gt;&#xA;&lt;p&gt;Catalyst&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Catalyst::DispatchType::Chained&#34;&gt;chained dispatch&lt;/a&gt; promotes code reuse, but exacerbates the issue by obfuscating route matching. Catalyst also permits declaring controller methods which match an unlimited number of paths after a prefix; another recipe for unpredictablity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating IP Address Tools From Scratch</title>
      <link>https://blog.dnmfarrell.com/post/creating-ip-address-tools-from-scratch/</link>
      <pubDate>Thu, 19 Sep 2019 11:00:07 +0000</pubDate>
      <guid>https://blog.dnmfarrell.com/post/creating-ip-address-tools-from-scratch/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve been researching how the Internet is organized, and working with &lt;a href=&#34;https://en.wikipedia.org/wiki/WHOIS&#34;&gt;whois&lt;/a&gt; data. I&amp;rsquo;ve been creating simple tools that process IP addresses without any help from CPAN. At work we tend to use &lt;a href=&#34;https://metacpan.org/pod/Net::IP::XS&#34;&gt;Net::IP::XS&lt;/a&gt; for these tasks, but sometimes it&amp;rsquo;s fun to figure out how things work under the hood.&lt;/p&gt;&#xA;&lt;h3 id=&#34;converting-to-decimal&#34;&gt;Converting to decimal&lt;/h3&gt;&#xA;&lt;p&gt;I&amp;rsquo;m sure you&amp;rsquo;re familiar with the IPv4 address &lt;a href=&#34;https://en.wikipedia.org/wiki/IPv4#Addressing&#34;&gt;format&lt;/a&gt;; the &amp;ldquo;dotted quad&amp;rdquo; consists of four numbers between 0 and 255 separated by periods. Your home wifi network probably starts at 192.168.0.0. The format is just another way of representing a 32-bit integer; here are the numbers and their equivalent in binary:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Find Relationships Quickly In Data With Chart::Plot</title>
      <link>https://blog.dnmfarrell.com/post/find-relationships-quickly-in-data-with-chart-plot/</link>
      <pubDate>Mon, 21 Jan 2019 15:41:39 +0000</pubDate>
      <guid>https://blog.dnmfarrell.com/post/find-relationships-quickly-in-data-with-chart-plot/</guid>
      <description>&lt;p&gt;Last week I was analyzing server log data at work, and my boss asked me to plot it on a scatter chart. &amp;ldquo;No problem!&amp;rdquo; I thought, firing up Google Sheets. But Sheets slowed to a crawl when I uploaded 250,000 records to plot. Using CPAN I found something better: &lt;a href=&#34;https://metacpan.org/pod/Chart::Plot&#34;&gt;Chart::Plot&lt;/a&gt;. It has a simple interface and is really fast. Here&amp;rsquo;s how you use it.&lt;/p&gt;&#xA;&lt;h3 id=&#34;a-scatter-plot-script&#34;&gt;A scatter plot script&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/env perl&#xA;use Chart::Plot;&#xA;&#xA;open my $mlb, &#39;&amp;lt;&#39;, &#39;2017-so-hr.csv&#39; or die $!;&#xA;&#xA;my @series;&#xA;while (&amp;lt;$mlb&amp;gt;) {&#xA;  chomp;&#xA;  my ($x, $y) = split /\t/;&#xA;  push @series, $x, $y;&#xA;}&#xA;&#xA;my $img = Chart::Plot-&amp;gt;new(800,640);&#xA;$img-&amp;gt;setData(\@series, &#39;Points Noline Blue&#39;) or die $img-&amp;gt;error;&#xA;&#xA;$img-&amp;gt;setGraphOptions (&#xA;  vertGraphOffset =&amp;gt; 100,&#xA;  horGraphOffset  =&amp;gt; 75,&#xA;  vertAxisLabel   =&amp;gt; &#39;HR&#39;,&#xA;  horAxisLabel    =&amp;gt; &#39;SO&#39;,&#xA;  title           =&amp;gt; &#39;2017 MLB Strikeouts and Home Runs&#39;,&#xA;);&#xA;&#xA;open my $fh, &#39;&amp;gt;:raw&#39;, &#39;2017-mlb-so-hr.png&#39; or die $!;&#xA;print $fh $img-&amp;gt;draw();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;To demo Chart::Plot, I&amp;rsquo;ve extracted MLB 2017 pitching data from the &lt;a href=&#34;http://www.seanlahman.com/baseball-archive/statistics/&#34;&gt;Lahman database&lt;/a&gt; for strikeouts and home runs given up to see if there&amp;rsquo;s a relationship between them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spidering websites with Headless Chrome and Selenium</title>
      <link>https://blog.dnmfarrell.com/post/spidering-websites-with-headless-chrome-and-selenium/</link>
      <pubDate>Sun, 13 Jan 2019 20:31:37 +0000</pubDate>
      <guid>https://blog.dnmfarrell.com/post/spidering-websites-with-headless-chrome-and-selenium/</guid>
      <description>&lt;p&gt;Over the holidays I was working on a project that needed to download content from different websites. I needed a web spider, but the typical Perl options like &lt;a href=&#34;https://metacpan.org/pod/WWW:Mechanize&#34;&gt;WWW:Mechanize&lt;/a&gt; wouldn&amp;rsquo;t cut it, as with JavaScript controlling the content on many websites, I needed a JavaScript-enabled browser. But browsers consume lots of memory - what to do?&lt;/p&gt;&#xA;&lt;p&gt;The answer was to use headless Chrome, which works exactly like normal except it has no graphical display, reducing its memory footprint. I can control it using &lt;a href=&#34;https://metacpan.org/pod/Selenium::Remote::Driver&#34;&gt;Selenium::Remote::Driver&lt;/a&gt; and Selenium server. Here&amp;rsquo;s how I did it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Validating Untrusted Input: Numbers</title>
      <link>https://blog.dnmfarrell.com/post/validating-untrusted-input-numbers/</link>
      <pubDate>Mon, 03 Dec 2018 09:10:38 +0000</pubDate>
      <guid>https://blog.dnmfarrell.com/post/validating-untrusted-input-numbers/</guid>
      <description>&lt;p&gt;Validating untrusted input safely is critical for application security: SQL injection, XSS and malicious file upload are common attacks which succeed because the user&amp;rsquo;s input is not vetted correctly.&lt;/p&gt;&#xA;&lt;p&gt;Numbers are problematic: negative numbers (&amp;ldquo;the sales price was -$500&amp;rdquo;), very large numbers (&amp;ldquo;my account balance is 9,223,372,036,854,775,807&amp;rdquo;) or not-a-number (&amp;ldquo;rm -rf /&amp;rdquo;) can all wreak havoc if not handled with care.&lt;/p&gt;&#xA;&lt;p&gt;Fortunately, Perl has robust capabilities for validating input but there are some edge cases to be aware of that make answering &amp;ldquo;is $x a number?&amp;rdquo; more difficult than you might think it would be.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Patching Perl: Loading Modules That Return False</title>
      <link>https://blog.dnmfarrell.com/post/patching-perl-loading-modules-that-return-false/</link>
      <pubDate>Mon, 23 Jul 2018 09:01:37 +0000</pubDate>
      <guid>https://blog.dnmfarrell.com/post/patching-perl-loading-modules-that-return-false/</guid>
      <description>&lt;p&gt;[&lt;strong&gt;Update&lt;/strong&gt;: this is now &lt;a href=&#34;https://github.com/Perl/perl5/issues/17921&#34;&gt;an issue for Perl 7&lt;/a&gt;]&lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;ve been programming Perl for a while, you&amp;rsquo;ve probably run into this exception: &lt;code&gt;Foo.pm did not return a true value&lt;/code&gt;. This is a peculiar quirk of the &lt;code&gt;require&lt;/code&gt; function: modules &lt;em&gt;must&lt;/em&gt; return a true value else Perl interprets it as a failure:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The file must return true as the last statement to indicate&#xA;successful execution of any initialization code, so it&amp;rsquo;s customary&#xA;to end such a file with &amp;ldquo;1;&amp;rdquo; unless you&amp;rsquo;re sure it&amp;rsquo;ll return true&#xA;otherwise. But it&amp;rsquo;s better just to put the &amp;ldquo;1;&amp;rdquo;, in case you add&#xA;more statements.&#xA;&lt;br&gt;&#xA;&lt;em&gt;perlfunc&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing New Testing Tools With Test2</title>
      <link>https://blog.dnmfarrell.com/post/writing-new-testing-tools-with-test2/</link>
      <pubDate>Tue, 12 Jun 2018 15:26:40 +0000</pubDate>
      <guid>https://blog.dnmfarrell.com/post/writing-new-testing-tools-with-test2/</guid>
      <description>&lt;p&gt;Perl has had great testing tools for a long time, but &lt;a href=&#34;https://metacpan.org/pod/Test2&#34;&gt;Test2&lt;/a&gt; is the single biggest improvement to Perl testing in years. One of my favorite Test2 features is how easy it is to extend it with new tools, and today I&amp;rsquo;ll show you how I wrote my first tool.&lt;/p&gt;&#xA;&lt;h3 id=&#34;dealing-with-known-test-failures&#34;&gt;Dealing with known test failures&lt;/h3&gt;&#xA;&lt;p&gt;Ideally when your tests fail, it means that something needs to be fixed, and that thing is fixable. However in the Real World™ things aren&amp;rsquo;t always that simple. For example you might investigate a failure, figure out the root cause, but the person to fix it is on vacation. Or perhaps there&amp;rsquo;s a datetime bug in the code, and it will resolve itself in a few days. The key here is that the failure is understood and not serious but also impractical to fix in the short term.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git Bisect And Perl</title>
      <link>https://blog.dnmfarrell.com/post/git-bisect-and-perl/</link>
      <pubDate>Tue, 08 Aug 2017 20:27:16 +0000</pubDate>
      <guid>https://blog.dnmfarrell.com/post/git-bisect-and-perl/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;https://ziprecruiter.com&#34;&gt;work&lt;/a&gt; we have many developers committing code to a large Git repo, and a huge test suite which runs to check the software builds and operates correctly. Inevitably, developers push commits which break a test or two, and in particularly hectic moments, it can be difficult to figure out &amp;ldquo;who broke the build&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;Enter Git&amp;rsquo;s bisect &lt;a href=&#34;https://git-scm.com/docs/git-bisect&#34;&gt;command&lt;/a&gt;. I feed it the SHA of the earliest bad commit I know of (or &amp;ldquo;HEAD&amp;rdquo;) and the SHA of the last working commit:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
