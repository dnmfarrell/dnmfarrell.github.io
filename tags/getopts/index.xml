<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>getopts on Code - a programming blog</title>
    <link>https://blog.dnmfarrell.com/tags/getopts/</link>
    <description>Recent content in getopts on Code - a programming blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Dec 2021 18:44:47 -0500</lastBuildDate><atom:link href="https://blog.dnmfarrell.com/tags/getopts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Replicating Bash Argument Splitting</title>
      <link>https://blog.dnmfarrell.com/post/replicating-bash-argument-splitting/</link>
      <pubDate>Tue, 28 Dec 2021 18:44:47 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/replicating-bash-argument-splitting/</guid>
      <description>A few weeks ago I was writing a macro loader for my JSON Processor, and I ran into an odd case where code I entered in the terminal was splitting differently to code I loaded from a file. It turns out that Bash&amp;rsquo;s word splitting behaves differently for arguments than it does for variables.
When processing args Bash will not split quoted words that contain a delimiter:
printf &amp;quot;%s\n&amp;quot; foo &#39;bar baz&#39; foo bar baz  But if those args are in a string:</description>
    </item>
    
    <item>
      <title>How to Split a String in POSIX Shell</title>
      <link>https://blog.dnmfarrell.com/post/how-to-split-a-string-in-posix-shell/</link>
      <pubDate>Fri, 12 Nov 2021 09:03:41 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/how-to-split-a-string-in-posix-shell/</guid>
      <description>The POSIX Shell specification defines a minimalist shell language with few features compared to stalwarts like Bash. Yet POSIX shells are everywhere: Dash is the default on Ubuntu, and many Docker containers only have busybox ash. Minimalist shells use less resources and are faster than featureful shells like Bash and ZshÂ¹. They are more likely to be secure too, as the reduced feature sets are easier to reason about and provide a smaller attack surface for hackers.</description>
    </item>
    
  </channel>
</rss>
