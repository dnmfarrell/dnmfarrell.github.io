<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Configuration on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/configuration/</link>
    <description>Recent content in Configuration on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Jun 2014 12:57:21 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/configuration/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to build Perl on Android 4.4</title>
      <link>http://perltricks.com/article/97/2014/6/16/How-to-build-Perl-on-Android-4-4/</link>
      <pubDate>Mon, 16 Jun 2014 12:57:21 +0000</pubDate>
      
      <guid>http://perltricks.com/article/97/2014/6/16/How-to-build-Perl-on-Android-4-4/</guid>
      <description>

&lt;p&gt;&lt;em&gt;The recent release of Perl 5.20 came with the exciting news that Perl was now installable on Android, Google&amp;rsquo;s mobile operating system. But before you get grand visions of flying phone-controlled drones via &lt;a href=&#34;https://metacpan.org/pod/UAV::Pilot&#34;&gt;UAV::Pilot&lt;/a&gt;, know that right now, how to get a working Perl binary is just about all that&amp;rsquo;s documented. This article shows you how to get that far - solving the rest is left for the pioneers!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:914b0b08540fea0f7c86094ce2509280&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;To build Perl on Android you&amp;rsquo;ll need a unix-like environment (Cygwin may work too). This article describes installing Perl on an Android Virtual Device (AVD), so you do not need an Android phone to try Perl on Android.&lt;/p&gt;

&lt;h3 id=&#34;preparation:914b0b08540fea0f7c86094ce2509280&#34;&gt;Preparation&lt;/h3&gt;

&lt;p&gt;Download the Android &amp;ldquo;SDK Tools Only&amp;rdquo; &lt;a href=&#34;https://developer.android.com/sdk/index.html&#34;&gt;tarball&lt;/a&gt;, and the NDK &lt;a href=&#34;https://developer.android.com/tools/sdk/ndk/index.html&#34;&gt;tarball&lt;/a&gt;. At the command line, change to the directory where you downloaded the tarballs to and untar both tarballs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ tar xvf android-ndk-r9d-linux-x86_64.tar.bz2
$ tar xvf android-sdk_r22.6.2-linux.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To save typing later, add &amp;ldquo;android-sdk-*/tools&amp;rdquo; and &amp;ldquo;android-sdk-*/platform-tools&amp;rdquo; to $PATH (you&amp;rsquo;ll need to provide the absolute paths to the directories). For example if I had extracted android-sdk-tools to my user directory, on Linux I could add it to PATH with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ export PATH=$PATH:$HOME/android-sdk-linux/tools:$HOME/android-sdk-linux/platform-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With your PATH updated, launch the Android SDK Manager:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will open a GUI menu from where you can download and install the required Android tools and libraries. Using the menu, install Android SDK Tools, Android SDK Platform-tools, Android SDK Build-tools and Android 4.2.2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/97/android_sdk_manager.png&#34; alt=&#34;The Android SDK Manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll also need a copy of the Perl 5.20.0 &lt;a href=&#34;http://www.cpan.org/src/5.0/perl-5.20.0.tar.gz&#34;&gt;tarball&lt;/a&gt;. Untar this at the command line too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ tar xvf perl-5.20.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setup-the-android-emulator:914b0b08540fea0f7c86094ce2509280&#34;&gt;Setup the Android emulator&lt;/h3&gt;

&lt;p&gt;Now we&amp;rsquo;re going to create an Android Virtual Device that can be used by the emulator to run Android on your machine. At the command line type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ android avd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will launch the Android Virtual Device Manager:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/97/android_avd_1.png&#34; alt=&#34;The Android Virtual Device Manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click &amp;ldquo;new&amp;rdquo; to create a new AVD. I created one with the following settings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/97/android_avd_2.png&#34; alt=&#34;Create a new AVD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure you select &amp;ldquo;ARM (androideabi-v7a)&amp;rdquo; as the CPU/ABI option. Keep in mind your platform&amp;rsquo;s hardware when choosing these settings. I found higher resolution devices ran very slowly on my old MacBook. The &amp;ldquo;use snapshot&amp;rdquo; option is a timesaver that saves the virtual device&amp;rsquo;s state post-boot, so saves you from waiting for the virtual device to boot up again after the first time. Once you&amp;rsquo;ve created the AVD, you should see it listed in the AVD Manager window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/97/android_avd_4.png&#34; alt=&#34;The AVD has been created&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Having created a new AVD, you can close the AVD Manager window.&lt;/p&gt;

&lt;h3 id=&#34;installation:914b0b08540fea0f7c86094ce2509280&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;The following commands will create environment variables we&amp;rsquo;ll need for the install. Be sure to adjust the path for ANDROID_NDK to the location where you untarred the Android NDK archive earlier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ export ANDROID_NDK=$HOME/android-ndk-r9d
$ export TARGET_ARCH=arm-linux-androideabi
$ export ANDROID_TOOLCHAIN=/tmp/my-toolchain-arm-linux-androideabi
$ export SYSROOT=$ANDROID_TOOLCHAIN/sysroot
$ export TARGETDIR=/mnt/asec/perl
$ export PATH=$PATH:$ANDROID_NDK/toolchains/$TARGET_ARCH-4.8/prebuilt/linux-x86_64/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create the toolchain, run this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt; $ $ANDROID_NDK/build/tools/make-standalone-toolchain.sh --platform=android-9 --install-dir=$ANDROID_TOOLCHAIN --system=`uname | tr &#39;[A-Z]&#39; &#39;[a-z]&#39;`-x86_64 --toolchain=arm-linux-androideabi-4.8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launch your AVD with the emulator (replace kitkat with the name of the avd you created. If you can&amp;rsquo;t remember the name, just run &amp;ldquo;android avd&amp;rdquo; again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ emulator @kitkat&amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see your emulated device start booting in a new window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/97/android_boot.png&#34; alt=&#34;The loaded AVD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once it&amp;rsquo;s booted, it will look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/97/android_loaded.png&#34; alt=&#34;The AVD is booting&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With the fully booted AVD still running, return to the command line and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ adb devices
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will print out the names of all the connected Android devices.For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;List of devices attached 
emulator-5554   device
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;ve got the device name, we&amp;rsquo;ll use adb to run shell commands on our emulated device. It&amp;rsquo;s important that the AVD is booted and running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;adb -s emulator-5554 shell &amp;quot;echo sh -c &#39;\&amp;quot;mkdir $TARGETDIR\&amp;quot;&#39; | su --&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now change into the untarred perl-5.20.0 directory, and run configure (replace &amp;ldquo;emulator-5554&amp;rdquo; with your device name):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ ./Configure -des -Dusedevel -Dusecrosscompile -Dtargetrun=adb -Dcc=arm-linux-androideabi-gcc -Dsysroot=$SYSROOT -Dtargetdir=$TARGETDIR -Dtargethost=emulator-5554
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now run make and make test to build and test Perl on the device:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ make
$ make test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bear in mind that the make test can take a long time - on my machine it ran for 4 hours. It will appear like the process has hung, this is because adb only prints out the results once the command has completed. Make isntall does not work, but this does not matter, as you can still run the Perl binary and use core modules. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ adb -s emulator-5554 shell &amp;quot;/mnt/asec/perl/perl -v&amp;quot;
This is perl 5, version 20, subversion 0 (v5.20.0) built for linux-androideabi

Copyright 1987-2014, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using &amp;quot;man perl&amp;quot; or &amp;quot;perldoc perl&amp;quot;.  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Core modules are located in /mnt/asec/perl/lib. To load them, just use the -I switch. For example this one liner:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;adb -s emulator-5554 shell &#39;/mnt/asec/perl/perl -I/mnt/asec/perl/lib -MHTTP::Tiny -E &amp;quot;say  HTTP::Tiny-&amp;gt;new-&amp;gt;get(q{http://perltricks.com})-&amp;gt;{content}&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if running a script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;adb -s emulator-5554 shell &#39;/mnt/asec/perl/perl -I/mnt/asec/perl/lib my_script.pl&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Be warned - if you stop the AVD, Perl will be removed.&lt;/strong&gt; You can Google for solutions on how to persist changes across AVD reboots - I have not done this yet. Let me know if you find a reliable solution!&lt;/p&gt;

&lt;h3 id=&#34;conclusion:914b0b08540fea0f7c86094ce2509280&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This is not the only way to get Perl running on Android. For a different approach, checkout the &lt;a href=&#34;https://github.com/damonkohler/sl4a&#34;&gt;Scripting Layer 4 Android&lt;/a&gt; project, however it is under-documented and the project may have stagnated.&lt;/p&gt;

&lt;p&gt;This article would not have been possible without the excellent Android perldoc page by Brian Fraser. You can read it on &lt;a href=&#34;https://github.com/Perl/perl5/blob/blead/README.android&#34;&gt;Github&lt;/a&gt; or with Perl 5.20.0 installed you can read it with perldoc:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks Brian!&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F97%2F2014%2F6%2F16%2FHow-to-build-Perl-on-Android-4-4&amp;amp;text=How+to+build+Perl+on+Android+4.4&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F97%2F2014%2F6%2F16%2FHow-to-build-Perl-on-Android-4-4&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl distributions, modules, packages explained</title>
      <link>http://perltricks.com/article/96/2014/6/13/Perl-distributions--modules--packages-explained/</link>
      <pubDate>Fri, 13 Jun 2014 12:26:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/96/2014/6/13/Perl-distributions--modules--packages-explained/</guid>
      <description>

&lt;p&gt;&lt;em&gt;It can be confusing for new Perl programmers to understand the terminology used to describe Perl distributions and their accompanying files. This article explains the core concepts.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;package-module-distribution:17113ac399bf5596ee1d46e47a6ce58b&#34;&gt;Package, Module, Distribution&lt;/h3&gt;

&lt;p&gt;A Perl package is just a section of code defined in a .pm file, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Data::Connector;

sub connect {
    # do something
    ...
}
1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The start of the package begins with the &amp;ldquo;package&amp;rdquo; declaration. A package is a lot like a class, except that it can denote a collection of subroutines and variables, and not necessarily be instantiated as an object. Usually a .pm file will have one package declaration per file, but you can have multiple packages in a .pm file, similar to Java and C# where you can have multiple classes in a single file.&lt;/p&gt;

&lt;p&gt;A module is a .pm file (&amp;ldquo;pm&amp;rdquo; means Perl Module). When you import a module with &amp;ldquo;require&amp;rdquo; or &amp;ldquo;use&amp;rdquo;, you are literally referencing the file name and not the package(s) contained in the file. For example to import the &amp;ldquo;Data::Connector&amp;rdquo; package defined above, we could save it in a file called &amp;ldquo;Whatever.pm&amp;rdquo; and later reference it in a script like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Whatever;

# call connect subroutine declared in Data::Connector package
Data::Connector::connect();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All .pm files must end with a &amp;ldquo;true&amp;rdquo; value per Perl&amp;rsquo;s requirements, so most authors either place &amp;ldquo;1;&amp;rdquo; or &amp;ldquo;__PACKAGE__;&amp;rdquo; as the last line of the .pm file. In Perl a true value is any value that is not: null, zero or a zero-length string.&lt;/p&gt;

&lt;p&gt;A distribution is a collection of files that usually includes a Perl module and several other files. There is no strict standard as to which files must be included in a distribution, however for the distribution to be indexed on CPAN and install-able by the CPAN command line client, the distribution needs to include some core files. Distributions have versions - so a Perl module on CPAN will have one distribution for every version of the module. These are the main files and directories you&amp;rsquo;ll encounter in distributions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;README - a brief description of how to install the distribution, sometimes includes a license and examples of how to use the module(s).&lt;/li&gt;
&lt;li&gt;LICENSE - the license for the code - a non-commercial license like the GPL, artistic, BSD etc are common.&lt;/li&gt;
&lt;li&gt;META.yml/ META.json - files that contain the metadata describing the distribution: the author, license, version, pre-requisite modules for use etc. They are auto-generated as part of the distribution build process and can be ignored.&lt;/li&gt;
&lt;li&gt;Makefile.PL and or Build.PL - these are Perl files that are used to install the module(s) in the distribution. Worth looking at when you&amp;rsquo;re having installation issues.&lt;/li&gt;
&lt;li&gt;MANIFEST - a list of the files included in the distribution.&lt;/li&gt;
&lt;li&gt;lib - a directory containing Perl modules - usually the core code of the distribution.&lt;/li&gt;
&lt;li&gt;t - the test files directory. These are run when the module is installed. If you have failing tests on installation, it can be helpful to review the test files in the t/ directory to find out the specifics of the test.&lt;/li&gt;
&lt;li&gt;bin - if the distribution contains an app, (Perl script) it will be in here. Often the app uses modules contained in the lib directory.&lt;/li&gt;
&lt;li&gt;Changes - a list of changes from distribution version to version.&lt;/li&gt;
&lt;li&gt;xt - the extended test files directory, usually used for author tests that you don&amp;rsquo;t need to run.&lt;/li&gt;
&lt;li&gt;eg - a directory of example Perl scripts, using the module(s) contained in the distribution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the typical directories and files found in a Perl distribution but as there is no fixed standard, distribution authors are free to include and exclude the files they wish. For a good example, check out the files provided by David Golden in a distribution of the the popular &lt;a href=&#34;https://metacpan.org/source/DAGOLDEN/HTTP-Tiny-0.043&#34;&gt;HTTP::Tiny&lt;/a&gt; module.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:17113ac399bf5596ee1d46e47a6ce58b&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Once you get to grips with Perl packages, modules and distributions it&amp;rsquo;s far easier to start hacking on Perl modules that don&amp;rsquo;t work the way you want them to. For example, in the case of a module that won&amp;rsquo;t install, you can download the distribution from CPAN (at the command line &amp;ldquo;cpan -g Module::Name&amp;rdquo;), untar it, and patch the failing tests, or examine the source code in the lib directory and resolve a bug or two. Before long you&amp;rsquo;ll be releasing your own distributions to CPAN!&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F96%2F2014%2F6%2F13%2FPerl-distributions-modules-packages-explained&amp;amp;text=Perl+distributions%2C+modules%2C+packages+explained&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F96%2F2014%2F6%2F13%2FPerl-distributions-modules-packages-explained&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3 ways to include data with your Perl distribution</title>
      <link>http://perltricks.com/article/66/2014/2/7/3-ways-to-include-data-with-your-Perl-distribution/</link>
      <pubDate>Fri, 07 Feb 2014 04:05:13 +0000</pubDate>
      
      <guid>http://perltricks.com/article/66/2014/2/7/3-ways-to-include-data-with-your-Perl-distribution/</guid>
      <description>

&lt;p&gt;&lt;em&gt;As a module author, being able to include data in your Perl distribution is super-useful. Data can be used for things like configuration and writing data-driven tests. Here are three ways to include data in a Perl distribution.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;EDIT: &lt;em&gt;Article updated on 9th February 2014 to include ExtUtils::MakeMaker solution option 3.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;use-data:6eeab3451604b74e59681fcd51f63947&#34;&gt;Use __DATA__&lt;/h3&gt;

&lt;p&gt;The &amp;ldquo;__DATA__&amp;rdquo; token is a Perl keyword that signifies the end of the code in the file. Any text that appears after the token is automatically read into the DATA filehandle at runtime. For example, let&amp;rsquo;s include the Perl TIOBE statistics for the past decade as YAML data in a Perl test file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use YAML::XS;
use Test::More;

my $yaml = do { local $/; &amp;lt;main::DATA&amp;gt; };
my $data = Load $yaml;

do { ... };

done_testing();

__DATA__
---
2014: 0.917
2013: 2.264
2012: 2.768
2011: 2.857
2010: 3.562
2009: 4.303
2008: 5.247
2007: 6.237
2006: 7.045
2005: 8.861
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we use a do block to slurp the main::DATA filehandle into $yaml. We then use the YAML::XS &amp;ldquo;Load&amp;rdquo; function to decode $yaml into a Perl data structure stored in $data. From here we&amp;rsquo;re free to use the data in our tests.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s nice about the __DATA__ approach is that it is simple, fast to code, cross platform functional and you should never have trouble locating the data (unlike with an external file). The downside with __DATA__ is that it forces you to include the data in the same file as the code. What if you have a large volume of data? Every time the module is used, the data would increase the burden of using that module, whether or not the data is actually used. Additionally the content of __DATA__ is largely fixed - only the developer can overwrite it.&lt;/p&gt;

&lt;h3 id=&#34;use-findbin-to-locate-the-data-file:6eeab3451604b74e59681fcd51f63947&#34;&gt;Use FindBin to locate the data file&lt;/h3&gt;

&lt;p&gt;FindBin is a fabulous little module that comes with core Perl and provides the &amp;ldquo;Bin&amp;rdquo; function which returns the absolute path of the current file&amp;rsquo;s directory. So the pattern here is to include a data file in the same directory as the Perl file and reference the data file using FindBin&amp;rsquo;s Bin function. Let&amp;rsquo;s look at an example:&lt;/p&gt;

&lt;p&gt;First we have our Tiobe Perl YAML data, saved in the file perl_tiobe.yaml:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;---
2014: 0.917
2013: 2.264
2012: 2.768
2011: 2.857
2010: 3.562
2009: 4.303
2008: 5.247
2007: 6.237
2006: 7.045
2005: 8.861
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we reference the file in our modified test script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use YAML::XS;
use Test::More;
use FindBin;

open (my $DATA, &#39;&amp;lt;&#39;, &amp;quot;$FindBin::Bin/perl_tiobe.yaml&amp;quot;) or die $!;
my $yaml = do { local $/; &amp;lt;$DATA&amp;gt; };
my $data = Load $yaml;

do { ... };

done_testing();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s review what&amp;rsquo;s changed in this script from the previous version. First of all we&amp;rsquo;re importing Findbin. We&amp;rsquo;re then opening a filehandle called $DATA that points to the current directory returned by FindBin::Bin plus the name of the data file.&lt;/p&gt;

&lt;p&gt;The FindBin pattern works well if you can guarantee the data file will be in the same place as the code file. This makes it great for test files, as (by convention) they are always in the t directory and are not copied elsewhere as part of the module installation. You can use this pattern when distributing data files with Perl application (e.g. in the Makefile include both the binary and the data file in the EXE_FILES directive). However this does mean that the data file will be copied to the target bin directory, which is the kind of file pollution that attracts ire quickly.&lt;/p&gt;

&lt;h3 id=&#34;update-makefile-pl-build-pl-and-use-file-share:6eeab3451604b74e59681fcd51f63947&#34;&gt;Update Makefile.PL / Build.PL and use File::Share&lt;/h3&gt;

&lt;p&gt;Another way to include data files with a Perl distribution is to place them in a &amp;lsquo;share&amp;rsquo; directory within the distribution root directory, update the Makefile.PL / Build.PL to copy the data files during install and then use File::Share to access the files.&lt;/p&gt;

&lt;p&gt;If your distribution uses ExtUtils::MakeMaker, you can use &lt;a href=&#34;https://metacpan.org/pod/File::ShareDir::Install&#34;&gt;File::ShareDir::Install&lt;/a&gt; in your Makefile.PL to copy the data files. Here is a vanilla Makefile.PL for a fictional module &amp;ldquo; Data::File&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use 5.006;
use strict;
use warnings FATAL =&amp;gt; &#39;all&#39;;
use ExtUtils::MakeMaker;
use File::ShareDir::Install;

install_share dist =&amp;gt; &#39;share&#39;;

WriteMakefile(
    NAME             =&amp;gt; &#39;Data::Dir&#39;,
    AUTHOR           =&amp;gt; q{David Farrell },
    VERSION_FROM     =&amp;gt; &#39;lib/Data/Dir.pm&#39;,
    ABSTRACT_FROM    =&amp;gt; &#39;lib/Data/Dir.pm&#39;,
    LICENSE          =&amp;gt; &#39;Artistic_2_0&#39;,
    PL_FILES         =&amp;gt; {}, 
    MIN_PERL_VERSION =&amp;gt; 5.006,
    CONFIGURE_REQUIRES =&amp;gt; {
        &#39;ExtUtils::MakeMaker&#39; =&amp;gt; 0,
    },  
    BUILD_REQUIRES =&amp;gt; {
        &#39;Test::More&#39; =&amp;gt; 0,
    },  
    PREREQ_PM =&amp;gt; {
        #&#39;ABC&#39;              =&amp;gt; 1.6,
        #&#39;Foo::Bar::Module&#39; =&amp;gt; 5.0401,
    },  
    dist  =&amp;gt; { COMPRESS =&amp;gt; &#39;gzip -9f&#39;, SUFFIX =&amp;gt; &#39;gz&#39;, },
    clean =&amp;gt; { FILES =&amp;gt; &#39;Data-Dir-*&#39; },
);

package MY;
use File::ShareDir::Install &#39;postamble&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the Makefile we import File::ShareDir:Install, and pass our &amp;ldquo;share&amp;rdquo; directory as an argument to the &amp;ldquo;install_share&amp;rdquo; function. The strange last two lines of the Makefile include a package declaration for MY and an import of File::ShareDir::Install&amp;rsquo;s &amp;ldquo;postamble&amp;rdquo; method. Be sure to include those two lines else the data files will not be copied.&lt;/p&gt;

&lt;p&gt;If you are using &lt;a href=&#34;https://metacpan.org/pod/Module::Build::API&#34;&gt;Module::Build&lt;/a&gt;, update Build.PL file with the &lt;a href=&#34;https://metacpan.org/pod/https://metacpan.org/pod/Module::Build::API#share_dir&#34;&gt;share_dir&lt;/a&gt; directive. Here&amp;rsquo;s a vanilla Build.PL for a fictional module &amp;ldquo;Data::File&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use 5.006;
use strict;
use warnings FATAL =&amp;gt; &#39;all&#39;;
use Module::Build;

my $builder = Module::Build-&amp;gt;new(
    module_name         =&amp;gt; &#39;Data::File&#39;,
    license             =&amp;gt; &#39;Artistic_2_0&#39;,
    dist_author         =&amp;gt; q{David Farrell },
    dist_version_from   =&amp;gt; &#39;lib/Data/File.pm&#39;,
    release_status      =&amp;gt; &#39;stable&#39;,
    configure_requires =&amp;gt; {
        &#39;Module::Build&#39; =&amp;gt; 0,
    },
    build_requires =&amp;gt; {
        &#39;Test::More&#39; =&amp;gt; 0,
    },  
    requires =&amp;gt; {
        #&#39;ABC&#39;              =&amp;gt; 1.6,
        #&#39;Foo::Bar::Module&#39; =&amp;gt; 5.0401,
    },  
    add_to_cleanup     =&amp;gt; [ &#39;Data-File-*&#39; ],
    create_makefile_pl =&amp;gt; &#39;traditional&#39;,
    share_dir =&amp;gt; &#39;share&#39;,
);

$builder-&amp;gt;create_build_script();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;share_dir&amp;rdquo; directive in the example Build.PL above instructs Module::Build to copy any files in the distributions share directory to the distribution&amp;rsquo;s auto directory at install time.&lt;/p&gt;

&lt;p&gt;Whether your distribution uses a Makefile.PL or a Build.PL, accessing the data file is now a matter of code. Here is a stripped-own File.pm file from our fictional module &amp;ldquo;Data::File&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Data::File;
use strict;
use warnings;
use YAML::XS;
use File::Share &#39;:all&#39;; 
    
sub read_data {         
    my $data_location = dist_file(&#39;Data-File&#39;, &#39;perl_tiobe.yaml&#39;);
    open (my $DATA, &#39;&amp;lt;&#39;, $data_location) or die $!;
    my $yaml = do { local $/; &amp;lt;$DATA&amp;gt; };
    my $data = Load $yaml; 
    
    do { ... };
}   
        
1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much of this code should look familiar. In the &amp;ldquo;read_data&amp;rdquo; subroutine we use the &amp;ldquo;dist_file&amp;rdquo; function of &lt;a href=&#34;https://metacpan.org/pod/File::Share&#34;&gt;File::Share&lt;/a&gt; to get the absolute filepath for the data file. The &amp;ldquo;dist_file&amp;rdquo; function is great: it will find the data file during testing and once the module is installed. After that line we open a filehandle to the file and process it as normal.&lt;/p&gt;

&lt;p&gt;This method requires more work than the first two, but also offers a lot in return: we are able to include data with the distribution and access it at install and runtime. Our code files are not clogged with additional data that we may not need and we are not restricted to including the data files in the same directory as the consuming code file. It&amp;rsquo;s even possible to share data from distribution with another (using &amp;ldquo;dist_file&amp;rdquo;).&lt;/p&gt;

&lt;h3 id=&#34;conclusion:6eeab3451604b74e59681fcd51f63947&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The examples have focused on including YAML data, but the solutions would work for most data types. Including data with Perl distributions is not as easy as it should be. However with the three solutions described here, you should be equipped to tackle the typical scenarios.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F66%2F2014%2F2%2F7%2F3-ways-to-include-data-with-your-Perl-distribution&amp;amp;text=3%20ways%20to%20include%20data%20with%20your%20Perl%20distribution&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F66%2F2014%2F2%2F7%2F3-ways-to-include-data-with-your-Perl-distribution&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The easy way to build stand-alone Perl apps</title>
      <link>http://perltricks.com/article/58/2014/1/5/The-easy-way-to-build-stand-alone-Perl-apps/</link>
      <pubDate>Sun, 05 Jan 2014 23:21:55 +0000</pubDate>
      
      <guid>http://perltricks.com/article/58/2014/1/5/The-easy-way-to-build-stand-alone-Perl-apps/</guid>
      <description>

&lt;p&gt;The Perl toolchain has such a large install base it&amp;rsquo;s tempting to just upload your app to PAUSE and let users install it via CPAN. &lt;a href=&#34;https://metacpan.org/search?q=App%3A%3A&#34;&gt;Many authors&lt;/a&gt; have taken this approach and it makes sense in most cases to reuse the power of the CPAN in providing a common install, dependency management and update mechanism. Sometimes however you want to distribute a dependency-free Perl app in a single executable file, and for these cases you&amp;rsquo;ll want to look at &lt;a href=&#34;https://metacpan.org/pod/App::FatPacker&#34;&gt;App::FatPacker&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;requirements:41e4dd307f92bfa80a5468497f197a81&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need a Unix-based system (Linux, OSX, BSD) and to install &lt;a href=&#34;https://metacpan.org/pod/App::FatPacker&#34;&gt;App::FatPacker&lt;/a&gt;. It runs on every version of Perl from 5.8.8 upwards, so just fire up the terminal and enter the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan App::FatPacker
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;coding-your-app:41e4dd307f92bfa80a5468497f197a81&#34;&gt;Coding your app&lt;/h3&gt;

&lt;p&gt;You can convert any typical Perl script into a standalone app, as long as it doesn&amp;rsquo;t have XS dependencies (see &amp;ldquo;Alternatives to App::Fatpacker&amp;rdquo; below for more info on how to create apps with XS dependencies). One suggestion would be to use the following shebang line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shebang line will call the &amp;ldquo;env&amp;rdquo; program passing &amp;ldquo;perl&amp;rdquo; as a parameter. This deals with the issue of the Perl binary beng installed in different locations on platforms as it will use the Perl binary in the user&amp;rsquo;s $PATH. This is documented in &lt;a href=&#34;http://perldoc.perl.org/perlrun.html&#34;&gt;perlrun&lt;/a&gt;. It is also compatible with Perlbrew.&lt;/p&gt;

&lt;h3 id=&#34;producing-the-single-file-app:41e4dd307f92bfa80a5468497f197a81&#34;&gt;Producing the single file app&lt;/h3&gt;

&lt;p&gt;This couldn&amp;rsquo;t be simpler: once you have your Perl script ready to go, open the terminal and enter the following, replacing the paths with your own:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fatpack pack /path/to/script &amp;gt; /path/to/app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will pack all of the dependencies used by your script into a single executable app.&lt;/p&gt;

&lt;h3 id=&#34;running-the-app:41e4dd307f92bfa80a5468497f197a81&#34;&gt;Running the app&lt;/h3&gt;

&lt;p&gt;Now that your app is in a single file, distributing and running it is a piece of cake. Simply copy the file to any directory in your $PATH. In order to be able to run your new app, you&amp;rsquo;ll need to set it&amp;rsquo;s permission to be executable. You can do this with chmod:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;chmod 755 /path/to/app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the app should run simply by entering the app filename in the terminal.&lt;/p&gt;

&lt;h3 id=&#34;a-simple-example:41e4dd307f92bfa80a5468497f197a81&#34;&gt;A simple example&lt;/h3&gt;

&lt;p&gt;Let say we have the following script, BillCalc.pl which calculates how much each person should pay at dinner using the fictitious &amp;ldquo;Math::Bill&amp;rdquo; library.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use strict;
use warnings;
use Math::Bill;
use feature &#39;say&#39;;
use Carp &#39;croak&#39;;

croak &amp;quot;Error: missing arguments. Requires a bill total and number of people at dinner. e.g:\n   BillCalc 100.40 3&amp;quot; unless @ARGV == 2;

my $bill = Math::Bill-&amp;gt;new($ARGV[0], $ARGV[1]);

say &#39;Each person should pay: &#39; . $bill-&amp;gt;apportion . &#39; each&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can pack BillCalc.pl into a single file app using App::Fatpacker:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fatpack pack BillCalc.pl &amp;gt; BillCalc
BillCalc.pl syntax OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;App::Fatpacker prints out a confirmation message (&amp;ldquo;BillCalc.pl syntax OK&amp;rdquo;) and we should now have a new file, called &amp;ldquo;BillCalc&amp;rdquo; in our current directory. This file will contain all of the contents of &amp;ldquo;Math::Bill&amp;rdquo; and any other dependencies in BillCalc.pl.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s move this to a directory in my $PATH, /home/sillymoose/local/bin&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;mv BillCalc /home/sillymoose/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And change the file permissions to be executable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;chmod 755 /home/sillymoose/local/bin/BillCalc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can run the BillCalc app at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;BillCalc 120 3
Each person should pay: 40 each
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For an example of a real-world Perl app created with App::FatPacker, check out our article on &lt;a href=&#34;http://perltricks.com/article/55/2013/12/22/Schedule-jobs-like-a-boss-with-every&#34;&gt;every&lt;/a&gt;, the cron scheduling app.&lt;/p&gt;

&lt;h3 id=&#34;alternatives-to-app-fatpacker:41e4dd307f92bfa80a5468497f197a81&#34;&gt;Alternatives to App::FatPacker&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/pp&#34;&gt;PP&lt;/a&gt; is another Perl tool that can create stand-alone Perl apps. It also supports XS module dependencies (unlike App::FatPacker).&lt;/p&gt;

&lt;p&gt;Of course you can also distribute an application via CPAN, where you have the flexibility of including the dependent modules in your application&amp;rsquo;s inc directory, or include the modules as dependencies in the makefile, and let CPAN install them for you - this is also more disk space efficient. Perl applications on CPAN place the app in the application&amp;rsquo;s bin directory and use &amp;ldquo;EXE_FILES&amp;rdquo; directive in the makefile to install the app to the Perl bin directory. If you&amp;rsquo;re interested in this approach, check out the &lt;a href=&#34;https://metacpan.org/source/XSAWYERX/Module-Starter-1.62&#34;&gt;Module::Starter source&lt;/a&gt; as a good example to copy from.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shazam! Use Image::Magick with Perlbrew in minutes</title>
      <link>http://perltricks.com/article/57/2014/1/1/Shazam--Use-Image--Magick-with-Perlbrew-in-minutes/</link>
      <pubDate>Wed, 01 Jan 2014 23:43:09 +0000</pubDate>
      
      <guid>http://perltricks.com/article/57/2014/1/1/Shazam--Use-Image--Magick-with-Perlbrew-in-minutes/</guid>
      <description>

&lt;p&gt;&lt;em&gt;The open source ImageMagick software provides amazing tools for creating and manipulating images in over 100 formats. Unfortunately, installing ImageMagick&amp;rsquo;s Perl module under Perlbrew can be a frustrating and time-consuming task. However it doesn&amp;rsquo;t have to be this way - with the method described below you can have the module installed in minutes, no root access required!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;update-07-01-2014:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;&lt;em&gt;Update 07-01-2014&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Zaki (&lt;a href=&#34;https://twitter.com/zmughal&#34;&gt;@zhmughal&lt;/a&gt;) has worked up a sweet &lt;a href=&#34;https://gist.github.com/zmughal/8264712/raw/8831e421393143c5b48f22dcfa12eeda51c5cfbf/install-imagemagick-perl&#34;&gt;shell script&lt;/a&gt; to automate the installation process for you, so you can save the finger work for using ImageMagick with your next Perl program:)&lt;/p&gt;

&lt;h3 id=&#34;requirements:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to have Perlbrew and a local Perl installation via Perlbrew on Unix-based platform. This has been tested on Perl 5.16.3 but should work on any modern Perl version.&lt;/p&gt;

&lt;h3 id=&#34;preparation:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Preparation&lt;/h3&gt;

&lt;p&gt;Create a local directory: we will install ImageMagick here. Open up the terminal and enter the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;mkdir ~/local
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-image-magick-don-t-use-cpan:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Installing Image::Magick - don&amp;rsquo;t use CPAN&lt;/h3&gt;

&lt;p&gt;Although the &lt;a href=&#34;https://metacpan.org/pod/Image::Magick&#34;&gt;Image::Magick&lt;/a&gt; module is available on CPAN, installing it via CPAN is usually a fruitless task as the process croaks on make. Instead download the whole &lt;a href=&#34;http://www.imagemagick.org/download/ImageMagick.tar.gz&#34;&gt;ImageMagick tarball&lt;/a&gt;. Once downloaded, navigate to the tarball&amp;rsquo;s parent directory using the terminal and un-tar the archive with the following command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;tar xvfz ImageMagick.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now change into the new directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cd ImageMagick-6.8.8-0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enter the following command, replacing [username], [path to CORE] and [path to Perl bin] with your system&amp;rsquo;s details. Remove the &amp;ldquo;&amp;ndash;without-threads&amp;rdquo; text if your Perl was compiled with threads (here is how to check).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;LDFLAGS=-L/home/[username]/perl5/perlbrew/perls/[path to CORE] \
    ./configure --prefix /home/[username]/local \
    --with-perl=/home/[username]/perl5/perlbrew/perls/[path to Perl bin] \
    --enable-shared --without-threads
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a completed example for my system:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;LDFLAGS=-L/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/lib/5.16.3/x86_64-linux/CORE \
    ./configure --prefix /home/sillymoose/local \
    --with-perl=/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin/perl \
    --enable-shared --without-threads
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this command should cause ImageMagick to run a series of configuration checks, at the end of which it will print a configuration summary, which should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;ImageMagick is configured as follows. Please verify that this configuration
matches your expectations.

Host system type: x86_64-unknown-linux-gnu
Build system type: x86_64-unknown-linux-gnu

                  Option                        Value
-------------------------------------------------------------------------------
Shared libraries  --enable-shared=yes       yes
Static libraries  --enable-static=yes       yes
Module support    --with-modules=no     no
GNU ld            --with-gnu-ld=yes     yes
Quantum depth     --with-quantum-depth=16   16
High Dynamic Range Imagery
                  --enable-hdri=no      no

Delegate Configuration:
BZLIB             --with-bzlib=yes      yes
Autotrace         --with-autotrace=no       no
Dejavu fonts      --with-dejavu-font-dir=default    /usr/share/fonts/dejavu/
DJVU              --with-djvu=yes       no
DPS               --with-dps=yes        no
FFTW              --with-fftw=yes       no
FlashPIX          --with-fpx=yes        no
FontConfig        --with-fontconfig=yes     no
FreeType          --with-freetype=yes       yes
GhostPCL          None              pcl6 (unknown)
GhostXPS          None              gxps (unknown)
Ghostscript       None              gs (9.10)
Ghostscript fonts --with-gs-font-dir=default    /usr/share/fonts/default/Type1/
Ghostscript lib   --with-gslib=no       no
Graphviz          --with-gvc=no     
JBIG              --with-jbig=yes       no
JPEG v1           --with-jpeg=yes       yes
JPEG-2000         --with-jp2=yes        yes
LCMS v1           --with-lcms=yes       yes
LCMS v2           --with-lcms2=yes      no
LQR               --with-lqr=yes        no
LTDL              --with-ltdl=yes       no
LZMA              --with-lzma=yes       yes
Magick++          --with-magick-plus-plus=yes   no (failed tests)
MUPDF             --with-mupdf=no       no
OpenEXR           --with-openexr=yes        no
PANGO             --with-pango=yes      no
PERL              --with-perl=/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin/perl        /home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin/perl
PNG               --with-png=yes        yes
RSVG              --with-rsvg=no        no
TIFF              --with-tiff=yes       yes
WEBP              --with-webp=yes       no
Windows fonts     --with-windows-font-dir=  none
WMF               --with-wmf=no     no
X11               --with-x=         yes
XML               --with-xml=yes        yes
ZLIB              --with-zlib=yes       yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check that the image file formats you expect to be working with are showing as &amp;ldquo;yes&amp;rdquo;. If any are showing as &amp;ldquo;no&amp;rdquo; that you require, you&amp;rsquo;ll need to install the appropriate C library (e.g. libpng for PNG files) and re-run the previous command.&lt;/p&gt;

&lt;p&gt;To install ImageMagick and the Image::Magick Perl module, run this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;confirm-installation:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Confirm Installation&lt;/h3&gt;

&lt;p&gt;Confirming that the Image::Magick module has installed is not quite straightforward either. With version Image Magick 6.8.8, the $VERSION variable is stored in the super class Image::Magick::Q16. Hence you&amp;rsquo;ll need to type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl -MImage::Magick::Q16\ 999
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which should yield:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Image::Magick::Q16 version 999 required--this is only version 6.88.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sources:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Sources&lt;/h3&gt;

&lt;p&gt;Thanks to Jason Galea - his invaluable &lt;a href=&#34;https://github.com/lecstor/DevNotes/wiki/Image-Magick-with-Perlbrew&#34;&gt;GitHub notes&lt;/a&gt; formed the basis of this solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Find CPAN mirrors and configure the local CPAN mirror list</title>
      <link>http://perltricks.com/article/44/2013/10/20/Find-CPAN-mirrors-and-configure-the-local-CPAN-mirror-list/</link>
      <pubDate>Sun, 20 Oct 2013 19:07:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/44/2013/10/20/Find-CPAN-mirrors-and-configure-the-local-CPAN-mirror-list/</guid>
      <description>

&lt;p&gt;CPAN mirrors are online repositories which host or &amp;ldquo;mirror&amp;rdquo; the Perl module distributions on CPAN. There are hundreds of CPAN mirrors dispersed throughout the World. When the CPAN program is run for the first time on a machine, it will configure the CPAN mirror list to use for checking for new versions of modules and downloading Perl distributions. All CPAN mirrors are not created equally though: the distribution list&amp;rsquo;s age, speed and the geographic location vary from mirror to mirror and so you may want to re-configure your local CPAN mirror list to suit your needs. This article describes how to find CPAN mirrors and edit the local CPAN mirror configuration.&lt;/p&gt;

&lt;h3 id=&#34;finding-cpan-mirrors:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;Finding CPAN mirrors&lt;/h3&gt;

&lt;p&gt;An online list of public CPAN mirrors can be found &lt;a href=&#34;http://mirrors.cpan.org/&#34;&gt;here&lt;/a&gt;. The list is frequently updated and lists mirrors by location, the scheme used (ftp, http), the age of the module list and some test results. Viewing this list you can see that some mirrors do not refresh their module list for days at a time - if you are using these mirrors you could be missing out on the latest version of your favourite module! A JSON formatted CPAN mirror list can be found &lt;a href=&#34;http://www.cpan.org/indices/mirrors.json&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;start-the-cpan-shell:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;Start the CPAN shell&lt;/h3&gt;

&lt;p&gt;Once you have identified the URLs of the CPAN mirrors you want to use, fire up the terminal and load the cpan shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan

cpan shell -- CPAN exploration and modules installation (v2.00)
Enter &#39;h&#39; for help.

cpan[1]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;view-the-local-cpan-mirror-list:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;View the local CPAN mirror list&lt;/h3&gt;

&lt;p&gt;The CPAN mirror list is stored in the &amp;ldquo;urllist&amp;rdquo; variable. To view the list of mirrors, type &amp;ldquo;o conf urllist&amp;rdquo; in the CPAN shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan[1]&amp;gt;o conf urllist
    urllist           
    0 [http://httpupdate3.cpanel.net/CPAN/]
    1 [http://httpupdate23.cpanel.net/CPAN/]
    2 [http://mirrors.servercentral.net/CPAN/]
    3 [ftp://cpan.cse.msu.edu/]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-a-cpan-mirror:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;Add a CPAN mirror&lt;/h3&gt;

&lt;p&gt;To add a CPAN mirror use the &amp;ldquo;unshift&amp;rdquo; or &amp;ldquo;push&amp;rdquo; functions to add the mirror&amp;rsquo;s url to the front or end of the mirror list. Make sure that the URL for the mirror &lt;strong&gt;includes the scheme&lt;/strong&gt; (http, ftp).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan[2]&amp;gt; o conf urllist push http://mirror.waia.asn.au/pub/cpan/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;remove-a-cpan-mirror:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;Remove a CPAN mirror&lt;/h3&gt;

&lt;p&gt;To remove a CPAN mirror use the &amp;ldquo;shift&amp;rdquo; or &amp;ldquo;pop&amp;rdquo; functions to remove the mirror URL from the front or end of the mirror list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan[3]&amp;gt; o conf urllist pop
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;completely-replace-the-existing-mirror-list:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;Completely replace the existing mirror list&lt;/h3&gt;

&lt;p&gt;To overwrite the existing mirror list with a new one, just provide the URLs to the new mirrors as a space separated list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan[4]&amp;gt; o conf urllist http://mirror.waia.asn.au/pub/cpan/ ftp://mirrors.coopvgg.com.ar/CPAN/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;saving-changes:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;Saving changes&lt;/h3&gt;

&lt;p&gt;Once you have updated the CPAN mirror list, make sure you commit the changes to file so they are saved beyond the current session:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan[5]&amp;gt; o conf commit
commit: wrote &#39;/home/sillymoose/.cpan/CPAN/MyConfig.pm&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;edit-the-cpan-configuration-file-directly:6b39c76ec4be1267597fa5bb07945eee&#34;&gt;Edit the CPAN configuration file directly&lt;/h3&gt;

&lt;p&gt;You can also edit the CPAN config file directly. For local user Perl installations this is */CPAN/MyConfig.pm and system Perl installations */CPAN/Config.pm (the parent directory will depend on the platform). When editing the file, urllist is a hash key for an array reference of mirror urls. Note the urls are quoted using Perl&amp;rsquo;s quoting operator (&amp;ldquo;q&amp;rdquo;). Simply edit and save the file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&#39;urllist&#39; =&amp;gt; [
    q[http://httpupdate3.cpanel.net/CPAN/], 
    q[http://httpupdate23.cpanel.net/CPAN/], 
    q[http://mirrors.servercentral.net/CPAN/], 
    q[ftp://cpan.cse.msu.edu/]
],
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to schedule Perl scripts using cron</title>
      <link>http://perltricks.com/article/43/2013/10/11/How-to-schedule-Perl-scripts-using-cron/</link>
      <pubDate>Fri, 11 Oct 2013 01:54:20 +0000</pubDate>
      
      <guid>http://perltricks.com/article/43/2013/10/11/How-to-schedule-Perl-scripts-using-cron/</guid>
      <description>

&lt;p&gt;Cron is a job scheduling program available on UNIX-like platforms. Most system commands can be scheduled including the execution of Perl programs. Once a job is setup, cron will run it as scheduled even if the user is not logged in, which can be a great way to automate sysadmin tasks or repetitive jobs. This article describes how to run Perl scripts with cron.&lt;/p&gt;

&lt;h3 id=&#34;perl-script-tips:033cbfb4558019e15a0feee3315d7625&#34;&gt;Perl script tips&lt;/h3&gt;

&lt;p&gt;When preparing a script to be run by cron, there a few things to keep in mind. You may want to add a shebang line to the of the script for the Perl binary you want to execute. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/local/bin/perl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you plan to run the script on different platforms, you can omit the shebang line, as the location of the Perl binary may vary from platform to platform (more on this later).&lt;/p&gt;

&lt;p&gt;Also ensure that any paths used in the script are absolute paths (such as for opening filehandles, database connection strings and external program paths).&lt;/p&gt;

&lt;h3 id=&#34;setup-a-crontab:033cbfb4558019e15a0feee3315d7625&#34;&gt;Setup a crontab&lt;/h3&gt;

&lt;p&gt;To schedule a job with cron, the job needs to be added to the user&amp;rsquo;s crontab. To do this open a terminal and type the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will open the crontab in a text editor. To add a job, a line must be added in the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;* * * * * command to be executed
| | | | |
| | | | |
| | | | +----- day of week  (0 - 6, Sunday=0)
| | | +------- month        (1 - 12)
| | +--------- day of month (1 - 31)
| +----------- hour         (0 - 23)
+------------- min          (0 - 59)

An asterisk (*) means all.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are some example crontab entries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# execute every minute
* * * * * perl /path/to/Beacon.pl

# execute every 5 minutes
*/5 * * * * perl /path/to/Beacon.pl

# execute every hour at 0 minutes past the hour
0 * * * * perl /path/to/Beacon.pl

# execute every 12 hours at half past the hour
30 */12 * * * perl /path/to/Beacon.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your script does not contain a shebang line, provide the absolute path to the Perl binary in the crontab. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;30 */12 * * * /usr/local/bin/perl /path/to/Beacon.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the crontab and exit the text editor. To check the job has been scheduled, you can check your crontab with this command from the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;crontab -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will print your current crontab to the terminal.&lt;/p&gt;

&lt;h3 id=&#34;troubleshooting-cron:033cbfb4558019e15a0feee3315d7625&#34;&gt;Troubleshooting cron&lt;/h3&gt;

&lt;p&gt;Working with cron is usually straightforward, but if you are having difficulty getting the Perl script to run, check the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check the cron log to be sure that cron is running the job as you expect. It is usually found here: /var/log/cron&lt;/li&gt;
&lt;li&gt;Check that you are providing the correct absolute path to the Perl binary. Either in the shebang line inside the script or in crontab (if you are not sure what this is type &amp;ldquo;which perl&amp;rdquo; at the terminal).&lt;/li&gt;
&lt;li&gt;Make sure the script permissions allow execution (e.g. &amp;ldquo;chmod +x /path/to/file&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;If you are running additional programs within the Perl script, consider adding their binary paths to the crontab as cron does not have the same PATH as the user.&lt;/li&gt;
&lt;li&gt;If you need to run a script as root, just create a crontab for root using sudo: &amp;ldquo;sudo crontab -e&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good list of general cron tips can be found &lt;a href=&#34;http://askubuntu.com/questions/23009/reasons-why-crontab-does-not-work&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get detailed Perl version configuration information</title>
      <link>http://perltricks.com/article/41/2013/9/27/Get-detailed-Perl-version-configuration-information/</link>
      <pubDate>Fri, 27 Sep 2013 01:25:18 +0000</pubDate>
      
      <guid>http://perltricks.com/article/41/2013/9/27/Get-detailed-Perl-version-configuration-information/</guid>
      <description>&lt;p&gt;Most Perl programmers know they can find out the current Perl version by typing &amp;ldquo;perl -v&amp;rdquo; as the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl -v

This is perl 5, version 16, subversion 3 (v5.16.3) built for x86_64-linux

Copyright 1987-2012, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using &amp;quot;man perl&amp;quot; or &amp;quot;perldoc perl&amp;quot;.  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get detailed version information type &amp;ldquo;perl -&lt;strong&gt;V&lt;/strong&gt;&amp;rdquo; (capital V) at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl -V

Summary of my perl5 (revision 5 version 16 subversion 3) configuration:
   
  Platform:
    osname=linux, osvers=3.8.4-102.fc17.x86_64, archname=x86_64-linux
    uname=&#39;linux localhost.localdomain 3.8.4-102.fc17.x86_64 #1 smp sun mar 24 13:09:09 utc 2013 x86_64 x86_64 x86_64 gnulinux &#39;
    config_args=&#39;-de -Dprefix=/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3 -Aeval:scriptdir=/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin&#39;
    hint=recommended, useposix=true, d_sigaction=define
    useithreads=undef, usemultiplicity=undef
    useperlio=define, d_sfio=undef, uselargefiles=define, usesocks=undef
    use64bitint=define, use64bitall=define, uselongdouble=undef
    usemymalloc=n, bincompat5005=undef
  Compiler:
    cc=&#39;cc&#39;, ccflags =&#39;-fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64&#39;,
    optimize=&#39;-O2&#39;,
    cppflags=&#39;-fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include&#39;
    ccversion=&#39;&#39;, gccversion=&#39;4.7.2 20120921 (Red Hat 4.7.2-2)&#39;, gccosandvers=&#39;&#39;
    intsize=4, longsize=8, ptrsize=8, doublesize=8, byteorder=12345678
    d_longlong=define, longlongsize=8, d_longdbl=define, longdblsize=16
    ivtype=&#39;long&#39;, ivsize=8, nvtype=&#39;double&#39;, nvsize=8, Off_t=&#39;off_t&#39;, lseeksize=8
    alignbytes=8, prototype=define
  Linker and Libraries:
    ld=&#39;cc&#39;, ldflags =&#39; -fstack-protector -L/usr/local/lib&#39;
    libpth=/usr/local/lib /lib/../lib64 /usr/lib/../lib64 /lib /usr/lib /lib64 /usr/lib64 /usr/local/lib64
    libs=-lnsl -ldl -lm -lcrypt -lutil -lc
    perllibs=-lnsl -ldl -lm -lcrypt -lutil -lc
    libc=, so=so, useshrplib=false, libperl=libperl.a
    gnulibc_version=&#39;2.15&#39;
  Dynamic Linking:
    dlsrc=dl_dlopen.xs, dlext=so, d_dlsymun=undef, ccdlflags=&#39;-Wl,-E&#39;
    cccdlflags=&#39;-fPIC&#39;, lddlflags=&#39;-shared -O2 -L/usr/local/lib -fstack-protector&#39;


Characteristics of this binary (from libperl): 
  Compile-time options: HAS_TIMES PERLIO_LAYERS PERL_DONT_CREATE_GVSV
                        PERL_MALLOC_WRAP PERL_PRESERVE_IVUV USE_64_BIT_ALL
                        USE_64_BIT_INT USE_LARGE_FILES USE_LOCALE
                        USE_LOCALE_COLLATE USE_LOCALE_CTYPE
                        USE_LOCALE_NUMERIC USE_PERLIO USE_PERL_ATOF
  Built under linux
  Compiled at Apr 15 2013 14:54:57
  %ENV:
    PERLBREW_BASHRC_VERSION=&amp;quot;0.62&amp;quot;
    PERLBREW_HOME=&amp;quot;/home/sillymoose/.perlbrew&amp;quot;
    PERLBREW_MANPATH=&amp;quot;/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/man&amp;quot;
    PERLBREW_PATH=&amp;quot;/home/sillymoose/perl5/perlbrew/bin:/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin&amp;quot;
    PERLBREW_PERL=&amp;quot;perl-5.16.3&amp;quot;
    PERLBREW_ROOT=&amp;quot;/home/sillymoose/perl5/perlbrew&amp;quot;
    PERLBREW_VERSION=&amp;quot;0.62&amp;quot;
  @INC:
    /home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/lib/site_perl/5.16.3/x86_64-linux
    /home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/lib/site_perl/5.16.3
    /home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/lib/5.16.3/x86_64-linux
    /home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/lib/5.16.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This prints detailed information on the installed Perl&amp;rsquo;s configuration including: the options that Perl was compiled with, whether iThreads are enabled or not and a host of directory information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Load YAML Config Files</title>
      <link>http://perltricks.com/article/29/2013/9/17/How-to-Load-YAML-Config-Files/</link>
      <pubDate>Tue, 17 Sep 2013 03:18:10 +0000</pubDate>
      
      <guid>http://perltricks.com/article/29/2013/9/17/How-to-Load-YAML-Config-Files/</guid>
      <description>

&lt;p&gt;Config files are used by programmers to store local variables as it&amp;rsquo;s usually better to update a config file than to edit source code. &lt;a href=&#34;http://www.yaml.org/spec/1.2/spec.html#Introduction&#34;&gt;YAML&lt;/a&gt; is a popular data serialization language that&amp;rsquo;s easy to read and can serialize the common Perl variables (scalars, arrays and hashes). This article describes how to read a YAML config file in Perl and access the config file&amp;rsquo;s variables.&lt;/p&gt;

&lt;h3 id=&#34;the-config-file:3635643ce2dafff7a934f356c4953c84&#34;&gt;The config file&lt;/h3&gt;

&lt;p&gt;YAML defines different types of &lt;a href=&#34;http://www.yaml.org/spec/1.2/spec.html#id2759963&#34;&gt;data collections&lt;/a&gt; that can be used to serialize (represent or store) Perl variables. Let&amp;rsquo;s define a YAML config file to store some local email data. The config.yaml file could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
emailName: David
emailAddresses: 
    - sillymoos@cpan.org
    - perltricks.com@gmail.com
credentials:
    username: sillymoose
    password: itsasecret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s walkthrough config.yaml: the config file starts with three hyphens (&amp;ldquo;&amp;mdash;&amp;rdquo;) to signify the start of the document, &amp;ldquo;emailName&amp;rdquo;: is a scalar mapping with the value &amp;ldquo;David&amp;rdquo;, &amp;ldquo;emailAddresses&amp;rdquo; is a sequence of email addresses and &amp;ldquo;credentials&amp;rdquo; is a mapping of scalar mappings for the email username and password.&lt;/p&gt;

&lt;h3 id=&#34;load-the-config-file:3635643ce2dafff7a934f356c4953c84&#34;&gt;Load the config file&lt;/h3&gt;

&lt;p&gt;Perl&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/module/YAML::XS&#34;&gt;YAML::XS&lt;/a&gt; module provides a &lt;code&gt;LoadFile&lt;/code&gt; subroutine that can be used to read any YAML file into a scalar variable. This script loads the &amp;ldquo;config.yaml&amp;rdquo; config file and prints it using &lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use YAML::XS &#39;LoadFile&#39;;
use Data::Dumper;
    
my $config = LoadFile(&#39;config.yaml&#39;);

print Dumper($config);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run this script we get the following results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$VAR1 = {
          &#39;emailName&#39; =&amp;gt; &#39;David&#39;,
          &#39;credentials&#39; =&amp;gt; {
                           &#39;password&#39; =&amp;gt; &#39;itsasecret&#39;,
                           &#39;username&#39; =&amp;gt; &#39;sillymoose&#39;
                         },
          &#39;emailAddresses&#39; =&amp;gt; [
                              &#39;sillymoos@cpan.org&#39;,
                              &#39;perltricks.com@gmail.com&#39;
                            ]
        };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These results show that config.yaml has been read into &lt;code&gt;$config&lt;/code&gt; as a hash reference with three keys: &amp;ldquo;emailName&amp;rdquo;, &amp;ldquo;credentials&amp;rdquo; and &amp;ldquo;emailAddresses&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;accessing-the-config-data:3635643ce2dafff7a934f356c4953c84&#34;&gt;Accessing the config data&lt;/h3&gt;

&lt;p&gt;So far the script reads the contents of config.yaml into &lt;code&gt;$config&lt;/code&gt;. To access the config data we need to dereference the data from &lt;code&gt;$config&lt;/code&gt;. The following script shows examples of accessing the config scalar, array and hash data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use YAML::XS &#39;LoadFile&#39;;
use feature &#39;say&#39;;

my $config = LoadFile(&#39;config.yaml&#39;);

# access the scalar emailName
my $emailName = $config-&amp;gt;{emailName};

# access the array emailAddresses directly
my $firstEmailAddress = $config-&amp;gt;{emailAddresses}-&amp;gt;[0];
my $secondEmailAddress= $config-&amp;gt;{emailAddresses}-&amp;gt;[1];

# loop through and print emailAddresses
for (@{$config-&amp;gt;{emailAddresses}}) { say }

# access the credentials hash key values directly
my $username = $config-&amp;gt;{credentials}-&amp;gt;{username};
my $password = $config-&amp;gt;{credentials}-&amp;gt;{password};

# loop through and print credentials
for (keys %{$config-&amp;gt;{credentials}}) {
    say &amp;quot;$_: $config-&amp;gt;{credentials}-&amp;gt;{$_}&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;more-yaml:3635643ce2dafff7a934f356c4953c84&#34;&gt;More YAML&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/YAML::XS&#34;&gt;YAML::XS&lt;/a&gt; uses the libyaml C library and provides strong performance and adherence to the YAML specification. However if you have difficulty installing YAML::XS, there are pure Perl alternatives available: &lt;a href=&#34;https://metacpan.org/module/YAML&#34;&gt;YAML&lt;/a&gt; is not actively maintained and has several bugs but excellent documentation and generally works, &lt;a href=&#34;https://metacpan.org/module/YAML::Tiny&#34;&gt;YAML::Tiny&lt;/a&gt; is a newer module that implements a useful subset of the YAML specification.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run local Perl as root</title>
      <link>http://perltricks.com/article/36/2013/8/10/Run-local-Perl-as-root/</link>
      <pubDate>Sat, 10 Aug 2013 14:33:18 +0000</pubDate>
      
      <guid>http://perltricks.com/article/36/2013/8/10/Run-local-Perl-as-root/</guid>
      <description>&lt;p&gt;This is a simple trick for conveniently running local Perl as a root user on UNIX-based systems.&lt;/p&gt;

&lt;p&gt;Occasionally it&amp;rsquo;s necessary to run locally-installed Perl as root. However at the command line if you type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sudo perl program.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default the Perl that is executed is the system Perl binary. This can be problematic as the System Perl may not have the modules required, or even be the correct version of Perl that you need to run. An easy fix for this is to use the which command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sudo $(which perl) program.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By nesting which between a dollar sign parentheses, the terminal will resolve the command first, which returns a string to the local Perl binary. Sudo then operates on this binary instead of the system Perl binary. You can prove this with the following terminal commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;which perl
/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin/perl

sudo which perl
/bin/perl

sudo echo $(which perl)
/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin/perl
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to track new CPAN releases</title>
      <link>http://perltricks.com/article/33/2013/7/29/How-to-track-new-CPAN-releases/</link>
      <pubDate>Mon, 29 Jul 2013 01:11:31 +0000</pubDate>
      
      <guid>http://perltricks.com/article/33/2013/7/29/How-to-track-new-CPAN-releases/</guid>
      <description>

&lt;p&gt;CPAN is a fantastic Perl resource with thousands of modules and new ones being added all the time. But how do you keep track of what&amp;rsquo;s being released? This article describes three techniques for keeping tabs on the latest CPAN releases.&lt;/p&gt;

&lt;h3 id=&#34;cpan-org:1bfc29f171e882ce9b1eb00fa28d0101&#34;&gt;CPAN.org&lt;/h3&gt;

&lt;p&gt;The CPAN website&amp;rsquo;s &lt;a href=&#34;http://search.cpan.org/recent&#34;&gt;recent uploads&lt;/a&gt; page maintains a list of the latest CPAN releases, with links to the module documentation. Additionally it&amp;rsquo;s possible to search the release history using the navigating arrow links at the top of the page.&lt;/p&gt;

&lt;h3 id=&#34;cpan-recent-uploads:1bfc29f171e882ce9b1eb00fa28d0101&#34;&gt;CPAN::Recent::Uploads&lt;/h3&gt;

&lt;p&gt;Chris Williams&amp;rsquo; &lt;a href=&#34;https://metacpan.org/module/CPAN::Recent::Uploads&#34;&gt;CPAN::Recent::Uploads&lt;/a&gt; module offers a programmatic interface to track recent CPAN uploads. It provides a &amp;ldquo;recent&amp;rdquo; function that accepts two optional arguments: the time from which to view uploads since and the URL of the CPAN mirror to use. By default it will return a list of modules released in the past week on the CPAN mirror &amp;ldquo;&lt;a href=&#34;ftp://ftp.funet.fi/pub/CPAN/&amp;quot;&#34;&gt;ftp://ftp.funet.fi/pub/CPAN/&amp;quot;&lt;/a&gt;. The module&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/module/CPAN::Recent::Uploads&#34;&gt;documentation&lt;/a&gt; also has an example Perl one liner. To see CPAN::Recent::Uploads in action, enter this at the command-line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# print a list of this week&#39;s CPAN releases
perl -MCPAN::Recent::Uploads -le &amp;quot;print for CPAN::Recent::Uploads-&amp;gt;recent;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;twitter:1bfc29f171e882ce9b1eb00fa28d0101&#34;&gt;Twitter&lt;/h3&gt;

&lt;p&gt;The Twitter account &lt;a href=&#34;https://twitter.com/cpan_new&#34;&gt;CPAN New Modules&lt;/a&gt; tweets every new CPAN release. The author Punytan has also released the source code on &lt;a href=&#34;https://t.co/K7KnELaYzk&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can subscribe to the stream by clicking this button: &lt;a href=&#34;https://twitter.com/cpan_new&#34;&gt;Follow @cpan_new&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upload to CPAN from the command line</title>
      <link>http://perltricks.com/article/31/2013/6/30/Upload-to-CPAN-from-the-command-line/</link>
      <pubDate>Sun, 30 Jun 2013 03:44:12 +0000</pubDate>
      
      <guid>http://perltricks.com/article/31/2013/6/30/Upload-to-CPAN-from-the-command-line/</guid>
      <description>

&lt;p&gt;The Perl module &lt;a href=&#34;https://metacpan.org/module/CPAN::Uploader&#34;&gt;CPAN::Uploader&lt;/a&gt; comes with a neat command line application called &lt;a href=&#34;https://metacpan.org/module/RJBS/CPAN-Uploader-0.103004/bin/cpan-upload&#34;&gt;cpan-upload&lt;/a&gt; which allows Perl module authors to upload to CPAN from the command line. This article describes how to install cpan-upload and use it.&lt;/p&gt;

&lt;p&gt;To upload modules to CPAN you must have a registered &lt;a href=&#34;http://pause.perl.org/pause/query&#34;&gt;PAUSE&lt;/a&gt; account. Registration is free and an account is usually activated within 24 hours. Once you have a registered PAUSE account, install CPAN::Uploader via the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan CPAN::Uploader
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once CPAN::Uploader has installed (it has a bunch of dependencies, including C libraries for NetSSLeay) at the command line type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan-upload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see the cpan-upload help output displayed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Please provide at least one file name.
usage: cpan-upload [options] file-to-upload
    -v --verbose       enable verbose logging
    -h --help          display this help message
    --dry-run          do not actually upload anything
                     
    -u --user          your PAUSE username
    -p --password      the password to your PAUSE account
    -d --directory     a dir in your CPAN space in which to put the files
    --http-proxy       URL of the http proxy to use in uploading
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-step-method:9253a99b6a8c2591d3b7e3b70155f9ec&#34;&gt;1 Step method&lt;/h3&gt;

&lt;p&gt;To upload a file to PAUSE, the syntax is like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan-upload -u username -p password My-App-0.01.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where username and password are your PAUSE account credentials followed by the filepath(s) to the files you want to upload. On a successful load, cpan-upload will display the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;registering upload with PAUSE web server
POSTing upload for My-App-0.01.tar.gz to https://pause.perl.org/pause/authenquery
PAUSE add message sent ok [200]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-step-method-recommended:9253a99b6a8c2591d3b7e3b70155f9ec&#34;&gt;2 step method (recommended)&lt;/h3&gt;

&lt;p&gt;The 2 step method involves calling cpan-upload with just your username and the filepath to the files to be uploaded. cpan-upload will then prompt for your password, which is entered directly into Perl, in a hidden format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan-upload -u sillymoos My-App-0.01.tar.gz 
PAUSE Password:
POSTing upload for My-App-0.01.tar.gz to https://pause.perl.org/pause/authenquery
PAUSE add message sent ok [200]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; cpan-upload transmits your credentials via HTTPS (encrypted) to the PAUSE server, but with the 1 step method you do have to type your password in plaintext. which is a security risk as many operating systems will store them in logs, and/or process details. Simply searching through the Terminal history will reveal your PAUSE password. Additionally, someone could read your password as it&amp;rsquo;s typed in. The 2 step method reduces this risk as the password is not logged in the terminal, but goes directly into the Perl program, and the password is not visible on the screen when typed. That said, the password can still be extracted from the computer by a stack trace or system call search. cpan-upload does have the ability to read the credentials from a .pause file in your home directory, which is a slightly more secure method than the 1 step method (although storing passwords in plaintext files raises its own security vulnerabilities). Of these three options the 2 step method seems to be the most secure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Module::Version to get the version of an installed Perl module</title>
      <link>http://perltricks.com/article/22/2013/4/25/Use-Module--Version-to-get-the-version-of-an-installed-Perl-module/</link>
      <pubDate>Thu, 25 Apr 2013 18:39:48 +0000</pubDate>
      
      <guid>http://perltricks.com/article/22/2013/4/25/Use-Module--Version-to-get-the-version-of-an-installed-Perl-module/</guid>
      <description>&lt;p&gt;In response to our article &lt;a href=&#34;http://www.perltricks.com/article/1/2013/3/24/3-quick-ways-to-find-out-the-version-number-of-an-installed-Perl-module-from-the-terminal&#34;&gt;3 quick ways to find out the version number of an installed Perl module from the terminal&lt;/a&gt;, programmer &lt;a href=&#34;https://metacpan.org/author/RSAVAGE&#34;&gt;Ron Savage&lt;/a&gt; got in touch to point out that it&amp;rsquo;s possible to use the Perl module &lt;a href=&#34;https://metacpan.org/module/Module::Version&#34;&gt;Module::Version&lt;/a&gt; to get the version number of an installed module.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Module::Version&#34;&gt;Module::Version&lt;/a&gt; comes with a useful command line program, &lt;strong&gt;mversion&lt;/strong&gt; which when passed the name of a module, will print the version out. Simply install &lt;a href=&#34;https://metacpan.org/module/Module::Version&#34;&gt;Module::Version&lt;/a&gt; via CPAN and mversion will be installed automatically.&lt;/p&gt;

&lt;p&gt;Once &lt;a href=&#34;https://metacpan.org/module/Module::Version&#34;&gt;Module::Version&lt;/a&gt; is installed, to get the version number of Module::Build (for example) using mversion, go to the command line and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;mversion Module::Build
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Installing Perl modules with C library dependencies</title>
      <link>http://perltricks.com/article/19/2013/4/15/Installing-Perl-modules-with-C-library-dependencies/</link>
      <pubDate>Mon, 15 Apr 2013 18:37:26 +0000</pubDate>
      
      <guid>http://perltricks.com/article/19/2013/4/15/Installing-Perl-modules-with-C-library-dependencies/</guid>
      <description>

&lt;p&gt;Some Perl modules have specific C library dependencies that need to be met or else they won&amp;rsquo;t install. These issues can be tricky to solve as CPAN is not able to automatically install or report on non-Perl dependencies and Google isn&amp;rsquo;t good at returning useful results for these types of issues (&lt;a href=&#34;https://metacpan.org/module/MIKEM/Net-SSLeay-1.54/lib/Net/SSLeay.pod&#34;&gt;Net::SSLeay&lt;/a&gt; is a common example of a tricky module to install). Usually you will only find out about missing dependencies when trying to install the module, as the install will fail. What you need to do at this point is &lt;strong&gt;identify&lt;/strong&gt; and &lt;strong&gt;install&lt;/strong&gt; the missing C libraries.&lt;/p&gt;

&lt;h3 id=&#34;identifying-c-library-dependencies:12040641a686db63029ae6c41a9f1d99&#34;&gt;Identifying C Library dependencies&lt;/h3&gt;

&lt;p&gt;Here are some places to check for dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Install error message&lt;/strong&gt; - scan the command line output from the failed install: often Perl developers will write specific error messages that indicate the missing C library.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Module documentation&lt;/strong&gt; - check the main POD page for the module on &lt;a href=&#34;https://metacpan.org/&#34;&gt;metacpan&lt;/a&gt; it may indicate which C libraries are required.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Distribution files&lt;/strong&gt; - check the README and INSTALL files that come with the distribution for the module you are trying to install. If available they will be in the root directory of the tarball. You can browse these files online at &lt;a href=&#34;https://metacpan.org/&#34;&gt;metacpan&lt;/a&gt; by searching for the module, then clicking the &amp;lsquo;browse&amp;rsquo; link on the module&amp;rsquo;s main page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search your package manager&lt;/strong&gt; - look at the technologies and keywords associated with the module. For example &lt;a href=&#34;https://metacpan.org/module/MIKEM/Net-SSLeay-1.54/lib/Net/SSLeay.pod&#34;&gt;Net::SSLeay&lt;/a&gt; probably has something to do with SSL, so search for Perl-related SSL packages (example below).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;installing-c-library-dependencies:12040641a686db63029ae6c41a9f1d99&#34;&gt;Installing C library dependencies&lt;/h3&gt;

&lt;p&gt;Once you have identified the missing C libraries, you need to install them. If you are on Linux, this can be done using a package manager and searching for and installing the package containing the C library:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# yum package manager
$ sudo yum search ssl
...
sudo yum install openssl-perl.x86_64 perl-Net-SSLeay.x86_64 perl-Crypt-SSLeay.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are not on Linux, try downloading the library directly from the C library&amp;rsquo;s homepage - these are easy to find via Google and usually have specific Windows / OSX distributions.&lt;/p&gt;

&lt;p&gt;Once you have installed the requisite libraries, try installing the Perl module again with CPAN.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to install a specific version of a Perl module with CPAN</title>
      <link>http://perltricks.com/article/4/2013/3/27/How-to-install-a-specific-version-of-a-Perl-module-with-CPAN/</link>
      <pubDate>Wed, 27 Mar 2013 23:32:57 +0000</pubDate>
      
      <guid>http://perltricks.com/article/4/2013/3/27/How-to-install-a-specific-version-of-a-Perl-module-with-CPAN/</guid>
      <description>&lt;p&gt;Perl modules are usually installed via CPAN on the command line. This is invoked with the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan My::Module
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CPAN will always try to install the latest stable version of a module, which is a sensible default, however this may not always be the required behaviour. To have CPAN install a specific version of a module, you need to provide the full module distribution filename including the author. For example to install the module Set::Object version 1.28, at the command line type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan SAMV/Set-Object-1.28.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find the distribution filename for a module by searching for the module on &lt;a href=&#34;http://search.cpan.org/&#34;&gt;CPAN&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

