<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bandcamp on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/bandcamp/</link>
    <description>Recent content in Bandcamp on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Jul 2015 12:49:46 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/bandcamp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rip music from anywhere with Audacity</title>
      <link>http://perltricks.com/article/186/2015/7/30/Rip-music-from-anywhere-with-Audacity/</link>
      <pubDate>Thu, 30 Jul 2015 12:49:46 +0000</pubDate>
      
      <guid>http://perltricks.com/article/186/2015/7/30/Rip-music-from-anywhere-with-Audacity/</guid>
      <description>

&lt;p&gt;Sorry Perlers, this post contains no Perl code. Instead I want to show you how to record music with the open source tool &lt;a href=&#34;http://audacityteam.org/&#34;&gt;Audacity&lt;/a&gt;. If you listen to music on YouTube, Soundcloud, Pandora - wherever, you can rip it and save it using Audacity. Say goodbye to the arms race of YouTube downloaders/decoders and HTTP network analysis to find the direct URL for the underlying MP3 (looking at you Bandcamp - still vulnerable at the time of writing). Instead say hello to a solution that will work as long as music plays through your computer (so - forever).&lt;/p&gt;

&lt;h3 id=&#34;setup:5c5a3e3c615fcc2b53c7c3ec3df70294&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;First install Audacity. I&amp;rsquo;m a fedora user so I grabbed it with &lt;code&gt;yum&lt;/code&gt;/&lt;code&gt;dnf&lt;/code&gt;, but users of other systems can use their package manager or get pre-built &lt;a href=&#34;http://www.fosshub.com/Audacity.html/audacity-minsrc-2.1.1.tar.xz&#34;&gt;binary&lt;/a&gt; for Windows or OSX.&lt;/p&gt;

&lt;p&gt;Disable your microphone, you don&amp;rsquo;t want Audacity recording anything except the sound passing out of your speakers. Navigate to the webpage which you want to record from, but don&amp;rsquo;t start the music yet.&lt;/p&gt;

&lt;h3 id=&#34;recording-and-exporting:5c5a3e3c615fcc2b53c7c3ec3df70294&#34;&gt;Recording and Exporting&lt;/h3&gt;

&lt;p&gt;Start Audacity, click the &amp;ldquo;Transport&amp;rdquo; menu, and select &amp;ldquo;Sound Activated Recording&amp;rdquo;. Now click the record button, and Audacity should pause recording. Switch to the webpage you wan to record from and start the music. You should see Audacity detect the music and begin recording. Once the music has finished, stop Audacity.&lt;/p&gt;

&lt;p&gt;If the music contains more than one track, you&amp;rsquo;ll need to add labels at the start of each track. A fast way to do this is using the silence analyzer. Click the &amp;ldquo;Analyze&amp;rdquo; menu, and &amp;ldquo;Silence Finder&amp;rdquo;. Press &amp;ldquo;OK&amp;rdquo; and Audacity will add a label at each point of silence in the music. Make sure you add a label to the beginning of the music - sound activated recording usually means the first track is not preceded by silence. To manually add labels, just navigate to the section of music where you want to add a label and press &lt;code&gt;Control + B&lt;/code&gt;. You can give each label a title, or add them on export later.&lt;/p&gt;

&lt;p&gt;To maximize the recorded volume, press &lt;code&gt;Control + A&lt;/code&gt; to select all of the recording, select the &amp;ldquo;effect&amp;rdquo; menu, and &amp;ldquo;normalize&amp;rdquo;. The default value of -1.0 decibel is fine. This will ensure the recording doesn&amp;rsquo;t sound &amp;ldquo;quiet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Finally, select the &amp;ldquo;File&amp;rdquo; menu and &amp;ldquo;Export Audio&amp;rdquo; or &amp;ldquo;Export Multiple&amp;rdquo; if you have more than one track to export. If you&amp;rsquo;re exporting mp3, Audacity will let you add mp3 tags to each track at this point. That&amp;rsquo;s it!&lt;/p&gt;

&lt;h3 id=&#34;automating-the-process:5c5a3e3c615fcc2b53c7c3ec3df70294&#34;&gt;Automating the process&lt;/h3&gt;

&lt;p&gt;One downside to this method is it is highly manual. One way to automate some of it is by using an Audacity&amp;rsquo;s &lt;a href=&#34;http://manual.audacityteam.org/man/Chains_-_for_batch_processing_and_effects_automation&#34;&gt;chains&lt;/a&gt; feature. To script an audio recording process with Perl, the &lt;a href=&#34;https://metacpan.org/pod/Audio::PortAudio&#34;&gt;Audio::PortAudio&lt;/a&gt; module looks promising, for the capturing and saving of audio data at least.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN August 2014</title>
      <link>http://perltricks.com/article/113/2014/9/2/What-s-new-on-CPAN-August-2014/</link>
      <pubDate>Tue, 02 Sep 2014 12:36:04 +0000</pubDate>
      
      <guid>http://perltricks.com/article/113/2014/9/2/What-s-new-on-CPAN-August-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:016881304416e0728ee41cc2195a3924&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Appium&#34;&gt;Appium&lt;/a&gt; provides the Perl bindings for the open source mobile testing framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Stripe::Simple&#34;&gt;Net::Stripe::Simple&lt;/a&gt; is a lightweight interface to Stripe&amp;rsquo;s API&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::MorphIO&#34;&gt;WebService::MorphIO&lt;/a&gt; is an API for morph.io &amp;ldquo;the heroku for web scrapers&amp;rdquo;&lt;/li&gt;
&lt;li&gt;New music APIs: &lt;a href=&#34;https://metacpan.org/pod/WebService::Bandcamp&#34;&gt;WebService::Bandcamp&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/WebService::MusixMatch&#34;&gt;WebService::MusixMatch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:016881304416e0728ee41cc2195a3924&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Looking for book deals? &lt;a href=&#34;https://metacpan.org/pod/App::BarnesNoble::WishListMinder&#34;&gt;App::BarnesNoble::WishListMinder&lt;/a&gt; monitors a wishlist of books for price changes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::CPANRepo&#34;&gt;App::CPANRepo&lt;/a&gt; is handy utility that returns the source URL of a given module name&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::mirai&#34;&gt;App::mirai&lt;/a&gt; is an impressive-looking debugger for future programming&lt;/li&gt;
&lt;li&gt;The Unix &lt;code&gt;which&lt;/code&gt; program returns only one matching binary. Enter &lt;a href=&#34;https://metacpan.org/pod/App::multiwhich&#34;&gt;App::multiwhich&lt;/a&gt; which helpfully returns all matching binaries for a given search (edit: the author has &lt;a href=&#34;http://blog.nu42.com/2014/08/filewhich-comes-with-its-own-multiwhich.html&#34;&gt;blogged&lt;/a&gt; recommending &lt;a href=&#34;https://metacpan.org/pod/File::Which&#34;&gt;File::Which&lt;/a&gt; instead)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;async-concurrency:016881304416e0728ee41cc2195a3924&#34;&gt;Async &amp;amp; Concurrency&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Event::Distributor&#34;&gt;Event::Distributor&lt;/a&gt; implements an in-process (synchronous) pub / sub model - it&amp;rsquo;s early days but looks interesting&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Future&#34;&gt;AnyEvent::Future&lt;/a&gt; provides a future object for concurrent programming with the popular AnyEvent module&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:016881304416e0728ee41cc2195a3924&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bloom::Scalable&#34;&gt;Bloom::Scalable&lt;/a&gt; is a scalable bloom filter implementation - a probabilistic dataset that saves space&lt;/li&gt;
&lt;li&gt;Search complex Perl data structures with &lt;a href=&#34;https://metacpan.org/pod/Data::Seek&#34;&gt;Data::Seek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Working with non UTC datetimes? &lt;a href=&#34;https://metacpan.org/pod/DateTimeX::Period&#34;&gt;DateTimeX::Period&lt;/a&gt; provides a safe cross-timezone implementation of DateTime methods&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Variable::Disposition&#34;&gt;Variable::Disposition&lt;/a&gt; helps you forcibly dispose of variables&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-system-administration:016881304416e0728ee41cc2195a3924&#34;&gt;Config &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IOD&#34;&gt;IOD&lt;/a&gt; (&amp;ldquo;INI On Drugs&amp;rdquo;) is a new configuration file format inspired by INI&lt;/li&gt;
&lt;li&gt;Alternatively you prefer to use Perl hashrefs as config files with &lt;a href=&#34;https://metacpan.org/pod/Config::FromHash&#34;&gt;Config::FromHash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For a bare-bones fork interface, have a look at &lt;a href=&#34;https://metacpan.org/pod/IPC::Open2::Simple&#34;&gt;IPC::Open2::Simple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:016881304416e0728ee41cc2195a3924&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Happy CPAN day! &lt;a href=&#34;https://metacpan.org/pod/Acme::Cake&#34;&gt;Acme::Cake&lt;/a&gt; returns a jpeg of a CPAN cake&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Games::FrogJump&#34;&gt;Games::FrogJump&lt;/a&gt; is a cool ASCII terminal game. A bit primitive but it shows what&amp;rsquo;s possible&lt;/li&gt;
&lt;li&gt;On the other hand, &lt;a href=&#34;https://metacpan.org/pod/Games::Hangman&#34;&gt;Games::Hangman&lt;/a&gt;is incredibly addictive and feature complete&lt;/li&gt;
&lt;li&gt;If you need a list of English proverbs and phrases check out &lt;a href=&#34;https://metacpan.org/pod/Games::Word::Phraselist::Proverb::TWW&#34;&gt;Games::Word::Phraselist::Proverb::TWW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware:016881304416e0728ee41cc2195a3924&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Big developments on the hardware front: &lt;a href=&#34;https://metacpan.org/pod/Device::WebIO&#34;&gt;Device::WebIO&lt;/a&gt; provides a standardized interface for hardware devices including Arduino, PCDuino and Raspberry Pi&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::BusPirate&#34;&gt;Device::BusPirate&lt;/a&gt; provides an interface for the Bus Pirate hardware electronics debugging device&lt;/li&gt;
&lt;li&gt;How cool is this: &lt;a href=&#34;https://metacpan.org/pod/Device::Gembird&#34;&gt;Device::Gembird&lt;/a&gt; let&amp;rsquo;s you control the voltage on a Gembird surge protection device with Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international:016881304416e0728ee41cc2195a3924&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::Security&#34;&gt;Unicode::Security&lt;/a&gt; provides interesting features including a function to determine if two Unicode strings are visually confusable&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::Block&#34;&gt;Unicode::Block&lt;/a&gt; enables you to take a character and iterate through the entire block of Unicode characters to which it belongs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;object-oriented:016881304416e0728ee41cc2195a3924&#34;&gt;Object Oriented&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/distribution/Gloom/lib/Gloom.pod&#34;&gt;Gloom&lt;/a&gt; is a dependency-free new OO library released a couple of months back&lt;/li&gt;
&lt;li&gt;Anonymous objects are an intriguing idea: &lt;a href=&#34;https://metacpan.org/pod/Object::Anon&#34;&gt;Object::Anon&lt;/a&gt; is an embryonic implementation, the author is looking for feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing-exceptions:016881304416e0728ee41cc2195a3924&#34;&gt;Testing &amp;amp; Exceptions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Conveniently get the test coverage results of a CPAN distribution with &lt;a href=&#34;https://metacpan.org/pod/CPAN::Cover::Results&#34;&gt;CPAN::Cover::Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Configure your Pod coverage testing with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::Pod::Coverage::Configurable&#34;&gt;Test::Pod::Coverage::Configurable&lt;/a&gt; a new Dist::Zilla plugin&lt;/li&gt;
&lt;li&gt;Throw structured exception objects with the cleverly-named &lt;a href=&#34;https://metacpan.org/pod/Throw::Back&#34;&gt;Throw::Back&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Update: reference to App::multiwhich updated following correspondence from the author. 2014-09-05&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

