<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/database/</link>
    <description>Recent content in Database on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Apr 2015 03:05:00 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/database/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Unit test your code on an in-memory database</title>
      <link>https://dnmfarrell.github.io/article/167/2015/4/15/Unit-test-your-code-on-an-in-memory-database/</link>
      <pubDate>Wed, 15 Apr 2015 03:05:00 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/167/2015/4/15/Unit-test-your-code-on-an-in-memory-database/</guid>
      <description>

&lt;p&gt;Unit test scripts should be independent, stateless and free from side-effects. These ideals are not always achievable but by using tools like mock objects we can often get close. Some functionality is harder to test than others though; for example how do you test database interface code? Databases have state - even if you reset the data after you&amp;rsquo;ve tested it, there&amp;rsquo;s no guarantee the data is the same, or that other code hasn&amp;rsquo;t accessed the database during the test execution.&lt;/p&gt;

&lt;p&gt;One way to deal with this is to create an in-memory database, visible only to the unit testing process and automatically deleted once the tests have completed. Fortunately it&amp;rsquo;s really easy to do this with SQLite3 and Perl.&lt;/p&gt;

&lt;h3 id=&#34;dbi:03c65913e1217b9d9e3f5eed982602df&#34;&gt;DBI&lt;/h3&gt;

&lt;p&gt;The Perl &lt;a href=&#34;https://metacpan.org/pod/DBI&#34;&gt;DBI&lt;/a&gt; module is the de-facto way of accessing relational databases in Perl. To create an in-memory database, I can use call &lt;code&gt;connect&lt;/code&gt; specifying the SQLite driver, and the database name as &amp;ldquo;:memory:&amp;ldquo;. This returns a database handle to a new, in memory SQLite3 database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Test::More;
use DBI;

# load in-memory db
my $dbh = DBI-&amp;gt;connect(&#39;dbi:SQLite:dbname=:memory:&#39;,&#39;&#39;,&#39;&#39;);

# create tables
my $create_table_script =
  do {  local $/; 
        open my $SQL, &#39;&amp;lt;&#39;, &#39;create_tables.sql&#39;;
        &amp;lt;$SQL&amp;gt;;
     };  

my $sth = 
  $dbh-&amp;gt;prepare($create_table_script) or BAIL_OUT ($dbh-&amp;gt;errstr);
$sth-&amp;gt;execute or BAIL_OUT($sth-&amp;gt;errstr);

# add unit tests here ...

done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From here I slurp a SQL script for creating the tables into a string and use the database handle to execute it. The &lt;code&gt;BAIL_OUT&lt;/code&gt; function is called if any of the database steps fail, ending the testing prematurely. At this point I have a brand new database with fresh tables, ready for testing.&lt;/p&gt;

&lt;h3 id=&#34;dbix-class:03c65913e1217b9d9e3f5eed982602df&#34;&gt;DBIx::Class&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class&#34;&gt;DBIx::Class&lt;/a&gt;, the Perl ORM uses the same underlying technology as DBI, but because it creates Perl classes representing each table, I can leverage that code to make the database setup even easier than with vanilla DBI:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Test::More;
use SomeApp::Schema;

# load an in-memory database and deploy the required tables
SomeApp::Schema-&amp;gt;connection(&#39;dbi:SQLite:dbname=:memory:&#39;,&#39;&#39;,&#39;&#39;);
SomeApp::Schema-&amp;gt;load_namespaces;
SomeApp::Schema-&amp;gt;deploy;

# add unit tests here ...

done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m using an example app, called &lt;code&gt;SomeApp&lt;/code&gt; to demonstrate. First the &lt;code&gt;connection&lt;/code&gt; is set to the same database connection string as with the DBI example. The &lt;code&gt;load_namespaces&lt;/code&gt; method loads all of the result and resultset DBIx::Class modules in the application and &lt;code&gt;deploy&lt;/code&gt; creates them on the in-memory database. Obviously this approach requires that you&amp;rsquo;ve already created the DBIx::Class files. If you haven&amp;rsquo;t done that yet, but you have an application database with the tables in it, you can use the &lt;code&gt;dbicdump&lt;/code&gt; command from &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Schema::Loader&#34;&gt;DBIx::Class::Schema::Loader&lt;/a&gt; to auto generate them for you.&lt;/p&gt;

&lt;h3 id=&#34;not-just-for-testing:03c65913e1217b9d9e3f5eed982602df&#34;&gt;Not just for testing&lt;/h3&gt;

&lt;p&gt;The in-memory feature of SQLite is provided by &lt;a href=&#34;https://metacpan.org/pod/DBD::SQLite&#34;&gt;DBD::SQLite&lt;/a&gt;, the DBI driver. It&amp;rsquo;s a cool feature, and could be used for more than just unit testing. Anytime you have a need for a temporary relational datastore, consider this; it&amp;rsquo;s fast, is portable and automatically cleans itself up when the program ends.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Secure your passwords with KeePass and Perl</title>
      <link>https://dnmfarrell.github.io/article/79/2014/3/24/Secure-your-passwords-with-KeePass-and-Perl/</link>
      <pubDate>Mon, 24 Mar 2014 13:00:38 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/79/2014/3/24/Secure-your-passwords-with-KeePass-and-Perl/</guid>
      <description>

&lt;p&gt;&lt;em&gt;These days password managers are an &lt;a href=&#34;http://arstechnica.com/information-technology/2013/06/the-secret-to-online-safety-lies-random-characters-and-a-password-manager/&#34;&gt;essential&lt;/a&gt; part of online security. The module File::KeePass provides an easy-to-use Perl API for the KeePass password manager and opens up a world-of-possibilities for programmatically creating, reading and updating passwords securely.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to install &lt;a href=&#34;https://metacpan.org/pod/File::KeePass&#34;&gt;File::KeePass&lt;/a&gt;. The CPAN testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=File-KeePass+2.03&#34;&gt;results&lt;/a&gt; show that it runs on all modern Perls and many platforms including Windows. To install the module with CPAN, fire up the terminal and enter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan File::KeePass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may want to install &lt;a href=&#34;https://www.keepassx.org/&#34;&gt;KeePassX&lt;/a&gt;, an open source implementation of KeePass to get a GUI. I&amp;rsquo;ve used it on both Windows and Linux and it works great.&lt;/p&gt;

&lt;h3 id=&#34;creating-keepass-databases:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Creating KeePass Databases&lt;/h3&gt;

&lt;p&gt;The KeePass password manager stores all passwords in an encrypted database file. All username/password entries are stored in collections of entries called &amp;ldquo;groups&amp;rdquo;. File::KeePass provides for methods creating all of these items:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::KeePass;

my $kp_db = File::KeePass-&amp;gt;new;

my $app_group = $kp_db-&amp;gt;add_group({ title =&amp;gt; &#39;Apps&#39; });

$kp_db-&amp;gt;add_entry({ title     =&amp;gt; &#39;email&#39;,
                    username  =&amp;gt; &#39;system&#39;,
                    password  =&amp;gt; &#39;mumstheword&#39;,
                    group     =&amp;gt; $app_group-&amp;gt;{gid},
                  });

$kp_db-&amp;gt;save_db(&#39;MyAppDetails.kdb&#39;, &#39;itsasecret&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above we start by instantiating a new File::KeePass object. The &amp;ldquo;add_group&amp;rdquo; method adds a new group called &amp;ldquo;Apps&amp;rdquo; to the object. We then add an entry to the &amp;ldquo;Apps&amp;rdquo; group. The entry contains the username/password credentials that we want to store securely. Finally the &amp;ldquo;save_db&amp;rdquo; method saves the KeePass database to &amp;ldquo;MyAppDetails.kdb&amp;rdquo; (the extension is important) with a master password of &amp;ldquo;itsasecret&amp;rdquo; - in reality you would want to use a stronger password than this.&lt;/p&gt;

&lt;p&gt;Save the code as &amp;ldquo;create_keepass_db.pl&amp;rdquo; and run it on the command line with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl create_keepass_db.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have KeePassX or KeePass installed, you can open the newly-created &amp;ldquo;MyAppDetails.kdb&amp;rdquo; file. When you do, you&amp;rsquo;ll be asked for the master password that we set:&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/79/keepassx_login.png&#34; title=&#34;The KeePassX login window&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/79/keepassx_login.png&#34; alt=&#34;keepassx login&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve entered the master password, KeePassX will show the main window, which lists the groups and entries in the database file. You can see the &amp;ldquo;Apps&amp;rdquo; group on the left and the &amp;ldquo;email&amp;rdquo; entry that was created listed in the main window.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/79/keepassx_group_entry_added.png&#34; title=&#34;The KeePassX main window our Apps group and email entry are showing&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/79/keepassx_group_entry_added_small.png&#34; alt=&#34;keepassx main screen&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;reading-keepass-databases:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Reading KeePass databases&lt;/h3&gt;

&lt;p&gt;Instead of using a GUI like KeePass or KeePassX, you can read the contents of the database file using File::KeePass:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::KeePass;

my $kp_db = File::KeePass-&amp;gt;new;
$kp_db-&amp;gt;load_db(&#39;MyAppDetails.kdb&#39;, &#39;itsasecret&#39;);
my $groups = $kp_db-&amp;gt;groups;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we opened our newly-created KeePass database file using the &amp;ldquo;load_db&amp;rdquo; method. The &amp;ldquo;groups&amp;rdquo; method returns an arrayref of groups. Each group is a hashref that also contains an arrayref of entries. Printing $groups with Data::Dumper, we can see this more clearly:&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$VAR1 = [
          {
            &#39;icon&#39; =&amp;gt; 0,
            &#39;created&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
            &#39;level&#39; =&amp;gt; 0,
            &#39;entries&#39; =&amp;gt; [
                           {
                             &#39;icon&#39; =&amp;gt; 0,
                             &#39;modified&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
                             &#39;username&#39; =&amp;gt; &#39;system&#39;,
                             &#39;created&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
                             &#39;comment&#39; =&amp;gt; &#39;&#39;,
                             &#39;url&#39; =&amp;gt; &#39;&#39;,
                             &#39;id&#39; =&amp;gt; &#39;E31rvRS5mqK37mak&#39;,
                             &#39;title&#39; =&amp;gt; &#39;email&#39;,
                             &#39;accessed&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
                             &#39;expires&#39; =&amp;gt; &#39;2999-12-31 23:23:59&#39;
                           }
                         ],
            &#39;title&#39; =&amp;gt; &#39;Apps&#39;,
            &#39;id&#39; =&amp;gt; 2450784255,
            &#39;accessed&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
            &#39;expires&#39; =&amp;gt; &#39;2999-12-31 23:23:59&#39;,
            &#39;modified&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;
          }
        ];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;searching-and-updating-a-keepass-database:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Searching and updating a KeePass database&lt;/h3&gt;

&lt;p&gt;File::KeePass provides methods for searching for entries. In order to update an entry, we have to retrieve it, update it, and then save the database file. Because entries are just hashrefs, this is easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::KeePass;

my $kp_db = File::KeePass-&amp;gt;new;
$kp_db-&amp;gt;load_db(&#39;MyAppDetails.kdb&#39;, &#39;itsasecret&#39;);
$kp_db-&amp;gt;unlock; # enable changes

my $entry = $kp_db-&amp;gt;find_entry({ title =&amp;gt; &#39;email&#39; }); 
$entry-&amp;gt;{password} = &#39;mumsnottheword&#39;;

$kp_db-&amp;gt;save_db(&#39;MyAppDetails.kdb&#39;, &#39;itsasecret&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above we opened the database file, and used the &amp;ldquo;find_entry&amp;rdquo; method to search for our email entry. We then updated the password for the entry, and re-saved the database file. File::KeePass provides many additional methods for searching and updating groups and entries.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;File::KeePass has a simple API that works great and comes with comprehensive &lt;a href=&#34;https://metacpan.org/pod/File::KeePass&#34;&gt;documentation&lt;/a&gt;. I would recommend using the &amp;ldquo;.kdb&amp;rdquo; format as File::KeePass has &lt;a href=&#34;https://rt.cpan.org/Public/Dist/Display.html?Name=File-KeePass&#34;&gt;open issues&lt;/a&gt; for the &amp;ldquo;.kdbx&amp;rdquo; format.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F79%2F2014%2F3%2F24%2FSecure-your-passwords-with-KeePass-and-Perl&amp;amp;text=Secure+your+passwords+with+KeePass+and+Perl&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F79%2F2014%2F3%2F24%2FSecure-your-passwords-with-KeePass-and-Perl&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;Cover image © &lt;a href=&#34;http://www.flickr.com/photos/danielsphotography/466435567/sizes/o/&#34;&gt;DanielSTL&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

