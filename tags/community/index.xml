<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Community on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/community/</link>
    <description>Recent content in Community on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Aug 2015 14:05:25 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/community/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Writing DuckDuckGo plugins just got easier</title>
      <link>https://dnmfarrell.github.io/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier/</link>
      <pubDate>Sat, 22 Aug 2015 14:05:25 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier/</guid>
      <description>

&lt;p&gt;The developers behind DuckDuckGo, the search engine that doesn&amp;rsquo;t track you, have made it easier than ever to write plugins for the site. With the first global &lt;a href=&#34;https://duck.co/blog/post/196/the-first-global-quack-hack&#34;&gt;Quack &amp;amp; Hack&lt;/a&gt; event taking place later this month, there&amp;rsquo;s never been a better time to get involved.&lt;/p&gt;

&lt;h3 id=&#34;instant-answers:06f8e3dfccc590daeee2c2b9ec28de7c&#34;&gt;Instant Answers&lt;/h3&gt;

&lt;p&gt;The DuckDuckGo engine supports several types of plugin, but instant answers that provide a static &amp;ldquo;cheatsheet&amp;rdquo; are a simple to get started. &lt;a href=&#34;http://perltricks.com/article/169/2015/4/20/Writing-DuckDuckGo-instant-answers-is-easy&#34;&gt;Previously&lt;/a&gt; developing a new instant answer would require a Perl module, a test file and a plain text version of the response. Now all you need to provide is a JSON file of your instant answer and you&amp;rsquo;re in business.&lt;/p&gt;

&lt;h3 id=&#34;setup:06f8e3dfccc590daeee2c2b9ec28de7c&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to fork the DuckDuckGo &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies&#34;&gt;repo&lt;/a&gt; and clone your forked repo to your development machine. Optionally you can install &lt;a href=&#34;https://metacpan.org/pod/App::DuckPAN&#34;&gt;App::DuckPAN&lt;/a&gt;, which can launch a local version of the DuckDuckGo site for testing your code. Another way to test the cheatsheet is via &lt;a href=&#34;https://vimeo.com/132712266&#34;&gt;Codio&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;an-instant-answer-json-file:06f8e3dfccc590daeee2c2b9ec28de7c&#34;&gt;An Instant Answer JSON file&lt;/h3&gt;

&lt;p&gt;Instant answer JSON files should be created in the &lt;code&gt;share/goodie/cheat_sheets&lt;/code&gt; directory in the repo. A good way to start is to copy one of the existing files and change it to include your content.&lt;/p&gt;

&lt;p&gt;This is a truncated example from my &lt;code&gt;perldoc&lt;/code&gt; instant answer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;{
    &amp;quot;id&amp;quot;: &amp;quot;perldoc_cheat_sheet&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;perldoc&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Perl Documentation&amp;quot;,
    &amp;quot;metadata&amp;quot;: {
        &amp;quot;sourceName&amp;quot;: &amp;quot;perldoc Manual&amp;quot;,
        &amp;quot;sourceUrl&amp;quot;: &amp;quot;http://perldoc.perl.org/perldoc.html&amp;quot;
    },
    &amp;quot;section_order&amp;quot;: [&amp;quot;Usage&amp;quot;, &amp;quot;Module Options&amp;quot;, &amp;quot;Search Options&amp;quot;, &amp;quot;Common Options&amp;quot;],
    &amp;quot;sections&amp;quot;: {
        &amp;quot;Usage&amp;quot;: [
        {
            &amp;quot;key&amp;quot;: &amp;quot;[perldoc &amp;lt;option&amp;gt;]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;start perldoc&amp;quot;
        },
        {
            &amp;quot;key&amp;quot;: &amp;quot;[perldoc perldoc]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;perldoc help&amp;quot;
        }
        ],
       ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; fields should be unique values that describe the plugin. The &lt;code&gt;metadata&lt;/code&gt; fields describe the source of the information in the instant answer. It&amp;rsquo;s good to use a canonical source - in this case I referenced the official Perl documentation.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sections&lt;/code&gt; field is the content of the instant answer. Each entry is a key value for an array of key pairs. &lt;code&gt;section_order&lt;/code&gt; describes the order in which the sections will be displayed in the search engine results, so make sure you put the most important sections first!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a closer look at a section entry, here is &lt;code&gt;Module Options&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;        &amp;quot;Module Options&amp;quot;: [
        {
            &amp;quot;key&amp;quot;: &amp;quot;Module::Name&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;Show module documentation&amp;quot;
        },
        {
            &amp;quot;key&amp;quot;: &amp;quot;[-l Module::Name]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;Module filepath&amp;quot;
        },
        {
            &amp;quot;key&amp;quot;: &amp;quot;[-m Module::Name]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;Module source code&amp;quot;
        },
        {
            &amp;quot;key&amp;quot;: &amp;quot;[-lm Module::Name]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;Module filepath (alt.)&amp;quot;
        }
        ],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;Module Options&amp;rdquo; is the section name, this must be present exactly in the &lt;code&gt;section_order&lt;/code&gt; field, or this section will not appear at all. The section name text is the subheading used for the section, so be sure to choose something readable: &amp;ldquo;Module Options&amp;rdquo; is better than &amp;ldquo;module_options&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Each key pair entry represents the text to be displayed for the instant answer, the &lt;code&gt;key&lt;/code&gt; text should be the code and &lt;code&gt;val&lt;/code&gt; the description. If the &lt;code&gt;key&lt;/code&gt; text contains spaces, wrap the text in square brackets to ensure it&amp;rsquo;s displayed as code on the web page (see this article&amp;rsquo;s cover image for examples). You can find the complete perldoc JSON file &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/share/goodie/cheat_sheets/json/perldoc.json&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;wrap-up:06f8e3dfccc590daeee2c2b9ec28de7c&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;You can test your instant answer using &lt;a href=&#34;https://metacpan.org/pod/App::DuckPAN&#34;&gt;App::DuckPAN&lt;/a&gt; (see my previous &lt;a href=&#34;http://perltricks.com/article/169/2015/4/20/Writing-DuckDuckGo-instant-answers-is-easy&#34;&gt;article&lt;/a&gt; for examples). If you want to discuss your instant answer with a developer, or resolve an issue, the DuckDuckGo team are on Slack, you can request access via &lt;a href=&#34;mailto:QuackSlack@duckduckgo.com?subject=AddMe&#34;&gt;email&lt;/a&gt;. The official &lt;a href=&#34;https://duck.co/duckduckhack/goodie_overview&#34;&gt;documentation&lt;/a&gt; is also useful.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve finished an instant answer, create a pull request! The DuckDuckGo developers will review your code and give feedback. Once your instant answer is approved, it will go live within a few days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; Changed chat details for DDG slack 2015-08-26&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3 Awesome Perl Events in NYC this Spring/Summer</title>
      <link>https://dnmfarrell.github.io/article/166/2015/3/31/3-Awesome-Perl-Events-in-NYC-this-Spring-Summer/</link>
      <pubDate>Tue, 31 Mar 2015 13:25:56 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/166/2015/3/31/3-Awesome-Perl-Events-in-NYC-this-Spring-Summer/</guid>
      <description>

&lt;p&gt;Something great is happening in NYC; there are 3 special Perl events happening in the next 3 months!&lt;/p&gt;

&lt;h3 id=&#34;quack-hack-nyc-april-4-sup-th-sup:cdae2c53f83b5213c5cd28d928e6c370&#34;&gt;Quack &amp;amp; Hack NYC, April 4&lt;sup&gt;th&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo&lt;/a&gt; are a privacy-focused search engine with a large Perl codebase and they&amp;rsquo;re hosting the first ever &lt;a href=&#34;http://duckduckgo.ticketleap.com/quackhacknyc/details&#34;&gt;NYC Quack &amp;amp; Hack&lt;/a&gt; at &lt;a href=&#34;https://www.google.com/maps/place/500+7th+Ave,+New+York,+NY+10018/@40.7531589,-73.9893598,17z/data=!3m1!4b1!4m2!3m1!1s0x89c259ac7b941903:0xcb0a4d6a0e42963e?hl=en&#34;&gt;AlleyNYC&lt;/a&gt;. The focus of the event is creating cheatsheets to support DuckDuckGo help, which seems like a great way to encourage first-time contributors. With free food, drinks and merchandise, and an opportunity to meet new people, this looks like a lot of fun.&lt;/p&gt;

&lt;h3 id=&#34;nyc-perl-hackathon-may-2-sup-nd-sup:cdae2c53f83b5213c5cd28d928e6c370&#34;&gt;NYC Perl Hackathon, May 2&lt;sup&gt;nd&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/nyperlmongers/nyperlhackathon2015/wiki&#34;&gt;NYC Perl Hackathon&lt;/a&gt; is back! It&amp;rsquo;s a day-long hackathon, hosted at &lt;a href=&#34;https://www.google.com/maps/search/Bloomberg+Tower+731+Lexington+Ave+New+York,+NY+10022/@40.7615894,-73.9676297,17z/data=!3m1!4b1?hl=en&#34;&gt;Bloomberg&lt;/a&gt;. The organizers have produced some useful guides on how to &lt;a href=&#34;https://github.com/nyperlmongers/nyperlhackathon2015/wiki/Getting-Ready-for-the-Hackathon&#34;&gt;prepare&lt;/a&gt; and what &lt;a href=&#34;https://github.com/nyperlmongers/nyperlhackathon2015/wiki/Projects&#34;&gt;projects&lt;/a&gt; are available to hack on. Details can also be found on the New York Perl Mongers&amp;rsquo; &lt;a href=&#34;http://www.meetup.com/The-New-York-Perl-Meetup-Group/events/221319780/&#34;&gt;meetup&lt;/a&gt; page. The hackathon also have several sponsorship &lt;a href=&#34;https://github.com/nyperlmongers/nyperlhackathon2015/wiki/Sponsorship-Opportunities&#34;&gt;options&lt;/a&gt; for organizations looking to support Perl and promote their brand.&lt;/p&gt;

&lt;h3 id=&#34;mojoconf-june-4-sup-th-sup-6-sup-th-sup:cdae2c53f83b5213c5cd28d928e6c370&#34;&gt;Mojoconf, June 4&lt;sup&gt;th&lt;/sup&gt;-6&lt;sup&gt;th&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.mojoconf.com/2015&#34;&gt;Mojoconf&lt;/a&gt; is a conference about &lt;a href=&#34;http://mojolicio.us/&#34;&gt;Mojolicious&lt;/a&gt;, the real-time web framework. Mojoconf consists of a day of training, a day of talks and a hackathon day. Almost the entire Mojo core dev &lt;a href=&#34;http://mojolicio.us/perldoc/Mojolicious#CORE-DEVELOPERS&#34;&gt;team&lt;/a&gt; will be there, including project founder Sebastian Riedel and Glen Hinkle, author of those wonderful &lt;a href=&#34;http://mojocasts.com/e1&#34;&gt;videos&lt;/a&gt;. You can still get an early-bird &lt;a href=&#34;https://www.mojoconf.com/2015/register&#34;&gt;discount&lt;/a&gt; for the talks and hackathon until April 10&lt;sup&gt;th&lt;/sup&gt;, so grab your ticket now!&lt;/p&gt;

&lt;h3 id=&#34;other-stuff:cdae2c53f83b5213c5cd28d928e6c370&#34;&gt;Other stuff&lt;/h3&gt;

&lt;p&gt;Not far from NYC, the &lt;a href=&#34;http://dcbpw.org/dcbpw2015/&#34;&gt;DC-Baltimore Perl workshop&lt;/a&gt; is running April 11&lt;sup&gt;th&lt;/sup&gt;-12&lt;sup&gt;th&lt;/sup&gt;, with a day of talks followed by a hackathon. For other events, a good list of global Perl events can be found on &lt;a href=&#34;http://perlweekly.com/events.html&#34;&gt;Perl Weekly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to all 3 New York events, and looking forward to seeing everyone there. So come over and say hi! if you see me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Support the 2015 QA Hackathon</title>
      <link>https://dnmfarrell.github.io/article/147/2015/1/28/Support-the-2015-QA-Hackathon/</link>
      <pubDate>Wed, 28 Jan 2015 14:23:41 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/147/2015/1/28/Support-the-2015-QA-Hackathon/</guid>
      <description>&lt;p&gt;The Perl QA Hackathon is an annual event where the key authors of the Perl CPAN toolchain collaborate on the development of the next versions of tools. This year&amp;rsquo;s QA Hackathon is being held in Berlin, on April 16-19, and they&amp;rsquo;re looking for sponsors.&lt;/p&gt;

&lt;p&gt;Neil Bowers has written a good &lt;a href=&#34;http://blogs.perl.org/users/neilb/2015/01/the-perl-qa-hackathon-2015.html&#34;&gt;summary&lt;/a&gt; of the QA Hackathon, so check it out if you haven&amp;rsquo;t already.&lt;/p&gt;

&lt;p&gt;But I want to take a different tack, and focus on the tools we use everyday. For example I love &lt;a href=&#34;https://metacpan.org/&#34;&gt;MetaCPAN&lt;/a&gt;, it&amp;rsquo;s a sexier and more useful version of search.cpan.org. It&amp;rsquo;s open source, has a great API and provides &lt;a href=&#34;http://blogs.perl.org/users/olaf_alders/2014/03/metacpan-is-hiring.html&#34;&gt;Summer jobs&lt;/a&gt; for students. It also integrates &lt;a href=&#34;cpantesters.org&#34;&gt;CPAN Testers&lt;/a&gt; and the CPANTS kwalitee &lt;a href=&#34;cpants.cpanauthors.org/&#34;&gt;service&lt;/a&gt;, which improve the quality of CPAN modules. MetaCPAN was founded by &lt;a href=&#34;https://metacpan.org/author/OALDERS/&#34;&gt;Olaf Alders&lt;/a&gt; and he manages it to this day. But MetaCPAN wouldn&amp;rsquo;t work without PAUSE, which was &lt;a href=&#34;http://cpan.io/ref/history.html&#34;&gt;built&lt;/a&gt; by &lt;a href=&#34;https://metacpan.org/author/ANDK/&#34;&gt;Andreas König&lt;/a&gt;. Andreas also maintains the &lt;a href=&#34;https://metacpan.org/pod/CPAN&#34;&gt;CPAN&lt;/a&gt; client, so we can install modules from the command line. Guess what? Olaf and Andreas both go to the QA Hackathon.&lt;/p&gt;

&lt;p&gt;In the cover photo you’ll see Rik Signes (Perl 5 pumpking and Dist::Zilla author), Kenichi Ishigaki (maintainer of CPANTS), Barbie (CPAN Testers), Olaf Alders (MetaCPAN), Graham Knop (key contributor to Moo, MetaCPAN), Ribasushi (DBIx::Class maintainer), and Jens Rehsack (List::MoreUtils, File::ShareDir). They’re not yakking, they’re hacking! Seven well-known Perl hackers from 6 different countries. It’s rare that they get a chance to sit round a table together and work together.&lt;/p&gt;

&lt;p&gt;In fact, only key toolchain contributors are invited to the event to keep the number of attendees low and productivity high. Stuff happens, big problems get solved. The attendees usually write fun reports of the event (see for example exhibits &lt;a href=&#34;http://www.dagolden.com/index.php/2341/perl-qa-hackathon-2014-report/&#34;&gt;a&lt;/a&gt;, &lt;a href=&#34;http://rjbs.manxome.org/rubric/entry/2040&#34;&gt;b&lt;/a&gt; and &lt;a href=&#34;http://neilb.org/2014/03/17/qah2014.html&#34;&gt;c&lt;/a&gt;) and always come away fired up to do more toolchain development.&lt;/p&gt;

&lt;p&gt;So if you work for a company that uses Perl or sponsors Perl events, consider asking them to support this year&amp;rsquo;s &lt;a href=&#34;http://act.qa-hackathon.org/qa2015/sponsors.html&#34;&gt;QA Hackathon&lt;/a&gt;. The event itself is free; sponsorship goes towards the supporting the travel and accommodation costs of attendees. The organizers are also accepting individual &lt;a href=&#34;http://act.qa-hackathon.org/qa2015/donate.html&#34;&gt;donations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image © &lt;a href=&#34;http://www.dagolden.com/&#34;&gt;David Golden&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Whitespace in the Perl community</title>
      <link>https://dnmfarrell.github.io/article/141/2014/12/15/The-Whitespace-in-the-Perl-community/</link>
      <pubDate>Mon, 15 Dec 2014 14:00:45 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/141/2014/12/15/The-Whitespace-in-the-Perl-community/</guid>
      <description>

&lt;p&gt;One night over pastrami sandwiches, David Farrell and I came up with the idea of &lt;em&gt;the whitespace in the Perl community&lt;/em&gt;. Between all the code, projects, user groups, and events we already enjoy, there&amp;rsquo;s much more that people who want to make names for themselves can do. The trick is picking what to do.&lt;/p&gt;

&lt;p&gt;David started this website and wants to give people a place to publish their stories about Perl. He can promote it, readers can discover it once instead of finding new blogs, and authors don&amp;rsquo;t have to maintain their own site. Perl.com used to be such a site, and while it&amp;rsquo;s still around, it&amp;rsquo;s not active.&lt;/p&gt;

&lt;p&gt;You probably know my own projects. I and a few others started Perl mongers when there were no Perl user groups. After &lt;em&gt;The Perl Journal&lt;/em&gt; finally gave up, I started &lt;em&gt;The Perl Review&lt;/em&gt; to take its place (and the print magazine lasted just as long). I&amp;rsquo;ve done many other things as well.&lt;/p&gt;

&lt;p&gt;Both David and I looked for things that other people weren&amp;rsquo;t doing, and we both asked around to see who&amp;rsquo;s toes we might step on and to build support for our new thing.&lt;/p&gt;

&lt;p&gt;We wanted to list things which other people might do if they were looking to make a name for themselves in the community. That&amp;rsquo;s different than mere participation. They need to make something that&amp;rsquo;s virtually synonymous with their names. That&amp;rsquo;s how they can build their résumés. Every project needs a spiritual center and chief motivator to keep things going.&lt;/p&gt;

&lt;p&gt;I still remember Graham Barr demonstrating &lt;a href=&#34;http://search.cpan.org&#34;&gt;CPAN Search&lt;/a&gt; for me at a long ago Perl conference. It was groundbreaking; we didn&amp;rsquo;t have anything like that yet. Younger Perl programmers probably have never been without it and didn&amp;rsquo;t realize how big a leap it was from browsing directories.&lt;/p&gt;

&lt;p&gt;Before JJ Allen set up &lt;a href=&#34;http://perldoc.perl.org&#34;&gt;perldoc.perl.org&lt;/a&gt;, Carlos Ramirez had &lt;a href=&#34;http://www.perldoc.com&#34;&gt;Perldoc.com&lt;/a&gt;. Before those sites, there were isolated ways to get the Perl docs in HTML, but Carlos somehow leapt ahead of all of them to create an integrated solution. Fortunately, JJ Allen took the idea further when Carlos disappeared.&lt;/p&gt;

&lt;p&gt;Not every successful project is a completely new idea. Sometimes it&amp;rsquo;s an older idea done better. Gabor Szabo started &lt;a href=&#34;http://perlweekly.com&#34;&gt;Perl Weekly&lt;/a&gt; to curate the internet activity of the Perl community. He discovers what&amp;rsquo;s worth reading so the rest of the community doesn&amp;rsquo;t need to spend too much time away from &lt;a href=&#34;https://www.youtube.com/results?search_query=kitten+videos&#34;&gt;kitten videos&lt;/a&gt; and coding. Other people have tried the same thing, but Gabor&amp;rsquo;s advantage is his perseverance.&lt;/p&gt;

&lt;p&gt;We did come up with a list of opportunities, but we&amp;rsquo;re not going to present it here. We thought of things that we&amp;rsquo;d like to do, but in my experience that&amp;rsquo;s not that helpful. Not only that, but the most successful ideas seem to be something that nobody had ever considered, including us. The next big ideas will be things that most people never imagined.&lt;/p&gt;

&lt;p&gt;Instead, we talked about the process to come up with those ideas, which is the advice either of us tend to give out anyway. Along with that, we put together some advice on how you might make it work.&lt;/p&gt;

&lt;h3 id=&#34;finding-opportunity:8518d03148399efeae5968329e94e564&#34;&gt;Finding opportunity&lt;/h3&gt;

&lt;p&gt;Whitespace is any opportunity to add value. In that sense, there are two categories of whitespace:&lt;/p&gt;

&lt;p&gt;The first is discovered through innovation; truly original ideas whose time has come. No one is doing it because no one has thought of it. These &amp;ldquo;gladwellian&amp;rdquo; opportunities can be highly valuable and often come from deep insight. They&amp;rsquo;re also exceedingly rare, such as the creation of CPAN. Every language has their own version of CPAN now.&lt;/p&gt;

&lt;p&gt;The second kind is less appealing. These are the opportunities that exist because no one wants to do them. Typically the work required to exploit the opportunity will involve repetitive and manual tasks, such as maintaining documentation or shepherding modules that you didn&amp;rsquo;t write and don&amp;rsquo;t use. In Perl we hack through inconveniences all the time. Inconvenience is an annoyance or an afterthought. We &lt;code&gt;chomp&lt;/code&gt; it, &lt;code&gt;split&lt;/code&gt; on it, trim it and move on. But those inconveniences are opportunities, where (usually) no one is working. These kinds of opportunities can be just as valuable to the community and even so, are easy to find. Just look for the jobs that would benefit the community that no one is doing, and start doing them.&lt;/p&gt;

&lt;p&gt;If you want big results, you can do either the boring or the hard work that no one else is doing.&lt;/p&gt;

&lt;h3 id=&#34;just-do-it:8518d03148399efeae5968329e94e564&#34;&gt;Just do it&lt;/h3&gt;

&lt;p&gt;We had a much easier time back in the day because we didn&amp;rsquo;t think anyone was in charge and there were fewer toes to step on. Now there are various organizations, such as &lt;a href=&#34;http://www.perlfoundation.org&#34;&gt;The Perl Foundation&lt;/a&gt;. People often ask me how to get TPF approval, but they don&amp;rsquo;t need it. They don&amp;rsquo;t need a grant, or a subhost on a particular domain, or many of the other things any organization might control.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t to say that you should ignore those who can help you; just don&amp;rsquo;t let them stop or delay you. Remember that they are all volunteers and are probably already giving the time that they have available.&lt;/p&gt;

&lt;h3 id=&#34;planning-ahead:8518d03148399efeae5968329e94e564&#34;&gt;Planning ahead&lt;/h3&gt;

&lt;p&gt;Your first step is to ensure that you&amp;rsquo;re doing something you&amp;rsquo;re going to want to do. It&amp;rsquo;s one thing to come up with an idea, but it&amp;rsquo;s another to want to work on it for months (or longer), most likely on your own until the community gets behind you.&lt;/p&gt;

&lt;p&gt;To do this, you should talk to as many people as you can. Start with private or limited conversations with people you trust. Some people may tell you to just put it out there, but do a little research first. Don&amp;rsquo;t get discouraged by irrelevant details from people who weren&amp;rsquo;t going to use it and weren&amp;rsquo;t going to help.&lt;/p&gt;

&lt;p&gt;Specifically, don&amp;rsquo;t design a database schema right away. I&amp;rsquo;ve long had a rule that lets me figure out which conference fever projects will fail within the month; they are the ones who start picking the technologies right away.&lt;/p&gt;

&lt;p&gt;Figure out how you want it to work, and keep a particular audience in mind. Instead of pleasing everyone, which drags out your design and creates much more work, start simply so you can get something out there quickly.&lt;/p&gt;

&lt;h3 id=&#34;sticking-to-it:8518d03148399efeae5968329e94e564&#34;&gt;Sticking to it&lt;/h3&gt;

&lt;p&gt;Most ideas fail because their originators think that the idea is enough. People will see the merits instantly and volunteers will step in to do all the work. Fall into that trap and you may find yourself unmotivated and overworked because you are doing everything. For awhile, embrace the idea that you&amp;rsquo;re doing most of the work and look at help as gravy instead of the meat.&lt;/p&gt;

&lt;h3 id=&#34;be-ready-to-give-it-up:8518d03148399efeae5968329e94e564&#34;&gt;Be ready to give it up&lt;/h3&gt;

&lt;p&gt;Our last bit of advice seems contradictory to the rest. After you develop your great idea, be prepared to lose it. The idea may change from underneath you, or more motivated and enthusiastic volunteers may take it in another direction. Trying to stick to the original plan might drive everyone away.&lt;/p&gt;

&lt;p&gt;Also be prepared to hand off major responsibilities to other people and to trust what they do with it even if it&amp;rsquo;s not the same thing that you would have done.&lt;/p&gt;

&lt;h3 id=&#34;some-ideas-we-had:8518d03148399efeae5968329e94e564&#34;&gt;Some ideas we had&lt;/h3&gt;

&lt;p&gt;You didn&amp;rsquo;t think we weren&amp;rsquo;t going to suggest anything, did you? We had a few ideas of things that we&amp;rsquo;d like to do but don&amp;rsquo;t have the time to do ourselves.&lt;/p&gt;

&lt;p&gt;Perl is under-represented on Reddit, Twitter, and Facebook. There&amp;rsquo;s no person we can point to as the energy behind these efforts. Some of the same names that you see everywhere are present, but no one has planted their flag here. If you&amp;rsquo;re social media savvy, you could be the person to tend to Perl wherever you spend your time. The different sites have different purposes, each of which could highlight Perl in a different way and for a different purpose. You can create content or highlight the work of others.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7159/6847365223_4b5bdabf97.jpg&#34; alt=&#34;Social Media Explained (with Donuts)&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cpantesters.org&#34;&gt;CPAN Testers&lt;/a&gt; is a fantastic service, but have you ever wanted to re-create a bug report from CPAN Testers? Unless you have access to the specific operating system and Perl version, you may not be able to. Even once you get hold of a virtual machine, it may take several hours to install the Perl modules and C library dependencies required. We should have a collection of virtual machine images within easy reach that any Perl programmer can startup to launch, pre-loaded with every major Perl version and most stuff installed.&lt;/p&gt;

&lt;p&gt;There could be a a &amp;ldquo;PDL Perl&amp;rdquo; distribution that would have all of the main &lt;a href=&#34;http://pdl.perl.org&#34;&gt;Perl Data Language&lt;/a&gt; libraries installed and the same for our major web frameworks and our OO frameworks. A Perl developer could then quickly spin up an instance of OpenBSD and run their Perl code against every installed Perl version using &lt;em&gt;perlbrew&lt;/em&gt;. This might happen with something like &lt;a href=&#34;https://www.virtualbox.org&#34;&gt;Virtual Box&lt;/a&gt; or &lt;a href=&#34;https://www.vagrantup.com&#34;&gt;Vagrant&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This doesn&amp;rsquo;t be something you distribute. Free service hosting services like &lt;a href=&#34;https://www.digitalocean.com&#34;&gt;Digital Ocean&lt;/a&gt; allow users to share snapshots of virtual machines, but the end user would still have to pay a few cents to lease the virtual machine for a couple of hours. What this requires is someone to regularly maintain and refresh the snapshots, installing the latest Perl versions and keeping everything up to date. Similarly, someone could create and maintain a &lt;a href=&#34;http://blogs.perl.org/users/brian_d_foy/2012/02/the-perl-learning-environment.html&#34;&gt;Perl Learning Environment&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;final-thoughts:8518d03148399efeae5968329e94e564&#34;&gt;Final thoughts&lt;/h3&gt;

&lt;p&gt;Our advice is simple. Find something that you want to spend time working on, get advice before you start, and plan on doing most of the work yourself. Once you get going, settle in for the long term. You don&amp;rsquo;t need anyone&amp;rsquo;s permission for any of this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>YAPC::NA 2014 Talks Preview</title>
      <link>https://dnmfarrell.github.io/article/99/2014/6/23/YAPC--NA-2014-Talks-Preview/</link>
      <pubDate>Mon, 23 Jun 2014 11:55:41 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/99/2014/6/23/YAPC--NA-2014-Talks-Preview/</guid>
      <description>

&lt;p&gt;&lt;em&gt;YAPC::NA 2014 Orlando starts today with a fantastic line up of talks. I&amp;rsquo;ve reviewed the schedule and picked out some gems for anyone unsure about which talks to attend. Hope to you see you there!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;day-1-monday-june-23-sup-rd-sup:3cf98d736d0278b850af6640732f40bb&#34;&gt;Day 1 - Monday June 23&lt;sup&gt;rd&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;Day 1 starts bright and early at 08:30 with Chris Prather&amp;rsquo;s welcome talk in Lakeside Ballroom. Larry will be presenting on Perl 6 at 10:00, followed by an hour of Lightning Talks, all in Lakeside Ballroom. Should be an entertaining morning!&lt;/p&gt;

&lt;p&gt;In the afternoon, talks will be conducted across 4 separate tracks, and it&amp;rsquo;s hard to pick one talk over another. At 13:30 in Summerlin Jesse Luehrs&amp;rsquo; talk on Rust, (the new Mozilla language) should be informative, alternatively Nick Patch always has something interesting to say about Unicode and he&amp;rsquo;s talking at the same time in the Princeton room.&lt;/p&gt;

&lt;p&gt;At 15:00 in Delaney Adam Dutko will show you how to upload your first module to CPAN and across the hall Sudeep Hazra will be demoing Perl on the Netbeans IDE in Summerlin. Graham Ollis&amp;rsquo; foreign function interface talk has a lot of subscribers; &amp;ldquo;never run XS again&amp;rdquo; is a compelling pitch and that&amp;rsquo;s running in Anderson.&lt;/p&gt;

&lt;p&gt;16:00 brings more goodness - Scott Walters teaching how to program for the Atari 2600 in Summerlin, meanwhile the colourful Sawyer X will be talking about XS in Anderson. Later at 16:30 in Delaney, learn how to build a MongoDB web app with Mojolicious::Lite, talk by Mike Friedman.&lt;/p&gt;

&lt;p&gt;At 17:00 in Anderson Mike Friedman will be giving a talk on &amp;ldquo;the Perl API for the Mortally Terrified&amp;rdquo; - I&amp;rsquo;ve seen that talk previously and recommend it for anyone looking to get started with Perl&amp;rsquo;s C API. Alternatively, if you&amp;rsquo;re into flying robots with Perl, you&amp;rsquo;ll like Tim Murray&amp;rsquo;s talk on &lt;a href=&#34;https://metacpan.org/pod/UAV::Pilot&#34;&gt;UAV::Pilot&lt;/a&gt; in Summerlin. At 17:30 Leon Timmermans will be elucidating PerlIO in Delaney.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t miss&lt;/strong&gt; - Larry&amp;rsquo;s Perl 6 talk at 10:00. With the flurry of successes this year on MoarVM, JVM and rumours that he&amp;rsquo;s working on a new Camel book for Perl 6, there could be a surprise announcement.&lt;/p&gt;

&lt;p&gt;Detailed &lt;a href=&#34;http://www.yapcna.org/yn2014/schedule?day=2014-06-23&#34;&gt;Monday schedule&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;day-2-tuesday-june-24-sup-th-sup:3cf98d736d0278b850af6640732f40bb&#34;&gt;Day 2 - Tuesday June 24&lt;sup&gt;th&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;The day kicks off at 09:00 with some big topics: get a handle on Datetimes with Dave Rolsky in Delaney or let David Bury show you how to do threading effectively in the Princeton room. Meanwhile in Summerlin Nathan Gray is giving a non-technical talk on Scrum.&lt;/p&gt;

&lt;p&gt;At 10:00 in Princeton Augustina Ragwitz is teaching asynchronous web programming. If you&amp;rsquo;re not familiar with &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class&#34;&gt;DBIx::Class&lt;/a&gt;, you owe it to yourself to check out Arthur Schmidt&amp;rsquo;s talk in Anderson.&lt;/p&gt;

&lt;p&gt;At 11:00 Andrew Rodland will be covering parsing with Marpa in the Summerlin room. Staying with Summerlin, after lunch you can learn how to brew your own beer (13:30) and roast your own coffee (14:00). Across the hall in Princeton, Ricardo Signes will be giving back-to-back lightning talks in his presentation &amp;ldquo;1.21 Gigawatts&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Tuesday afternoon finishes strongly with Matt S Trout, lightning talks and Charlie Stross&amp;rsquo; keynote all in Lakeside Ballroom.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t miss&lt;/strong&gt; - current Perl Pumpking Ricardo Signes &amp;ldquo;1.21 Gigawatts&amp;rdquo; talk in Princeton at 13:30. I was lucky to see an earlier version of this talk and it was brilliant, check it out!&lt;/p&gt;

&lt;p&gt;Detailed &lt;a href=&#34;http://www.yapcna.org/yn2014/schedule?day=2014-06-24&#34;&gt;Tuesday schedule&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;day-3-wednesday-june-25-sup-th-sup:3cf98d736d0278b850af6640732f40bb&#34;&gt;Day 3 - Wednesday June 25&lt;sup&gt;th&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;At 10:00 in Princeton Curtis Jewell is taking his life into his own hands and comparing the main Perl web frameworks, Catalyst, Dancer and Mojolicious. I can&amp;rsquo;t wait for the questions section. Learn how to deploy Perl apps with tool-of-the-moment Docker in Mark Allen&amp;rsquo;s talk in Summerlin at 10:30.&lt;/p&gt;

&lt;p&gt;At 11:00 in Delaney Tim Bunce is giving the same talk as last year, but it&amp;rsquo;s a good one: profiling Perl with &lt;a href=&#34;https://metacpan.org/pod/Devel::NYTProf&#34;&gt;Devel::NYTProf&lt;/a&gt;. Alternatively Matt S Trout is giving an intriguing talk on logical / functional programming techniques in Summerlin. Finally if you want to get going with Dancer, check out R Geoffrey Avery&amp;rsquo;s talk in Princeton.&lt;/p&gt;

&lt;p&gt;After lunch at 13:30 comes surely the cruellest scheduling of the conference: a choice between Ricardo Signes&amp;rsquo; talk in Princeton on Perl 5.20 and future Perl development versus Peter Martini reviewing native subroutine signatures and future development options in Delaney. Peter has several ideas on exciting new native signatures features and it should be a great talk.&lt;/p&gt;

&lt;p&gt;Sawyer X, John Anderson and more lightning talks should bring the conference talks to a rousing close, starting at 15:00 in Lakeside Ballroom.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t miss&lt;/strong&gt; - Curtis Jewell&amp;rsquo;s web framework comparison. Curtis&amp;rsquo; has developed the same application in all three frameworks and it will be fascinating to see the pros and cons of each framework.&lt;/p&gt;

&lt;p&gt;Detailed &lt;a href=&#34;http://www.yapcna.org/yn2014/schedule?day=2014-06-25&#34;&gt;Wednesday schedule&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - May 2014</title>
      <link>https://dnmfarrell.github.io/article/93/2014/6/2/What-s-new-on-CPAN---May-2014/</link>
      <pubDate>Mon, 02 Jun 2014 12:31:35 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/93/2014/6/2/What-s-new-on-CPAN---May-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;alien:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Alien&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install a local ImageMagic with &lt;a href=&#34;https://metacpan.org/pod/Alien::ImageMagick&#34;&gt;Alien::ImageMagick&lt;/a&gt;. No more &lt;a href=&#34;http://perltricks.com/article/57/2014/1/1/Shazam-Use-Image-Magick-with-Perlbrew-in-minutes&#34;&gt;hacks&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::SamTools&#34;&gt;Alien::SamTools&lt;/a&gt; will install the SamTools C libs and headers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apis:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Activiti::Rest::Client&#34;&gt;Activiti::Rest::Client&lt;/a&gt; provides an API for Activit, the open source workflow and BPM platform&lt;/li&gt;
&lt;li&gt;Use the decNumber C library with &lt;a href=&#34;https://metacpan.org/pod/Math::decNumber&#34;&gt;Math::decNumber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Sensu::API::Client&#34;&gt;Sensu::API::Client&lt;/a&gt; is an API client for Sensu, an open source monitoring framework&lt;/li&gt;
&lt;li&gt;Sentry is an exceptions tracking service and &lt;a href=&#34;https://metacpan.org/pod/Sentry::Raven&#34;&gt;Sentry::Raven&lt;/a&gt; provides an API for it&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Liquidweb::Lite&#34;&gt;WWW::Liquidweb::Lite&lt;/a&gt; provides an API for Liquidweb hosting&lt;/li&gt;
&lt;li&gt;Access the OANDA exchange rates API with &lt;a href=&#34;https://metacpan.org/pod/WebService::OANDA::ExchangeRates&#34;&gt;WebService::OANDA::ExchangeRates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::CSE&#34;&gt;App::CSE&lt;/a&gt; implements the Code Search Engine as an app&lt;/li&gt;
&lt;li&gt;Run multiple apps in command with &lt;a href=&#34;https://metacpan.org/pod/App::Munner&#34;&gt;App::Munner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Table2YAML&#34;&gt;App::Table2YAML&lt;/a&gt; will convert tables to YAML&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::revealup&#34;&gt;App::revealup&lt;/a&gt; is an awesome app that converts markdown documents into an HTTP served slideshow with revealup.js - check it out.&lt;/li&gt;
&lt;li&gt;Perl&amp;rsquo;s compile-only mode doesn&amp;rsquo;t always load modules in the correct order or location. &lt;a href=&#34;https://metacpan.org/pod/App::perlminlint&#34;&gt;App::perlminlint&lt;/a&gt; aims to fix that (current version 0.1 needs a minor patch)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bots:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Bots&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Capulcu::Bot&#34;&gt;Capulcu::Bot&lt;/a&gt; is a highly customizable and modular IRC bot&lt;/p&gt;

&lt;p&gt;Several new &lt;a href=&#34;https://metacpan.org/pod/Bot::Cobalt&#34;&gt;Bot::Cobalt&lt;/a&gt; plugins for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::Cobalt::Plugin::Bitly&#34;&gt;Bitly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::Cobalt::Plugin::Figlet&#34;&gt;Figlet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::Cobalt::Plugin::Twitter&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::Cobalt::Plugin::Urban&#34;&gt;Urban Dictionary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::Cobalt::Plugin::RandomQuote&#34;&gt;RandomQuote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::Cobalt::Plugin::SeenURL&#34;&gt;SeenURL&lt;/a&gt; (URLs already linked)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Debug Perl data structures with &lt;a href=&#34;https://metacpan.org/pod/Data::Debug&#34;&gt;Data::Debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Validate::Perl&#34;&gt;Data::Validate::Perl&lt;/a&gt; will validate Perl data structures using a Parse::Yapp grammar&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::EDI::X12&#34;&gt;Data::EDI::X12&lt;/a&gt; will process EDI x12 documents&lt;/li&gt;
&lt;li&gt;Safely slurp files again with File::Slurp::Sane&lt;/li&gt;
&lt;li&gt;Render SVG as a Cairo surface with &lt;a href=&#34;https://metacpan.org/pod/Image::CairoSVG&#34;&gt;Image::CairoSVG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MARC::Parser::RAW&#34;&gt;MARC::Parser::RAW&lt;/a&gt; parses MARC records in a fault-tolerant way&lt;/li&gt;
&lt;li&gt;Easily generate Marpa parsers using &lt;a href=&#34;https://metacpan.org/pod/MarpaX::Simple&#34;&gt;MarpaX::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MemcacheDBI&#34;&gt;MemcacheDBI&lt;/a&gt; implements a memcache queue for DBI commands&lt;/li&gt;
&lt;li&gt;Given an input, &lt;a href=&#34;https://metacpan.org/pod/SQL::Type::Guess&#34;&gt;SQL::Type::Guess&lt;/a&gt; attempts to derive the correct SQL column datatype&lt;/li&gt;
&lt;li&gt;Parse TOML with &lt;a href=&#34;https://metacpan.org/pod/TOML::Parser&#34;&gt;TOML::Parser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Command::Interactive&#34;&gt;Command::Interactive&lt;/a&gt; provides a command line interface for process invocation, e.g. capture a password and launch a process with the captured password.&lt;/p&gt;

&lt;p&gt;Curses! New widgets &lt;a href=&#34;https://metacpan.org/pod/Curses::UI::Number&#34;&gt;Curses::UI::Number&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Curses::UI::Time&#34;&gt;Curses::UI::Time&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New Dist::Zilla plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prevent an accidental release with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::BlockRelease&#34;&gt;BlockRelease&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get a count of RT and Github issues with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckIssues&#34;&gt;CheckIssues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::ContributorsFromPod&#34;&gt;ContributorsFromPod&lt;/a&gt; updates your META file with contributors from your module&amp;rsquo;s POD&lt;/li&gt;
&lt;li&gt;Dynamically inject Makefile pre-reqs during installation with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::DynamicPrereqs&#34;&gt;DynamicPrereqs&lt;/a&gt; (useful for platform specific reqs).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::ModuleBuildTiny::Fallback&#34;&gt;ModuleBuildTiny::Fallback&lt;/a&gt; creates a Build.PL file using Module::Build::Tiny if it&amp;rsquo;s available&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Zilla::Dist&#34;&gt;Zilla::Dist&lt;/a&gt; creates Perl distributions from an acmeist (language agnostic) source structure&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::Minimal::Object&#34;&gt;Log::Minimal::Object&lt;/a&gt; provides an OO interface for Log::Minimal&lt;/p&gt;

&lt;p&gt;Add roles to Moo objects at runtime with &lt;a href=&#34;https://metacpan.org/pod/MooX::Traits&#34;&gt;MooX::Traits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::Enumeration&#34;&gt;MooseX::Enumeration&lt;/a&gt; adds enumerated types for Moose classes, woohoo!&lt;/p&gt;

&lt;p&gt;Create configurable stack traces with &lt;a href=&#34;https://metacpan.org/pod/Stacktrace::Configurable&#34;&gt;Stacktrace::Configurable&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;maths-science-language:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Maths, Science &amp;amp; Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easily translate compass points with &lt;a href=&#34;https://metacpan.org/pod/Compass::Points&#34;&gt;Compass::Points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Date::QuarterOfYear&#34;&gt;Date::QuarterOfYear&lt;/a&gt; parses dates and returns the year quarter, without using the heavy DateTime module&lt;/li&gt;
&lt;li&gt;Parse words into known and unknown parts with &lt;a href=&#34;https://metacpan.org/pod/Lingua::Word::Parser&#34;&gt;Lingua::Word::Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manipulate text case with &lt;a href=&#34;https://metacpan.org/pod/String::CamelSnakeKebab&#34;&gt;String::CamelSnakeKebab&lt;/a&gt; (ported from Clojure)&lt;/li&gt;
&lt;li&gt;Draw braille characters at the terminal with &lt;a href=&#34;https://metacpan.org/pod/Term::Drawille&#34;&gt;Term::Drawille&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;security:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Security&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Polybius&#34;&gt;Crypt::Polybius&lt;/a&gt; implements the Polybius Square cipher&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Passwords&#34;&gt;Passwords&lt;/a&gt; is a simple API for hashing and validating passwords&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Web&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::Model::Net::Stripe&#34;&gt;Catalyst::Model::Net::Stripe&lt;/a&gt; provides a Catalyst model using &lt;a href=&#34;https://metacpan.org/pod/Net::Stripe&#34;&gt;Net::Stripe&lt;/a&gt; (the payments service)&lt;/p&gt;

&lt;p&gt;Implement a stronger Dancer session id with &lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::SecureSessionID&#34;&gt;Dancer::Plugin::SecureSessionID&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/HTTP::Request::AsCurl&#34;&gt;HTTP::Request::AsCurl&lt;/a&gt; converts an HTTP::Request object into a curl command&lt;/p&gt;

&lt;p&gt;New Mojolicious toys!:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support offline web applications with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::AppCacheManifest&#34;&gt;AppCacheManifest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clear an upsteam cache with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::CachePurge&#34;&gt;CachePurge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::RenderSteps&#34;&gt;RenderSteps&lt;/a&gt; helps you create async controllers with minimal code&lt;/li&gt;
&lt;li&gt;Easily manage thumbnails using &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Thumbnail&#34;&gt;Thumbnail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::TimeAgo&#34;&gt;TimeAgo&lt;/a&gt; elegantly convert dates to human-readable dates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::App::HostMap&#34;&gt;Plack::App::HostMap&lt;/a&gt; can dispatch requests to applications based on host names, in constant time&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl v5.20 - what you need to know</title>
      <link>https://dnmfarrell.github.io/article/92/2014/5/27/Perl-v5-20---what-you-need-to-know/</link>
      <pubDate>Tue, 27 May 2014 12:22:52 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/92/2014/5/27/Perl-v5-20---what-you-need-to-know/</guid>
      <description>

&lt;p&gt;&lt;em&gt;With a new version of Perl expected to land this week, we&amp;rsquo;ve pulled together a summary of the headline changes for Perl v5.20. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;subroutine-signatures:999d6889f3c69750b45ce67cbc31e8ce&#34;&gt;Subroutine signatures&lt;/h3&gt;

&lt;p&gt;This is the big one. It&amp;rsquo;s hard to understate how great this is. No more ugly assignment code - with 5.20 you can write:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature &#39;signatures&#39;;

sub echo_chamber ($sound) {
    return $sound;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We first &lt;a href=&#34;http://perltricks.com/article/72/2014/2/24/Perl-levels-up-with-native-subroutine-signatures&#34;&gt;covered&lt;/a&gt; them back in February, and Ovid &lt;a href=&#34;http://blogs.perl.org/users/ovid/2014/03/subroutine-signatures-in-perl-are-long-overdue.html&#34;&gt;blogged&lt;/a&gt; about them too. More recently we &lt;a href=&#34;http://perltricks.com/article/88/2014/5/12/Benchmarking-subroutine-signatures&#34;&gt;benchmarked&lt;/a&gt; them.&lt;/p&gt;

&lt;h3 id=&#34;postfix-dereferencing:999d6889f3c69750b45ce67cbc31e8ce&#34;&gt;Postfix dereferencing&lt;/h3&gt;

&lt;p&gt;The next cool new feature is postfix dereferencing. Hard to describe but easy to show:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use experimental &#39;postderef&#39;;

my $nested_array_ref = [[[[[1,2,3]]]]];

# circumfix dereference - usual way
push @{$nested_array_ref-&amp;gt;[0]-&amp;gt;[0]-&amp;gt;[0]-&amp;gt;[0]}, 4;

# postfix dereference - new way
push $nested_array_ref-&amp;gt;[0]-&amp;gt;[0]-&amp;gt;[0]-&amp;gt;[0]-&amp;gt;@*, 5;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We previously &lt;a href=&#34;http://perltricks.com/article/68/2014/2/13/Cool-new-Perl-feature--postfix-dereferencing&#34;&gt;detailed&lt;/a&gt; the benefits of postfix dereferencing.&lt;/p&gt;

&lt;h3 id=&#34;hash-slices:999d6889f3c69750b45ce67cbc31e8ce&#34;&gt;Hash slices&lt;/h3&gt;

&lt;p&gt;Perl 5.20 delivers a new slice type: hash slices. These work in a similar way to the array slice, except the &amp;ldquo;sliced&amp;rdquo; data provides full key value pairs instead of just the values as with an array slice.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %raindrops = ( splish =&amp;gt; 4, splash =&amp;gt; 9, splosh =&amp;gt; 7 );
my %hash_slice = %raindrops{ &#39;splish&#39;, &#39;splosh&#39;};
# hash_slice is (splish =&amp;gt; 4, splosh =&amp;gt; 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What&amp;rsquo;s even more cool, if you use a hash slice on an array, the resulting hash has the array index elements as the keys:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @raindrop_types = qw/splish splash splosh/;
my %hash_slice = %raindrop_types[0, 2];
# hash_slice is (0 =&amp;gt; &#39;splish&#39;, 2 =&amp;gt; &#39;splosh&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;android:999d6889f3c69750b45ce67cbc31e8ce&#34;&gt;Android&lt;/h3&gt;

&lt;p&gt;Yes that&amp;rsquo;s right, Perl 5.20 compiles on Android! The current documentation is &lt;a href=&#34;https://github.com/Perl/perl5/blob/blead/README.android&#34;&gt;online&lt;/a&gt;, and will be accessible via &amp;ldquo;perldoc android&amp;rdquo; once you&amp;rsquo;ve installed 5.20.&lt;/p&gt;

&lt;h3 id=&#34;performance-improvements:999d6889f3c69750b45ce67cbc31e8ce&#34;&gt;Performance improvements&lt;/h3&gt;

&lt;p&gt;Perl 5.20 is faster in all kinds of areas - the perldelta for 5.20 lists 17 performance improvements, covering things like faster regexes, hash key lookups and string copying. Matthew Horsfall &lt;a href=&#34;http://blogs.perl.org/users/matthew_horsfall/2014/02/perl-519x-performance-improvements.html&#34;&gt;blogged&lt;/a&gt; about some of the changes as did &lt;a href=&#34;http://blog.booking.com/more-optimizations-in-perl-5.20-to-be.html&#34;&gt;Stefan Müller&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;miscellaneous:999d6889f3c69750b45ce67cbc31e8ce&#34;&gt;Miscellaneous&lt;/h3&gt;

&lt;p&gt;Subroutine prototypes can now be declared as subroutine attribute with the &amp;ldquo;prototype&amp;rdquo; keyword. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# usual prototype
sub example ($$) {}

# prototype declared via attribute
sub example :prototype($$) {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Faster Windows installation - ~15 minutes can be saved from the installation process due to the fix of a &amp;ldquo;make test&amp;rdquo; bug. Additionally, Perl can now be built using the Visual C++ 2013 compiler.&lt;/p&gt;

&lt;p&gt;Perl 5.20 uses the latest Unicode version 6.3 up from 6.2 (Unicode &lt;a href=&#34;http://www.unicode.org/versions/Unicode6.3.0/&#34;&gt;changelog&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The rand function now uses an internal platform independent random number generator. Previously Perl would use a platform specific random number generator leading to inconsistent quality of random number generation.&lt;/p&gt;

&lt;h3 id=&#34;deprecations:999d6889f3c69750b45ce67cbc31e8ce&#34;&gt;Deprecations&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;CGI&lt;/a&gt; and its associated modules are being removed from core (Sawyer X &lt;a href=&#34;http://www.youtube.com/watch?v=jKOqtRMT85s&#34;&gt;must&lt;/a&gt; be happy).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Module::Build&#34;&gt;Module::Build&lt;/a&gt; is also being removed from core. David Golden &lt;a href=&#34;http://www.dagolden.com/index.php/2140/paying-respect-to-modulebuild/&#34;&gt;blogged&lt;/a&gt; about this last year.&lt;/p&gt;

&lt;p&gt;Setting a non-integer reference value to the input record separator variable (&amp;ldquo;$/&amp;rdquo;) will throw a fatal exception (but undef is still fine).&lt;/p&gt;

&lt;h3 id=&#34;conclusion:999d6889f3c69750b45ce67cbc31e8ce&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;There is a lot more to 5.20 than the summary items mentioned above. For a list of all the changes see &lt;a href=&#34;https://github.com/Perl/perl5/blob/blead/pod/perl5200delta.pod&#34;&gt;perldelta&lt;/a&gt;. Perl 5.20 is the most exciting release in years. Thanks to the Perl 5 Porters team for doing an incredible job of delivering an exceptional new Perl!&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F92%2F2014%2F5%2F27%2FPerl-v5-20-what-you-need-to-know&amp;amp;text=Perl+v5.20+-+what+you+need+to+know&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F92%2F2014%2F5%2F27%2FPerl-v5-20-what-you-need-to-know&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to contribute to the exercism.io Perl 5 repo</title>
      <link>https://dnmfarrell.github.io/article/91/2014/5/22/How-to-contribute-to-the-exercism-io-Perl-5-repo/</link>
      <pubDate>Thu, 22 May 2014 15:09:13 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/91/2014/5/22/How-to-contribute-to-the-exercism-io-Perl-5-repo/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Earlier this week I rounded off our exercism.io article with a call to action to help port exercises into the Perl 5 repo. Today I&amp;rsquo;m going to walk through the porting process step-by-step and show you how easy it is to contribute.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:96c520196f6519b815b433280ae5ea10&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need a GitHub account and Perl installed. That&amp;rsquo;s it!&lt;/p&gt;

&lt;h3 id=&#34;fork-the-repo:96c520196f6519b815b433280ae5ea10&#34;&gt;Fork the repo&lt;/h3&gt;

&lt;p&gt;To contribute to a project on GitHub, we&amp;rsquo;ll use the &amp;ldquo;fork and pull&amp;rdquo; approach. First we&amp;rsquo;ll login to GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/91/github_1.png&#34; title=&#34;Login to GitHub&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/91/github_1_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, search for the exercism/xperl5 repo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/91/github_2.png&#34; title=&#34;Search for exercism/xperl5&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/91/github_2_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/91/github_3.png&#34; title=&#34;Click the fork button&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/91/github_3_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the &amp;ldquo;Fork&amp;rdquo; button to copy the repo into our own perltricks/xperl5 repo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/91/github_4.png&#34; title=&#34;Our own forked repo&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/91/github_4_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;get-the-exercises:96c520196f6519b815b433280ae5ea10&#34;&gt;Get the exercises&lt;/h3&gt;

&lt;p&gt;Now we&amp;rsquo;ve forked the repo, we can commit changes to our forked version. To start we&amp;rsquo;ll need to download the Perl exercises from our forked repo. We can do this from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ git clone https://github.com/sillymoose/xperl5.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will download the xperl5 repo into a directory called &amp;ldquo;xperl5&amp;rdquo;. Next download the list of common exercises:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ git clone https://github.com/exercism/x-common.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will download the latest list of available exercises to the &amp;ldquo;x-common&amp;rdquo; directory, which contains a collection of readme files for the exercises. Any exercise that has a readme file in x-common that is missing from the xperl5 directory needs to be ported.&lt;/p&gt;

&lt;h3 id=&#34;find-the-exercise-in-another-language:96c520196f6519b815b433280ae5ea10&#34;&gt;Find the exercise in another language&lt;/h3&gt;

&lt;p&gt;Once you&amp;rsquo;ve found an exercise that needs to be ported, you&amp;rsquo;ll want to find that exercise in one of the other languages repos. It&amp;rsquo;s far easier to translate an exercise than to write it from scratch yourself! The Ruby, Python and JavaScript repos have most of the exercises, so we&amp;rsquo;ll start with one of those. For example to download the Ruby exercises repo, just type this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ git clone https://github.com/exercism/xruby.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the xruby directory doesn&amp;rsquo;t have the exercise you&amp;rsquo;re looking to port, try cloning xpython or xjavascript instead.&lt;/p&gt;

&lt;h3 id=&#34;porting-the-exercise:96c520196f6519b815b433280ae5ea10&#34;&gt;Porting the exercise&lt;/h3&gt;

&lt;p&gt;To port an exercise you need to provide the exercise test file and an Example.pm module which passes the tests. Earlier this week I ported the &amp;ldquo;leap&amp;rdquo; exercise from Ruby to Perl. This involved three steps. First I created the new exercise subdirectory in the xperl5 directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ mkdir xperl5/leap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, I translated the Ruby test file &amp;ldquo;xruby/leap/leap_test.rb&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;require &#39;date&#39;
require &#39;minitest/autorun&#39;
require_relative &#39;year&#39;

class Date
  def leap?
    throw &amp;quot;Try to implement this yourself instead of using Ruby&#39;s implementation.&amp;quot;
  end
  
  alias :gregorian_leap? :leap?
  alias :julian_leap? :leap?
end

class YearTest &amp;lt; MiniTest::Unit::TestCase
  def test_leap_year
    assert Year.leap?(1996)
  end

  def test_non_leap_year
    skip
    refute Year.leap?(1997)
  end
  
  def test_non_leap_even_year
    skip
    refute Year.leap?(1998)
  end

  def test_century
    skip
    refute Year.leap?(1900)
  end

  def test_fourth_century
    skip
    assert Year.leap?(2400)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to &amp;ldquo;xperl5/leap/leap.t&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use warnings;
use strict;
use Test::More tests =&amp;gt; 7;

my $module = $ENV{EXERCISM} ? &#39;Example&#39; : &#39;Leap&#39;;
my $sub = $module . &#39;::is_leap&#39;;

use_ok($module) or BAIL_OUT (&amp;quot;You need to create a module called $module.pm.&amp;quot;);
can_ok($module, &#39;is_leap&#39;) or BAIL_OUT(&amp;quot;Missing package $module with sub is_leap().&amp;quot;);

do {
    no strict &#39;refs&#39;;
    is 1, $sub-&amp;gt;(1996), &#39;1996 is a leap year&#39;;
    is 0, $sub-&amp;gt;(1997), &#39;1997 is not a leap year&#39;;
    is 0, $sub-&amp;gt;(1998), &#39;1998 is not a leap year&#39;;
    is 0, $sub-&amp;gt;(1900), &#39;1900 is not a leap year&#39;;
    is 1, $sub-&amp;gt;(2400), &#39;2400 is a leap year&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally I ported the example answer &amp;ldquo;xruby/leap/example.rb&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;require &#39;delegate&#39;

class Year &amp;lt; SimpleDelegator

  def self.leap?(number)
    Year.new(number).leap?
  end 

  def leap?
    divisible_by?(400) || divisible_by?(4) &amp;amp;&amp;amp; !divisible_by?(100)
  end

  private

  def divisible_by?(i)
    (self % i) == 0
  end 
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the Perl version, &amp;ldquo;xperl5/leap/Example.pm&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Example;
use warnings;
use strict;

sub is_leap {
    my $year = shift;
    divisible_by($year, 400)
        or divisible_by($year, 4) and !divisible_by($year, 100)
        ? 1 : 0;
}

sub divisible_by {
    $_[0] % $_[1] == 0 ? 1 : 0;
}

__PACKAGE__;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the test file at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ EXERCISM=1 prove leap.t
leap.t .. ok   
All tests successful.
Files=1, Tests=7,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.02 cusr  0.00 csys =  0.04 CPU)
Result: PASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of our tests passed, so we can commit these files. I also &lt;a href=&#34;https://github.com/sillymoose/xperl6/tree/master/leap&#34;&gt;ported&lt;/a&gt; a Perl 6 version.&lt;/p&gt;

&lt;h3 id=&#34;add-the-new-exercise-to-the-forked-repo:96c520196f6519b815b433280ae5ea10&#34;&gt;Add the new exercise to the forked repo&lt;/h3&gt;

&lt;p&gt;Now that we&amp;rsquo;ve ported the files, we need to add them to the forked xperl5 repository and commit the change. Here&amp;rsquo;s are the commands to do that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cd xperl5
$ git add leap/Example.pm leap/leap.t
$ git commit -am &#39;Added the leap exercise&#39;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the forked repo is out of sync with exercism/xperl5 you&amp;rsquo;ll need to &lt;a href=&#34;http://stackoverflow.com/questions/7244321/how-to-update-github-forked-repository&#34;&gt;rebase&lt;/a&gt; it.&lt;/p&gt;

&lt;h3 id=&#34;create-a-pull-request:96c520196f6519b815b433280ae5ea10&#34;&gt;Create a pull request&lt;/h3&gt;

&lt;p&gt;Returning to GitHub, all we have to do is initiate a pull request from our forked repo at perltricks/xperl5. Clicking the &amp;ldquo;pull requests&amp;rdquo; link on the right of the screen brings us to the pull requests screen:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/91/github_5.png&#34; title=&#34;The pull requests screen&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/91/github_5_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking the &amp;ldquo;new pull request&amp;rdquo; button will create the pull request form, GitHub automatically knows that the pull request should go back to exercism/xperl5.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/91/github_6.png&#34; title=&#34;The new pull request. Send the pull request!&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/91/github_6_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking the &amp;ldquo;Send pull request&amp;rdquo; button submits the pull request and we&amp;rsquo;re done! The exercism repo committers usually respond within a couple of hours. So now you&amp;rsquo;ve seen how easy it is to port an exercise, be warned it can be addictive &amp;hellip;&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F91%2F2014%2F5%2F21%2FHow-to-contribute-to-the-exercism-io-Perl-5-repo&amp;amp;text=How+to+contribute+to+the+exercism.io+Perl+5+repo&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F91%2F2014%2F5%2F21%2FHow-to-contribute-to-the-exercism-io-Perl-5-repo&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Become a better programmer with exercism.io</title>
      <link>https://dnmfarrell.github.io/article/90/2014/5/19/Become-a-better-programmer-with-exercism-io/</link>
      <pubDate>Mon, 19 May 2014 01:15:07 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/90/2014/5/19/Become-a-better-programmer-with-exercism-io/</guid>
      <description>

&lt;p&gt;&lt;em&gt;For the past week I&amp;rsquo;ve been trying out &lt;a href=&#34;http://exercism.io/&#34;&gt;exercism.io&lt;/a&gt; the programming exercises app. I heard about it back in December when Gabor &lt;a href=&#34;http://blogs.perl.org/users/gabor_szabo/2013/12/perl-exercism.html&#34;&gt;blogged&lt;/a&gt; about it, but didn&amp;rsquo;t try it until now. I wish I hadn&amp;rsquo;t waited so long, as exercism is a lot of fun.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-exercism-works:b8fc90b81a72b2595146025a61f1ef5d&#34;&gt;How exercism works&lt;/h3&gt;

&lt;p&gt;exercism comes with a command line app that downloads programming exercises and submits your coded answers to the exercism website. Every programming exercise comes with a readme and a test file. To complete the exercise you need to write a Perl module that passes all of the tests.&lt;/p&gt;

&lt;p&gt;When you are done and have submitted your Perl module via the command line app, you and other programmers can &amp;ldquo;nitpick&amp;rdquo; your code and comment on it. Once you feel you have gotten enough comments, you can finalize your submission and view other programmer&amp;rsquo;s solutions for the same exercise. The kicker is that you only receive one programming exercise at a time, and cannot access another exercise until you complete the current one.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s TIMTOWTDI nature means that there are several correct solutions for the exercises and you can often learn something from viewing other programmers&amp;rsquo; solutions. For example in one exercise I used a regular expression only to find that the simpler &lt;a href=&#34;http://perldoc.perl.org/perlop.html#Quote-and-Quote-like-Operators&#34;&gt;transliteration&lt;/a&gt; operator worked just as well. The exercise difficulty varies from easy to hard, but the real challenge is finding a clean, generalized solution for the spec.&lt;/p&gt;

&lt;h3 id=&#34;try-it-out:b8fc90b81a72b2595146025a61f1ef5d&#34;&gt;Try it out&lt;/h3&gt;

&lt;p&gt;Grab the &lt;a href=&#34;https://github.com/exercism/cli/releases/latest&#34;&gt;latest binary&lt;/a&gt; for your platform and extract it. Fire up the command line and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ exercism demo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will fetch the first exercise (&amp;ldquo;Bob&amp;rdquo; at the time of writing). You can find the test file and readme at &amp;ldquo;perl5/bob/&amp;rdquo;. Opening the readme you&amp;rsquo;ll see:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Bob

Bob is a lackadaisical teenager. In conversation, his responses are very limited.

Bob answers &#39;Sure.&#39; if you ask him a question.

He answers &#39;Woah, chill out!&#39; if you yell at him.

He says &#39;Fine. Be that way!&#39; if you address him without actually saying anything.

He answers &#39;Whatever.&#39; to anything else.

## Instructions

Run the test file, and fix each of the errors in turn. When you get the first test to pass, go to the first pending or skipped test, and make that pass as well. When all of the tests are passing, feel free to submit. 

Remember that passing code is just the first step. The goal is to work towards a solution that is as readable and expressive as you can make it. 

Please make your solution as general as possible. Good code doesn&#39;t just pass the test suite, it works with any input that fits the specification.

Have fun!

## Source

Inspired by the &#39;Deaf Grandma&#39; exercise in Chris Pine&#39;s Learn to Program tutorial. [view source](http://pine.fm/LearnToProgram/?Chapter=06)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run the test file change into the exercise directory and use prove:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cd perl5/bob
$ prove bob.t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That will get this output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;bob.t .. 1/22 Bailout called.  Further testing stopped:  You need to create a module called Bob.pm with a function called hey() that gets one parameter: The text Bob hears.

#   Failed test &#39;missing Bob.pm&#39;
#   at bob.t line 37.
FAILED--Further testing stopped: You need to create a module called Bob.pm with a function called hey() that gets one parameter: The text Bob hears.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s create a basic Bob.pm module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Bob;
use warnings;
use strict;

sub hey {
    my $input = shift;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a shell of the solution. Our &amp;ldquo;hey&amp;rdquo; subroutine returns the first input it receives. Re-running prove, we get this output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ prove bob.t
bob.t .. 1/22 
#   Failed test &#39;stating something: Tom-ay-to, tom-aaaah-to.&#39;
#   at bob.t line 52.
#          got: &#39;Tom-ay-to, tom-aaaah-to.&#39;
#     expected: &#39;Whatever.&#39;

...

# Looks like you failed 19 tests of 22.
bob.t .. Dubious, test returned 19 (wstat 4864, 0x1300)
Failed 19/22 subtests 

Test Summary Report
-------------------
bob.t (Wstat: 4864 Tests: 22 Failed: 19)
  Failed tests:  4-22
  Non-zero exit status: 19
Files=1, Tests=22,  1 wallclock secs ( 0.02 usr  0.00 sys +  0.04 cusr  0.00 csys =  0.06 CPU)
Result: FAIL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that Bailout is no longer being called, so our basic module passed the first few tests, but failed 19 of 22. I&amp;rsquo;ve abbreviated the output to show only the first failing test. The output tells us everything we need to know: our &amp;ldquo;hey&amp;rdquo; subroutine did not return the content required by the spec. I&amp;rsquo;ll leave the exercise here - if you&amp;rsquo;re feeling suitably inspired see if you can complete it.&lt;/p&gt;

&lt;h3 id=&#34;help-represent-perl:b8fc90b81a72b2595146025a61f1ef5d&#34;&gt;Help represent Perl&lt;/h3&gt;

&lt;p&gt;One of the exercism&amp;rsquo;s strengths is it has the same programming exercises in different programming languages, so you can develop your polyglot skills. Looking at the &lt;a href=&#34;https://github.com/exercism&#34;&gt;source&lt;/a&gt;, it appears that JavaScript, Python, Ruby and Haskell are leading the pack with about 55 exercises available each. Perl is well-represented with 36 exercises and the other languages have about 20 or fewer.&lt;/p&gt;

&lt;p&gt;This week I ported a couple of the missing exercises to the Perl &lt;a href=&#34;https://github.com/exercism/xperl5&#34;&gt;repo&lt;/a&gt;. To port a missing exercise you have to provide the test file and module solution. This is easier than it sounds as you can just translate the exercise code from another language into Perl. Across all the languages there are about 80 different exercises. I&amp;rsquo;ve created a &lt;a href=&#34;https://questhub.io/realm/perl/quest/53795a10bbd0be180400014f&#34;&gt;quest&lt;/a&gt; which lists the missing exercises.&lt;/p&gt;

&lt;p&gt;It only take about 30 minutes to port one exercise: if 2% of the readers of this article port one exercise each today, Perl will immediately have more exercises than any other language. There is also an empty Perl 6 &lt;a href=&#34;https://github.com/exercism/xperl6&#34;&gt;repo&lt;/a&gt;; porting the Perl 5 exercises to Perl 6 could make for a juicy hackathon target.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:b8fc90b81a72b2595146025a61f1ef5d&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Playing with exercism has been loads of fun and I&amp;rsquo;ve learned a few Perl tricks (hah!) along the way. The source is MIT licensed and the committers are friendly. It would be great to see more Perlers participating or porting an exercise or too. Feel free to clone or or stencil the &lt;a href=&#34;https://questhub.io/realm/perl/quest/53795a10bbd0be180400014f&#34;&gt;quest&lt;/a&gt;. Let&amp;rsquo;s show people what our language can do!&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F90%2F2014%2F5%2F18%2FBecome-a-better-programmer-with-exercism-io&amp;amp;text=Become+a+better+programmer+with+exercism.io&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F90%2F2014%2F5%2F18%2FBecome-a-better-programmer-with-exercism-io&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - April 2014</title>
      <link>https://dnmfarrell.github.io/article/86/2014/5/1/What-s-new-on-CPAN---April-2014/</link>
      <pubDate>Thu, 01 May 2014 12:20:07 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/86/2014/5/1/What-s-new-on-CPAN---April-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. April was a mix but there were a few gems amongst the dust. Think &amp;ldquo;Atari landfill excavation&amp;rdquo; and enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:a1e18cc475b25ae187356826556ddec3&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Pinboard&#34;&gt;WWW::Pinboard&lt;/a&gt; is an API for pinboard.in&lt;/li&gt;
&lt;li&gt;Export your gmail rules into a procmail format with &lt;a href=&#34;https://metacpan.org/pod/Mail::Google::Procmailrc&#34;&gt;Mail::Google::Procmailrc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:a1e18cc475b25ae187356826556ddec3&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::pdf2json&#34;&gt;Alien::pdf2json&lt;/a&gt; installs pdf2json which can also convert PDFs to XML&lt;/li&gt;
&lt;li&gt;Keep two instances of Music Player Daemon in sync with &lt;a href=&#34;https://metacpan.org/pod/App::MPDSync&#34;&gt;App::MPDSync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Augment your code review process with &lt;a href=&#34;https://metacpan.org/pod/Git::Code::Review&#34;&gt;Git::Code::Review&lt;/a&gt; (tutorial &lt;a href=&#34;https://metacpan.org/pod/Git::Code::Review::Tutorial&#34;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Analyze the results of the du command with &lt;a href=&#34;https://metacpan.org/pod/distribution/App-Du-Analyze/bin/analyze-du&#34;&gt;App::Du::Analyze&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:a1e18cc475b25ae187356826556ddec3&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Generate fake data intended for a relational database with &lt;a href=&#34;https://metacpan.org/pod/Data::Generator::FromDDL&#34;&gt;Data::Generator::FromDDL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Automating your life with &lt;a href=&#34;https://metacpan.org/pod/Exobrain&#34;&gt;Exobrain&lt;/a&gt;? Now connect to more services with &lt;a href=&#34;https://metacpan.org/pod/Exobrain::Foursquare&#34;&gt;Exobrain::HabitRPG&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Exobrain::Foursquare&#34;&gt;Exobrain::Foursquare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Store your serealized Perl data structure with &lt;a href=&#34;https://metacpan.org/pod/SerealX::Store&#34;&gt;SerealX::Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Types::DateTime&#34;&gt;Types::DateTime&lt;/a&gt; provides a Moo/Moose compatible datetime type constraint&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:a1e18cc475b25ae187356826556ddec3&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create your own BackPAN index with the aptly named &lt;a href=&#34;https://metacpan.org/pod/BackPAN::Index::Create&#34;&gt;BackPAN::Index::Create&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckBin&#34;&gt;Dist::Zilla::Plugin::CheckBin&lt;/a&gt; will add a check to your distribution that a certain command is available&lt;/li&gt;
&lt;li&gt;Enfroce strict version numbers with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckStrictVersion&#34;&gt;Dist::Zilla::Plugin::CheckStrictVersion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::PAUSE::Permissions&#34;&gt;Dist::Zilla::Plugin::Test::PAUSE::Permissions&lt;/a&gt; will check your PAUSE permissions at dzil&amp;rsquo;s gather files stage&lt;/li&gt;
&lt;li&gt;Want dzil to add a date to your distro but not change the line numbers? &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::OurDate&#34;&gt;Dist::Zilla::Plugin::OurDate&lt;/a&gt; is your friend&lt;/li&gt;
&lt;li&gt;Export lexical variables in your packages with &lt;a href=&#34;https://metacpan.org/pod/Exporter::LexicalVars&#34;&gt;Exporter::LexicalVars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read and edit ELAN files with &lt;a href=&#34;https://metacpan.org/pod/File::ELAN&#34;&gt;File::ELAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Re-using the same modules over and over in your solution? &lt;a href=&#34;https://metacpan.org/pod/Import::Base&#34;&gt;Import::Base&lt;/a&gt; let&amp;rsquo;s you reduce your import boilerplate and declare a base set of modules&lt;/li&gt;
&lt;li&gt;Working with thousands of Perl objects and need an efficient implementation? Take a look at &lt;a href=&#34;https://metacpan.org/pod/Monjon&#34;&gt;Monjon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you get frustrated waiting for perldoc to load, you may have issues. Also, see &lt;a href=&#34;https://metacpan.org/pod/Pod::Perldoc::Cache&#34;&gt;Pod::Perldoc::Cache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:a1e18cc475b25ae187356826556ddec3&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This is an incredible module; just use &lt;a href=&#34;https://metacpan.org/pod/Acme::Futuristic::Perl&#34;&gt;Acme::Futuristic::Perl&lt;/a&gt; to get Perl 7 running on your machine!&lt;/li&gt;
&lt;li&gt;If having Perl 7 isn&amp;rsquo;t enough, perhaps you&amp;rsquo;d like sigil-less scalars? Try &lt;a href=&#34;https://metacpan.org/pod/bare&#34;&gt;bare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;maths-science-language:a1e18cc475b25ae187356826556ddec3&#34;&gt;Maths, Science &amp;amp; Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Is today a holiday? It might be in the Slovak Republic. Find out with Perl and &lt;a href=&#34;https://metacpan.org/pod/Date::Holidays::SK&#34;&gt;Date::Holidays::SK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Path::Hilbert&#34;&gt;Path::Hilbert&lt;/a&gt; converts between 1 dimensional and 2 dimensional spaces using the Hilbert curve algoritm&lt;/li&gt;
&lt;li&gt;Capitalize Portuguese text with &lt;a href=&#34;https://metacpan.org/pod/Lingua::PT::Capitalizer&#34;&gt;Lingua::PT::Capitalizer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:a1e18cc475b25ae187356826556ddec3&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::ModCluster&#34;&gt;Catalyst::Plugin::ModCluster&lt;/a&gt; will register your Catalyst application with an apache mod_cluster&lt;/li&gt;
&lt;li&gt;Authenticate your users with Google&amp;rsquo;s OAuth on Dancer using &lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Auth::Google&#34;&gt;Dancer::Plugin::Auth::Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tired of Template::Toolkit on Dancer2? Check out &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Template::TextTemplate&#34;&gt;Dancer2::Template::TextTemplate&lt;/a&gt; for a more Perlish templating option&lt;/li&gt;
&lt;li&gt;Connect Mojo::UserAgent to the Cloudflare API with &lt;a href=&#34;https://metacpan.org/pod/Mojo::Cloudflare&#34;&gt;Mojo::Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::YR&#34;&gt;Mojo::YR&lt;/a&gt; is an API for the NR.YO weather API&lt;/li&gt;
&lt;li&gt;Enable plaintext route definitions in Mojo with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::PlainRoutes&#34;&gt;Mojolicious::Plugin::PlainRoutes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F86%2F2014%2F5%2F1%2FWhat-s-new-on-CPAN-April-2014&amp;amp;text=What%27s+new+on+CPAN+-+April+2014&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F86%2F2014%2F5%2F1%2FWhat-s-new-on-CPAN-April-2014&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl hate</title>
      <link>https://dnmfarrell.github.io/article/83/2014/4/7/Perl-hate/</link>
      <pubDate>Mon, 07 Apr 2014 04:28:21 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/83/2014/4/7/Perl-hate/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Perl certainly picks up its fair share of criticism. We&amp;rsquo;ve collected of some of the best (worst?) Perl jokes / critiques, as what&amp;rsquo;s the point of laughing if you can&amp;rsquo;t laugh at yourself?&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;generic-ire:042c061f5e8b8e55b17d0e722595edc5&#34;&gt;Generic ire&lt;/h3&gt;

&lt;p&gt;Perl has an uncanny ability to inspire negative feelings in all kinds of people, from programming luminaries like &lt;a href=&#34;http://books.google.com/books?id=nneBa6-mWfgC&amp;amp;pg=PA442&amp;amp;lpg=PA442&amp;amp;dq=perl+is+an+abomination+deutsch&amp;amp;source=bl&amp;amp;ots=gEAvJbIW1u&amp;amp;sig=0X7y2z1MgF8i2bjeSeQAcSFn7Pk&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ei=HvJBU6SLJOSvsQTytYDICg&amp;amp;ved=0CDYQ6AEwAg#v=onepage&amp;amp;q=perl%20is%20an%20abomination%20deutsch&amp;amp;f=false&#34;&gt;L Peter Deutsch&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Perl is an abomination as a language&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or famous coder blogger &lt;a href=&#34;https://groups.google.com/forum/#!topic/seajure/GLqhj_2915A&#34;&gt;Steve Yegge&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Perl. How else did such a crappy language become such a dominant force?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To rank-and-file programmers&amp;rsquo; thoughtful &lt;a href=&#34;http://www.kuro5hin.org/story/2004/8/2/184130/6279&#34;&gt;rants&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What IDIOT invented this stupid language? Why would anybody waste their time with this IDIOTIC SHIT when there are perfectly good languages like C out there?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or producing creative artworks:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.fetidcascade.com/images/perl.jpg&#34;&gt;&lt;img src=&#34;http://www.fetidcascade.com/images/perl.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;aesthetically-speaking:042c061f5e8b8e55b17d0e722595edc5&#34;&gt;Aesthetically speaking&lt;/h3&gt;

&lt;p&gt;If there is one aspect of Perl that generates hate like no other, it&amp;rsquo;s how it looks (those shallow coders!). It&amp;rsquo;s &lt;a href=&#34;http://en.wikipedia.org/wiki/Write-only_language%0A&#34;&gt;received wisdom&lt;/a&gt; that Perl is a &amp;ldquo;write-only&amp;rdquo; language, such as this gem from &lt;a href=&#34;http://paulgraham.com/pypar.html&#34;&gt;Paul Graham&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At the mention of ugly source code, people will of course think of Perl&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Criticisms often allude to illegibility:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perl-begin.org/humour/Sm2na25.jpg&#34;&gt;&lt;img src=&#34;http://perl-begin.org/humour/Sm2na25.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or more crudely:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://memecrunch.com/meme/2CZJN/perl-wtf-is-this-shit/image.png&#34;&gt;&lt;img src=&#34;http://memecrunch.com/meme/2CZJN/perl-wtf-is-this-shit/image.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or Keith Bostic&amp;rsquo;s &lt;a href=&#34;http://www.goodreads.com/quotes/437174-perl-the-only-language-that-looks-the-same-before&#34;&gt;famous claim&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Perl – The only language that looks the same before and after RSA encryption.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Uncyclopedia has a hilarious &lt;a href=&#34;http://uncyclopedia.wikia.com/wiki/Perl&#34;&gt;Perl entry&lt;/a&gt;, which mostly pokes fun at Perl&amp;rsquo;s legibility. Perl isn&amp;rsquo;t just unreadable. It&amp;rsquo;s &lt;a href=&#34;http://www.dmclaughlin.com/2009/04/19/ugly-perl-a-lesson-in-the-importance-of-api-design/&#34;&gt;ugly&lt;/a&gt;, &lt;a href=&#34;http://kalyanchakravarthy.net/?p=115&#34;&gt;dirty&lt;/a&gt; and even &lt;a href=&#34;http://everything2.com/title/I+hate+Perl&#34;&gt;hairy&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;perl-6:042c061f5e8b8e55b17d0e722595edc5&#34;&gt;Perl 6&lt;/h3&gt;

&lt;p&gt;Of course Perl 6 has not escaped the criticism. There is some creative Perl 6 art out there. Like these &lt;a href=&#34;http://hbfs.wordpress.com/2009/11/13/the-perl-6-logo/&#34;&gt;fake O&amp;rsquo;Reilly covers&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/82/perl_6_cover_1.jpg&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/82/perl_6_cover_1_small.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/82/perl_6_cover_2.png&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/82/perl_6_cover_2_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;on-mortality:042c061f5e8b8e55b17d0e722595edc5&#34;&gt;On mortality&lt;/h3&gt;

&lt;p&gt;This is a common meme. You don&amp;rsquo;t go from being the number 1 web programming language to say, top 5 without picking up some Cassandras. Perl has been variously accused of &lt;a href=&#34;http://www.infoworld.com/%5Bprimary-term-alias-prefix%5D/%5Bprimary-term%5D/whatever-happened-perl-012&#34;&gt;fading&lt;/a&gt;, &lt;a href=&#34;http://www.fastcolabs.com/3026446/the-fall-of-perl-the-webs-most-promising-language&#34;&gt;falling&lt;/a&gt;, &lt;a href=&#34;http://it.toolbox.com/blogs/puramu/perl-is-dead-12264&#34;&gt;dying&lt;/a&gt;and &lt;a href=&#34;https://sites.google.com/site/steveyegge2/ancient-languages-perl&#34;&gt;not dying&lt;/a&gt;. Sometimes this meme takes subtler forms, such as why the Perl subreddit doesn&amp;rsquo;t have &lt;a href=&#34;http://www.reddit.com/r/perl/comments/1sjovo/why_has_rperl_so_few_subscribers/&#34;&gt;enough subscribers&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:042c061f5e8b8e55b17d0e722595edc5&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Perl catches all kinds of flak. It &lt;a href=&#34;http://www.quickmeme.com/img/87/874c939233c387ca1a1aa84b727178c7585f1a8afbf385ed8484428695fa95ba.jpg&#34;&gt;summons daemons&lt;/a&gt;, it&amp;rsquo;s &lt;a href=&#34;http://cdn.memegenerator.net/instances/250x250/47140545.jpg&#34;&gt;not cool&lt;/a&gt; and &lt;a href=&#34;https://lh6.googleusercontent.com/-lnPMdjxpfJo/UIpNj3jviTI/AAAAAAAALNE/nG_sATcqE0E/w750-h600-no/Perl+Script+-+Stroll+in+the+park.jpeg&#34;&gt;it will kick you in the balls&lt;/a&gt;. But at least we&amp;rsquo;re being talked about.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Original image &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/newdimensionfilms/4024985562&#34;&gt;John Lemieux&lt;/a&gt;, image has been digitally altered.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PerlTricks.com is a year old</title>
      <link>https://dnmfarrell.github.io/article/78/2014/3/21/PerlTricks-com-is-a-year-old/</link>
      <pubDate>Fri, 21 Mar 2014 13:02:04 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/78/2014/3/21/PerlTricks-com-is-a-year-old/</guid>
      <description>

&lt;p&gt;&lt;em&gt;PerlTricks.com launched a year ago. So how are we doing? Read on to find out.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;site-visitors:50f11b43b5834b5e9cb2429ba19f6476&#34;&gt;Site Visitors&lt;/h3&gt;

&lt;p&gt;For our first 6 months our visitor count oscillated between 2,500 and 3,000 visitors per month. Since then the numbers surged to 17,000:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/78/perltricks_pageviews_13_14.png&#34; title=&#34;PerlTricks.com Visitors March 2013 - February 2014&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/78/perltricks_pageviews_13_14_small.png&#34; alt=&#34;Visitors Chart&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My guess is that two factors account for most of the growth: writing a broader range of Perl related articles beyond simple tutorials and the site re-design which occurred in December. In the next year, I&amp;rsquo;d like to grow the visitor numbers to 70,000 per month. I think this is realistic based on &lt;a href=&#34;http://szabgab.com/the-popularity-of-perl-in-2013.html&#34;&gt;numbers&lt;/a&gt; for other Perl sites.&lt;/p&gt;

&lt;p&gt;Our pages-per-visit metric remained steady at ~1.5 for the year. This is curious as we added the &amp;ldquo;Our Latest Articles&amp;rdquo; and &amp;ldquo;Most Popular Articles&amp;rdquo; side bars in December and they have not been effective at encouraging users to read more of our articles. I&amp;rsquo;m thinking about adding some kind of &amp;ldquo;related articles&amp;rdquo; link to the footer of the page - maybe that will yield better results.&lt;/p&gt;

&lt;p&gt;In terms of Geography, there are no surprises really. Most of our visitors came from the U.S. followed by the U.K.,India, Germany and Canada:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/78/perltricks_visitors_country.png&#34; title=&#34;PerlTricks.com Visitors By Country&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/78/perltricks_visitors_country_small.png&#34; alt=&#34;Visitors By Country Chart&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;our-articles:50f11b43b5834b5e9cb2429ba19f6476&#34;&gt;Our Articles&lt;/h3&gt;

&lt;p&gt;We published 76 articles, the most popular of which was about Mario Roy&amp;rsquo;s wonderful MCE module. I hope the article&amp;rsquo;s success stems from the great content and not the click-bait title! Here&amp;rsquo;s our top ten most popular articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://dnmfarrell.github.io/article/61/2014/1/21/Make-your-code-run-faster-with-Perl-s-secret-turbo-module&#34;&gt;Make your code run faster with Perl&amp;rsquo;s secret turbo module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dnmfarrell.github.io/article/68/2014/2/13/Cool-new-Perl-feature-postfix-dereferencing&#34;&gt;Cool new Perl feature: postfix dereferencing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dnmfarrell.github.io/article/60/2014/1/13/Display-beautiful-Perl-code-in-HTML-without-JavaScript&#34;&gt;Display beautiful Perl code in HTML without JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dnmfarrell.github.io/article/72/2014/2/24/Perl-levels-up-with-native-subroutine-signatures&#34;&gt;Perl levels-up with native subroutine signatures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dnmfarrell.github.io/article/27/2013/6/16/Perl-hash-basics-create-update-loop-delete-and-sort&#34;&gt;Perl hash basics: create, update, loop, delete and sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dnmfarrell.github.io/article/17/2013/4/12/Perl-for-loops&#34;&gt;Perl for loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dnmfarrell.github.io/article/55/2013/12/22/Schedule-jobs-like-a-boss-with-every&#34;&gt;Schedule jobs like a boss with every&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dnmfarrell.github.io/article/63/2014/1/26/Download-a-YouTube-video-with-one-line-of-Perl&#34;&gt;Download a YouTube video with one line of Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dnmfarrell.github.io/article/37/2013/8/18/Catch-and-Handle-Signals-in-Perl&#34;&gt;Catch and Handle Signals in Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dnmfarrell.github.io/article/45/2013/10/27/How-to-redirect-and-restore-STDOUT&#34;&gt;How to redirect and restore STDOUT&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We also started a regular feature: &lt;a href=&#34;http://perltricks.com/article/74/2014/3/3/What-s-new-on-CPAN-February-2014&#34;&gt;What&amp;rsquo;s new on CPAN&lt;/a&gt;. This got a lot of positive feedback and we&amp;rsquo;ll keep running it. We&amp;rsquo;ll continue to cover Perl community news and programming, but this year I&amp;rsquo;d also like to give more coverage to the work of &lt;a href=&#34;http://www.perlfoundation.org/&#34;&gt;TPF&lt;/a&gt;, particularly the Perl 5 development fund. With Perl v5.20 around the corner, it would be great if we could turn that momentum into significant funding for TPF.&lt;/p&gt;

&lt;p&gt;Finally we&amp;rsquo;re also going to be offering paid freelance writing opportunities to the Perl community - watch this space!&lt;/p&gt;

&lt;h3 id=&#34;how-you-can-help:50f11b43b5834b5e9cb2429ba19f6476&#34;&gt;How you can help&lt;/h3&gt;

&lt;p&gt;There are several ways you can help us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Email us about Perl projects, community events or modules that you&amp;rsquo;d like us to feature. This month we&amp;rsquo;re nearing 20,000 visitors; that&amp;rsquo;s a lot of eyes to have on your shiny new Perl app or undiscovered module.&lt;/li&gt;
&lt;li&gt;Promote our articles by linking, retweeting or upvoting them whenever you deem them worthy of it. This helps us introduce more people to our site.&lt;/li&gt;
&lt;li&gt;Keep doing amazing things with Perl. A stronger community helps everyone including us.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;thank-you:50f11b43b5834b5e9cb2429ba19f6476&#34;&gt;Thank you&lt;/h3&gt;

&lt;p&gt;Thank you to everyone who has supported us over the past year on twitter, Reddit and by email. In particular I&amp;rsquo;d like to thank: Andy Lester of &lt;a href=&#34;http://perlbuzz.com/&#34;&gt;Perl Buzz&lt;/a&gt; and Yanick Champoux and Gabor Szabo of &lt;a href=&#34;http://perlweekly.com/&#34;&gt;Perl Weekly&lt;/a&gt; for regularly featuring our articles. Both sites are great ways to stay informed of the latest happenings in the Perl community. I&amp;rsquo;d also like to thank brian d foy for running the Perl Nerd Merit Badge Contest (which provided the prizes for our own contest). We recently &lt;a href=&#34;http://perltricks.com/article/75/2014/3/6/Perl-master-an-interview-with-brian-d-foy&#34;&gt;interviewed&lt;/a&gt; brian to discuss his new book, Mastering Perl second edition. brian shared his views on the book, technical writing and many other Perly topics.&lt;/p&gt;

&lt;p&gt;Finally I&amp;rsquo;d like to thank Jeffrey Thalhammer for his mentorship and encouragement. His startup, &lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan.com&lt;/a&gt; provides cloud-based configuration management for Perl.&lt;/p&gt;

&lt;p&gt;See you in Orlando for YAPC::NA 2014!&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F78%2F2014%2F3%2F21%2FPerlTricks-com-is-a-year-old&amp;amp;text=PerlTricks.com+is+a+year+old&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F78%2F2014%2F3%2F21%2FPerlTricks-com-is-a-year-old&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;Cover image © &lt;a href=&#34;http://www.flickr.com/photos/24956043@N00/4146448330/in/photolist-7jpCCs-5VK6RQ-5UFrrB-5VGE3r-Lui9q-e3j3Vu-6Y97YT-6YFoaA-6YBmAe-6YFody-vZ6Ty-3mrMDN-7PCJYM-6YdauQ-8ZfsdB-7PCK6e-dvZhLb-5U9Ns9-3KqevR-7ii4Z-8YY3Lh&#34;&gt;Katie Bordner&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl master - an interview with brian d foy</title>
      <link>https://dnmfarrell.github.io/article/75/2014/3/6/Perl-master---an-interview-with-brian-d-foy/</link>
      <pubDate>Thu, 06 Mar 2014 03:52:17 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/75/2014/3/6/Perl-master---an-interview-with-brian-d-foy/</guid>
      <description>&lt;p&gt;&lt;em&gt;brian d foy is is a prolific Perl author, programmer and trainer whose new book, the second edition of Mastering Perl was recently published by O&amp;rsquo;Reilly. We caught up with brian to discuss the new book, his thoughts on technical writing and find out what other projects he&amp;rsquo;s working on.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s talk about the elephant in the room, that new cover of Mastering Perl. Do you like it?&lt;/strong&gt;
 I saw the change when the book was nearing completion, because they usually save that activity for the end of the publication process. I haven&amp;rsquo;t seen it in print yet, but I don&amp;rsquo;t think it will influence people that much, as people tend to buy technical books based on the title and the content rather than the cover. It seems similar to what Apple did with iOS 7—make everything very thin and flat. I&amp;rsquo;m getting old so I need everything to be bigger! It&amp;rsquo;s something different than what people have seen before and I think it will take a while for the style to take hold and then people will identify it with the Perl series much like the previous style.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/67/mastering_perl_first_second_cover.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Originally you set out the vision for Mastering Perl to be: &amp;ldquo;teach people to work on their own and get them on the road to being a Perl master&amp;rdquo; — how do you think the new edition of Mastering Perl achieves that?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The second edition is very much like that the first in structure, although I&amp;rsquo;ve updated various things. The first edition was published in 2006 and it&amp;rsquo;s almost 10 years later. A lot of things have changed, such as which modules we&amp;rsquo;re using and how we think about the details, but the big stuff is the same.&lt;/p&gt;

&lt;p&gt;When I teach classes based on Mastering Perl, this is the stuff that people haven&amp;rsquo;t ever really thought about. We spend a lot of time teaching people how to deal with the language itself at the statement level, but not much on the higher, architectural level. It&amp;rsquo;s at that higher level where people can really get into trouble because they create things that syntactically work out but turn into a big mess when they operate as a whole.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We spend a lot of time teaching people how to deal with the language itself at the statement level, but not much on the higher, architectural level&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mastering Perl covers topics like debugging, profiling, logging, things that help people get things done. I&amp;rsquo;ve been very happy with the feedback I get from the book, now I just need to get everyone to read it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I saw it was number 2 on the Amazon Perl sales charts recently, so it seems to have had a positive impact so far?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon ratings can be very dynamic as people buy books so infrequently, (especially technical books), that if I sell one book on one day, it can move me very far up the sales charts. Also, initially for any new book there is a sales spike, I think pre-orders count as soon as the book ships. Mastering Perl is an advanced book too, so it may be popular for a while but never as popular as &lt;a href=&#34;http://www.learning-perl.com&#34;&gt;Learning Perl&lt;/a&gt; or &lt;a href=&#34;http://www.programmingperl.org&#34;&gt;Programming Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning Perl has been the best-selling Perl book for a long time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think ever since it came out it has been the best-selling Perl book. But nowhere near the numbers that Randal Schwartz was seeing in the first edition. That was just amazing. I hope to someday write a book that popular!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the new edition of Mastering Perl, there is a lot of new content. Which parts of that content were you most happy with or excited to tell other people about?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The big changes were in the &amp;ldquo;Lightweight Persistence&amp;rdquo; and &amp;ldquo;Regular Expressions&amp;rdquo; chapters. In &amp;ldquo;Lightweight Persistence&amp;rdquo; we finally admitted to the community that &lt;a href=&#34;http://perldoc.perl.org/Storable.html#SECURITY-WARNING&#34;&gt;Storable&lt;/a&gt; has a a huge problem with security because in the Storable format we can inject various things to make Perl do things, especially with duplicate keys and class names that don&amp;rsquo;t exist. I had to rewrite all of the book&amp;rsquo;s content for Storable, and it was interesting to track that information down.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot that&amp;rsquo;s happened between 2005 and now; for example JSON just exploded. It seems everyone is using it and not so much YAML anymore. So I had to add JSON in. In my programming, JSON features a lot in what I&amp;rsquo;m doing now. It&amp;rsquo;s easy to exchange into other languages, to throw at your browser, and it&amp;rsquo;s decent to read (at least, it&amp;rsquo;s not that bad).&lt;/p&gt;

&lt;p&gt;The other huge change in the Regular Expressions chapter. When I looked at was in the that chapter, a lot of that stuff has moved down into either Learning Perl or Intermediate Perl and our goal with Mastering Perl, when Alison Randal and I both set out to write it, was to not include content that&amp;rsquo;s available in another book already, especially if it was one of the books that had my name on it.&lt;/p&gt;

&lt;p&gt;I had to take out a lot of that stuff, like non-greedy matching and anchors, which are in the other books. In order to keep the chapter, I had to replace that content with something advanced.&lt;/p&gt;

&lt;p&gt;Since 5.10 we&amp;rsquo;ve had a huge number of really powerful new features that no one has really seen yet; grammars, new flags, and the cool things you can do with those.&lt;/p&gt;

&lt;p&gt;I had to work really quite a bit on this chapter and luckily as I was writing it, Randal Schwartz came out with this &lt;a href=&#34;http://www.perlmonks.org/?node_id=995856&#34;&gt;regular expression&lt;/a&gt; that parses JSON, using a lot of the new key features. I don&amp;rsquo;t know if I would actually use it to parse JSON as he&amp;rsquo;s written it in a minimal way for a particular client problem that works for them. But it demonstrated a bunch of the stuff I wanted to talk about. So I built the chapter around that. I had to research what a lot of those feature do: they&amp;rsquo;re not very well explained in the Perl documentation (at least so far as I could understand them). Taking the new features and experimenting with them to understand them for Mastering Perl was something I really enjoyed doing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On that topic, you write for all kinds of audiences, but would say that you enjoy writing for the advanced (Perl) audience more, because it gives you more opportunities to do things like that?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I enjoy it in different ways. I get to do a lot more with Mastering Perl because as I say in the introduction, I&amp;rsquo;m assuming you already know Perl, or you know how to find out something by using the docs and where to ask questions. I&amp;rsquo;m not going to write out step-by-step how the map function works; the reader should already know how it works.&lt;/p&gt;

&lt;p&gt;That assumption let&amp;rsquo;s me expand on the idea of what we&amp;rsquo;re trying to do rather than the syntax. Whereas in Learning Perl you have to do very simple things because the reader is going to struggle with the concept of the particular feature that they&amp;rsquo;re using.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure I would say I enjoy it more, it&amp;rsquo;s a different sort of enjoyment. I really like the beginning stuff. There&amp;rsquo;s a lot you get from kick-starting someone into the language and setting them on right path and then they can turn into a programmer. And I think that&amp;rsquo;s probably more rewarding to me than writing the very advanced material. That&amp;rsquo;s not to say one is better than the other, it&amp;rsquo;s just more satisfying to turn people into new Perl programmers than it is to level-up existing programmers. But I recognize the need to do both.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The chapter structure of Mastering Perl is largely the same as before, do you think you got it right the first time around? I know there was a public development process that was involved.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think we did. In the first edition of Mastering Perl I had a lot of input from Alison Randal (the editor) and she was a big name in the Perl community. Unfortunately she&amp;rsquo;s moved on to other things, but she really knew Perl, the community, and how to program in Perl. So when we sat down to talk about the book, she had great ideas and input about how to organize things, and what to put and leave out.&lt;/p&gt;

&lt;p&gt;We ran the book completely in the open. As I wrote things I let people see it (which is a very dangerous thing to do!) and people were not shy in telling me what they thought. Which is great, because you want them to say it before the book is published and not afterwards in an Amazon review. So that process really shaped the book.&lt;/p&gt;

&lt;p&gt;When I got to writing the second edition of Mastering Perl, I put it online again, and got a lot of good feedback for that. There wasn&amp;rsquo;t anyone saying &amp;ldquo;you need to have a chapter on x&amp;rdquo; (that wasn&amp;rsquo;t there before). I think that&amp;rsquo;s because most topics are covered elsewhere already. For instance we don&amp;rsquo;t have a chapter on XS, as it&amp;rsquo;s already covered in Tim Jenness&amp;rsquo; &lt;a href=&#34;http://www.manning.com/jenness/&#34;&gt;book&lt;/a&gt;, or you&amp;rsquo;re going to have to talk to perl5-porters because they don&amp;rsquo;t even have a good set of docs that explain everything. You just have to get your hands dirty. And XS keeps changing because of release of Perl, they&amp;rsquo;re improving the Perlguts interface to make it easier to use (which is fantastic). XS was one of the things that motivated Perl 6 because the Perl 5 core was so hard to hack on. I think for Mastering Perl, we got it right.&lt;/p&gt;

&lt;p&gt;The thing to remember for any book is that no book is going to give you everything. Learning Perl is a very targeted book. There&amp;rsquo;s that Randal Schwartz quote: &amp;ldquo;80% of the behavior of Perl can be described in 20% of the documentation&amp;rdquo;&lt;sup&gt;&lt;a href=&#34;#1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;In Intermediate Perl we move on to how to write Perl with people in teams, reusable code, how to share it and references. But they&amp;rsquo;re both very short books of about three hundred pages each and Mastering Perl is about the same size.&lt;/p&gt;

&lt;p&gt;If you look in some other languages and look at their books, they&amp;rsquo;ve got these gargantuan things that are a thousand pages or more. I know in Programming Perl we were limited to a certain page count because they couldn&amp;rsquo;t physically bind it otherwise.&lt;/p&gt;

&lt;p&gt;But not everyone needs 1200 pages. There are some people who&amp;rsquo;ll use Learning Perl and stop, because that&amp;rsquo;s all they need. So to people who say &amp;ldquo;why can&amp;rsquo;t you combine all this material into one big book&amp;rdquo;, the answer is you can, just buy the separate books and glue their back covers together, and there&amp;rsquo;s your one big book. The chapter sequence would be the same anyway!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;to people who say &amp;ldquo;why can&amp;rsquo;t you combine all this material into one big book&amp;rdquo;, the answer is you can, just buy the separate books and glue their back covers together&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There&amp;rsquo;s a great Perl book market out there. The Perl community is really good at getting information out there. There&amp;rsquo;s a lot of beginning Perl books, there are enough of the advanced ones. My idea is if I teach you how to do something you don&amp;rsquo;t need a book on every particular topic. Once you learn how to use the documentation, you can quickly get up to speed on the particulars yourself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;ve written a lot about Perl, and you&amp;rsquo;ve been published in many different formats and mediums. What do you think are some of the key considerations for good technical writing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I always remember what Randal told me when I first started writing Perl books. He mentored me and explained to me how to be a good technical writer. You always have at least three audiences: the people with no clue who have never heard of the thing you&amp;rsquo;re talking about, then there are the people who get the concept, but they need a reason to read it, and then there are the advanced users (who might not be a huge proportion of the audience), and they&amp;rsquo;ll want to learn something new or clever.&lt;/p&gt;

&lt;p&gt;Taking the JSON parser example from Mastering Perl, there are three people I&amp;rsquo;m thinking about. People who have never seen those features before; they haven&amp;rsquo;t seen a recursive regular expression and so I have to explain it as if talking to a beginner. There are people who have seen it, are aware of it, and have just never used it. So I had to do something interesting for them as they know how it works, but never had a reason to put it into practice. Then I think about that advanced group, who know all of this, but they want to be surprised by it somehow. And that&amp;rsquo;s what Randal&amp;rsquo;s final JSON parser example does.&lt;/p&gt;

&lt;p&gt;Another thing that Randal drilled into my head which is that you&amp;rsquo;ve got to realize where you&amp;rsquo;re starting and where you&amp;rsquo;re ending and you&amp;rsquo;ve got to lead the reader there because you&amp;rsquo;re telling a story; there&amp;rsquo;s a narrative. You can see that in my books. It&amp;rsquo;s not that there&amp;rsquo;s one section and then in the next section we&amp;rsquo;ve completely forgotten what was covered in the preceding section. We&amp;rsquo;re always on some kind of progression. In my writing, I start of at some point and write a story that progresses you to a final point which ties everything together. You have to keep that story line in mind, so you know what you need to emphasize and not, what to include and to leave out, to take people along the path you want them to travel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about code examples? That&amp;rsquo;s something that always features in technical writing. Do you have any guidelines or rules or rules of thumb that you follow when you&amp;rsquo;re including code examples in your writing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I try to write code examples that have the least number of distractions. I could write a program that was &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; clean and uses all the modern Perl conveniences, but that would distract from the concept I&amp;rsquo;m trying to communicate, so I write very minimal programs. I don&amp;rsquo;t remember if I did this in Mastering Perl or not, but I don&amp;rsquo;t think I used the strict or warnings pragmas in the code examples. I didn&amp;rsquo;t want to have those extra two lines all the time. I think I do have the shebang line in there, but not those other two. It&amp;rsquo;s not that I&amp;rsquo;m saying don&amp;rsquo;t use strict or warnings, it&amp;rsquo;s just not what I&amp;rsquo;m thinking about. In the code examples I&amp;rsquo;m trying to focus on a particular concept and especially in Mastering Perl, I assume that people know how to write complete Perl programs on their own using good practices, so I&amp;rsquo;m not harping on about strict and warnings.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s one of the things the Perl community is killing itself with because every time someone comes in with a casual question, that&amp;rsquo;s the feedback they get: &amp;ldquo;we&amp;rsquo;re not going to help you unless you use strict in your program&amp;rdquo;, even if there was no strict problem in their question.&lt;/p&gt;

&lt;p&gt;Some of the other things I try to think about: how does the code look, and how does it fit together? I try to write code in paragraphs: there&amp;rsquo;ll be a bunch of statements together with no blank lines between them, then I&amp;rsquo;ll add blank line and begin coding the next paragraph. Different people have different ideas about that, but in Mastering Perl I&amp;rsquo;m the only name on the book so I get to decide the style!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Different people have different ideas about that (code style), but in Mastering Perl I&amp;rsquo;m the only name on the book so I get to decide the style!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One thing I think is important (and I try to pass this on in my classes) is that you&amp;rsquo;re going to have to look at all kinds of different styles anyway. So having a consistent style across every Perl book isn&amp;rsquo;t really helping the reader. When that reader sits down and opens a Perl program written by a C programmer, it will look very different and they won&amp;rsquo;t have the style crutch to help them. There are tools that can help you in this scenario, in Mastering Perl we cover perltidy, which formats Perl code to a coding style you define. It&amp;rsquo;s also like fiction: detective novels are not written in the same style as advanced literature, because the authors are trying to achieve different things. I think the coding style used in technical books is a lot like that. I don&amp;rsquo;t want to say much more on coding style else I might spark an online war about it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That&amp;rsquo;s interesting, considering Perl&amp;rsquo;s motto, TIMTOWTDI (there is more than one way to do it), do you find it challenging to write about Perl, because it seems no matter how you write about something, someone else will always have another way of doing it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It doesn&amp;rsquo;t bother me so much in terms of writing the books or reading other people&amp;rsquo;s code, but while we have TIMTOWTDI there is the corollary &amp;ldquo;but most of them are wrong&amp;rdquo; (I don&amp;rsquo;t remember who invented that). I think TIMTOWTDI is great; it let&amp;rsquo;s people with limited knowledge get stuff done. They don&amp;rsquo;t need to learn the one optimal function call to use, they can fake it with something else. You can parse a string tediously with an index, or use split or regex captures. For the person who just needs to get things done by the end of the day, that&amp;rsquo;s great because they may only need to know a couple of those methods, and not spend the time figuring out the one right method they don&amp;rsquo;t know. Later they can go back and optimize that code if they have to. So I don&amp;rsquo;t get too upset about TIMTOWTDI.&lt;/p&gt;

&lt;p&gt;I come from the Physics world where I have seen much worse code than the examples the community typically criticizes. I&amp;rsquo;ve seen this awful code running in big labs and bespoke equipment and it worked. I wouldn&amp;rsquo;t want to work on that code myself, but there is a point where you just have to get work done and I can&amp;rsquo;t expect everyone to be thinking about Perl all day long.&lt;/p&gt;

&lt;p&gt;I do appreciate beautiful code—there are some people who write code that is amazing to look at and fun to read, because the way they think about things and the features they use all weave together to make something really interesting. But I don&amp;rsquo;t expect that from everyone because that&amp;rsquo;s not the goal for most people. If I want to make people into Perl programmers I can&amp;rsquo;t make that the goal, I&amp;rsquo;m not trying to turn them into people who win code reading contests at conferences. I want to turn them into people who say &amp;ldquo;I used Perl and I got my work done and I was able to go and do something else&amp;rdquo;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m not trying to turn them into people who win code reading contests at conferences. I want to turn them into people who say &amp;ldquo;I used Perl and I got my work done and I was able to go and do something else&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;On code readability, most textbooks print code in plain text without syntax highlighting (for cost savings or whatever). Do you think that&amp;rsquo;s a missed opportunity?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think my book &lt;a href=&#34;http://www.effectiveperlprogramming.com&#34;&gt;Effective Perl Programming&lt;/a&gt; had syntax highlighting, but really I don&amp;rsquo;t pay attention to my books after they&amp;rsquo;re published because I don&amp;rsquo;t want to see what the editors did to it. I write the book initially but there&amp;rsquo;s a whole bunch of people that come in and make it better. And sometimes they make it better in ways that I don&amp;rsquo;t like and it will take me a couple of years to come around to the fact that it was probably a good change.&lt;/p&gt;

&lt;p&gt;Syntax highlighting is a personal decision though. For example in my terminal I have a black background and 30% opacity and yellow text. I work mostly in &lt;a href=&#34;http://www.barebones.com/products/bbedit/&#34;&gt;BBEdit&lt;/a&gt;, and I just use the default syntax highlighting settings. Keywords are blue and comments are red and documentation is grey (I think). But when I look at code presented at conferences, there&amp;rsquo;s all kinds of things going on: braces are a particular color, etc. Everyone has their own particular way that they expect to see things so if I choose one syntax highlighting scheme in the book, it&amp;rsquo;s probably not going to work for anybody. Even the highlighting in Effective Perl Programming didn&amp;rsquo;t work out because they didn&amp;rsquo;t want to use red ink as they&amp;rsquo;re worried about people who have trouble seeing red (it can appear as grey). So the publishers changed the color, and now the things that would have usually been red are cyan and it makes me feel weird reading it. Syntax highlighting is a personal preference, and choosing any one particular style will not work for the majority of readers of the book.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve always maintained that people should use whatever tools and settings they want to use. With the proviso that their choice does not affect anybody else. If I use BBEdit that&amp;rsquo;s great as long as people using VI, Emacs or Komodo or whatever they want to use aren&amp;rsquo;t affected.&lt;/p&gt;

&lt;p&gt;If we had really fancy ebooks—which I&amp;rsquo;m still waiting for as ebooks now are still mostly static content—but if we had really fancy ones where we could load our code settings into it where we could see the code in our preferred syntax highlighting style. But we don&amp;rsquo;t have a way yet to inject a personal CSS into an ebook. I think there are huge missed opportunities there and I don&amp;rsquo;t think we&amp;rsquo;re going to get them now that Steve Jobs has passed on as I don&amp;rsquo;t think anyone cares as much as he did about how things look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In terms of that stance on not minding what other people use as long as it doesn&amp;rsquo;t affect what you use. There was that recent controversy about the Dist::Zilla authors on CPAN. What&amp;rsquo;s your take on that? Should we all reach for the MakeMaker approach, or do you have a different view?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not in love with &lt;a href=&#34;https://metacpan.org/pod/ExtUtils::MakeMaker&#34;&gt;MakeMaker&lt;/a&gt; but it&amp;rsquo;s the best we&amp;rsquo;ve got. Module::Build solved a lot of problems, but it also didn&amp;rsquo;t work in some scenarios, so we&amp;rsquo;re back to MakeMaker now. I wish there were a better thing, but so far there isn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Regarding &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt;, my only real problem with that is when you drop into a Dist::Zilla project and you&amp;rsquo;re not a Dist::Zilla author, there&amp;rsquo;s absolutely nothing that tells you what to do. A lot of times there&amp;rsquo;s not even a readme. For a while there was a fad of making the readme just a copy of the pod in the main module. But I&amp;rsquo;ve always wanted to readme to be &amp;ldquo;this is how you can get started with this directory&amp;rdquo;. So in my readme files I explain how to build the program. The Dist::Zilla approach gets rid of all that. There is dzil.ini file and a bunch of directories but there&amp;rsquo;s nothing that says &amp;ldquo;this is what you need to do&amp;rdquo;. I think a lot of people wouldn&amp;rsquo;t even know what module to install so they can begin the installation process. When I brought this up on twitter, some people thought it would be a good idea to include a file that explains the installation process with Dist::Zilla. Then I went one step further and thought wouldn&amp;rsquo;t it be great to have a program that manages that process for the user, but then that&amp;rsquo;s topologically similar to the Makefile.PL route.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;my only real problem with that is when you drop into a Dist::Zilla project and you&amp;rsquo;re not a Dist::Zilla author, there&amp;rsquo;s absolutely nothing that tells you what to do&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I know why Ricardo made Dist::Zilla, I know why some people use it, but I get annoyed when people push off their preferences for their particular activities onto others. Ricardo and David Golden are prolific CPAN authors and Dist::Zilla helps them be manage that. But the way that they work doesn&amp;rsquo;t have to be the way that the maintainer of a single module works. I&amp;rsquo;m not saying that we shouldn&amp;rsquo;t use Dist::Zilla, but that every time we use a tool we have to figure out how much it helps and how much it hurts.&lt;/p&gt;

&lt;p&gt;I think in a lot of cases, people have told me that when they drop into a git repository (to contribute a change) and there&amp;rsquo;s only a dist.ini file and they can&amp;rsquo;t find where they need to their change, they just give up. A lot of the stuff I do are doc patches for instance, but with Dist::Zilla some of the text comes from plugins that are created as part of the distribution. So the error might be higher up in the tool chain, but I don&amp;rsquo;t know which tool that is, and I&amp;rsquo;m not going to go looking for it. I&amp;rsquo;ll grep the distribution, and if I don&amp;rsquo;t find the thing I want to change, I&amp;rsquo;ll move on. That&amp;rsquo;s my personal decision—that it&amp;rsquo;s not worth my effort. Some people are going to be fine with that, they may think that they don&amp;rsquo;t get many contributions anyway, or that their users are all Dist::Zilla users, so they&amp;rsquo;ll get the contributions they need. It&amp;rsquo;s something that the community hasn&amp;rsquo;t really discussed, and when the subject does come up, it gets heated very quickly.&lt;/p&gt;

&lt;p&gt;There are a lot of people that don&amp;rsquo;t want to use Dist::Zilla for whatever particular reason. For me it&amp;rsquo;s not about Dist::Zilla, it&amp;rsquo;s about my philosophy on tools: should your personal tool choices impact mine? I like using the tools I use, if I had to use VI, I probably wouldn&amp;rsquo;t want to do much programming. If you talk to Ovid (Curtis Poe) for instance, he practically lives in VI, and if he couldn&amp;rsquo;t use it, he probably wouldn&amp;rsquo;t want to program either. So when we talk about build systems, it could be a completely different ballgame if Perl came with everything required to interact with a distribution built with Dist::Zilla, but that&amp;rsquo;s not the case.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t want to tell people to use Dist::Zilla or not to use it, I want people to think about (and this is the point of Mastering Perl) there are many tools available but does this tool make sense for your particular situation? There is not such thing as best practice unless you specify the context. So when we talk about whether a tool is a good thing or a bad thing, we need to have a situational context.&lt;/p&gt;

&lt;p&gt;As programmers what we really like to do is find &amp;ldquo;the one way&amp;rdquo;, even though Perl has TIMTOWTDI, we want to find the one right way to do it, and then tell everyone to do it that way (despite our disdain for Java, which often follows that approach). The Perl community version of that is &amp;ldquo;the right module&amp;rdquo;. For instance, something that just happened in the past couple of weeks, we&amp;rsquo;ve been telling people for years to use File::Slurp. It&amp;rsquo;s in the documentation, it&amp;rsquo;s in the FAQ. Every time someone asks the question &amp;ldquo;how do I read a file into a string&amp;rdquo; they&amp;rsquo;ve been told to use File::Slurp. It turns out the File::Slurp always wants to assume a particular encoding on the input file, and so slurping a file that does not follow the expected encoding, various bad things can happen. &lt;a href=&#34;https://rt.cpan.org/Ticket/Display.html?id=83126&#34;&gt;There&amp;rsquo;s a ticket&lt;/a&gt; in RT for that now, and people are saying that the module is &amp;ldquo;fundamentally broken&amp;rdquo;—there is not a way to get around it. We have been pushing this tool on people, and it&amp;rsquo;s critically broken. Is it that great? Sure it saves some typing, is a bit faster and works on some files, but is it that much better than localizing $/ and slurping the file manually? This way I have no dependency and I don&amp;rsquo;t need to go back and change anything if the module fails. It might be a tiny bit slower, but if I&amp;rsquo;m doing anything interesting (in the code), the time won&amp;rsquo;t make much difference.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As programmers what we really like to do is find &amp;ldquo;the one way&amp;rdquo; &amp;hellip; The Perl community version of that is &amp;ldquo;the right module&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Context really matters and this is why, back in the 90s I got into Perl. Perl was full of these kinds of people. One of the best people for this is Mark Jason Dominus. If you go to one of his talks, he has such a breadth of programming knowledge, he can really speak to the question of &amp;ldquo;is this a good idea?&amp;rdquo; because he&amp;rsquo;s aware of the different implementations in ML or Java or some other language most of us have never heard of, and he&amp;rsquo;s aware of the the consequences of those decisions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It seems you&amp;rsquo;re always writing something, so I&amp;rsquo;m sure you can&amp;rsquo;t keep your pen still for long. What&amp;rsquo;s next for you in terms of Perl writing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve got a book I&amp;rsquo;m working on and it&amp;rsquo;s going a lot more slowly than I thought it would. I want to write a very thin book about Perl on Windows. It&amp;rsquo;s been a lot more painful than I expected. Not necessarily the writing, but just dealing with Windows. Partly because I&amp;rsquo;m not that experienced with Windows (which is one reason to write a book about something), but also it&amp;rsquo;s because Perl is from such a different universe, and I want to be true to the Perl on Windows concept (not Perl on Cygwin which is just Unix). Windows has a completely different filesystem to Unix filesystems, the metadata you can get out are different, how you name files is different and so on. I thought I could do it in two months but I&amp;rsquo;m coming up on two months and I&amp;rsquo;ve barely got through writing the first chapter, which is just about how to get Perl on Windows.&lt;/p&gt;

&lt;p&gt;Other than that, I want to do a series of experiments, to cover a topic in a short book, say 50 to 100 pages, and get some kind of crowdfunding for it. Maybe even a crowdfunding competition where the most funded project wins. The idea would be to get enough money to justify spending my time on it and I could put it out there, develop it in public and people could comment on it. Then I would make the book available on Amazon for some ridiculously low price. I would love to have books out there that are a dollar and sell ten thousand copies rather that a price of ten dollars and sell a thousand copies. I don&amp;rsquo;t really care how many sales I get, just that I get enough money to live and write the next book, that would be fantastic. I&amp;rsquo;m going to do this experiment at some point, I just have to get through this Windows book first!&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a website for the Windows book, it&amp;rsquo;s &lt;a href=&#34;http://windowsperl.com&#34;&gt;WindowsPerl.com&lt;/a&gt;. There&amp;rsquo;s not much there yet, but I&amp;rsquo;m taking suggestions from people and letting them know what&amp;rsquo;s going on with the development process. I don&amp;rsquo;t know who is going to publish it yet, I have an idea, but we haven&amp;rsquo;t made a contract (but it&amp;rsquo;s not going to be O&amp;rsquo;Reilly). I&amp;rsquo;m talking about the book in the usual places so if people want to follow progress or comment, they can.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is there anything else your working on that you&amp;rsquo;d like to make people aware of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is one thing I have thought about for a long time and I guess I should just get off my butt and do it. For a while I&amp;rsquo;ve run the White Camel awards, it&amp;rsquo;s announced on Perl&amp;rsquo;s birthday (December 18), for outstanding non-technical achievement in Perl. We want to recognize people for doing all the stuff that no one ever remembers—things like working in the user group community, people who organize conferences and Perl monger events, people who are doing general Perl advocacy, like PerlTricks.&lt;/p&gt;

&lt;p&gt;What I want to do is create a new award, like a tangible award that they can use it to show that the community appreciates what they&amp;rsquo;ve done. And this would be for a technical achievement. I&amp;rsquo;m thinking something like a medal or I don&amp;rsquo;t know, we don&amp;rsquo;t wear lapels so if we gave out a lapel pin we&amp;rsquo;d have nothing to put it on!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve just done the Nerd Merit badges and I was thinking maybe something along that line. I don&amp;rsquo;t know quite how it would work, but every so often, I would just like the community to say that it&amp;rsquo;s time to give out another one of these awards somehow, and to decide who gets it. Like when Miyagawa released &lt;a href=&#34;http://cpanmin.us&#34;&gt;cpanminus&lt;/a&gt; it was such a ground-breaking thing, if everyone said &amp;ldquo;this person deserves an award&amp;rdquo;, and if we had some way to actually provide that award and show that we appreciate people for doing cools things, and it&amp;rsquo;s not just a pat on the back or a blog mention. It&amp;rsquo;s something tangible that they can show to their friends or whomever. I&amp;rsquo;ve thought about this for years, and I guess I should just do it, but I don&amp;rsquo;t quite know how it would work. We get so focused on algorithms, code and big ideas. But really it&amp;rsquo;s just people. The more that we can show our appreciation, the better we&amp;rsquo;ll feel, the nicer we&amp;rsquo;ll be to each other and the more we&amp;rsquo;ll be able to do together.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;[1]&lt;/sup&gt;Randal&amp;rsquo;s quote comes from &lt;a href=&#34;http://books.google.com/books?id=va1PSgaO4xIC&amp;amp;pg=PA3&amp;amp;lpg=PA3&amp;amp;dq=80%25+of+the+behavior+of+Perl+can+be+described+in+20%25+of+the+documentation&amp;amp;source=bl&amp;amp;ots=BOc7Eyc4YV&amp;amp;sig=ZEb4WZRk9eWvjk9j6PNhp_xgJOQ&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ei=rOcXU-mTFIyekAelkICoAQ&amp;amp;ved=0CCgQ6AEwAA#v=onepage&amp;amp;q=80%25%20of%20the%20behavior%20of%20Perl%20can%20be%20described%20in%2020%25%20of%20the%20documentation&amp;amp;f=false&#34;&gt;Learning Perl, Third Edition&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second edition of brian&amp;rsquo;s Mastering Perl is &lt;a href=&#34;http://www.amazon.com/gp/product/144939311X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=144939311X&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;available now&lt;/a&gt; (affiliate link).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2014</title>
      <link>https://dnmfarrell.github.io/article/74/2014/3/3/What-s-new-on-CPAN---February-2014/</link>
      <pubDate>Mon, 03 Mar 2014 04:10:36 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/74/2014/3/3/What-s-new-on-CPAN---February-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo; - a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Interact with AWS Simple Queue Services using: &lt;a href=&#34;https://metacpan.org/pod/AWS::SQS::Simple&#34;&gt;AWS::SQS::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dokuwiki::RPC::XML::Client&#34;&gt;Dokuwiki::RPC::XML::Client&lt;/a&gt; is a client for DokuWiki&lt;/li&gt;
&lt;li&gt;Access the CampBX bitcoin trading platform using &lt;a href=&#34;https://metacpan.org/pod/Finance::CampBX&#34;&gt;Finance::CampBX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;InfluxDB is a time series database, &lt;a href=&#34;https://metacpan.org/pod/InfluxDB&#34;&gt;InfluxDB&lt;/a&gt; provides a Perl API.&lt;/li&gt;
&lt;li&gt;Sync files between machines using using BitTorrent Sync and &lt;a href=&#34;https://metacpan.org/pod/Net::BitTorrentSync&#34;&gt;Net::BitTorrentSync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::ImKayac::Simple&#34;&gt;WebService::ImKayac::Simple&lt;/a&gt; is a message sender for im.kayac, the notification service&lt;/li&gt;
&lt;li&gt;Manage workflow jobs using &lt;a href=&#34;https://metacpan.org/pod/CA::WAAE&#34;&gt;CA::WAAE&lt;/a&gt; - an interface for CA&amp;rsquo;s Workflow Automation product&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Buid static web sites with &lt;a href=&#34;https://metacpan.org/pod/App::Dapper&#34;&gt;App::Dapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prettify JSON, YAML and Perl data and translate into other languages with &lt;a href=&#34;https://metacpan.org/pod/distribution/App-pretty/bin/pretty&#34;&gt;pretty&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bots:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Bots&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fly the Parrot AR.Drone using &lt;a href=&#34;https://metacpan.org/pod/UAV::Pilot::ARDrone&#34;&gt;UAV::Pilot::ARDrone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Gnuplot::Builder&#34;&gt;Gnuplot::Builder&lt;/a&gt; is an OO library for the gnuplot&lt;/li&gt;
&lt;li&gt;Share data efficiently between processes using &lt;a href=&#34;https://metacpan.org/pod/Hash::SharedMem&#34;&gt;Hash::SharedMem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Image::Quantize&#34;&gt;Image::Quantize&lt;/a&gt; will quantize image data into 256 or fewer colours&lt;/li&gt;
&lt;li&gt;Build JSON under memory constraints with &lt;a href=&#34;https://metacpan.org/pod/JSON::Builder&#34;&gt;JSON::Builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generate random Japanese names using &lt;a href=&#34;https://metacpan.org/pod/Mock::Person::JP&#34;&gt;Mock::Person::JP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;p&gt;Find all CPAN modules that reference a particular CPAN module with &lt;a href=&#34;https://metacpan.org/pod/CPAN::ReverseDependencies&#34;&gt;CPAN::ReverseDependencies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/warnings::MaybeFatal&#34;&gt;warnings::MaybeFatal&lt;/a&gt; will turn warnings FATAL at compile time only&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/IPC::PrettyPipe&#34;&gt;IPC::PrettyPipe&lt;/a&gt; facilitates debugging and execution piped commands.&lt;/p&gt;

&lt;p&gt;A whole host of new Dist::Zilla validation plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check for plugins performing actions outside of the appropriate phase with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::VerifyPhases&#34;&gt;Dist::Zilla::Plugin::VerifyPhases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::DiagINC&#34;&gt;Dist::Zilla::Plugin::Test::DiagINC&lt;/a&gt; helps you find the @INC dependencies for a specific test failure&lt;/li&gt;
&lt;li&gt;Check for clean namespaces: &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::CleanNamespaces&#34;&gt;Dist::Zilla::Plugin::Test::CleanNamespaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Breaks&#34;&gt;Dist::Zilla::Plugin::Breaks&lt;/a&gt; tracks breaking module versions as metadata and &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::CheckBreaks&#34;&gt;Dist::Zilla::Plugin::Test::CheckBreaks&lt;/a&gt; tests for breaks&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Obfuscate text in the style of the Zalgo meme: &lt;a href=&#34;https://metacpan.org/pod/Acme::Zalgo&#34;&gt;Acme::Zalgo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/SudokuTrainer&#34;&gt;SudokuTrainer&lt;/a&gt; helps detect successful Sudoku strategies&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;maths-science:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Maths &amp;amp; Science&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AI::FANN::Evolving&#34;&gt;AI::FANN::Evolving&lt;/a&gt; is an evolving artificial neural implementation class for the Fast Artificial Neural Network library.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;security:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Security&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Curve25519&#34;&gt;Crypt::Curve25519&lt;/a&gt; will generate a shared secret using an elliptic-curve Diffie-Hellman function, for message encryption.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Lucifer&#34;&gt;Crypt::Lucifer&lt;/a&gt; is an implementation of IBM&amp;rsquo;s Lucifer block cipher from the 1970s.&lt;/li&gt;
&lt;li&gt;Enable ScryptKDF in DBIx::Class with &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::EncodedColumn::Crypt::Scrypt&#34;&gt;DBIx::Class::EncodedColumn::Crypt::Scrypt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Testing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Cucumber::Tiny&#34;&gt;Test::Cucumber::Tiny&lt;/a&gt; is a lightweight, plaintext-driven testing framework&lt;/li&gt;
&lt;li&gt;Conveniently manage the state of DBIx::Class test data with &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::EasyFixture&#34;&gt;DBIx::Class::EasyFixture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::DiagINC&#34;&gt;Test::DiagINC&lt;/a&gt; will list all (deep) dependencies on test failure&lt;/li&gt;
&lt;li&gt;Create a temporary instance of MongoDb for testing with &lt;a href=&#34;https://metacpan.org/pod/Test::mongod&#34;&gt;Test::mongod&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Web&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/HTTP::Entity::Parser&#34;&gt;HTTP::Entity::Parser&lt;/a&gt; is a PSGI compliant HTTP entity parser&lt;/p&gt;

&lt;p&gt;Add a timeout and retry feature to HTTP::Tiny using &lt;a href=&#34;https://metacpan.org/pod/HTTP::Retry&#34;&gt;HTTP::Retry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make Catalyst user notification handling easier with &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::SimpleMessage&#34;&gt;Catalyst::Plugin::SimpleMessage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Session::Store::CHI&#34;&gt;Catalyst::Plugin::Session::Store::CHI&lt;/a&gt; let&amp;rsquo;s you use the &lt;a href=&#34;https://metacpan.org/pod/CHI&#34;&gt;CHI&lt;/a&gt; module as the session store.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::LightProfile&#34;&gt;Plack::Middleware::LightProfile&lt;/a&gt; is a simple profiler for Plack applications.&lt;/p&gt;

&lt;p&gt;Dump the Apache server scoreboard when full with &lt;a href=&#34;https://metacpan.org/pod/Apache2::ScoreboardDumper&#34;&gt;Apache2::ScoreboardDumper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New Mojolicious modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::FriendFeed&#34;&gt;Mojo::FriendFeed&lt;/a&gt; is a non blocking FriendFeed listener&lt;/li&gt;
&lt;li&gt;Run a generic TCP server with &lt;a href=&#34;https://metacpan.org/pod/Mojo::Server::TCP&#34;&gt;Mojo::Server::TCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Defer template rendering with &lt;a href=&#34;https://metacpan.org/pod/MojoX::Renderer::IncludeLater&#34;&gt;MojoX::Renderer::IncludeLater&lt;/a&gt; a template post-processor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::VHost&#34;&gt;Mojolicious::Plugin::VHost&lt;/a&gt; adds virtual hosts to Mojolicious&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F74%2F2014%2F3%2F3%2FWhat-s-new-on-CPAN-February-2014&amp;amp;text=What%27s+new+on+CPAN+-+February+2014&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F74%2F2014%2F3%2F3%2FWhat-s-new-on-CPAN-February-2014&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easy application dependency management with Stratopan</title>
      <link>https://dnmfarrell.github.io/article/71/2014/2/20/Easy-application-dependency-management-with-Stratopan/</link>
      <pubDate>Thu, 20 Feb 2014 03:55:29 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/71/2014/2/20/Easy-application-dependency-management-with-Stratopan/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Good Perl authors write modular code and leverage CPAN as much as possible. The downside of this approach is that Perl applications accumulate hundreds of CPAN module dependencies. Fortunately for Perl, Stratopan makes it simple to manage your application dependencies and quickly deploy it to new environments.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-many-dependencies:959cc4bffc976d00afbb89da2cc5599f&#34;&gt;How many dependencies?!&lt;/h3&gt;

&lt;p&gt;Perl application dependencies grow rapidly. This is because every time you import a module, you take on that module&amp;rsquo;s dependencies, and those of its imports and so on. The cover picture above shows the dependencies graph for the PerlTricks.com application; it&amp;rsquo;s 283 modules. That&amp;rsquo;s a lot of code to manage.&lt;/p&gt;

&lt;h3 id=&#34;manage-module-dependencies-with-stratopan:959cc4bffc976d00afbb89da2cc5599f&#34;&gt;Manage module dependencies with Stratopan&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://stratopan.com&#34;&gt;Stratopan&lt;/a&gt;, the cloud-based module hosting service, let&amp;rsquo;s you upload Perl modules to a personal repository in the cloud. On our &lt;a href=&#34;https://stratopan.com/sillymoose/webstuff/perltricks&#34;&gt;PerlTricks&lt;/a&gt; stack, we&amp;rsquo;ve uploaded the exact versions of all of the modules used in our production environment. Many of the modules are not up to date, but that doesn&amp;rsquo;t matter as these are the module versions that &lt;em&gt;work&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;rapid-deployment:959cc4bffc976d00afbb89da2cc5599f&#34;&gt;Rapid Deployment&lt;/h3&gt;

&lt;p&gt;Deploying this stack to a fresh environment couldn&amp;rsquo;t be easier. We can use &lt;a href=&#34;https://metacpan.org/pod/release/MIYAGAWA/App-cpanminus-1.7001/bin/cpanm&#34;&gt;cpanm&lt;/a&gt; to read our Makefile.PL and recursively install our application dependencies, using Stratopan as the source. In the terminal we navigate to the root application directory and enter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpanm -n --installdeps --mirror-only --mirror https://stratopan.com/sillymoose/WebStuff/perltricks .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s review this code: first we use cpanm&amp;rsquo;s &amp;ldquo;-n&amp;rdquo; switch to turn off module tests to install the modules super-fast. The &amp;ldquo;&amp;ndash;installdeps&amp;rdquo; switch makes cpanm look for application dependencies. The &amp;ldquo;mirror&amp;rdquo; switches instruct cpan to use our Stratopan stack as the install source. The trailing period indicates to search for dependencies in the current directory. This is the perfect marriage: Stratopan recursively pulled our module dependencies into our stack, and cpanm recursively installs all dependencies it finds. Even though our Makefile lists ~40 modules, cpanm ends up installing all 283.&lt;/p&gt;

&lt;p&gt;When we want to upgrade our modules we can do it in a controlled way by making a copy of our stack upgrading the modules for testing in a development environment, before upgrading production.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:959cc4bffc976d00afbb89da2cc5599f&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Without Stratopan and cpanm, deploying the PerlTricks application to a new server would be a lot more work. We&amp;rsquo;d either have to list and source the specific module versions and deploy them manually, or else install the newest versions of all of 283 dependencies and hope they still play nice with each other. Two of our dependences are no longer even on CPAN!&lt;/p&gt;

&lt;p&gt;Want to get started with Stratopan? Check out our &lt;a href=&#34;http://perltricks.com/article/48/2013/11/15/A-Stratopan-quick-start-user-guide&#34;&gt;quick start user guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F71%2F2014%2F2%2F20%2FEasy-application-dependency-management-with-Stratopan&amp;amp;text=Easy+application+dependency+management+with+Stratopan&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F71%2F2014%2F2%2F20%2FEasy-application-dependency-management-with-Stratopan&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

