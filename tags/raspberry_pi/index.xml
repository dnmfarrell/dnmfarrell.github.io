<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberry_pi on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/raspberry_pi/</link>
    <description>Recent content in Raspberry_pi on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Mar 2015 12:43:30 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/raspberry_pi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GPS and Perl</title>
      <link>http://perltricks.com/article/158/2015/3/10/GPS-and-Perl/</link>
      <pubDate>Tue, 10 Mar 2015 12:43:30 +0000</pubDate>
      
      <guid>http://perltricks.com/article/158/2015/3/10/GPS-and-Perl/</guid>
      <description>&lt;p&gt;Since the beginning of the human race, people have needed to know where they are. If you&amp;rsquo;re dragging a dead antelope back to the rest of the tribe, knowing where you are and where you&amp;rsquo;re going is very important. At some point, one of them must have said &amp;ldquo;I sure hope my ancestors put a bunch of satellites into orbit to make this easier&amp;rdquo;. That person probably should have focused on inventing the wheel, forging metal, and combining chocolate with peanut butter, but let&amp;rsquo;s face it: some of humanity&amp;rsquo;s best inventions came from people who tend to get ahead of themselves from time to time. Which means that today, we have just such a satellite system in orbit to help you get around.&lt;/p&gt;

&lt;p&gt;The Global Positioning System (GPS) was originally invented by the American Department of Defense to guide missiles onto targets. It was later opened to civilian use, and the nature of satellites means that you can pick up their signal from around the world. Not wanting to be tied to a system ultimately controlled by the US military, the European Union has been launching the Galileo system, and Russia has launched GLONASS. These systems are likewise available worldwide, and some receivers can pick up multiple types. Good thing, because sometimes GPS alone doesn&amp;rsquo;t give you the fix you need.&lt;/p&gt;

&lt;p&gt;GPS requires you to have a good signal from at least 4 satellites to pinpoint your location. GPS breakout boards often have a small antenna built into their PCB traces, but this won&amp;rsquo;t pick up much signal, especially indoors. The &lt;a href=&#34;https://www.adafruit.com/products/746&#34;&gt;Adafruit Ultimate GPS Breakout&lt;/a&gt; from Adafruit Industries has a trace antenna to get you started. It also has a u.FL plug on board, which can plug into most external antennas out there with a u.FL to SMA adapter.&lt;/p&gt;

&lt;p&gt;Most GPS modules attach using a simple serial connection. On older PCs, you could access them with the &lt;a href=&#34;https://en.wikipedia.org/wiki/RS-232&#34;&gt;RS232 port&lt;/a&gt;, but few modern computers come with them. A USB FTDI cable &lt;a href=&#34;http://www.ftdichip.com/Products/Cables/USBRS232.htm&#34;&gt;adapter&lt;/a&gt; can fix this.&lt;/p&gt;

&lt;p&gt;On the Raspberry Pi, there are a few pins on the GPIO header that can be used with serial devices. It&amp;rsquo;s accessible via &lt;code&gt;/dev/ttyAMA0&lt;/code&gt;. There&amp;rsquo;s a slight hiccup with this: the Pi uses this serial device for console output. This is handy if you wanted to run the Pi headless with no network, but it will get in the way of interfacing with our GPS device.&lt;/p&gt;

&lt;p&gt;To fix this, there are two files to edit. The first is &lt;code&gt;/etc/inittab&lt;/code&gt;, which contains an entry to attach &lt;code&gt;getty&lt;/code&gt; to the device:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comment this out by putting a &lt;code&gt;#&lt;/code&gt; at the start of the line.&lt;/p&gt;

&lt;p&gt;The second file is &lt;code&gt;/boot/cmdline.txt&lt;/code&gt;, which contains arguments that are passed to the Linux kernel at boot. This causes kernel boot messages to be passed to the device. It will look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dwc_otg.lpm_enable=0 console=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Delete any parameters that reference &lt;code&gt;ttyAMA0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that our Raspberry Pi is ready, connect up the GPS device. Note that you have to cross the receive and transmit lines. The GPS Tx line goes to the Pi&amp;rsquo;s Rx line, and vice versa.&lt;/p&gt;

&lt;p&gt;Once connected, you should be able to run &lt;code&gt;screen&lt;/code&gt; against the terminal (yes, you can use &lt;code&gt;screen&lt;/code&gt; against serial terminals):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen /dev/ttyAMA0 9600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should spit data at you that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$GPGGA,235119.315,,,,,0,00,,,M,,M,,*72
$GPGSA,A,1,,,,,,,,,,,,,,,*1E
$GPGSV,1,1,03,10,,,21,16,,,30,07,,,26*7F
$GPRMC,235119.315,V,,,,,0.00,0.00,060315,,,N*46
$GPVTG,0.00,T,,M,0.00,N,0.00,K,N*32
$GPGGA,235120.091,,,,,0,00,,,M,,M,,*77
$GPGSA,A,1,,,,,,,,,,,,,,,*1E
$GPRMC,235120.091,V,,,,,0.00,0.00,060315,,,N*43
$GPVTG,0.00,T,,M,0.00,N,0.00,K,N*32
$GPGGA,235120.310,,,,,0,00,,,M,,M,,*7D
$GPGSA,A,1,,,,,,,,,,,,,,,*1E
$GPRMC,235120.310,V,,,,,0.00,0.00,060315,,,N*49
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The data here is part of a standard under the &lt;a href=&#34;http://www.nmea.org/&#34;&gt;National Marine Electronics Association&lt;/a&gt; (NMEA). Most GPS receivers give data in this format. Notice all the commas? That indicates that the receiver doesn&amp;rsquo;t have a good fix yet, probably because I took them indoors. The receiver will always try to send data, even if it&amp;rsquo;s crummy data.&lt;/p&gt;

&lt;p&gt;This being Perl, there is already a CPAN module that knows how to parse that data: &lt;a href=&#34;https://metacpan.org/pod/GPS::NMEA&#34;&gt;GPS::NMEA&lt;/a&gt;. Here it is in action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use GPS::NMEA;
my $gps = GPS::NMEA-&amp;gt;new(
    Port =&amp;gt; &#39;/dev/ttyAMA0&#39;,
    Baud =&amp;gt; 9600,
);

while(1) {
    my($ns,$lat,$ew,$lon) = $gps-&amp;gt;get_position;
    # decimal portion is arcminutes, so convert to degrees
    $lat = int($lat) + ($lat - int($lat)) * 1.66666667;
    $lon = int($lon) + ($lon - int($lon)) * 1.66666667;

    say &amp;quot;($ns,$lat,$ew,$lon)&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will continuously print out the location data coming from the GPS receiver:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(N,43.052243,W,89.217520)
(N,43.052240,W,89.217519)
(N,43.052237,W,89.217518)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t know how people got around before GPS. Rather poorly, in all likelihood. I&amp;rsquo;m glad that Perl can help do it today.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; &lt;em&gt;Arcminutes to degrees conversion added. Thanks to Jonathan Coop for pointing this out. 2015-04-04&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Hackerspace Webcam</title>
      <link>http://perltricks.com/article/140/2014/12/15/A-Hackerspace-Webcam/</link>
      <pubDate>Mon, 15 Dec 2014 13:58:21 +0000</pubDate>
      
      <guid>http://perltricks.com/article/140/2014/12/15/A-Hackerspace-Webcam/</guid>
      <description>&lt;p&gt;Nearly every hackerspace has some kind of live camera on their website, and every one of them solves it in their own way. If you want to visit the shop, it&amp;rsquo;s nice to know if someone else is hanging around. At &lt;a href=&#34;http://thebodgery.org&#34;&gt;The Bodgery&lt;/a&gt;, it was decided to base one on a Raspberry Pi that would upload a picture every 30 seconds whenever an open switch is set. When a member opens the space, the switch activates one of the Pi&amp;rsquo;s &amp;ldquo;General Purpose Input/Output&amp;rdquo; (GPIO) pins, which causes the Pi to start taking pictures. When shut off, a default picture is thrown up, declaring us closed.&lt;/p&gt;

&lt;p&gt;The first task was to make a box. The Bodgery has a 50W laser cutter, so I started with a design created with &lt;a href=&#34;http://www.makercase.com/&#34;&gt;MakerCase&lt;/a&gt;. After measuring the Pi and putting in the dimensions, MakerCase created a box with &amp;ldquo;finger joints&amp;rdquo; (tabs that fit the edges together). Using &lt;a href=&#34;https://inkscape.org/en/&#34;&gt;Inkscape&lt;/a&gt; and some more measuring, a hole was made in the front panel for the Pi&amp;rsquo;s camera. Unfortunately, I didn&amp;rsquo;t take into account the length of the Pi&amp;rsquo;s SD card on one side and the WiFi adaptor on the other, so my original design was a little short. No matter-the backend of the case could be left open for this project.&lt;/p&gt;

&lt;p&gt;On the web server side, an account was created that had write access to a specific file. An ssh key was created and added to this account&amp;rsquo;s &lt;code&gt;~/.ssh/authroized_keys&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&#34;https://metacpan.org/pod/Device::WebIO::RaspberryPi&#34;&gt;Device::WebIO::RaspberryPi&lt;/a&gt;, you can query the status of GPIO pins, and also get a filehandle for reading the picture from the camera. The camera is implemented using &amp;ldquo;&lt;a href=&#34;https://github.com/thaytan/gst-rpicamsrc&#34;&gt;rpicamsrc&lt;/a&gt;&amp;rdquo;, a plugin for &lt;a href=&#34;http://gstreamer.freedesktop.org/&#34;&gt;GStreamer&lt;/a&gt; that accesses the Raspberry Pi&amp;rsquo;s camera module directly - which is great, because my previous attempts at getting the data using GStreamer&amp;rsquo;s &lt;code&gt;v4lsrc&lt;/code&gt; or other methods usually ended in frustration.&lt;/p&gt;

&lt;p&gt;The basic boilerplate sets up pin 17 as input, and then sets the image width, height, and JPEG quality (between 0 and 100, higher is better quality, but larger file size).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $rpi = Device::WebIO::RaspberryPi-&amp;gt;new;
$rpi-&amp;gt;set_as_input( 17 );
$rpi-&amp;gt;img_set_width( 0, 800 );
$rpi-&amp;gt;img_set_height( 0, 600 );
$rpi-&amp;gt;img_set_quality( 0, 70 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is to have something that polls the input pin on a regular basis (once a second will do). There are many ways to do this, and I choose an &lt;a href=&#34;https://metacpan.org/pod/AnyEvent&#34;&gt;AnyEvent&lt;/a&gt; timer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $condvar = AnyEvent-&amp;gt;condvar;
my $input_timer; $input_timer = AnyEvent-&amp;gt;timer(
    after    =&amp;gt; 1,
    interval =&amp;gt; 1,
    cb       =&amp;gt; sub {
        $INPUT = $rpi-&amp;gt;input_pin( 17 );
        $input_timer;
    },
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sets an global var &lt;code&gt;$INPUT&lt;/code&gt;. That gets picked up by another timer, which takes the picture and uploads when &lt;code&gt;$INPUT&lt;/code&gt; is set. In a more sophisticated program, I&amp;rsquo;d probably have this activate another timer directly for sending a picture. For such a simple program though, I&amp;rsquo;m not too worried about it.&lt;/p&gt;

&lt;p&gt;The method &lt;code&gt;img_stream()&lt;/code&gt; will return a filehandle for reading the image:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $fh = $rpi-&amp;gt;img_stream( 0, &#39;image/jpeg&#39; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The method takes a channel number for the camera (if you have one camera, you have one channel) and a desired MIME type. The &lt;code&gt;img_allowed_content_types()&lt;/code&gt; method will return a list of supported MIME types. On Device::WebIO::RaspberryPi, only &lt;code&gt;image/jpeg&lt;/code&gt; is currently supported.&lt;/p&gt;

&lt;p&gt;Once you have the filehandle, use &lt;code&gt;scp&lt;/code&gt; to upload it. A simple but crude method is to create a temporary file (with &lt;a href=&#34;https://metacpan.org/pod/File::Temp&#34;&gt;File::Temp&lt;/a&gt;) and then call &lt;code&gt;scp&lt;/code&gt; as an external program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::Temp &#39;tempdir&#39;;
my ($tmp_fh, $tmp_filename) = tempfile();

# Write to a temporary file
my $buffer = &#39;&#39;;
while( read( $fh, $buffer, 4096 ) ) {
    print $tmp_fh $buffer;
}
close $tmp_fh;
close $fh;

# Upload to server using scp
my @scp_command = (
    &#39;scp&#39;,
    &#39;-i&#39;, PRIVATE_KEY_FILE,
    $tmp_filename,
    SERVER_USERNAME . &#39;@&#39; . SERVER_HOST . &#39;:&#39; . SERVER_UPLOAD_PATH,
);
say &amp;quot;Executing: @scp_command&amp;quot; if DEBUG;
(system( @scp_command ) == 0)
    or warn &amp;quot;Could not exec &#39;@scp_command&#39;: $!\n&amp;quot;;

# Delete temp file
unlink $tmp_filename;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::SCP&#34;&gt;Net::SCP&lt;/a&gt; is another way of going about this, although that just wraps the external command like is done above.&lt;/p&gt;

&lt;p&gt;As an exercise to the reader, create a &lt;code&gt;tmpfs&lt;/code&gt; (RAM disk) on your Raspberry Pi and have the temp file written there. 10MB should be enough. &lt;code&gt;File::Temp::tempfile()&lt;/code&gt; can be passed a &lt;code&gt;DIR&lt;/code&gt; parameter to write a file there. This avoids writing to the SD card, which is both slow and tends to wear it out prematurely.&lt;/p&gt;

&lt;p&gt;The complete code is on &lt;a href=&#34;https://github.com/frezik/bodgery_cam&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN August 2014</title>
      <link>http://perltricks.com/article/113/2014/9/2/What-s-new-on-CPAN-August-2014/</link>
      <pubDate>Tue, 02 Sep 2014 12:36:04 +0000</pubDate>
      
      <guid>http://perltricks.com/article/113/2014/9/2/What-s-new-on-CPAN-August-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:016881304416e0728ee41cc2195a3924&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Appium&#34;&gt;Appium&lt;/a&gt; provides the Perl bindings for the open source mobile testing framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Stripe::Simple&#34;&gt;Net::Stripe::Simple&lt;/a&gt; is a lightweight interface to Stripe&amp;rsquo;s API&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::MorphIO&#34;&gt;WebService::MorphIO&lt;/a&gt; is an API for morph.io &amp;ldquo;the heroku for web scrapers&amp;rdquo;&lt;/li&gt;
&lt;li&gt;New music APIs: &lt;a href=&#34;https://metacpan.org/pod/WebService::Bandcamp&#34;&gt;WebService::Bandcamp&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/WebService::MusixMatch&#34;&gt;WebService::MusixMatch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:016881304416e0728ee41cc2195a3924&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Looking for book deals? &lt;a href=&#34;https://metacpan.org/pod/App::BarnesNoble::WishListMinder&#34;&gt;App::BarnesNoble::WishListMinder&lt;/a&gt; monitors a wishlist of books for price changes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::CPANRepo&#34;&gt;App::CPANRepo&lt;/a&gt; is handy utility that returns the source URL of a given module name&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::mirai&#34;&gt;App::mirai&lt;/a&gt; is an impressive-looking debugger for future programming&lt;/li&gt;
&lt;li&gt;The Unix &lt;code&gt;which&lt;/code&gt; program returns only one matching binary. Enter &lt;a href=&#34;https://metacpan.org/pod/App::multiwhich&#34;&gt;App::multiwhich&lt;/a&gt; which helpfully returns all matching binaries for a given search (edit: the author has &lt;a href=&#34;http://blog.nu42.com/2014/08/filewhich-comes-with-its-own-multiwhich.html&#34;&gt;blogged&lt;/a&gt; recommending &lt;a href=&#34;https://metacpan.org/pod/File::Which&#34;&gt;File::Which&lt;/a&gt; instead)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;async-concurrency:016881304416e0728ee41cc2195a3924&#34;&gt;Async &amp;amp; Concurrency&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Event::Distributor&#34;&gt;Event::Distributor&lt;/a&gt; implements an in-process (synchronous) pub / sub model - it&amp;rsquo;s early days but looks interesting&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Future&#34;&gt;AnyEvent::Future&lt;/a&gt; provides a future object for concurrent programming with the popular AnyEvent module&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:016881304416e0728ee41cc2195a3924&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bloom::Scalable&#34;&gt;Bloom::Scalable&lt;/a&gt; is a scalable bloom filter implementation - a probabilistic dataset that saves space&lt;/li&gt;
&lt;li&gt;Search complex Perl data structures with &lt;a href=&#34;https://metacpan.org/pod/Data::Seek&#34;&gt;Data::Seek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Working with non UTC datetimes? &lt;a href=&#34;https://metacpan.org/pod/DateTimeX::Period&#34;&gt;DateTimeX::Period&lt;/a&gt; provides a safe cross-timezone implementation of DateTime methods&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Variable::Disposition&#34;&gt;Variable::Disposition&lt;/a&gt; helps you forcibly dispose of variables&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-system-administration:016881304416e0728ee41cc2195a3924&#34;&gt;Config &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IOD&#34;&gt;IOD&lt;/a&gt; (&amp;ldquo;INI On Drugs&amp;rdquo;) is a new configuration file format inspired by INI&lt;/li&gt;
&lt;li&gt;Alternatively you prefer to use Perl hashrefs as config files with &lt;a href=&#34;https://metacpan.org/pod/Config::FromHash&#34;&gt;Config::FromHash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For a bare-bones fork interface, have a look at &lt;a href=&#34;https://metacpan.org/pod/IPC::Open2::Simple&#34;&gt;IPC::Open2::Simple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:016881304416e0728ee41cc2195a3924&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Happy CPAN day! &lt;a href=&#34;https://metacpan.org/pod/Acme::Cake&#34;&gt;Acme::Cake&lt;/a&gt; returns a jpeg of a CPAN cake&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Games::FrogJump&#34;&gt;Games::FrogJump&lt;/a&gt; is a cool ASCII terminal game. A bit primitive but it shows what&amp;rsquo;s possible&lt;/li&gt;
&lt;li&gt;On the other hand, &lt;a href=&#34;https://metacpan.org/pod/Games::Hangman&#34;&gt;Games::Hangman&lt;/a&gt;is incredibly addictive and feature complete&lt;/li&gt;
&lt;li&gt;If you need a list of English proverbs and phrases check out &lt;a href=&#34;https://metacpan.org/pod/Games::Word::Phraselist::Proverb::TWW&#34;&gt;Games::Word::Phraselist::Proverb::TWW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware:016881304416e0728ee41cc2195a3924&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Big developments on the hardware front: &lt;a href=&#34;https://metacpan.org/pod/Device::WebIO&#34;&gt;Device::WebIO&lt;/a&gt; provides a standardized interface for hardware devices including Arduino, PCDuino and Raspberry Pi&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::BusPirate&#34;&gt;Device::BusPirate&lt;/a&gt; provides an interface for the Bus Pirate hardware electronics debugging device&lt;/li&gt;
&lt;li&gt;How cool is this: &lt;a href=&#34;https://metacpan.org/pod/Device::Gembird&#34;&gt;Device::Gembird&lt;/a&gt; let&amp;rsquo;s you control the voltage on a Gembird surge protection device with Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international:016881304416e0728ee41cc2195a3924&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::Security&#34;&gt;Unicode::Security&lt;/a&gt; provides interesting features including a function to determine if two Unicode strings are visually confusable&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::Block&#34;&gt;Unicode::Block&lt;/a&gt; enables you to take a character and iterate through the entire block of Unicode characters to which it belongs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;object-oriented:016881304416e0728ee41cc2195a3924&#34;&gt;Object Oriented&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/distribution/Gloom/lib/Gloom.pod&#34;&gt;Gloom&lt;/a&gt; is a dependency-free new OO library released a couple of months back&lt;/li&gt;
&lt;li&gt;Anonymous objects are an intriguing idea: &lt;a href=&#34;https://metacpan.org/pod/Object::Anon&#34;&gt;Object::Anon&lt;/a&gt; is an embryonic implementation, the author is looking for feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing-exceptions:016881304416e0728ee41cc2195a3924&#34;&gt;Testing &amp;amp; Exceptions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Conveniently get the test coverage results of a CPAN distribution with &lt;a href=&#34;https://metacpan.org/pod/CPAN::Cover::Results&#34;&gt;CPAN::Cover::Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Configure your Pod coverage testing with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::Pod::Coverage::Configurable&#34;&gt;Test::Pod::Coverage::Configurable&lt;/a&gt; a new Dist::Zilla plugin&lt;/li&gt;
&lt;li&gt;Throw structured exception objects with the cleverly-named &lt;a href=&#34;https://metacpan.org/pod/Throw::Back&#34;&gt;Throw::Back&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Update: reference to App::multiwhich updated following correspondence from the author. 2014-09-05&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

