<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Catalyst on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/catalyst/</link>
    <description>Recent content in Catalyst on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Mar 2016 09:21:32 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/catalyst/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - February 2016</title>
      <link>http://perltricks.com/article/what-s-new-on-cpan---february-2016/</link>
      <pubDate>Fri, 04 Mar 2016 09:21:32 +0000</pubDate>
      
      <guid>http://perltricks.com/article/what-s-new-on-cpan---february-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps:9cdca6c2ebff6e87c5498bacb548c29d&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/wp_tools&#34;&gt;App::WordPressTools&lt;/a&gt; provides tools to backup and upgrade WordPress installations.&lt;/li&gt;
&lt;li&gt;Manage AMQP connections with &lt;a href=&#34;https://metacpan.org/pod/Net::AMQP::ConnectionMgr&#34;&gt;Net::AMQP::ConnectionMgr&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Walmart&#34;&gt;WebService::Walmart&lt;/a&gt; Interface to Walmart&amp;rsquo;s open API.&lt;/li&gt;
&lt;li&gt;Get a Perly interface to the Microsoft Translator with &lt;a href=&#34;https://metacpan.org/pod/Lingua::Translator::Microsoft&#34;&gt;Lingua::Translator::Microsoft&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Start interacting with Ticketmaster&amp;rsquo;s APIs using &lt;a href=&#34;https://metacpan.org/pod/Ticketmaster::API&#34;&gt;Ticketmaster::API&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:9cdca6c2ebff6e87c5498bacb548c29d&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/CPAN::Mirror::Tiny&#34;&gt;CPAN::Mirror::Tiny&lt;/a&gt; can create local CPAN mirrors, with no XS dependencies.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::GELF::Util&#34;&gt;Log::GELF::Util&lt;/a&gt; provides utility functions for Graylog&amp;rsquo;s GELF format.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:9cdca6c2ebff6e87c5498bacb548c29d&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Stream data scattered across files by datetime using &lt;a href=&#34;https://metacpan.org/pod/CSV::HistoryPlayer&#34;&gt;CSV::HistoryPlayer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::BatchUpdate&#34;&gt;DBIx::Class::BatchUpdate&lt;/a&gt; can update DBIx results in batches, minimizing the number of queries executed.&lt;/li&gt;
&lt;li&gt;Run asynchronous queries on Postgres with AnyEvent and Promises with &lt;a href=&#34;https://metacpan.org/pod/DBIx::Poggy&#34;&gt;DBIx::Poggy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HTML::MyHTML&#34;&gt;HTML::MyHTML&lt;/a&gt; is a superfast, threaded, C based HTML parser.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Image::Similar&#34;&gt;Image::Similar&lt;/a&gt; measures how similar two images are.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Regexp::Parsertron&#34;&gt;Regexp::Parsertron&lt;/a&gt; parses Perl regular expressions into trees.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control:9cdca6c2ebff6e87c5498bacb548c29d&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Export::Attrs&#34;&gt;Export::Attrs&lt;/a&gt; provides Perl 6&amp;rsquo;s &lt;code&gt;is export(...)&lt;/code&gt; trait as a Perl 5 attribute.&lt;/li&gt;
&lt;li&gt;Get functions to compare Git::Version objects using &lt;a href=&#34;https://metacpan.org/pod/Git::Version::Compare&#34;&gt;Git::Version::Compare&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Parse::Diagnostics&#34;&gt;Parse::Diagnostics&lt;/a&gt; can extract diagnostic messages from Perl source code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Perlmazing&#34;&gt;Perlmazing&lt;/a&gt; - a bundle of lazily-loaded helper functions based on Perlmazing::Engine.&lt;/li&gt;
&lt;li&gt;GitHub inspired Perl module, run experiments with &lt;a href=&#34;https://metacpan.org/pod/Scientist&#34;&gt;Scientist&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Want to test a module against every installed version of Perl? &lt;a href=&#34;https://metacpan.org/pod/Test::BrewBuild&#34;&gt;Test::BrewBuild&lt;/a&gt; builds on perlbrew/berrybrew to do that for Windows Unix-based systems.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Mock::Time&#34;&gt;Test::Mock::Time&lt;/a&gt; create deterministic time &amp;amp; timers for testing. Particularly apt as February 29&lt;sup&gt;th&lt;/sup&gt; just passed.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test2::AsyncSubtest&#34;&gt;Test2::AsyncSubtest&lt;/a&gt; execute subtests asynchronously.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics:9cdca6c2ebff6e87c5498bacb548c29d&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Astro::Constants&#34;&gt;Astro::Constants&lt;/a&gt; a collection of Astronomy constants.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Compress::Huffman&#34;&gt;Compress::Huffman&lt;/a&gt; can huffman-encode a symbol table.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Music::Voss&#34;&gt;Music::Voss&lt;/a&gt; provides functions for fractal noise generation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:9cdca6c2ebff6e87c5498bacb548c29d&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Remotely control Google Chrome from Perl with &lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Chromi&#34;&gt;AnyEvent::Chromi&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Get an alternative syntax for describing Catalyst routes with &lt;a href=&#34;https://metacpan.org/pod/Catalyst::ControllerRole::At&#34;&gt;Catalyst::ControllerRole::At&lt;/a&gt;. This is big.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Getopt::Long::CGI&#34;&gt;Getopt::Long::CGI&lt;/a&gt; is a cool idea: execute CGI scripts just like passing arguments to a command line program.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Time::Progress::Stored&#34;&gt;Time::Progress::Stored&lt;/a&gt; is a progress bar implementation with an web apps.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - June 2015</title>
      <link>http://perltricks.com/article/181/2015/7/9/What-s-new-on-CPAN---June-2015/</link>
      <pubDate>Thu, 09 Jul 2015 13:17:10 +0000</pubDate>
      
      <guid>http://perltricks.com/article/181/2015/7/9/What-s-new-on-CPAN---June-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Class::Storage&#34;&gt;Class::Storage&lt;/a&gt; is a module for serializing blessed references (objects). Once serialized, an object can be transmitted via JSON, XML, YAML or saved in a data store. Serializing objects can also make IPC easier: coroutines, threads and other processes can pass text but blessed references are often an issue.&lt;/p&gt;

&lt;p&gt;Module author Peter Valdemar MÃ¸rch has pulled together excellent documentation. A welcome addition to CPAN, check out the acknowledgements &lt;a href=&#34;https://metacpan.org/pod/Class::Storage#ACKNOWLEDGEMENTS&#34;&gt;section&lt;/a&gt; for some interesting background on the module. For an alternative approach, you might be interested in &lt;a href=&#34;https://metacpan.org/pod/Object::Serializer&#34;&gt;Object::Serializer&lt;/a&gt;. For non-readable serializers, checkout &lt;a href=&#34;https://metacpan.org/pod/Storable&#34;&gt;Storable&lt;/a&gt; and the newer and faster &lt;a href=&#34;https://metacpan.org/pod/Sereal&#34;&gt;Sereal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; - when working with object serializers like Class::Storage, only deserialize trusted data, as malicious code can be injected into the data, and when the data is deserialized, the code will be executed automatically. See for example this bug &lt;a href=&#34;https://rt.cpan.org/Public/Bug/Display.html?id=105772&#34;&gt;report&lt;/a&gt; (&lt;em&gt;Thanks to Reini Urban for the reminder&lt;/em&gt;).&lt;/p&gt;

&lt;h3 id=&#34;apis-apps:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::Zendesk&#34;&gt;API::Zendesk&lt;/a&gt; provides a Perl interface for the customer support app&lt;/li&gt;
&lt;li&gt;Painlessly install libsvm, the support vector machine library using &lt;a href=&#34;https://metacpan.org/pod/Alien::LIBSVM&#34;&gt;Alien::LIBSVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use Slack? Of course you do. Check out &lt;a href=&#34;https://metacpan.org/pod/AnyEvent::SlackRTM&#34;&gt;AnyEvent::SlackRTM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Develop your first Slack bot with &lt;a href=&#34;https://metacpan.org/pod/Bot::Backbone::Service::SlackChat&#34;&gt;Bot::Backbone::Service::SlackChat&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Interchange::Search::Solr&#34;&gt;Interchange::Search::Solr&lt;/a&gt; let&amp;rsquo;s you use Solr search with Perl&lt;/li&gt;
&lt;li&gt;Be popular, send your co-workers Bonusly with &lt;a href=&#34;https://metacpan.org/pod/WebService::Bonusly&#34;&gt;WebService::Bonusly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebDriver::Tiny&#34;&gt;WebDriver::Tiny&lt;/a&gt; is an all-new implementation of a Selenium webdriver API for Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::App&#34;&gt;Config::App&lt;/a&gt; implements &amp;ldquo;cascading configurations&amp;rdquo; - looks like a convenient way to have context-specific configurations without resorting to Perl code&lt;/li&gt;
&lt;li&gt;Quickly rind files on your Mac using &lt;a href=&#34;https://metacpan.org/pod/Mac::FindFile&#34;&gt;Mac::FindFile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Perl::Critic::Freenode&#34;&gt;Perl::Critic::Freenode&lt;/a&gt; is a compilation of policies recommended by the folks on the #perl channel on freenode IRC&lt;/li&gt;
&lt;li&gt;Include ditaa diagrams in pod with &lt;a href=&#34;https://metacpan.org/pod/Pod::Weaver::Plugin::Ditaa&#34;&gt;Pod::Weaver::Plugin::Ditaa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract data from your Zoom 5341J cable modem with &lt;a href=&#34;https://metacpan.org/pod/Device::CableModem::Zoom5341J&#34;&gt;Device::CableModem::Zoom5341J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::Dispatch::HipChat&#34;&gt;Log::Dispatch::HipChat&lt;/a&gt; will send your log messages to HipChat&lt;/li&gt;
&lt;li&gt;Moving averages are easy to implement, and easy to get wrong. The next time you need one, consider &lt;a href=&#34;https://metacpan.org/pod/Math::SMA&#34;&gt;Math::SMA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re working with 35mm film and DX codes, you might like &lt;a href=&#34;https://metacpan.org/pod/Photography::DX&#34;&gt;Photography::DX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-version-control:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Development and Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When stuck in Git merge conflict hell, sometimes it&amp;rsquo;s easier to say &amp;ldquo;I&amp;rsquo;m right&amp;rdquo;. &lt;a href=&#34;https://metacpan.org/pod/App::Git::Workflow::Command::Take&#34;&gt;App::Git::Workflow::Command::Take&lt;/a&gt; let&amp;rsquo;s you tell Git to merge your changes. You win!&lt;/li&gt;
&lt;li&gt;If you have a load of Git repos that you&amp;rsquo;d like to execute a command against, you might like &lt;a href=&#34;https://metacpan.org/pod/App::Multigit&#34;&gt;App::Multigit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Assert::Conditional&#34;&gt;Assert::Conditional&lt;/a&gt; from Tom Christiansen let&amp;rsquo;s you conditionally compile assertions into your Perl programs, ala C&amp;rsquo;s assert.h. Wow&lt;/li&gt;
&lt;li&gt;Daemonize &lt;em&gt;anything&lt;/em&gt; with &lt;a href=&#34;https://metacpan.org/pod/JIP::Daemon&#34;&gt;JIP::Daemon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;text-language:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Text &amp;amp; Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::Unicodify&#34;&gt;Acme::Unicodify&lt;/a&gt; can convert ASCII text into Unicode-esque characters&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::RS14_PP&#34;&gt;Crypt::RS14_PP&lt;/a&gt; is a pure Perl implementation of the RS14 encryption algorithm&lt;/li&gt;
&lt;li&gt;Convert HTML into FreeStyleWiki markup using &lt;a href=&#34;https://metacpan.org/pod/HTML::WikiConverter::FreeStyleWiki&#34;&gt;HTML::WikiConverter::FreeStyleWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Awesome! detect the language with &lt;a href=&#34;https://metacpan.org/pod/Lingua::Identify::CLD2&#34;&gt;Lingua::Identify::CLD2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Hogan&#34;&gt;Text::Hogan&lt;/a&gt; is a Perl clone of hogan.js, the JavaScript template engine. Supports pre-compilation!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-and-mathematics:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Science and Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Algorithm::BloomFilter&#34;&gt;Algorithm::BloomFilter&lt;/a&gt; is a simple, superfast bloom filter implementation written in XS&lt;/li&gt;
&lt;li&gt;Not a new module, but it is new to CPAN, &lt;a href=&#34;https://metacpan.org/pod/App::Chart&#34;&gt;App::Chart&lt;/a&gt; the visual charting library is useful&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/BioX::Workflow&#34;&gt;BioX::Workflow&lt;/a&gt; is an &amp;ldquo;opinionated template based workflow writer&amp;rdquo;, hailing from the Bioinformatics World, but not just for BioX&lt;/li&gt;
&lt;li&gt;The Longest Common Subsequence algorithm is used for diffing text, among other uses. &lt;a href=&#34;https://metacpan.org/pod/LCS::XS&#34;&gt;LCS::XS&lt;/a&gt; is a supercharged version, written in XS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract all of the supported URLs from your Catalyst app using &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::ActionPaths&#34;&gt;Catalyst::Plugin::ActionPaths&lt;/a&gt; (disclosure, I&amp;rsquo;m the module author)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Piwik&#34;&gt;Dancer::Plugin::Piwik&lt;/a&gt; helps you integrate Pwik analytics with a Dancer app&lt;/li&gt;
&lt;li&gt;Use MongoDB with Minion, the job queue application using &lt;a href=&#34;https://metacpan.org/pod/Minion::Backend::MongoDB&#34;&gt;Minion::Backend::MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::Reactor::UV&#34;&gt;Mojo::Reactor::UV&lt;/a&gt; let&amp;rsquo;s you use the C library, libuv as the backend event loop for your Mojo application&lt;/li&gt;
&lt;li&gt;Rapidly expand shortened URLs with &lt;a href=&#34;https://metacpan.org/pod/WWW::Expand::More&#34;&gt;WWW::Expand::More&lt;/a&gt;. Cool!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Updated to include other example serializer modules and deserialization warning - 2015-07-09&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - January 2015</title>
      <link>http://perltricks.com/article/149/2015/2/6/What-s-new-on-CPAN---January-2015/</link>
      <pubDate>Fri, 06 Feb 2015 13:34:40 +0000</pubDate>
      
      <guid>http://perltricks.com/article/149/2015/2/6/What-s-new-on-CPAN---January-2015/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. This year we&amp;rsquo;re running a new feature: &amp;ldquo;module of the month&amp;rdquo;, where we highlight our favorite new CPAN upload. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/FFI::Platypus&#34;&gt;FFI::Platypus&lt;/a&gt; enables Perl to call foreign language functions (e.g. Python, C, Rust) using libffi. Unlike using XS, no knowledge of C is required. The module not only works great but has comprehensive documentation and is under active development.&lt;/p&gt;

&lt;p&gt;Module author Graham Ollis has also &lt;a href=&#34;http://blogs.perl.org/users/graham_ollis/2015/01/practical-ffi-with-platypus.html&#34;&gt;blogged&lt;/a&gt; about it. FFI::Platypus is hosted on &lt;a href=&#34;https://github.com/plicease/FFI-Platypus&#34;&gt;GitHub&lt;/a&gt;, check it out!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easily share files over HTTP with &lt;a href=&#34;https://metacpan.org/pod/charon&#34;&gt;charon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::PerlXLock&#34;&gt;App::PerlXLock&lt;/a&gt; will lock the screen when run. Requires X11&lt;/li&gt;
&lt;li&gt;Need to serve a directory over HTTP? Check out &lt;a href=&#34;https://metacpan.org/pod/App::SimpleHTTPServer&#34;&gt;App::SimpleHTTPServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::SpeedTest%20&#34;&gt;App::SpeedTest&lt;/a&gt;is cool command line utility for testing connection speeds&lt;/li&gt;
&lt;li&gt;It comes with warnings but &lt;a href=&#34;https://metacpan.org/pod/Google::Tasks&#34;&gt;Google::Tasks&lt;/a&gt; looks like a useful API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MetaCPAN::Helper&#34;&gt;MetaCPAN::Helper&lt;/a&gt; provides some high-level sugar for searching MetaCPAN&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Shell::Tools&#34;&gt;Shell::Tools&lt;/a&gt; imports an arsenal of convenient modules for scripting&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::RemoteCommand&#34;&gt;App::RemoteCommand&lt;/a&gt; execute commands on remote servers - very nice.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HTML::Differences&#34;&gt;HTML::Differences&lt;/a&gt; provides &amp;ldquo;reasonably sane&amp;rdquo; HTML diffs&lt;/li&gt;
&lt;li&gt;Compare database structures using &lt;a href=&#34;https://metacpan.org/pod/DBIx::Diff::Schema&#34;&gt;DBIx::Diff::Schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Fake&#34;&gt;Data::Fake&lt;/a&gt; is a data generator module with a functional interface&lt;/li&gt;
&lt;li&gt;Read and update complex data structures easily using &lt;a href=&#34;https://metacpan.org/pod/Data::Focus&#34;&gt;Data::Focus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Phash::FFI&#34;&gt;Phash::FFI&lt;/a&gt; is an interface for an external library that hashes media files to test for similarity&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-interop:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;Development and Interop&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FFI::Me&#34;&gt;FFI::Me&lt;/a&gt; is provides some sugar over FFI::Raw that lets you call foreign language (e.g. C, Python, Ruby) library functions&lt;/li&gt;
&lt;li&gt;Generate a simple-but-sensible module readme with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Readme::Brief&#34;&gt;Dist::Zilla::Plugin::Readme::Brief&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Object::Properties&#34;&gt;Object::Properties&lt;/a&gt; is another class library, similar to Object::Tiny with some additional features&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/ARGV::Struct&#34;&gt;ARGV::Struct&lt;/a&gt; parses complex command line arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing-debugging:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;Testing &amp;amp; Debugging&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Carp::Capture&#34;&gt;Carp::Capture&lt;/a&gt; stores stack traces for later inspection.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::TidyAll&#34;&gt;Dist::Zilla::Plugin::Test::TidyAll&lt;/a&gt; will test your distribution code is tidy before letting you publish it&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A couple of new Catalyst modules; &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Session::Store::Cookie&#34;&gt;Catalyst::Plugin::Session::Store::Cookie&lt;/a&gt; does what it says, and &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::ResponseFrom&#34;&gt;Catalyst::Plugin::ResponseFrom&lt;/a&gt; which allows the request and capture of responses from external URLs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FCGI::Buffer&#34;&gt;FCGI::Buffer&lt;/a&gt; provides a validator and cache for FCGI output&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Just how much heavier is Catalyst than Dancer2?</title>
      <link>http://perltricks.com/article/85/2014/5/5/Just-how-much-heavier-is-Catalyst-than-Dancer2-/</link>
      <pubDate>Mon, 05 May 2014 12:29:09 +0000</pubDate>
      
      <guid>http://perltricks.com/article/85/2014/5/5/Just-how-much-heavier-is-Catalyst-than-Dancer2-/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Within the Perl community it is received wisdom that Catalyst is a heavyweight web framework with many dependencies and that Dancer2 is a micro web framework that&amp;rsquo;s more agile than a Cirque du Soleil acrobat. But is it true?&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;tech-specs:e19552eba592fbca5a97d9be32189ba0&#34;&gt;Tech Specs&lt;/h3&gt;

&lt;p&gt;The comparison was between &lt;a href=&#34;https://metacpan.org/pod/release/JJNAPIORK/Catalyst-Runtime-5.90062/lib/Catalyst/Runtime.pm&#34;&gt;Catalyst 5.90062&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/release/XSAWYERX/Dancer2-0.140000&#34;&gt;Dancer2 0.14&lt;/a&gt;. For local tests the machine used was a 2011 MacBook Air running Fedora 19 and Perl 5.16.3.&lt;/p&gt;

&lt;h3 id=&#34;number-of-dependencies:e19552eba592fbca5a97d9be32189ba0&#34;&gt;Number of Dependencies&lt;/h3&gt;

&lt;p&gt;The greatest perceived difference between Catalyst and Dancer2 is the number of dependencies each has, with Catalyst being thought to have &amp;ldquo;too many&amp;rdquo;. For example at the recent German Perl workshop, Dancer2 development lead Sawyer X &lt;a href=&#34;http://www.youtube.com/watch?v=91xDp_Eus5c&amp;amp;t=12m09s&#34;&gt;joked&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We&amp;rsquo;re not pulling off half of CPAN like maybe a different web framework [Catalyst]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To compare the two frameworks, we need to compare all of their dependencies; not just those first-order dependencies used by the framework, but also those used by the modules used by the framework and so on. Fortunately this is an easy comparison to make using &lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created two stacks, one for &lt;a href=&#34;https://stratopan.com/sillymoose/WebStuff/Catalyst/graphs&#34;&gt;Catalyst&lt;/a&gt; and one for &lt;a href=&#34;https://stratopan.com/sillymoose/WebStuff/Dancer2/graphs&#34;&gt;Dancer2&lt;/a&gt;. Their respective dependency graphs are shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/85/catalyst%20dependencies.png&#34; title=&#34;Stratopan Catalyst stack&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/85/catalyst%20dependencies_small.png&#34; alt=&#34;Catalyst framework&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;http://perltricks.com/static/images/85/dancer2%20dependencies.png&#34; title=&#34;Stratopan Dancer2 stack&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/85/dancer2%20dependencies_small.png&#34; alt=&#34;Dancer2 framework&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tabulating the Stratopan data for the two stacks we get:&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Framework&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Direct Dependencies&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Recursive Dependencies&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Catalyst&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;44&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;114&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Dancer2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;29&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Stratopan reveals that while Catalyst required 15 more modules than Dancer2 (+52%), when considering recursive dependencies, the Catalyst stack is only 19% larger than the Dancer2 stack. Interestingly, over 61% of the 96 distributions Dancer2 uses are used by Catalyst.&lt;/p&gt;

&lt;h3 id=&#34;testing:e19552eba592fbca5a97d9be32189ba0&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;When installing a CPAN module, the module tests usually take the longest time of the installation process and can contribute to the perceived &amp;ldquo;size&amp;rdquo; of the module. As the maturer framework, perhaps Catalyst simply has more tests than Dancer2, and therefore it&amp;rsquo;s installation process takes longer?&lt;/p&gt;

&lt;p&gt;To check for this, I tested both frameworks installation tests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl Makefile.PL
$ make
$ make test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Catalyst&amp;rsquo;s test results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Files=166, Tests=3374, 179 wallclock secs ( 0.85 usr  0.16 sys + 172.95 cusr  4.56 csys = 178.52 CPU)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dancer2&amp;rsquo;s results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Files=78, Tests=1112, 21 wallclock secs ( 0.38 usr  0.07 sys + 19.68 cusr  1.46 csys = 21.59 CPU)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These results show that Catalyst ran 3,374 tests over 3 minutes compared to Dancer2&amp;rsquo;s 1,112 tests over 21 seconds. So while Catalyst did run more tests, it was also slower in executing them; Dancer2 executed 53 tests per second and Catalyst managed 19 tests per second.&lt;/p&gt;

&lt;p&gt;What would explain this discrepancy? Perhaps Dancer2 has more trivial tests that run quicker than Catalyst&amp;rsquo;s tests. As a control I checked the code coverage of each framework&amp;rsquo;s test suite using &lt;a href=&#34;https://metacpan.org/pod/Devel::Cover&#34;&gt;Devel::Cover&lt;/a&gt;. Dancer2&amp;rsquo;s total test coverage was 84.7% whilst Catalyst&amp;rsquo;s was 85.5% - a negligible difference.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:e19552eba592fbca5a97d9be32189ba0&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So is Catalyst&amp;rsquo;s &amp;ldquo;heavyweight&amp;rdquo; reputation deserved? Whilst it does not have a significantly greater number of dependencies than Dancer2, during installation Dancer2&amp;rsquo;s test suite runs far faster than Catalyst&amp;rsquo;s and with a similar code coverage. This doesn&amp;rsquo;t mean Dancer2&amp;rsquo;s test suite is better than Catalyst&amp;rsquo;s (Catalyst&amp;rsquo;s test suite could have higher cyclomatic complexity). But it does show that Dancer2&amp;rsquo;s simpler micro-framework approach offers benefits beyond fast startups and application development time. As a Catalyst user, I&amp;rsquo;ve found Catalyst to be plenty fast for my needs (like PerlTricks.com), however its startup time is noticeably slow and during installation tests the Catalyst test application is started and stopped multiple times. I expect that contributes more to discrepancy in installation times between Dancer2 and Catalyst than anything else.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F85%2F2014%2F5%2F5%2FJust-how-much-heavier-is-Catalyst-than-Dancer2-&amp;amp;text=Just+how+much+heavier+is+Catalyst+than+Dancer2%3F&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F85%2F2014%2F5%2F5%2FJust-how-much-heavier-is-Catalyst-than-Dancer2-&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is your login page secure?</title>
      <link>http://perltricks.com/article/84/2014/4/28/Is-your-login-page-secure-/</link>
      <pubDate>Mon, 28 Apr 2014 03:14:13 +0000</pubDate>
      
      <guid>http://perltricks.com/article/84/2014/4/28/Is-your-login-page-secure-/</guid>
      <description>

&lt;p&gt;How many criteria do you think there are for a web application to securely login its users? &lt;a href=&#34;http://www.amazon.com/gp/product/1118026470/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1118026470&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;The Web Application Hacker&amp;rsquo;s Handbook&lt;/a&gt; (affiliate link) lists 5:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prevent information leaks&lt;/li&gt;
&lt;li&gt;Handle credentials secretively&lt;/li&gt;
&lt;li&gt;Validate credentials properly&lt;/li&gt;
&lt;li&gt;Prevent brute-force attacks&lt;/li&gt;
&lt;li&gt;Log, monitor and notify&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So there are 5 criteria, but how you do implement them? I&amp;rsquo;ve created a &lt;a href=&#34;https://github.com/sillymoose/SecApp_login&#34;&gt;new web application&lt;/a&gt; called &amp;ldquo;SecApp&amp;rdquo; using Perl&amp;rsquo;s Catalyst web framework that attempts to satisfy these criteria - we&amp;rsquo;ll step through each one and you can judge for yourself if it does.&lt;/p&gt;

&lt;h3 id=&#34;how-to-setup-the-app:ba4c9275de3995b673588b08da4e28c2&#34;&gt;How to setup the app&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;d like to download the app and follow along you can, but this step is optional. You&amp;rsquo;re going to need at least Perl 5.14.4 and a git installed. To download the app from our github page, just open up the command line and enter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ git clone https://github.com/sillymoose/SecApp_login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s no way around it; this app has a lot of dependencies. To ease the burden, start by installing &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanminus&lt;/a&gt; at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan App::cpanminus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I prefer to use cpanminus when installing lots of modules: it&amp;rsquo;s less of a memory hog than cpan, outputs less line noise by default, and has the useful &amp;ldquo;&amp;ndash;notest&amp;rdquo; option if you want to install modules without testing them (and save a lot of time). Now change into the newly cloned app directory, and use cpanminus to install the app&amp;rsquo;s dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cd SecApp_login
$ cpanm --installdeps .
--&amp;gt; Working on .
Configuring SecApp-0.01 ... OK
&amp;lt;== Installed dependencies for .. Finishing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;&amp;ndash;installdeps&amp;rdquo; switch instructs cpanminus to search the current directory for dependencies. All of of the app&amp;rsquo;s dependencies are listed in Makefile.PL, so cpanminus finds those and begins installing all of the Perl modules that the app requires but your system does not have installed. If you&amp;rsquo;re working with a fresh install of Perl, this can take up to an hour or so, so go make a cup of coffee or something else whilst the installs happen.&lt;/p&gt;

&lt;p&gt;Once all the modules are installed, test run the application with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ TESTING=1 script/secapp_server.pl 
HTTP::Server::PSGI: Accepting connections at http://0:3000/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open your browsers and navigate to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;. You see this simple welcome message:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/84/secapp_welcome.png&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/84/secapp_welcome_600.png&#34; alt=&#34;secapp&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you visit &lt;a href=&#34;http://localhost/login&#34;&gt;http://localhost/login&lt;/a&gt;, it should load the login page:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/84/secapp_login.png&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/84/secapp_login_600.png&#34; alt=&#34;secapp&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the username &amp;ldquo;test_user_01&amp;rdquo; and &amp;ldquo;Hfa *-Â£(&amp;amp;&amp;amp;%HBbWqpV%&amp;rdquo;_=asd&amp;rdquo; you should be able to login.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/84/secapp_login_credentials.png&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/84/secapp_login_credentials_600.png&#34; alt=&#34;secapp&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A successful login will display a simple message and logout link:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/84/secapp_landing.png&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/84/secapp_landing_600.png&#34; alt=&#34;secapp&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-prevent-information-leaks:ba4c9275de3995b673588b08da4e28c2&#34;&gt;1. Prevent information leaks&lt;/h3&gt;

&lt;p&gt;Information leaks give would-be attackers clues that undermine the login security. One way they do this is by giving information about the software running the web application (which may have known weaknesses).&lt;/p&gt;

&lt;p&gt;In SecApp I&amp;rsquo;ve turned off the typical Catalyst information leaks. In the root application file &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/lib/SecApp.pm&#34;&gt;SecApp.pm&lt;/a&gt; the &amp;ldquo;-Debug&amp;rdquo; plugin has been removed, which prints a full stack trace in the case of an error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Catalyst qw/
    Static::Simple
    Authentication
    Session
    Session::Store::File
    Session::State::Cookie
/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Further down the same file, the &amp;ldquo;X-Catalyst&amp;rdquo; HTTP header has been disabled by modifying the package configuration. This stops the header from being inserted to every response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Disable X-Catalyst header
enable_catalyst_header =&amp;gt; 0,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two changes stop the application from informing users the underlying application framework and language. Now they won&amp;rsquo;t know if they&amp;rsquo;re dealing with a Ruby, Python or Perl application!&lt;/p&gt;

&lt;p&gt;The other type of information leak we need to prevent is indicating logical vulnerabilities by responding differently to similar requests. For example, by responding to login attempts with incorrect usernames with the error message &amp;ldquo;incorrect username&amp;rdquo;, attackers can brute-force attack the username until they receive the message &amp;ldquo;incorrect password&amp;rdquo;, at which point they know they have guessed a correct username.&lt;/p&gt;

&lt;p&gt;In SecApp, we want to respond with a generic message every time the login attempt fails, and not indicate which field was incorrect. The login function is implemented in our &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L42&#34;&gt;Root.pm&lt;/a&gt; controller - we&amp;rsquo;ll look at the code later, but for now you can see that there is only one error message returned.&lt;/p&gt;

&lt;h3 id=&#34;2-handle-credentials-secretively:ba4c9275de3995b673588b08da4e28c2&#34;&gt;2. Handle credentials secretively&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.amazon.com/gp/product/1118026470/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1118026470&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;The Web Application Hacker&amp;rsquo;s Handbook&lt;/a&gt; summarizes this as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All credentials should be created, stored, and transmitted in a manner that does not lead to unauthorized disclosure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In SecApp &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L11&#34;&gt;Root.pm&lt;/a&gt;, we use Catalyst&amp;rsquo;s auto Controller function to check that every request is over SSL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# this method will be called everytime
sub auto :Private {
    my ($self, $c) = @_;

    # 404 unless https/testing &amp;amp; request method is GET/HEAD/POST
    unless( ( $c-&amp;gt;req-&amp;gt;secure or $c-&amp;gt;config-&amp;gt;{testing} == 1 )
            &amp;amp;&amp;amp; grep /^(?:GET|HEAD|POST)$/, $c-&amp;gt;req-&amp;gt;method )
        {
            $c-&amp;gt;detach(&#39;default&#39;);
        }
    ...
    return 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The method &amp;ldquo;$c-&amp;gt;req-&amp;gt;secure&amp;rdquo; will return true if the connection is via SSL. If it isn&amp;rsquo;t we detach the request to the &amp;ldquo;default&amp;rdquo; method, which returns a 404 request error. The clause &amp;ldquo;or $c-&amp;gt;config-&amp;gt;{testing} == 1&amp;rdquo; is so that when testing the application we can try out the functions without needing SSL, as Catalyst&amp;rsquo;s test server does not support it.&lt;/p&gt;

&lt;p&gt;Now it could be irritating for users who try to load the login page and get a 404 error. So using Catalyst&amp;rsquo;s end method, we also set the Strict-Transport-Security HTTP header which instructs browsers to load all pages via https. This is the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub end : ActionClass(&#39;RenderView&#39;) {
  my ($self, $c) = @_;

  # don&#39;t require TLS for testing
  unless ($c-&amp;gt;config-&amp;gt;{testing} == 1) {
    $c-&amp;gt;response-&amp;gt;header(&#39;Strict-Transport-Security&#39; =&amp;gt; &#39;max-age=3600&#39;);
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SecApp sets several other security headers in the &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L90&#34;&gt;end method&lt;/a&gt;, you can read about what they do &lt;a href=&#34;http://perltricks.com/article/81/2014/3/31/Perl-web-application-security-HTTP-headers&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SecApp only authenticates login requests received via POST. We achieve this by using Catalyst&amp;rsquo;s chained dispatching and HTTP method matching:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub login :Chained(&#39;/&#39;) PathPart(&#39;login&#39;) CaptureArgs(0) {}

sub login_auth :Chained(&#39;login&#39;) PathPart(&#39;&#39;) Args(0) POST {
    # authentication code
    ...

    # authentication failed, load the login form
    $c-&amp;gt;forward(&#39;login_form&#39;);
}

sub login_form :Chained(&#39;login&#39;) PathPart(&#39;&#39;) Args(0) GET {
    my ($self, $c) = @_;

    # load the login template
    $c-&amp;gt;stash(template =&amp;gt; &#39;login.tt&#39;);
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L42&#34;&gt;code&lt;/a&gt; has been abbreviated here for clarity. But effectively the &amp;ldquo;login_auth&amp;rdquo; subroutine will only fire if the request to &amp;ldquo;/login&amp;rdquo; was made via POST, else just load the login page with the &amp;ldquo;login_form&amp;rdquo; sub. Cool right? Catalyst project manager John Napiorkowski mused on these features in an illustrative &lt;a href=&#34;http://jjnapiorkowski.typepad.com/modern-perl/2013/08/thoughts-on-catalyst-soa-and-web-services.html#.U11rEjnXvqg&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, SecApp stores the passwords in an hashed format, using a relatively strong algorithm (bcrypt). The following code in &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/lib/SecApp/Schema/Result/User.pm#L130&#34;&gt;User.pm&lt;/a&gt; adds the functionality:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;__PACKAGE__-&amp;gt;add_columns(
            &#39;password&#39; =&amp;gt; {
                passphrase =&amp;gt; &#39;rfc2307&#39;,
                passphrase_class =&amp;gt; &#39;BlowfishCrypt&#39;,
                passphrase_args =&amp;gt; {
                    cost =&amp;gt; 14,
                    salt_random =&amp;gt; 20,
                },
                passphrase_check_method =&amp;gt; &#39;check_password&#39;,
            });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So even if attackers obtained the application password file, the passwords are salted and hashed and not easily broken. SecApp comes with a sample SQLite3 test database with one test user account already created.&lt;/p&gt;

&lt;h3 id=&#34;3-validate-credentials-properly:ba4c9275de3995b673588b08da4e28c2&#34;&gt;3. Validate credentials properly&lt;/h3&gt;

&lt;p&gt;The code that validates credentials can also contain weaknesses. Passwords should be validated in full, without modification or truncation and in a case-sensitive comparison. Multi-stage login processes are particularly susceptible to attacks. The login code should be peer-reviewed and substantially tested for errors.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Authentication&#34;&gt;Catalyst::Plugin::Authentication&lt;/a&gt; module makes authentication easy. SecApp keeps the login process simple: just a username and password form, with an optional CAPTCHA. Here is the full login code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub login_auth :Chained(&#39;login&#39;) PathPart(&#39;&#39;) Args(0) POST {
  my ($self, $c) = @_;
  my $captcha_response 
    = $c-&amp;gt;request-&amp;gt;params-&amp;gt;{recaptcha_response_field};
  my $captcha_challenge 
    = $c-&amp;gt;request-&amp;gt;params-&amp;gt;{recaptcha_challenge_field};

  # proceed if config has switched off CAPTCHA, or if the submission is valid, proceed
  if ($c-&amp;gt;config-&amp;gt;{Captcha}-&amp;gt;{enabled} == 0
      || Captcha::reCAPTCHA-&amp;gt;new-&amp;gt;check_answer(
                   $c-&amp;gt;config-&amp;gt;{Captcha}-&amp;gt;{private_key},
                   $c-&amp;gt;request-&amp;gt;address,
                   $captcha_challenge,
                   $captcha_response)-&amp;gt;{is_valid})
  {
    $username = $c-&amp;gt;req-&amp;gt;params-&amp;gt;{username};
    my $password = $c-&amp;gt;req-&amp;gt;params-&amp;gt;{password};

    # if username and passwords were supplied, authenticate
    if ($username &amp;amp;&amp;amp; $password) {
      if ($c-&amp;gt;authenticate({ username =&amp;gt; $username,
                             password =&amp;gt; $password } ))
      {
      # authentication success, check user active and redirect to the secure landing page
        if ($c-&amp;gt;user-&amp;gt;get_object-&amp;gt;active) {
          $c-&amp;gt;response-&amp;gt;redirect($c-&amp;gt;uri_for($c-&amp;gt;controller(&#39;Admin&#39;)-&amp;gt;action_for(&#39;landing&#39;)));
          return;
        }
      }
      else {
        $c-&amp;gt;stash(error_msg =&amp;gt; &amp;quot;Bad username or password.&amp;quot;);
      }
    }
  }
  $c-&amp;gt;forward(&#39;login_form&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s walk through the code. If the CAPTCHA functionality is enabled, the login function will attempt to validate the CAPTCHA. If successful, the code then retrieves the username and password, and if they exist, attempts to validate them using the authenticate method. The authenticate method checks both username and password in full against the database. If the username and password are validated, then the user will be re-directed to the landing page which is in the secure Admin.pm controller. Else an error message will set indicating a bad username or password. In all failing cases, the login form will be reloaded and displayed.&lt;/p&gt;

&lt;p&gt;So the code looks good, but how do we know if it will do the right thing in all cases? Fortunately &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Test&#34;&gt;Catalyst::Test&lt;/a&gt; can make unit testing an application&amp;rsquo;s methods easy. SecApp has the test file &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/t/Root.t&#34;&gt;Root.t&lt;/a&gt; which tests the login function with many different combinations of credentials, such as null, zero-length string, correct username incorrect password etc. Running these tests makes it easy to confirm that the login function does the right thing. Want to check for yourself? At the command line run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ TESTING=1 perl -Ilib t/Root.t
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-prevent-brute-force-attacks:ba4c9275de3995b673588b08da4e28c2&#34;&gt;4. Prevent brute-force attacks&lt;/h3&gt;

&lt;p&gt;Brute force attacks are attempts to crack the username and password of an account by repeatedly trying different combinations until one succeeds. SecApp uses &lt;a href=&#34;https://metacpan.org/pod/Captcha::reCAPTCHA&#34;&gt;Captcha::reCAPTCHA&lt;/a&gt; to prevent automated brute force attacks. You&amp;rsquo;ll need a Google account and web domain to sign up for it (it&amp;rsquo;s free). The difficulty of the captcha puzzles presented are very difficult to reliably pass with automation. If you do have a Google &lt;a href=&#34;https://www.google.com/recaptcha/intro/index.html&#34;&gt;reCAPtCHA account&lt;/a&gt;, you can try it out with SecApp by updating &lt;a href=&#34;https://github.com/sillymoose/SecApp_login/blob/master/lib/SecApp.pm#L54&#34;&gt;SecApp.pm&lt;/a&gt; with your account credentials.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/84/secapp_login_catpcha.png&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/84/secapp_login_catpcha_600.png&#34; alt=&#34;secapp&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seeing as brute-force attacks can only succeed if they can try millions of attempts, why not just add a time-delay like &amp;ldquo;sleep(2)&amp;rdquo; to the login function? The problem with that defence is that it opens the web application up to another attack-vector: denial of service. If an attacker can issue several requests every 2 seconds to the login function, it may tie up all of the application&amp;rsquo;s processes and stop it from responding to regular web requests. Not good!&lt;/p&gt;

&lt;p&gt;Using CAPTCHA combined with front-end proxy web server request and connection limiting methods that can largely eliminate the brute-force risk.&lt;/p&gt;

&lt;h3 id=&#34;5-log-monitor-and-notify:ba4c9275de3995b673588b08da4e28c2&#34;&gt;5. Log, monitor and notify&lt;/h3&gt;

&lt;p&gt;Catalyst comes with built-in logging capabilities. If you&amp;rsquo;re using Catalyst::Plugin::Authentication, any failed login attempt automatically logs a critical error. So the good news is if you&amp;rsquo;re using a web server like nginx, Catalyst will write the critical error to the server error log (this is a simplification). SecApp does not implement any monitoring or notification services, but I think this is more the domain of the server and not the web application. It&amp;rsquo;s trivial to configure &lt;a href=&#34;http://www.fail2ban.org/wiki/index.php/Main_Page&#34;&gt;fail2ban&lt;/a&gt; to monitor the error.log and jail any suspicious repeat login attempts.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:ba4c9275de3995b673588b08da4e28c2&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Is the SecApp login function secure? One thing to consider is that although it utilizes many good practices, user registration and password reset is not implemented. These features must be secure too, else they can undermine the login security altogether, for example by allowing weak passwords to be set. We&amp;rsquo;ll consider these areas of authentication in a future article. In the meantime, SecApp is released under the Artistic 2.0 license, feel free to use it.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F84%2F2014%2F4%2F28%2FIs-your-login-page-secure-&amp;amp;text=Is+your+login+page+secure%3F&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F84%2F2014%2F4%2F28%2FIs-your-login-page-secure-&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;Updated:&lt;/strong&gt; corrected hashing algorithm name and description 04/28/2014*&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/&#34;&gt;Â©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/motograf/1269439152/in/photolist-2Wbd2W-9VxeqP-8v6WhC-8v3ToK-8v6W4h-fcDhWQ-6boP72-LNv8s-4pkUnM-aj6wD3-4rL1UA-9Ziy7V-jP5Sc-51f4ck-4ppX9S-dWGQed-dWGuMs-dQRyD-b9SUT-9cBRYL-5UB8BE-8BFgnW-6boNpR-6bsWUQ-6bsX9C-FXJTL-8AuQei-8AuRVc-8AuSzH-6gA6Lx-8v5M9x-91rH7R-dWsFmy-ZQRR-jP6a9-4HKkvg-4HPzk1-5eWG8T-8v8Q6d-8v8Q7N-4HKmZ6-kJrvqx-fcp9cZ-4rsdJ3-aFebHa-4HPALy-7HrEuY-6Pk9RC-hX3MVF-7xoEF6&#34;&gt;motograf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl web application security - HTTP headers</title>
      <link>http://perltricks.com/article/81/2014/3/31/Perl-web-application-security---HTTP-headers/</link>
      <pubDate>Mon, 31 Mar 2014 12:27:39 +0000</pubDate>
      
      <guid>http://perltricks.com/article/81/2014/3/31/Perl-web-application-security---HTTP-headers/</guid>
      <description>

&lt;p&gt;&lt;em&gt;HTTP headers are included in every HTTP response from a web server. Setting the appropriate HTTP headers can reduce the risk of man-in-the-middle and cross-site-scripting attacks on a web application. You can also reduce information leaks about the web application configuration - vital data that gives a would-be attacker clues about potential vulnerabilities. Read on to find out how to set the appropriate headers in your Perl web application.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;application:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Application&lt;/h3&gt;

&lt;p&gt;All three of major Perl web frameworks provide some kind of identifying header. Dancer and Mojolicious use &amp;ldquo;X-Powered-By&amp;rdquo; and Catalyst uses &amp;ldquo;X-Catalyst&amp;rdquo;. The problem with this header is it informs the requester the language of the application (Perl) and the web framework being used. In some cases it also reveals the version number. With this information a would-be attacker can focus on exploits that are specific to Perl or the web framework. Here&amp;rsquo;s how you can disable it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By default Catalyst does not turn on its application header. The header is controlled by the &amp;ldquo;enable_catalyst_header&amp;rdquo; config option, normally located in the root application class (e.g. lib/MyApp.pm) or the application config file.&lt;/li&gt;
&lt;li&gt;Mojolicious does not set this header since &lt;a href=&#34;https://github.com/kraih/mojo/blob/b5da0c7afcdd793c85e8e2a67eb29f7f36bdb601/Changes#L538&#34;&gt;version 4.00&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dancer (and Dancer2) use the &lt;a href=&#34;http://search.cpan.org/~xsawyerx/Dancer2-0.11/lib/Dancer2/Config.pod#server_tokens_%28boolean%29&#34;&gt;server tokens&lt;/a&gt; directive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;server:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;Web servers often broadcast information about themselves by default. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Server: nginx/1.4.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is risky for the same reason that revealing information about the underlying Perl web application is. To disable the server header in nginx, just add this line to your nginx.conf or virtual host file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;server_tokens off;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Apache 1.3x add these lines to your virtual host file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;ServerTokens Prod
ServerSignature Off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Apache 2.x, these lines will load the mod_headers module, and remove the server header:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;LoadModule headers_module /usr/lib/apache/modules/mod_headers.so
Header unset Server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the major Perl web frameworks ship with web servers that set the server header:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
Server: HTTP::Server::PSGI

# mojolicious
Server: Mojolicious (Perl)

# Dancer
Server: Perl Dancer 1.3121
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These headers can be overwritten within the application code. For instance, if we wanted to change the server to appear to be nginx:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;Server&#39; =&amp;gt; &#39;nginx&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;Server&#39; =&amp;gt; &#39;nginx&#39;);

# Dancer / Dancer2
header &#39;Server&#39; =&amp;gt; &#39;nginx&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;x-frame-options:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;X-Frame-Options&lt;/h3&gt;

&lt;p&gt;This header can prevent your application responses from being loaded within frame or iframe HTML elements (see the &lt;a href=&#34;http://tools.ietf.org/html/rfc7034&#34;&gt;spec&lt;/a&gt;). This is to prevent clickjacking requests where your application response is displayed on another website, within an invisible iframe, which then hijacks the user&amp;rsquo;s request when they click a link on your website. Here&amp;rsquo;s how to disable it in the respective web frameworks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-Frame-Options&#39; =&amp;gt; &#39;DENY&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-Frame-Options&#39; =&amp;gt; &#39;DENY&#39;);

# Dancer / Dancer2
header &#39;X-Frame-Options&#39; =&amp;gt; &#39;DENY&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;strict-transport-security:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Strict-Transport-Security&lt;/h3&gt;

&lt;p&gt;This header instructs the requester to load all content from the domain via HTTPS and not load any content unless there is a valid ssl certificate. This header can help prevent man-in-middle attacks as it ensures that all HTTP requests and responses are encrypted. The Strict-Transport-Security header has a max-age parameter that defines how long in seconds to enforce the policy for. Here&amp;rsquo;s how to add it to your Perl web application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;Strict-Transport-Security&#39; =&amp;gt; &#39;max-age=3600&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;Strict-Transport-Security&#39; =&amp;gt; &#39;max-age=3600&#39;);

# Dancer / Dancer2
header &#39;Strict-Transport-Security&#39; =&amp;gt; &#39;max-age=3600&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;content-security-policy:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Content-Security-Policy&lt;/h3&gt;

&lt;p&gt;The CSP header sets a whitelist of domains from which content can be safely loaded. This prevents most types of XSS attack, assuming the malicious content is not hosted by a whitelisted domain. For example this line specifies that all content should only be loaded from the responding domain:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;X-Content-Security-Policy: default-src &#39;self&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is &lt;a href=&#34;http://www.html5rocks.com/en/tutorials/security/content-security-policy%0A&#34;&gt;a lot to CSP&lt;/a&gt; (&lt;a href=&#34;http://www.w3.org/TR/CSP/&#34;&gt;spec&lt;/a&gt;) and browser support is &lt;a href=&#34;http://caniuse.com/#feat=contentsecuritypolicy&#34;&gt;fairly good&lt;/a&gt;. One downside to the whitelist approach is it&amp;rsquo;s not compatible with ad services like Google&amp;rsquo;s adsense as you won&amp;rsquo;t know the domains in advance in order to whitelist them. To set the header in your facourite Perl web application, use on of these lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-Content-Security-Policy&#39; =&amp;gt; &amp;quot;default-src &#39;self&#39;&amp;quot;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-Content-Security-Policy&#39; =&amp;gt; &amp;quot;default-src &#39;self&#39;&amp;quot;);

# Dancer / Dancer2
header &#39;X-Content-Security-Policy&#39; =&amp;gt; &amp;quot;default-src &#39;self&#39;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;x-content-type-options:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;X-Content-Type-Options&lt;/h3&gt;

&lt;p&gt;This is an IE only header that is used to disable mime sniffing. The vulnerability is that IE will auto-execute any script code contained in a file when IE attempts to detect the file type. This is disabled by default in IE anyway, but to enforce it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-Content-Type-Options&#39; =&amp;gt; &#39;nosniff&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-Content-Type-Options&#39; =&amp;gt; &#39;nosniff&#39;);

# Dancer / Dancer2
header &#39;X-Content-Type-Options&#39; =&amp;gt; &#39;nosniff&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;x-download-options:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;X-Download-Options&lt;/h3&gt;

&lt;p&gt;This is another IE-only header that prevents IE from opening an HTML file directly on download from a website. The security issue here is, if a browser opens the file directly, it can run as if it were part of the site. To add this header, use one of these lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-Download-Options&#39; =&amp;gt; &#39;noopen&#39;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-Download-Options&#39; =&amp;gt; &#39;noopen&#39;);

# Dancer / Dancer2
header &#39;X-Download-Options&#39; =&amp;gt; &#39;noopen&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;x-xss-protection:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;X-XSS-Protection&lt;/h3&gt;

&lt;p&gt;This is the final IE-only header. It was introduced in IE8 as part of the cross-site-scripting (XSS) filter functionality (more &lt;a href=&#34;http://blogs.msdn.com/b/ieinternals/archive/2011/01/31/controlling-the-internet-explorer-xss-filter-with-the-x-xss-protection-http-header.aspx&#34;&gt;here&lt;/a&gt;). The header can force IE to turn on its XSS filter. Additionally it has an optional setting called &amp;ldquo;mode&amp;rdquo; that can force IE to block the entire page if an XSS attempt is detected. Here&amp;rsquo;s how to add it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Catalyst
$c-&amp;gt;response-&amp;gt;header(&#39;X-XSS-Protection&#39; =&amp;gt; &amp;quot;1; &#39;mode=block&#39;&amp;quot;);

# Mojolicious
$self-&amp;gt;res-&amp;gt;headers-&amp;gt;header(&#39;X-XSS-Protection&#39; =&amp;gt; &amp;quot;1; &#39;mode=block&#39;&amp;quot;);

# Dancer / Dancer2
header &#39;X-XSS-Protection&#39; =&amp;gt; &amp;quot;1; &#39;mode=block&#39;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adding-headers-in-the-web-server:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Adding headers in the web server&lt;/h3&gt;

&lt;p&gt;You may prefer to add these headers in the web server configuration, rather than at the application level. For nginx, use the &amp;ldquo;add_header&amp;rdquo; directive - see &lt;a href=&#34;https://gist.github.com/plentz/6737338&#34;&gt;here&lt;/a&gt; for a good example. For Apache use the &amp;ldquo;Header set&amp;rdquo; directive in mod_headers (&lt;a href=&#34;http://moko.ru/doc/apache/mod/mod_headers.html&#34;&gt;1.3&lt;/a&gt;, &lt;a href=&#34;http://httpd.apache.org/docs/2.0/de/mod/mod_headers.html&#34;&gt;2.x&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;testing-the-headers:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Testing the headers&lt;/h3&gt;

&lt;p&gt;tThere are a number of ways to check which headers your application is returning. Firstly you can use curl (replace perltricks.com with the URL to check):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;curl -I perltricks.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return the HTTP headers only:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;HTTP/1.1 200 OK
Server: nginx
Date: Mon, 31 Mar 2014 01:54:59 GMT
Content-Type: text/html; charset=utf-8
Connection: keep-alive
Cache-Control: max-age=3600
X-Frame-Options: DENY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use &lt;a href=&#34;https://securityheaders.com/&#34;&gt;SecurityHeaders.com&amp;rsquo;s&lt;/a&gt; excellent checking tool. Or you can inspect the headers yourself by using your browser&amp;rsquo;s developer mode.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:87bd3c5b42cb426b55681d8c1ff3ca2c&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;These HTTP headers are easy to add and can make a reduce your application&amp;rsquo;s vulnerability to XSS and man-in-the-middle attacks, particularly for applications that allow users to upload content.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F81%2F2014%2F3%2F31%2FPerl-web-application-security-HTTP-headers&amp;amp;text=Perl+web+application+security+-+HTTP+headers&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F81%2F2014%2F3%2F31%2FPerl-web-application-security-HTTP-headers&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover photo Â© &lt;a href=&#34;http://www.flickr.com/photos/rightee/259084010/in/photostream/&#34;&gt;Andy Wright&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updates: Mojolicious application header corrected. Web frameworks server header added. (31/3/2014)&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple web framework FastCGI caching with nginx - part 1</title>
      <link>http://perltricks.com/article/76/2014/3/11/Simple-web-framework-FastCGI-caching-with-nginx---part-1/</link>
      <pubDate>Tue, 11 Mar 2014 03:18:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/76/2014/3/11/Simple-web-framework-FastCGI-caching-with-nginx---part-1/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Fastcgi server caching is a wonderful technique for improving response times and reducing load on a web application. In part 1 of this series we look at how to cache responses with Catalyst, Dancer and Mojolocious and how to clear the cache on-demand when using the nginx web server. Before you know it, your web application will be faster than a racing llama!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;fastcgi-server-caching-explained:8c253a4acb451f68f821b231698a79ac&#34;&gt;FastCGI server caching explained&lt;/h3&gt;

&lt;p&gt;FastCGI server caching is when the FastCGI application sets a caching header in its response to an upstream server. The &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.3&#34;&gt;max-age header&lt;/a&gt; defines in seconds from the time of the request how long to cache the response message for. If it&amp;rsquo;s correctly configured, the upstream server will cache the response, and for the duration of the max-age value, return the cached response to all requests to the same URL. As a bonus the max-age header can be passed back to the requester, and it will be cached in their browser as well.&lt;/p&gt;

&lt;p&gt;FastCGI server caching brings the following benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cut response times by as much as 95%.&lt;/li&gt;
&lt;li&gt;Reduce load on the the FastCGI application (imagine 1 request per hour per URL).&lt;/li&gt;
&lt;li&gt;Reduce load on the the web server with browser caching.&lt;/li&gt;
&lt;li&gt;Avoid corrupt memory risks of simultaneous read/write when caching responses in the FastCGI application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;how-to-cache-your-catalyst-mojolicious-dancer-response:8c253a4acb451f68f821b231698a79ac&#34;&gt;How to cache your Catalyst / Mojolicious / Dancer response&lt;/h3&gt;

&lt;p&gt;All of the major Perl frameworks support server caching and the good news is it&amp;rsquo;s easy to implement. For example, if $seconds is number of seconds to cache the response for, in Catalyst add this line to a controller method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$c-&amp;gt;response-&amp;gt;header(&#39;Cache-Control&#39; =&amp;gt; &amp;quot;max-age=$seconds&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Mojolicious, add this code to your controller action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$self-&amp;gt;res-&amp;gt;headers-&amp;gt;cache_control(&#39;max-age=$seconds&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for Dancer, update a route with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;header &#39;max-age&#39; =&amp;gt; &#39;$seconds&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-setup-nginx-fastcgi-caching:8c253a4acb451f68f821b231698a79ac&#34;&gt;How to setup nginx FastCGI caching&lt;/h3&gt;

&lt;p&gt;To enable nginx caching, add the fastcgi cache directives to to your virtual host config file. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache_path  /var/nginx/cache levels=1:2
                    keys_zone=fcgi_cache:50m
                    inactive=60m;
fastcgi_cache_key &amp;quot;$scheme$request_method$host$request_uri&amp;quot;;
fastcgi_buffers 256 4k; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code specifies the cache directory, zone name, cache key and buffers (see the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&#34;&gt;manual&lt;/a&gt; for details). The code should be outside your server declaration. Within your server declaration, add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache fcgi_cache;
fastcgi_cache_valid 200 1s;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code defines the cache zone to use (&amp;ldquo;fcgi_cache&amp;rdquo;), sets the cache size to 200mb and by default caches a response for 1 second. The max-age header will override the default cache time, but you may want to choose a value other than 1 second, depending on your application&amp;rsquo;s needs. Here is a complete example virtual host file with fastcgi caching:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache_path  /var/nginx/cache levels=1:2
                    keys_zone=PerlTricks:50m
                    inactive=60m;
fastcgi_cache_key &amp;quot;$scheme$request_method$host$request_uri&amp;quot;;
fastcgi_buffers 256 4k;

server {
    listen 80 default;
    server_name perltricks.com;
    try_files $uri @fcgi;
    location @fcgi {
        fastcgi_cache PerlTricks;
        fastcgi_cache_valid 200 5m;
        fastcgi_pass unix:/tmp/perltricks.socket;
        include /etc/nginx/fastcgi.conf;
        fastcgi_param SCRIPT_NAME /;
    }   
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For an in-depth look at the configuring the nginx fastcgi cache, check out this &lt;a href=&#34;https://www.digitalocean.com/community/articles/how-to-setup-fastcgi-caching-with-nginx-on-your-vps&#34;&gt;useful article&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;clearing-the-cache:8c253a4acb451f68f821b231698a79ac&#34;&gt;Clearing the cache&lt;/h3&gt;

&lt;p&gt;Whilst caching responses can deliver huge benefits, it would be nice to be able to clear the cache on-demand, in case the application state changes. Fortunately with nginx this is super-easy with Perl - all you have to do is delete all files in the fastcgi_cache_path declared in the virtual host config file. For example, on Unix-based systems this works:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub clear_cache {
    if (-e &#39;/var/nginx/cache&#39;) {
        system(&#39;find /var/nginx/cache -type f -exec rm -f {} \;&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion:8c253a4acb451f68f821b231698a79ac&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;All of the major Perl web frameworks support FastCGI server caching. It&amp;rsquo;s easy to set up and with nginx, easy to manage. However there is more that can be done: in part 2 of this series we&amp;rsquo;ll make our cache management more precise by adding the ability to clear specific URL responses from the cache, rather than obliterating the whole cache in one go. We&amp;rsquo;ll also look at how to make the &amp;ldquo;clear_cache&amp;rdquo; subroutine safer and Windows compatible.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F76%2F2014%2F3%2F11%2FSimple-web-framework-FastCGI-caching-with-nginx-part-1&amp;amp;text=Simple+web+framework+FastCGI+caching+with+nginx+-+part+1&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F76%2F2014%2F3%2F11%2FSimple-web-framework-FastCGI-caching-with-nginx-part-1&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover picture Â© David Hoshor licensed via &lt;a href=&#34;http://creativecommons.org/licenses/by/2.0/&#34;&gt;Creative Commons&lt;/a&gt;. The picture has been digitally enhanced.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

