<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>prolog on Code - a programming blog</title>
    <link>https://blog.dnmfarrell.com/tags/prolog/</link>
    <description>Recent content in prolog on Code - a programming blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Nov 2024 11:02:02 -0400</lastBuildDate><atom:link href="https://blog.dnmfarrell.com/tags/prolog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Incomplete Data Structures Challenge Our Notion of Mutability</title>
      <link>https://blog.dnmfarrell.com/post/incomplete-data-structures/</link>
      <pubDate>Wed, 06 Nov 2024 11:02:02 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/incomplete-data-structures/</guid>
      <description>Chapter 15 from The Art of Prolog contains this dictionary implementation:
lookup(Key, dict(Key,X,Left,Right), Value) :- !,X=Value. lookup(Key, dict(Keyl,X,Left,Right), Value) :- Key &amp;lt; Keyl, lookup(Key,Left,Value). lookup(Key, dict(Keyl,X,Left,Right), Value) :- Key &amp;gt; Keyl, lookup(Key,Right,Value).  Believe it or not, these six lines of code implement a dictionary as an ordered, binary search tree. The rule lookup/3 can be used to both add to and get from the dictionary.
This query calls lookup/3 with a key, a variable, and a value.</description>
    </item>
    
    <item>
      <title>Simulating AWS IAM with Prolog</title>
      <link>https://blog.dnmfarrell.com/post/simulating-aws-iam-with-prolog/</link>
      <pubDate>Mon, 23 Sep 2024 12:44:03 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/simulating-aws-iam-with-prolog/</guid>
      <description>Of all the AWS services, IAM seems to be the least well-understood. There is something about its data types, logical rules and runtime conditions that make for an arcane, abstract service that most developers treat like a black box.
And that&amp;rsquo;s unfortunate because IAM secures organizations&#39; cloud resources, and can be the difference between having a data moat and a data breach.
Now whilst there are a bunch of toolsÂ¹ to help manage IAM permissions, they all suffer from one drawback or another.</description>
    </item>
    
  </channel>
</rss>
