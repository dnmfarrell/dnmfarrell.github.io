<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>symbol_table on Code Matters - a tech blog</title>
    <link>https://blog.dnmfarrell.com/tags/symbol_table/</link>
    <description>Recent content in symbol_table on Code Matters - a tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Jun 2016 08:37:20 +0000</lastBuildDate><atom:link href="https://blog.dnmfarrell.com/tags/symbol_table/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Untangling Perl&#39;s Subroutine Attributes</title>
      <link>https://blog.dnmfarrell.com/post/untangling-subroutine-attributes/</link>
      <pubDate>Wed, 29 Jun 2016 08:37:20 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/untangling-subroutine-attributes/</guid>
      <description>Subroutine attributes are optional labels that can be included in a subroutine declaration. They&amp;rsquo;re a curious feature with a clunky interface and minimal documentation. They seem underused, but it&amp;rsquo;s hard to think of legitimate uses for them. In my opinion the coolest thing about subroutine attributes is that they run at compile time. This means you can execute custom code before the main program is run, and seeing as Perl gives you access to the symbol table, you can basically do wizardy things.</description>
    </item>
    
  </channel>
</rss>
