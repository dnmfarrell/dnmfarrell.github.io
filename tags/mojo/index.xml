<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mojo on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/mojo/</link>
    <description>Recent content in Mojo on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Sep 2015 11:46:46 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/mojo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to send verification emails using Mojolicious</title>
      <link>https://dnmfarrell.github.io/article/193/2015/9/18/How-to-send-verification-emails-using-Mojolicious/</link>
      <pubDate>Fri, 18 Sep 2015 11:46:46 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/193/2015/9/18/How-to-send-verification-emails-using-Mojolicious/</guid>
      <description>

&lt;p&gt;Everyone has signed up for a website which confirms your email address by sending you a verification email. This is a simple process: if you can respond to this email, you must have access to the email address. Yet for its simplicity, writing such a system might not seem as easy.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at an example. I&amp;rsquo;m going to use &lt;a href=&#34;http://mojolicio.us&#34;&gt;Mojolicious&lt;/a&gt; since it is the web framework that I prefer (and contribute to) but also since its ecosystem is suited to this task. If you&amp;rsquo;d like to follow along as I go, check out the finished &lt;a href=&#34;https://gist.github.com/jberger/91a853ee223737c1a1d1&#34;&gt;script&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;user-storage:a6227821bd9908f56bba33c97dd09154&#34;&gt;User Storage&lt;/h3&gt;

&lt;p&gt;The example application is going to need a persistent mechanism to store user information. A tool I reach for in examples and prototyping is &lt;a href=&#34;https://metacpan.org/pod/DBM::Deep&#34;&gt;DBM::Deep&lt;/a&gt;. It is a file-backed system for storing Perl data structures. To use it, simply create an instance (or &lt;code&gt;tie&lt;/code&gt; one) and use it as a hash reference (array references are possible too); any changes will be saved automagically!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $db = DBM::Deep-&amp;gt;new(&#39;filename.db&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ll store this object in a helper, named &lt;code&gt;users&lt;/code&gt;. In Mojolicious, a helper is a subroutine that can be called as a method on a controller instance or the app itself, or called as a function in a template. They are often used for linkages between application and business or model logic, though here it is providing database access. When the time comes to need access to user data, say from a controller instance &lt;code&gt;$c&lt;/code&gt;, it is as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $user = $c-&amp;gt;users-&amp;gt;{$username};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And likewise to create a user, simply assign to it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$c-&amp;gt;users-&amp;gt;{$username} = {
  email     =&amp;gt; $email,
  password  =&amp;gt; $c-&amp;gt;bcrypt($password),
  confirmed =&amp;gt; 0,
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More fields would be stored in a more complete app but this is all that is needed for this example.&lt;/p&gt;

&lt;h3 id=&#34;password-encryption:a6227821bd9908f56bba33c97dd09154&#34;&gt;Password encryption&lt;/h3&gt;

&lt;p&gt;I use an encryption called &lt;code&gt;bcrypt&lt;/code&gt; to store the password. &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Bcrypt&#34;&gt;Mojolicious::Plugin::Bcrypt&lt;/a&gt; is a handy plugin to use Bcrypt encryption with Mojolicious; you load it by simply writing &lt;code&gt;plugin &#39;Bcrypt&#39;;&lt;/code&gt;. This plugin provides two helpers, &lt;code&gt;bcrypt&lt;/code&gt; for encryption and &lt;code&gt;bcrypt_validate&lt;/code&gt; for checking that another value is valid.&lt;/p&gt;

&lt;p&gt;Bcrypt is one of many hashing algorithms with properties that are useful for security. There is no &lt;code&gt;decrypt&lt;/code&gt; function, since this is a one-way algorithm. When validating the password, the best you can know is that if some future input hashes to the same result then it must have been the original password. Storing passwords in this way is good because if a hacker gets database access, they don&amp;rsquo;t get the passwords, just the hashes; they can&amp;rsquo;t be leaked because you simply don&amp;rsquo;t have them.&lt;/p&gt;

&lt;h3 id=&#34;sending-an-email:a6227821bd9908f56bba33c97dd09154&#34;&gt;Sending an email&lt;/h3&gt;

&lt;p&gt;CPAN is replete with modules which can send email. For this example I employ &lt;a href=&#34;https://metacpan.org/pod/Email::Sender&#34;&gt;Email::Sender&lt;/a&gt;, which is the current recommended module (for &lt;a href=&#34;http://shadow.cat/blog/matt-s-trout/mstpan-15/&#34;&gt;example&lt;/a&gt;). Written by our reigning Perl Pumpking Ricardo Signes, this module makes it very easy to send email.&lt;/p&gt;

&lt;p&gt;The app declares a helper to send an email, cleverly called &lt;code&gt;send_email&lt;/code&gt; which takes a target email address, a subject, and a body.&lt;/p&gt;

&lt;p&gt;A nice feature of Email::Sender is that you can specify &lt;a href=&#34;https://metacpan.org/pod/Email::Sender::Manual::QuickStart#specifying-transport-in-the-environment&#34;&gt;transport via the environment&lt;/a&gt;. For prototyping purposes, by setting an environment variable, the email is &amp;ldquo;sent&amp;rdquo; to the terminal. Meanwhile, the Mojolicious &lt;a href=&#34;http://mojolicio.us/perldoc/Mojolicious/Command/eval&#34;&gt;eval&lt;/a&gt; command is a handy way to perform one-line scripts with your app. If I combine these features together, I can see what the resulting email would look like with a one liner:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ EMAIL_SENDER_TRANSPORT=Print ./app.pl eval &#39;app-&amp;gt;send_email(q[me@spam.org], &amp;quot;Care for some SPAM?&amp;quot;, &amp;quot;Well how about it?&amp;quot;)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-email-body:a6227821bd9908f56bba33c97dd09154&#34;&gt;The email body&lt;/h3&gt;

&lt;p&gt;Now that the app can send an email, what should it send? Remember that I would like to send an email with a hyperlink that the user can click to confirm their registration. The hyperlink URL needs to be able to identify the transaction, but since it is being sent in clear text it is important to know that the contents haven&amp;rsquo;t been tampered with. A &lt;a href=&#34;http://jwt.io/&#34;&gt;JSON Web Token&lt;/a&gt;, or JWT, lets you store a data structure as a url-safe string and sign it so that you can be sure that it isn&amp;rsquo;t altered.&lt;/p&gt;

&lt;p&gt;Since the user won&amp;rsquo;t be logged in, I need some other way to know which username to confirm! In this example the JWT payload is only going to contain the username, sent on a round trip to the client&amp;rsquo;s email.&lt;/p&gt;

&lt;p&gt;If instead the app were sending a password reset token I would also want to include a timeout on the JWT to prevent replay attacks. For a simple confirmation though that is probably not necessary.&lt;/p&gt;

&lt;p&gt;I create a helper which initializes an instance of &lt;a href=&#34;https://metacpan.org/pod/Mojo::JWT&#34;&gt;Mojo::JWT&lt;/a&gt; and uses the application&amp;rsquo;s primary &lt;a href=&#34;https://metacpan.org/pod/Mojolicious#secrets&#34;&gt;secret&lt;/a&gt; as its secret. The JWT can also use some other secret, but this is convenient. Note that the example app uses the default set of secrets, but yours should change it to something only you know.&lt;/p&gt;

&lt;p&gt;To create the confirmation URL, the app first sets the claims and encodes to a JWT encoded string containing the data structure.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $jwt = $c-&amp;gt;jwt-&amp;gt;claims({username =&amp;gt; $username})-&amp;gt;encode;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then it generates a URL to the &amp;ldquo;confirm&amp;rdquo; route, makes it absolute, and appends the query/value pair to the end:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $url = $c-&amp;gt;url_for(&#39;confirm&#39;)-&amp;gt;to_abs-&amp;gt;query(jwt =&amp;gt; $jwt);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Later when the URL is clicked, the app can retrieve the username from the JWT encoded query parameter like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $username = $c-&amp;gt;jwt-&amp;gt;decode($c-&amp;gt;param(&#39;jwt&#39;))-&amp;gt;{username};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that if the JWT (contained in the query parameter) doesn&amp;rsquo;t pass validation on decoding, an exception is thrown; this way you know that if the code succeeds the JWT hasn&amp;rsquo;t been tampered with.&lt;/p&gt;

&lt;p&gt;From there it is a simple matter to mark the user&amp;rsquo;s account as confirmed.&lt;/p&gt;

&lt;h3 id=&#34;the-job-queue:a6227821bd9908f56bba33c97dd09154&#34;&gt;The job queue&lt;/h3&gt;

&lt;p&gt;Many tasks that happen as a result of a web request can be quite slow. Sending email is often a slow process and I don&amp;rsquo;t want to slow down the server in order to add email functionality. Mojolicious employs a non-blocking ioloop internally for performance and one thing you never want to do is block the loop for long periods of time.&lt;/p&gt;

&lt;p&gt;A job queue is a system by which you can push the actual work of doing slow work onto another process. Typically a job queue functions by inserting a record into a database indicating which task is to be done and parameters to be passed to it. The job worker then knows how to perform that task and watches the database until a job needs doing.&lt;/p&gt;

&lt;p&gt;Mojolicious has a job queue spinoff project, named &lt;a href=&#34;https://metacpan.org/pod/Minion&#34;&gt;Minion&lt;/a&gt;. It is the perfect tool for sending email from a job worker to keep the site responsive. Minion ships with a Postgres backend but for this example I will be using the SQLite backend from CPAN. &lt;em&gt;(N.B an earlier version of this article used a file backend that has since been removed).&lt;/em&gt; The task is declared as a subroutine reference to &lt;code&gt;add_task&lt;/code&gt; and later jobs can be created by &lt;code&gt;enqueue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The app declares a task, called &lt;code&gt;email_task&lt;/code&gt; which is a wrapper for the &lt;code&gt;send_email&lt;/code&gt; helper. It also declare a helper named &lt;code&gt;email&lt;/code&gt;, a nicely Huffmanized name, which enqueues the job (and takes the same arguments). (I&amp;rsquo;ve called the task &lt;code&gt;email_task&lt;/code&gt; to make it clear where that name is used; it could as easily simply have been called &lt;code&gt;email&lt;/code&gt;, but I didn&amp;rsquo;t want the name to be confused with the helper).&lt;/p&gt;

&lt;p&gt;This helper then is all that is needed to send an email via a job worker, well that and a worker. While prototyping, it is handy to start a worker in another terminal by running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ EMAIL_SENDER_TRANSPORT=Print ./app.pl minion worker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again by setting the transport to &lt;code&gt;Print&lt;/code&gt;, the result will be output in the terminal. The progress of the job can then be tracked via the &lt;code&gt;minion&lt;/code&gt; command as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ ./myapp.pl minion job
$ ./myapp.pl minion job &amp;lt;&amp;lt;id&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;putting-it-all-together:a6227821bd9908f56bba33c97dd09154&#34;&gt;Putting it all together&lt;/h3&gt;

&lt;p&gt;The rest of the web application is a fairly standard Mojolicious app. One thing that I employ is a helper that redirects to the landing (index) page and optionally accepts a message to be displayed after redirect. This message is called a &amp;ldquo;flash&amp;rdquo; message and is stored in the session cookie, valid only on the next request. Using this helper I can easily start the sign-in/sign-up cycle again and tell the user what happened, good or bad. Because setters in Mojolicious are chainable, the helper is simply:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;helper to_index =&amp;gt; sub { shift-&amp;gt;flash(message =&amp;gt; shift)-&amp;gt;redirect_to(&#39;index&#39;) };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the template, if the flash message is defined from the previous request, it is used otherwise a default is presented&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;lt;p&amp;gt;&amp;lt;%= flash(&#39;message&#39;) || &#39;Sign in or sign up!&#39; %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then if the username is already taken, for example, I can stop processing immediately by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;return $c-&amp;gt;to_index(&amp;quot;Username $username is taken&amp;quot;) if $c-&amp;gt;users-&amp;gt;{$username};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that you know how the pieces work, check out the final &lt;a href=&#34;https://gist.github.com/jberger/91a853ee223737c1a1d1&#34;&gt;script&lt;/a&gt;, or have a look below. Happy Perling!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Mojolicious::Lite;

use DBM::Deep;
use Mojo::JWT;

plugin &#39;Bcrypt&#39;;
plugin &#39;Minion&#39; =&amp;gt; {SQLite =&amp;gt; &#39;minion.db&#39;};

helper users =&amp;gt; sub { state $db = DBM::Deep-&amp;gt;new(&#39;users.db&#39;) };

helper send_email =&amp;gt; sub {
  my ($c, $address, $subject, $body) = @_;

  require Email::Simple;
  require Email::Sender::Simple;

  my $email = Email::Simple-&amp;gt;create(
    header =&amp;gt; [
      To      =&amp;gt; $address,
      From    =&amp;gt; &#39;me@nobody.com&#39;,
      Subject =&amp;gt; $subject,
    ],
    body =&amp;gt; $body,
  );
  Email::Sender::Simple-&amp;gt;send($email);
};

helper jwt =&amp;gt; sub { Mojo::JWT-&amp;gt;new(secret =&amp;gt; shift-&amp;gt;app-&amp;gt;secrets-&amp;gt;[0] || die) };

app-&amp;gt;minion-&amp;gt;add_task(email_task =&amp;gt; sub { shift-&amp;gt;app-&amp;gt;send_email(@_) });

helper email =&amp;gt; sub { shift-&amp;gt;minion-&amp;gt;enqueue(email_task =&amp;gt; [@_]) };

helper to_index =&amp;gt; sub { shift-&amp;gt;flash(message =&amp;gt; shift)-&amp;gt;redirect_to(&#39;index&#39;) };

any &#39;/&#39; =&amp;gt; sub {
  my $c = shift;
  $c-&amp;gt;render(&#39;logged_in&#39;) if $c-&amp;gt;session(&#39;username&#39;);
} =&amp;gt; &#39;index&#39;;

any &#39;/logout&#39; =&amp;gt; sub { shift-&amp;gt;session(expires =&amp;gt; 1)-&amp;gt;to_index };

post &#39;/sign_in&#39; =&amp;gt; sub {
  my $c = shift;
  my $username = $c-&amp;gt;param(&#39;username&#39;);
  return $c-&amp;gt;to_index(&amp;quot;Username $username not found&amp;quot;)
    unless my $user = $c-&amp;gt;users-&amp;gt;{$username};

  return $c-&amp;gt;to_index(&amp;quot;Username $username has not been confirmed&amp;quot;)
    unless $user-&amp;gt;{confirmed};

  return $c-&amp;gt;to_index(&#39;Password not correct&#39;)
    unless $c-&amp;gt;bcrypt_validate($c-&amp;gt;param(&#39;password&#39;) || &#39;&#39;, $user-&amp;gt;{password});

  $c-&amp;gt;session(username =&amp;gt; $username)-&amp;gt;to_index;
};

post &#39;/sign_up&#39; =&amp;gt; sub {
  my $c = shift;

  my $username = $c-&amp;gt;param(&#39;username&#39;);
  return $c-&amp;gt;to_index(&amp;quot;Username $username is taken&amp;quot;)
    if $c-&amp;gt;users-&amp;gt;{$username};

  return $c-&amp;gt;to_index(&#39;Password cannot be blank&#39;)
    unless my $password = $c-&amp;gt;param(&#39;password&#39;);

  return $c-&amp;gt;to_index(&#39;Email cannot be blank&#39;)
    unless my $email = $c-&amp;gt;param(&#39;email&#39;);

  $c-&amp;gt;users-&amp;gt;{$username} = {
    email     =&amp;gt; $email,
    password  =&amp;gt; $c-&amp;gt;bcrypt($password),
    confirmed =&amp;gt; 0,
  };
  my $jwt = $c-&amp;gt;jwt-&amp;gt;claims({username =&amp;gt; $username})-&amp;gt;encode;
  my $url = $c-&amp;gt;url_for(&#39;confirm&#39;)-&amp;gt;to_abs-&amp;gt;query(jwt =&amp;gt; $jwt);
  $c-&amp;gt;email($email, &#39;Confirm registration&#39;, &amp;quot;Please visit $url to confirm&amp;quot;);
  $c-&amp;gt;to_index(&#39;registration complete, please confirm via email&#39;);
};

get &#39;/confirm&#39; =&amp;gt; sub {
  my $c = shift;
  my $username = $c-&amp;gt;jwt-&amp;gt;decode($c-&amp;gt;param(&#39;jwt&#39;))-&amp;gt;{username};
  $c-&amp;gt;users-&amp;gt;{$username}{confirmed} = 1;
  $c-&amp;gt;to_index(&#39;registration confirmed, please log in&#39;);
};

app-&amp;gt;start;

__DATA__

@@ index.html.ep

&amp;lt;p&amp;gt;Hello Guest!&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;%= flash(&#39;message&#39;) || &#39;Sign in or sign up!&#39; %&amp;gt;&amp;lt;/p&amp;gt;

%= form_for sign_in =&amp;gt; begin
  %= label_for username =&amp;gt; &#39;Username&#39;
  %= text_field &#39;username&#39;

  %= label_for password =&amp;gt; &#39;Password&#39;
  %= password_field &#39;password&#39;

  %= label_for email =&amp;gt; &#39;Email&#39;
  %= email_field &#39;email&#39;, placeholder =&amp;gt; &#39;sign up only&#39;

  &amp;lt;br&amp;gt;
  %= submit_button &#39;Sign In&#39;
  %= submit_button &#39;Sign Up&#39;, formaction =&amp;gt; url_for(&#39;sign_up&#39;)
% end

@@ logged_in.html.ep

&amp;lt;p&amp;gt;Welcome back &amp;lt;%= session &#39;username&#39; %&amp;gt;!&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;%= link_to &#39;Log out&#39; =&amp;gt; &#39;logout&#39; %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - July 2015</title>
      <link>https://dnmfarrell.github.io/article/184/2015/8/4/What-s-new-on-CPAN---July-2015/</link>
      <pubDate>Tue, 04 Aug 2015 12:55:33 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/184/2015/8/4/What-s-new-on-CPAN---July-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month:30fbdbf2558374330f77ce846b6202af&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;There have been many inside-out object implementations, but none like this. &lt;a href=&#34;https://metacpan.org/pod/Dios&#34;&gt;Dios&lt;/a&gt; is a &amp;ldquo;Declarative Inside-Out Syntax&amp;rdquo; object system by Damian Conway. It&amp;rsquo;s a Perl 6-style object system that supports functions, methods, signatures, public/private/readonly attributes, types and structured exceptions.&lt;/p&gt;

&lt;p&gt;Dios comes with comprehensive documentation and a decent test suite. Implemented using Keyword::Declare (another new module from Damian), it even garnered &lt;a href=&#34;http://cpanratings.perl.org/dist/Dios&#34;&gt;praise&lt;/a&gt; from Reini Urban who identified one thing you may miss - no support for roles. Time will tell if they&amp;rsquo;re added, but for now I can only say &amp;ldquo;WOW!&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;apis:30fbdbf2558374330f77ce846b6202af&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/CMS::Drupal&#34;&gt;CMS::Drupal&lt;/a&gt; provides a Perl interface to Drupal, the CMS&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Marketplace::Ebay&#34;&gt;Marketplace::Ebay&lt;/a&gt; make API calls to eBay (with XSD validation)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Protocol::Matrix&#34;&gt;Protocol::Matrix&lt;/a&gt; helper functions for the Matrix protocol&lt;/li&gt;
&lt;li&gt;Al Newkirk released APIs for &lt;a href=&#34;https://metacpan.org/pod/API::Twitter&#34;&gt;Twitter&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/API::Facebook&#34;&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::PayPal::PaymentsAdvanced&#34;&gt;WebService::PayPal::PaymentsAdvanced&lt;/a&gt; is a simple wrapper around the PayPal Payments Advanced web service&lt;/li&gt;
&lt;li&gt;Shorten links using OneShortLink with &lt;a href=&#34;https://metacpan.org/pod/WWW::Shorten::OneShortLink&#34;&gt;WWW::Shorten::OneShortLink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Interface with Amazon Marketplace Web Services using &lt;a href=&#34;https://metacpan.org/pod/Amazon::MWS&#34;&gt;Amazon::MWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Analyze the configuration of any SSL web server on the using ssllabs.com with &lt;a href=&#34;https://metacpan.org/pod/WebService::SSLLabs&#34;&gt;WebService::SSLLabs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:30fbdbf2558374330f77ce846b6202af&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::podispell&#34;&gt;App::podispell&lt;/a&gt; is an interactive Pod spell checker&lt;/li&gt;
&lt;li&gt;Prefix linedata with their arrival timestamp using &lt;a href=&#34;https://metacpan.org/pod/App::Timestamper&#34;&gt;App::Timestamper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::perlsh&#34;&gt;App::perlsh&lt;/a&gt; is a tiny Perl REPL, nice!&lt;/li&gt;
&lt;li&gt;Keep an eye on network port changes with &lt;a href=&#34;https://metacpan.org/pod/App::Monport&#34;&gt;App::Monport&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:30fbdbf2558374330f77ce846b6202af&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/NetHack::NAOdash&#34;&gt;NetHack::NAOdash&lt;/a&gt; extracts statistics from NetHack xlogfiles&lt;/li&gt;
&lt;li&gt;Two C library installers: &lt;a href=&#34;https://metacpan.org/pod/Alien::Libbz2&#34;&gt;Alien::Libbz2&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Alien::TinyCCx&#34;&gt;Alien::TinyCCx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run an SNTP Server with &lt;a href=&#34;https://metacpan.org/pod/Net::SNTP::Server&#34;&gt;Net::SNTP::Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Dedup&#34;&gt;File::Dedup&lt;/a&gt; can dedupe files across directories&lt;/li&gt;
&lt;li&gt;Run the same command via SSH on many remote servers at the same time using &lt;a href=&#34;https://metacpan.org/pod/App::SSH::Cluster&#34;&gt;App::SSH::Cluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:30fbdbf2558374330f77ce846b6202af&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Starch&#34;&gt;Starch&lt;/a&gt; is an implementation-independent persistent state class with interfaces for CHI, DBI and DBIx::Class&lt;/li&gt;
&lt;li&gt;A JSON Merge Patch implementation: &lt;a href=&#34;https://metacpan.org/pod/JSON::MergePatch&#34;&gt;JSON::MergePatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Asset::Pack&#34;&gt;Asset::Pack&lt;/a&gt; packs assets into Perl modules that can be fat-packed&lt;/li&gt;
&lt;li&gt;Interface with the InfluxDB time series database using &lt;a href=&#34;https://metacpan.org/pod/InfluxDB::LineProtocol&#34;&gt;InfluxDB::LineProtocol&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/AnyEvent::InfluxDB&#34;&gt;AnyEvent::InfluxDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBD::Crate&#34;&gt;DBD::Crate&lt;/a&gt; is a new DBI driver for the Crate database&lt;/li&gt;
&lt;li&gt;A data selection parser and applicator with simple DSL, take a look at &lt;a href=&#34;https://metacpan.org/pod/Data::Selector&#34;&gt;Data::Selector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Simple Financial Information eXchange (FIX) protocol implementation: &lt;a href=&#34;https://metacpan.org/pod/FIX::Lite&#34;&gt;FIX::Lite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control:30fbdbf2558374330f77ce846b6202af&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Wield lexical control of warnings with &lt;a href=&#34;https://metacpan.org/pod/warnings::lock&#34;&gt;warnings::lock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An early release, &lt;a href=&#34;https://metacpan.org/pod/Meta::Grapher::Moose&#34;&gt;Meta::Grapher::Moose&lt;/a&gt; can produce a GraphViz graph showing meta-information about classes and roles&lt;/li&gt;
&lt;li&gt;Manage Perl&amp;rsquo;s experimental features more easily using &lt;a href=&#34;https://metacpan.org/pod/experimentals&#34;&gt;experimentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Keyword::Declare&#34;&gt;Keyword::Declare&lt;/a&gt; let&amp;rsquo;s you declare new keywords, comprehensively documented. Wow!&lt;/li&gt;
&lt;li&gt;Simple-but-useful &lt;a href=&#34;https://metacpan.org/pod/Devel::Caller::Util&#34;&gt;Devel::Caller::Util&lt;/a&gt; can return the entire caller stack on demand. Useful for printing deep stack traces.&lt;/li&gt;
&lt;li&gt;Declare exception classes in a single file and import them with &lt;a href=&#34;https://metacpan.org/pod/Throwable::SugarFactory&#34;&gt;Throwable::SugarFactory&lt;/a&gt;. Very nice!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Core&#34;&gt;Test::Core&lt;/a&gt; is a Perl testing bundle&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international:30fbdbf2558374330f77ce846b6202af&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Perl::Tokenizer&#34;&gt;Perl::Tokenizer&lt;/a&gt; is a tiny Perl code tokenizer built from regexes. But is it any good &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics:30fbdbf2558374330f77ce846b6202af&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A wrapper for the &amp;lsquo;tsort&amp;rsquo; (topological sort) command line utility &lt;a href=&#34;https://metacpan.org/pod/Sort::TSort&#34;&gt;Sort::TSort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PDLDM::Rank&#34;&gt;PDLDM::Rank&lt;/a&gt; calculates and finds tied ranks of a PDL data matrix&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PDLDM::Common&#34;&gt;PDLDM::Common&lt;/a&gt; provides a few PDL utilities for data mining&lt;/li&gt;
&lt;li&gt;See the differences of a file as a HTML table with &lt;a href=&#34;https://metacpan.org/pod/Algorithm::Diff::HTMLTable&#34;&gt;Algorithm::Diff::HTMLTable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:30fbdbf2558374330f77ce846b6202af&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use Google&amp;rsquo;s v2 CAPTCHA service in Mojolicious apps with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::ReCAPTCHAv2&#34;&gt;Mojolicious::Plugin::ReCAPTCHAv2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::SQLite&#34;&gt;Mojo::SQLite&lt;/a&gt; is a tiny Mojo wrapper for SQLite&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Pingen&#34;&gt;Mojolicious::Plugin::Pingen&lt;/a&gt; makes it easy to integrate your Mojo app with the cool Pingen service.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - June 2015</title>
      <link>https://dnmfarrell.github.io/article/181/2015/7/9/What-s-new-on-CPAN---June-2015/</link>
      <pubDate>Thu, 09 Jul 2015 13:17:10 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/181/2015/7/9/What-s-new-on-CPAN---June-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Class::Storage&#34;&gt;Class::Storage&lt;/a&gt; is a module for serializing blessed references (objects). Once serialized, an object can be transmitted via JSON, XML, YAML or saved in a data store. Serializing objects can also make IPC easier: coroutines, threads and other processes can pass text but blessed references are often an issue.&lt;/p&gt;

&lt;p&gt;Module author Peter Valdemar Mørch has pulled together excellent documentation. A welcome addition to CPAN, check out the acknowledgements &lt;a href=&#34;https://metacpan.org/pod/Class::Storage#ACKNOWLEDGEMENTS&#34;&gt;section&lt;/a&gt; for some interesting background on the module. For an alternative approach, you might be interested in &lt;a href=&#34;https://metacpan.org/pod/Object::Serializer&#34;&gt;Object::Serializer&lt;/a&gt;. For non-readable serializers, checkout &lt;a href=&#34;https://metacpan.org/pod/Storable&#34;&gt;Storable&lt;/a&gt; and the newer and faster &lt;a href=&#34;https://metacpan.org/pod/Sereal&#34;&gt;Sereal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; - when working with object serializers like Class::Storage, only deserialize trusted data, as malicious code can be injected into the data, and when the data is deserialized, the code will be executed automatically. See for example this bug &lt;a href=&#34;https://rt.cpan.org/Public/Bug/Display.html?id=105772&#34;&gt;report&lt;/a&gt; (&lt;em&gt;Thanks to Reini Urban for the reminder&lt;/em&gt;).&lt;/p&gt;

&lt;h3 id=&#34;apis-apps:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::Zendesk&#34;&gt;API::Zendesk&lt;/a&gt; provides a Perl interface for the customer support app&lt;/li&gt;
&lt;li&gt;Painlessly install libsvm, the support vector machine library using &lt;a href=&#34;https://metacpan.org/pod/Alien::LIBSVM&#34;&gt;Alien::LIBSVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use Slack? Of course you do. Check out &lt;a href=&#34;https://metacpan.org/pod/AnyEvent::SlackRTM&#34;&gt;AnyEvent::SlackRTM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Develop your first Slack bot with &lt;a href=&#34;https://metacpan.org/pod/Bot::Backbone::Service::SlackChat&#34;&gt;Bot::Backbone::Service::SlackChat&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Interchange::Search::Solr&#34;&gt;Interchange::Search::Solr&lt;/a&gt; let&amp;rsquo;s you use Solr search with Perl&lt;/li&gt;
&lt;li&gt;Be popular, send your co-workers Bonusly with &lt;a href=&#34;https://metacpan.org/pod/WebService::Bonusly&#34;&gt;WebService::Bonusly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebDriver::Tiny&#34;&gt;WebDriver::Tiny&lt;/a&gt; is an all-new implementation of a Selenium webdriver API for Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::App&#34;&gt;Config::App&lt;/a&gt; implements &amp;ldquo;cascading configurations&amp;rdquo; - looks like a convenient way to have context-specific configurations without resorting to Perl code&lt;/li&gt;
&lt;li&gt;Quickly rind files on your Mac using &lt;a href=&#34;https://metacpan.org/pod/Mac::FindFile&#34;&gt;Mac::FindFile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Perl::Critic::Freenode&#34;&gt;Perl::Critic::Freenode&lt;/a&gt; is a compilation of policies recommended by the folks on the #perl channel on freenode IRC&lt;/li&gt;
&lt;li&gt;Include ditaa diagrams in pod with &lt;a href=&#34;https://metacpan.org/pod/Pod::Weaver::Plugin::Ditaa&#34;&gt;Pod::Weaver::Plugin::Ditaa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract data from your Zoom 5341J cable modem with &lt;a href=&#34;https://metacpan.org/pod/Device::CableModem::Zoom5341J&#34;&gt;Device::CableModem::Zoom5341J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::Dispatch::HipChat&#34;&gt;Log::Dispatch::HipChat&lt;/a&gt; will send your log messages to HipChat&lt;/li&gt;
&lt;li&gt;Moving averages are easy to implement, and easy to get wrong. The next time you need one, consider &lt;a href=&#34;https://metacpan.org/pod/Math::SMA&#34;&gt;Math::SMA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re working with 35mm film and DX codes, you might like &lt;a href=&#34;https://metacpan.org/pod/Photography::DX&#34;&gt;Photography::DX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-version-control:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Development and Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When stuck in Git merge conflict hell, sometimes it&amp;rsquo;s easier to say &amp;ldquo;I&amp;rsquo;m right&amp;rdquo;. &lt;a href=&#34;https://metacpan.org/pod/App::Git::Workflow::Command::Take&#34;&gt;App::Git::Workflow::Command::Take&lt;/a&gt; let&amp;rsquo;s you tell Git to merge your changes. You win!&lt;/li&gt;
&lt;li&gt;If you have a load of Git repos that you&amp;rsquo;d like to execute a command against, you might like &lt;a href=&#34;https://metacpan.org/pod/App::Multigit&#34;&gt;App::Multigit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Assert::Conditional&#34;&gt;Assert::Conditional&lt;/a&gt; from Tom Christiansen let&amp;rsquo;s you conditionally compile assertions into your Perl programs, ala C&amp;rsquo;s assert.h. Wow&lt;/li&gt;
&lt;li&gt;Daemonize &lt;em&gt;anything&lt;/em&gt; with &lt;a href=&#34;https://metacpan.org/pod/JIP::Daemon&#34;&gt;JIP::Daemon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;text-language:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Text &amp;amp; Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::Unicodify&#34;&gt;Acme::Unicodify&lt;/a&gt; can convert ASCII text into Unicode-esque characters&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::RS14_PP&#34;&gt;Crypt::RS14_PP&lt;/a&gt; is a pure Perl implementation of the RS14 encryption algorithm&lt;/li&gt;
&lt;li&gt;Convert HTML into FreeStyleWiki markup using &lt;a href=&#34;https://metacpan.org/pod/HTML::WikiConverter::FreeStyleWiki&#34;&gt;HTML::WikiConverter::FreeStyleWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Awesome! detect the language with &lt;a href=&#34;https://metacpan.org/pod/Lingua::Identify::CLD2&#34;&gt;Lingua::Identify::CLD2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Hogan&#34;&gt;Text::Hogan&lt;/a&gt; is a Perl clone of hogan.js, the JavaScript template engine. Supports pre-compilation!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-and-mathematics:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Science and Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Algorithm::BloomFilter&#34;&gt;Algorithm::BloomFilter&lt;/a&gt; is a simple, superfast bloom filter implementation written in XS&lt;/li&gt;
&lt;li&gt;Not a new module, but it is new to CPAN, &lt;a href=&#34;https://metacpan.org/pod/App::Chart&#34;&gt;App::Chart&lt;/a&gt; the visual charting library is useful&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/BioX::Workflow&#34;&gt;BioX::Workflow&lt;/a&gt; is an &amp;ldquo;opinionated template based workflow writer&amp;rdquo;, hailing from the Bioinformatics World, but not just for BioX&lt;/li&gt;
&lt;li&gt;The Longest Common Subsequence algorithm is used for diffing text, among other uses. &lt;a href=&#34;https://metacpan.org/pod/LCS::XS&#34;&gt;LCS::XS&lt;/a&gt; is a supercharged version, written in XS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:27f3983cc5996563eb8c9442d6c1bef6&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract all of the supported URLs from your Catalyst app using &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::ActionPaths&#34;&gt;Catalyst::Plugin::ActionPaths&lt;/a&gt; (disclosure, I&amp;rsquo;m the module author)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Piwik&#34;&gt;Dancer::Plugin::Piwik&lt;/a&gt; helps you integrate Pwik analytics with a Dancer app&lt;/li&gt;
&lt;li&gt;Use MongoDB with Minion, the job queue application using &lt;a href=&#34;https://metacpan.org/pod/Minion::Backend::MongoDB&#34;&gt;Minion::Backend::MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::Reactor::UV&#34;&gt;Mojo::Reactor::UV&lt;/a&gt; let&amp;rsquo;s you use the C library, libuv as the backend event loop for your Mojo application&lt;/li&gt;
&lt;li&gt;Rapidly expand shortened URLs with &lt;a href=&#34;https://metacpan.org/pod/WWW::Expand::More&#34;&gt;WWW::Expand::More&lt;/a&gt;. Cool!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Updated to include other example serializer modules and deserialization warning - 2015-07-09&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The best of what&#39;s new on CPAN 2014</title>
      <link>https://dnmfarrell.github.io/article/145/2015/1/15/The-best-of-what-s-new-on-CPAN-2014/</link>
      <pubDate>Thu, 15 Jan 2015 14:44:40 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/145/2015/1/15/The-best-of-what-s-new-on-CPAN-2014/</guid>
      <description>

&lt;p&gt;2014 has come and gone, which means that we&amp;rsquo;ve completed 12 editions of &amp;ldquo;What&amp;rsquo;s New on CPAN&amp;rdquo;. This seems like an appropriate moment to take stock and reflect on the past year of new CPAN uploads. I&amp;rsquo;ve compiled a shortlist of modules by using the scientific approach of &amp;ldquo;stuff that I remember&amp;rdquo;. Have a think about what would be on your &amp;ldquo;best of&amp;rdquo; list, and maybe let the author know, or better, write about it and let the World know.&lt;/p&gt;

&lt;h3 id=&#34;config-devops:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;p&gt;Ingy and David&amp;rsquo;s grant work on the next generation of &lt;a href=&#34;https://metacpan.org/pod/Inline&#34;&gt;Inline&lt;/a&gt; generated a lot of excitement. But along with re-furbishing the whole Inline ecosystem, a number of side-effect modules were created too. One of those is &lt;a href=&#34;https://metacpan.org/pod/Devel::PerlLog&#34;&gt;Devel::PerlLog&lt;/a&gt; which simply logs a configurable message every time a Perl process starts.&lt;/p&gt;

&lt;p&gt;C-related Perl libraries got a big boost in 2014. Asides from Ingy&amp;rsquo;s refreshed &lt;a href=&#34;https://metacpan.org/pod/Inline::C&#34;&gt;Inline::C&lt;/a&gt;, Graham Ollis has been working and &lt;a href=&#34;https://www.youtube.com/watch?v=cY-yqQ_nmtw&amp;amp;list=PLvxiAPPfDjyP293FgDJjK0CXaZq6EH0pC&#34;&gt;presenting&lt;/a&gt; on another XS alternative: FFI. &lt;a href=&#34;https://metacpan.org/pod/FFI::CheckLib&#34;&gt;FFI::CheckLib&lt;/a&gt; will check that a particular C library is available as well as &lt;a href=&#34;https://metacpan.org/pod/FFI::TinyCC&#34;&gt;FFI::TinyCC&lt;/a&gt;, a compiler interface.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Module::Loader&#34;&gt;Module::Loader&lt;/a&gt; is a nifty way of loading plugins at runtime.&lt;/p&gt;

&lt;h3 id=&#34;data:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Data&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Hash::Ordered&#34;&gt;Hash::Ordered&lt;/a&gt; was a best-in-class implementation of an ordered hash class by David Golden. He also gave an in-depth &lt;a href=&#34;https://www.youtube.com/watch?v=p4U6FWyRBoQ&amp;amp;feature=youtu.be&#34;&gt;talk&lt;/a&gt; of the trade offs of the solution and the alternatives on CPAN (slides &lt;a href=&#34;http://www.dagolden.com/wp-content/uploads/2009/04/Adventures-in-Optimization-NYpm-July-2014.pdf&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Did you know that &lt;a href=&#34;https://metacpan.org/pod/File::Slurp&#34;&gt;File::Slurp&lt;/a&gt; can have issues with the Perl encoding layer? (among other &lt;a href=&#34;http://blogs.perl.org/users/leon_timmermans/2013/05/why-you-dont-need-fileslurp.html&#34;&gt;issues&lt;/a&gt;). Leon Timmermans wrote &lt;a href=&#34;https://metacpan.org/pod/File::Slurper&#34;&gt;File::Slurper&lt;/a&gt; as a better alternative.&lt;/p&gt;

&lt;p&gt;Ah &lt;a href=&#34;https://metacpan.org/pod/Sereal&#34;&gt;Sereal&lt;/a&gt;, the super-fast seralizer software. &lt;a href=&#34;https://metacpan.org/pod/SerealX::Store&#34;&gt;SerealX::Store&lt;/a&gt; was an attempt to create a storable-like interface over Sereal, except tastier. &lt;a href=&#34;https://metacpan.org/pod/XML::Dataset&#34;&gt;XML::Dataset&lt;/a&gt; implements a simple DSL for extracting data from XML/XHTML documents.&lt;/p&gt;

&lt;h3 id=&#34;databases:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Databases&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Raw&#34;&gt;DBIx::Raw&lt;/a&gt; provides both low level SQL control and time-saving abstractions to fill a niche role for DB access. Divine the database datatype of a scalar using &lt;a href=&#34;https://metacpan.org/pod/SQL::Type::Guess&#34;&gt;SQL::Type::Guess&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;fun:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Fun&lt;/h3&gt;

&lt;p&gt;Remember the big debate about Perl 5&amp;rsquo;s version numbering? Whilst some tirelessly debating the topic, others were hard at work at real solutions™. This is &lt;a href=&#34;https://metacpan.org/pod/Acme::Futuristic::Perl&#34;&gt;Acme::Futuristic::Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Speaking of real solutions™, check out &lt;a href=&#34;https://metacpan.org/pod/bare&#34;&gt;bare&lt;/a&gt; which removes the need to use sigils for scalars. Finally, the last barrier to mass adoption of Perl has been solved!&lt;/p&gt;

&lt;h3 id=&#34;hardware:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Hardware&lt;/h3&gt;

&lt;p&gt;CPAN advanced more in hardware-related modules than perhaps any other area. YAPC NA 2014 was awash with drones. This really does seem like a promising area for Perl to lay claim. Several modules stand out in particular. Let&amp;rsquo;s start with the shiny: Timm Murray&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/UAV::Pilot::ARDrone&#34;&gt;UAV::Pilot::ARDrone&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/release/UAV-Pilot-WumpusRoverr&#34;&gt;UAV::Pilot::WumpusRover&lt;/a&gt; enables WiFi remote control (with video) of drones! Timm&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Device::WebIO&#34;&gt;Device::WebIO&lt;/a&gt; provides a standardized interface for accessing many devices with drivers available for Raspberry Pi and Arduino among others.&lt;/p&gt;

&lt;p&gt;Another significant development was Paul Evan&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Device::BusPirate&#34;&gt;Device::BusPirate&lt;/a&gt;, for the Bus Pirate hardware tool. Finally, check out &lt;a href=&#34;https://metacpan.org/pod/VIC&#34;&gt;VIC&lt;/a&gt;, Vikas Kumar&amp;rsquo;s amazing DSL for PIC micro-controllers.&lt;/p&gt;

&lt;h3 id=&#34;presenting-software:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Presenting Software&lt;/h3&gt;

&lt;p&gt;Pretend you&amp;rsquo;re a command line wizard with &lt;a href=&#34;https://metacpan.org/pod/App::Cleo&#34;&gt;App::Cleo&lt;/a&gt;, which will playback a list of commands from a file for airtight demos. No more typos!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/App::revealup&#34;&gt;App::revealup&lt;/a&gt; enables markdown driven presentations with Reveal.js, by implementing a mini HTTP server. I &lt;a href=&#34;http://perltricks.com/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup&#34;&gt;wrote&lt;/a&gt; about it (&lt;a href=&#34;http://perltricks.com/article/134/2014/11/13/Advanced-slideshow-maneuvers&#34;&gt;twice&lt;/a&gt;) and use it all the time, highly recommended.&lt;/p&gt;

&lt;h3 id=&#34;testing:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;There was a tonne of new testing stuff this year, but not much stuck with me. One module that did was &lt;a href=&#34;https://metacpan.org/pod/Test::RequiresInternet&#34;&gt;Test::RequiresInternet&lt;/a&gt;. Import this module with &lt;code&gt;use&lt;/code&gt; and it will skip over the unit tests in your test file unless an active internet connection is found. Very handy!&lt;/p&gt;

&lt;p&gt;Not exactly testing related, but surely useful for debugging, &lt;a href=&#34;https://metacpan.org/pod/Regexp::Lexer&#34;&gt;Regexp::Lexer&lt;/a&gt; tokenizes regexes, which is just cool.&lt;/p&gt;

&lt;h3 id=&#34;web:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Web&lt;/h3&gt;

&lt;p&gt;Masahiro Nagano created &lt;a href=&#34;https://metacpan.org/pod/Gazelle&#34;&gt;Gazelle&lt;/a&gt;, a highly optimized pre-forking Plack handler with Nginx-like performance. Incredible stuff!&lt;/p&gt;

&lt;p&gt;2014 also brought the usual flood of plugins for the major web frameworks. Big news for Mojo fans was the announcement of the platform moving away from MongoDB support and embracing a Postgres backend instead with &lt;a href=&#34;https://metacpan.org/pod/Mojo::Pg&#34;&gt;Mojo::Pg&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Web scrapers and QA testers did well: &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize::PhantomJS&#34;&gt;WWW::Mechanize::PhantomJS&lt;/a&gt; implements a headless, JavaScript enabled browser with the typical friendly mechanize interface. &lt;a href=&#34;https://metacpan.org/pod/Selenium::Screenshot&#34;&gt;Selenium::Screenshot&lt;/a&gt; combines Selenium&amp;rsquo;s screenshot ability with &lt;a href=&#34;https://metacpan.org/pod/Image::Compare&#34;&gt;Image::Compare&lt;/a&gt; to detect changes in web pages.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - October 2014</title>
      <link>https://dnmfarrell.github.io/article/132/2014/11/7/What-s-new-on-CPAN---October-2014/</link>
      <pubDate>Fri, 07 Nov 2014 13:22:17 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/132/2014/11/7/What-s-new-on-CPAN---October-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::HackerNews&#34;&gt;WebService::HackerNews&lt;/a&gt; provides an interface to HackerNews, woohoo!&lt;/li&gt;
&lt;li&gt;Like music album cover art? &lt;a href=&#34;https://metacpan.org/pod/WWW::Search::Coveralia&#34;&gt;WWW::Search::Coveralia&lt;/a&gt; provides a search API for Coveralia.com&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Games::Dukedom&#34;&gt;Games::Dukedom&lt;/a&gt; implements the land management game in the terminal&lt;/li&gt;
&lt;li&gt;Convert anything to anything in the cloud using &lt;a href=&#34;https://metacpan.org/pod/App::cloudconvert&#34;&gt;App::cloudconvert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::DistSync&#34;&gt;App::DistSync&lt;/a&gt; is a file synchronization app&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;async-concurrency:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Async &amp;amp; Concurrency&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Async::HTTP&#34;&gt;Test::Async::HTTP&lt;/a&gt; is a mock class for testing the asynchronous user agent&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lock::Socket&#34;&gt;Lock::Socket&lt;/a&gt; is a clever module that provides process locking via sockets&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Slurp with confidence using &lt;a href=&#34;https://metacpan.org/pod/File::Slurper&#34;&gt;File::Slurper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;It has a long title but it&amp;rsquo;s worth it: &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::InflateColumn::Serializer::Sereal&#34;&gt;DBIx::Class::InflateColumn::Serializer::Sereal&lt;/a&gt; inflates / deflates into DBIx columns using the super-fast Sereal!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Couchbase::README&#34;&gt;Couchbase&lt;/a&gt; is a new Perl client for the NoSQL database, implemented in XS&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::Address::Formatter&#34;&gt;Geo::Address::Formatter&lt;/a&gt; formats addresses from all over the World.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FFI::TinyCC&#34;&gt;FFI::TinyCC&lt;/a&gt; provides an interface to the super-fast (compile time) TinyCC compiler&lt;/li&gt;
&lt;li&gt;Another useful FFI library, &lt;a href=&#34;https://metacpan.org/pod/FFI::CheckLib&#34;&gt;FFI::CheckLib&lt;/a&gt; will check that a C library is available for FFI to use&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;math-science-language:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Math, Science &amp;amp; Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Generate random, normally distributed numbers with &lt;a href=&#34;https://metacpan.org/pod/Math::Random::Normal::Leva&#34;&gt;Math::Random::Normal::Leva&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Related, &lt;a href=&#34;https://metacpan.org/pod/Rand::Urandom%20&#34;&gt;Rand::Urandom&lt;/a&gt;will generate better pseudo random numbers&lt;/li&gt;
&lt;li&gt;Do efficient fuzzy matching with &lt;a href=&#34;https://metacpan.org/pod/Tree::BK&#34;&gt;Tree::BK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Rstats&#34;&gt;Rstats&lt;/a&gt; exports R functions, an interesting alternative to Statistics::R. Next step, Inline::R!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;object-oriented:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Object Oriented&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::Role::Hashable&#34;&gt;MooseX::Role::Hashable&lt;/a&gt; enables Moose object to be convertible into hashes!&lt;/li&gt;
&lt;li&gt;Get some useful extra type constraint methods from &lt;a href=&#34;https://metacpan.org/pod/MooseX::Types::MoreUtils&#34;&gt;MooseX::Types::MoreUtils&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing-exceptions:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Testing &amp;amp; Exceptions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Devel::DidYouMean&#34;&gt;Devel::DidYouMean&lt;/a&gt; intercepts failed subroutine calls and suggests useful alternatives (disclaimer - I am the module author.)&lt;/li&gt;
&lt;li&gt;Conveniently test that numbers are within tolerance using &lt;a href=&#34;https://metacpan.org/pod/Test::Deep::NumberTolerant&#34;&gt;Test::Deep::NumberTolerant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:f6999598db609c37ec3c6dadd36b47e0&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Per the documention: &lt;a href=&#34;https://metacpan.org/pod/Mojo::Pg&#34;&gt;Mojo::Pg&lt;/a&gt; &amp;ldquo;makes PostgreSQL a lot of fun to use with the Mojolicious&amp;rdquo;. Check it out!&lt;/li&gt;
&lt;li&gt;Want to generate a sitemap for a web app? Check out &lt;a href=&#34;https://metacpan.org/pod/WWW::Sitemap::Simple&#34;&gt;WWW::Sitemap::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::Auth::OAuth&#34;&gt;Dancer2::Plugin::Auth::OAuth&lt;/a&gt; makes is easy to incorporate open auth into a Dancer2 web app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Help us&lt;/strong&gt; make &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo; better! Add your suggestions to the r/perl &lt;a href=&#34;http://www.reddit.com/r/perl/comments/2lkrq7/whats_new_on_cpan_october/&#34;&gt;post&lt;/a&gt; for this article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updates&lt;/strong&gt;: &lt;em&gt;additional web modules added to article 2014-11-08.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

