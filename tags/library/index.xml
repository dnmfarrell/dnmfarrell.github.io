<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Library on Code - a programming blog</title>
    <link>https://blog.dnmfarrell.com/tags/library/</link>
    <description>Recent content in Library on Code - a programming blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Jun 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.dnmfarrell.com/tags/library/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Modulinos In Bash</title>
      <link>https://blog.dnmfarrell.com/post/modulinos-in-bash/</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.dnmfarrell.com/post/modulinos-in-bash/</guid>
      <description>&lt;p&gt;A modulino is a file which behaves like a library when it is imported, and like a script when executed. I first read about them in &lt;a href=&#34;https://www.oreilly.com/library/view/mastering-perl-2nd/9781449364946/&#34;&gt;Mastering Perl&lt;/a&gt;, but you can create them in other languages too. Here&amp;rsquo;s how to do it in Bash.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s say you have a simple script:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash&#xA;&#xA;echo &amp;quot;Hello, World!&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;A common refactor with scripts is to encapsulate all the code behavior in functions. As this script only does one thing, it&amp;rsquo;s a small change:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
