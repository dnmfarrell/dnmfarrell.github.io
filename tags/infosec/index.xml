<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Infosec on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/infosec/</link>
    <description>Recent content in Infosec on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Mar 2016 08:57:00 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/infosec/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Netanel Rubin&#39;s Perl Jam circus</title>
      <link>http://perltricks.com/article/netanel-rubins-perljam-circus/</link>
      <pubDate>Tue, 01 Mar 2016 08:57:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/netanel-rubins-perljam-circus/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve just watched Netanel Rubin&amp;rsquo;s Perl Jam 2 &lt;a href=&#34;https://www.youtube.com/watch?v=eH_u3C2WwQ0&#34;&gt;talk&lt;/a&gt; from this year&amp;rsquo;s Chaos Communication Congress. As he&amp;rsquo;s due to give the same talk at &lt;a href=&#34;https://www.blackhat.com/asia-16/&#34;&gt;Black Hat Asia&lt;/a&gt;, I thought it would be good to set the record straight concerning his claims about Perl (&lt;a href=&#34;https://gist.github.com/preaction/978ce941f05769b064f4&#34;&gt;others&lt;/a&gt; have already done so). He makes 3 major claims:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Perl language is insecure&lt;/li&gt;
&lt;li&gt;Bugzilla &amp;amp; CGI.pm are representative of idiomatic Perl&lt;/li&gt;
&lt;li&gt;Perl doesn&amp;rsquo;t improve&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;m going to address each claim in turn and show why it is false. In my view, Perl remains a powerful, general-purpose language well-suited to tasks like building dynamic web applications, processing big data, and managing systems.&lt;/p&gt;

&lt;h3 id=&#34;claim-1-the-perl-language-is-insecure:d158258b1d06be868d3b174d51dace7b&#34;&gt;Claim 1: The Perl language is insecure&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Function declarations cannot specify argument data types&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This isn&amp;rsquo;t true. Since 2008 Perl has supported subroutine signatures, with type checks using the &lt;a href=&#34;https://metacpan.org/pod/Method::Signatures&#34;&gt;Method::Signatures&lt;/a&gt; module. Since 2006 the &lt;a href=&#34;https://metacpan.org/pod/Moose&#34;&gt;Moose&lt;/a&gt; object system provided a fully-fledged &lt;a href=&#34;https://metacpan.org/pod/Moose::Util::TypeConstraints&#34;&gt;type system&lt;/a&gt; and meta object programming interface (there&amp;rsquo;s also &lt;a href=&#34;https://metacpan.org/pod/MooseX::Method::Signatures&#34;&gt;MooseX::Method::Signatures&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Developers treat hashes and arrays as &amp;ldquo;secure&amp;rdquo; data types &amp;hellip; this is the Perl standard. You&amp;rsquo;re not expected to use it, you have to, as you don&amp;rsquo;t have any other choice. This security mess is a fundamental part of the language.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Netanel starts by describing taint mode and claims that hashes are so secure, hash keys bypass Perl&amp;rsquo;s taint check. It&amp;rsquo;s true that hash keys are never considered tainted. This is documented in &lt;a href=&#34;http://perldoc.perl.org/perlsec.html#Taint-mode&#34;&gt;perldoc&lt;/a&gt; and discussed in depth in Chapter 2 of &lt;a href=&#34;http://masteringperl.org&#34;&gt;Mastering Perl&lt;/a&gt;. But it&amp;rsquo;s not because hashes are assumed to be secure, it&amp;rsquo;s because tainting hash keys involves a huge performance penalty. He never explains his claim as to why arrays are considered secure.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s &lt;code&gt;ref&lt;/code&gt; function is a reliable and secure way to determine the data type of a reference. Arguments passed to functions are always passed as an array of scalars via &lt;code&gt;@_&lt;/code&gt;. There is no doubt, no ambiguity. It&amp;rsquo;s not required security-wise, but if you want to use them you can use function signatures, types and meta-object programming in Perl. They&amp;rsquo;ve been available for years.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But I felt all of these points will go unnoticed without an extreme example of Perl&amp;rsquo;s absurdity. So I found an extreme example. One that will clearly show the ridiculousness nature of the language.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the vulnerable code, from an example CGI application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use CGI;

my $cgi = CGI-&amp;gt;new;

if ($cgi-&amp;gt;upload( &#39;file&#39; )) {
  my $file = $cgi-&amp;gt;param( &#39;file&#39; );
  while (&amp;lt;$file&amp;gt;) {
    print &amp;quot;$_&amp;quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The issue with this code is that if &lt;code&gt;$file&lt;/code&gt; has the value of &lt;code&gt;ARGV&lt;/code&gt;, the diamond operator &lt;code&gt;&amp;lt;$file&amp;gt;&lt;/code&gt; will call &lt;code&gt;open&lt;/code&gt; on every value in &lt;code&gt;@ARGV&lt;/code&gt;. CGI populates &lt;code&gt;@ARGV&lt;/code&gt; with the HTTP query parameters which creates the vulnerability. So if the HTTP query parameter is &lt;code&gt;ls|&lt;/code&gt;, Perl will execute &lt;code&gt;ls&lt;/code&gt;. If the CGI program was running in taint mode, this attack vector would fail. Regardless, it&amp;rsquo;s a well-understood risk, the PLEAC project&amp;rsquo;s Perl &lt;a href=&#34;http://ramenlabs.com/pleac-pdf/pleac_perl.pdf&#34;&gt;recommendations&lt;/a&gt; from 1999 shows how to properly parse file descriptors in CGI parameters (ex 19.4). O&amp;rsquo;Reilly&amp;rsquo;s &lt;a href=&#34;http://www.oreilly.com/openbook/cgi/ch07_04.html&#34;&gt;CGI Programming on the Web&lt;/a&gt; by Shishir Gundavaram recommended parsing metacharacters like &lt;code&gt;|&lt;/code&gt; from user input, which also prevents this attack. That book was published in 1996.&lt;/p&gt;

&lt;p&gt;The piping open behavior is well documented in &lt;a href=&#34;http://perldoc.perl.org/functions/open.html&#34;&gt;open&lt;/a&gt;, &lt;a href=&#34;http://perldoc.perl.org/perlipc.html#Using-open%28%29-for-IPC&#34;&gt;perlipc&lt;/a&gt; and &lt;a href=&#34;http://perldoc.perl.org/perlsec.html&#34;&gt;perlsec&lt;/a&gt;. Chapter 2 of &lt;a href=&#34;http://masteringperl.org&#34;&gt;Mastering Perl&lt;/a&gt; also covers it. It&amp;rsquo;s a useful feature when you want to efficiently process a lot of data from an external command: just like a shell pipe, it creates a socket between the Perl program and the external binary, avoiding the need to read the entire output into memory at once.&lt;/p&gt;

&lt;p&gt;Netanel also identified a SQL injection vulnerability in Bugzilla. The weakness was caused by a poorly coded function which failed to properly validate input used in a dynamic SQL query. The developers should have used the safer pass-by-parameter &lt;a href=&#34;https://metacpan.org/pod/DBI&#34;&gt;DBI&lt;/a&gt; &lt;code&gt;prepare&lt;/code&gt; and &lt;code&gt;execute&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;In both cases Perl provided methods for securely parsing untrusted input, but the developers didn&amp;rsquo;t use them.&lt;/p&gt;

&lt;h3 id=&#34;claim-2-bugzilla-cgi-pm-are-representative-of-idiomatic-perl:d158258b1d06be868d3b174d51dace7b&#34;&gt;Claim 2: Bugzilla &amp;amp; CGI.pm are representative of idiomatic Perl&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Like every other Perl project, Bugzilla is heavily using functions that treat scalar and non-scalar argument types very differently.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Netanel is referring to this code from his talk, which uses the argument type to decide what to do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub test {
  $arg1 = @_; # Get an argument

  if (ref $arg1 eq &#39;HASH&#39;)
    print $arg1{&#39;key&#39;};
  else
    print $arg1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aside from the fact that Netanel&amp;rsquo;s code contains a big error which means it would never work, the claim that every other Perl project is coded in this way is preposterous. &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt; is a popular Perl project with over 20,000 lines of code. Can you guess how frequently Dist::Zilla uses the construct Netanel describes? A quick grep of the code shows zero instances. Bugzilla was developed in 1998, it is not an example of &lt;a href=&#34;http://modernperlbooks.com/books/modern_perl_2014/index.html&#34;&gt;Modern Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Regarding CGI.pm, I can&amp;rsquo;t say it better than the official &lt;a href=&#34;https://metacpan.org/pod/CGI#CGI.pm-HAS-BEEN-REMOVED-FROM-THE-PERL-CORE&#34;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CGI.pm HAS BEEN REMOVED FROM THE PERL CORE&lt;/p&gt;

&lt;p&gt;The rationale for this decision is that CGI.pm is no longer considered good practice for developing web applications, including quick prototyping and small web scripts. There are far better, cleaner, quicker, easier, safer, more scalable, more extensible, more modern alternatives available at this point in time.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;CGI.pm documentation&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;claim-3-perl-doesn-t-improve:d158258b1d06be868d3b174d51dace7b&#34;&gt;Claim 3: Perl doesn&amp;rsquo;t improve&lt;/h3&gt;

&lt;p&gt;Things get interesting during the Q&amp;amp;A section of the talk when an audience member says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We use Perl for almost every module that we have at work, and it works really fine. I don&amp;rsquo;t know why you are picking Perl as a language to attack. It&amp;rsquo;s a really old language, and every language you can pick has problems, it doesn&amp;rsquo;t mean that &amp;hellip; you have to stop using it.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Audience Member, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Netanel responds:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;C got criticized and it improved. PHP got criticized and it improved. Why can&amp;rsquo;t Perl be criticized too? &amp;hellip; why don&amp;rsquo;t they improve the language?&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The funny thing is Perl is improving all the time. Every year there is a major release of Perl which brings new features and enhancements to the language (&lt;a href=&#34;http://perldoc.perl.org/index-history.html&#34;&gt;history&lt;/a&gt;). Last year&amp;rsquo;s &lt;a href=&#34;http://perldoc.perl.org/perldelta.html&#34;&gt;release&lt;/a&gt; included a new operator, the &lt;a href=&#34;http://www.effectiveperlprogramming.com/2015/05/use-perl-5-22s-operator-for-safe-command-line-handling/&#34;&gt;double diamond&lt;/a&gt; &lt;code&gt;&amp;lt;&amp;lt; &amp;gt;&amp;gt;&lt;/code&gt; which disables the piping open behavior shown earlier. CGI.pm was removed from Perl&amp;rsquo;s core modules list in May 2014. Both of those occurrences predate Netanel&amp;rsquo;s talk.&lt;/p&gt;

&lt;p&gt;Instead of waiting for a major release milestone, the Perl development team can fix critical security issues in a minor release if needed (for example see &lt;a href=&#34;http://perldoc.perl.org/perl5163delta.html&#34;&gt;5.16.3&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Perl also has a strong toolchain for evaluating Perl code. &lt;a href=&#34;https://metacpan.org/pod/distribution/Perl-Critic/bin/perlcritic&#34;&gt;Perl::Critic&lt;/a&gt; is a linter that reviews Perl code against recommended coding practices. There is even a &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::PreventSQLInjection&#34;&gt;policy&lt;/a&gt; to check for potential SQL injection vulnerabilities.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:d158258b1d06be868d3b174d51dace7b&#34;&gt;Conclusion&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You can&amp;rsquo;t always live in the fear of not knowing what data type you are trying to handle &amp;hellip; not trusting your hashes, not trusting your arrays, what&amp;rsquo;s next, not trusting your own code?&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As someone who has years of experience writing professional Perl code, and working with Perl programmers, I do not recognize this experience at all. All Netanel has shown is an attack on some example code from a neglected module and a SQL injection bug in a legacy application.&lt;/p&gt;

&lt;p&gt;Is the Ruby language to blame for a vulnerability in &lt;a href=&#34;http://arstechnica.com/business/2012/03/hacker-commandeers-github-to-prove-vuln-in-ruby/&#34;&gt;Ruby-on-Rails&lt;/a&gt;? Is PHP insecure because over 950 &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=wordpress&#34;&gt;exploits&lt;/a&gt; were found for WordPress? This isn&amp;rsquo;t a dynamic language issue either; in &lt;a href=&#34;http://danluu.com/empirical-pl&#34;&gt;Static vs. dynamic languages: a literature review&lt;/a&gt; author Dan Luu found little evidence that statically typed languages were safer than dynamic ones.&lt;/p&gt;

&lt;p&gt;Anytime you fail to adequately parse untrusted input you&amp;rsquo;re going to have a bad day. Blaming Perl for developers&amp;rsquo; bad code is like blaming the Alphabet for being turned into 50 Shades of Grey.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Port scanning with Perl</title>
      <link>http://perltricks.com/article/183/2015/7/20/Port-scanning-with-Perl/</link>
      <pubDate>Mon, 20 Jul 2015 13:14:57 +0000</pubDate>
      
      <guid>http://perltricks.com/article/183/2015/7/20/Port-scanning-with-Perl/</guid>
      <description>

&lt;p&gt;My recent infosec articles have focused on livehost discovery on a network. Inspired by Douglas Berdeaux&amp;rsquo;s &lt;a href=&#34;https://www.packtpub.com/networking-and-servers/penetration-testing-perl-raw&#34;&gt;Penetration Testing with Perl&lt;/a&gt;, I&amp;rsquo;ve assembled a potent &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl&#34;&gt;collection&lt;/a&gt; of livehost scanners including ARP, echo, SMB and Netbios. Each of these have different strengths and weaknesses. Regardless, once you&amp;rsquo;ve discovered a livehost and you want to probe for vulnerabilities, a port scan is the logical next step.&lt;/p&gt;

&lt;h3 id=&#34;port-scanning-explained:0226148b78d51ab3b712e314ee5a8000&#34;&gt;Port Scanning Explained&lt;/h3&gt;

&lt;p&gt;An IP address identifies the network location of a computer, but once the computer receives a UDP datagram or TCP packet it then needs to decide where to route it internally within itself. Every TCP/UDP parcel contains a &amp;ldquo;destination port&amp;rdquo; field, which is where the computer will attempt to deliver the packet/datagram. Every computer has 65,535 available TCP and UDP ports for services to use. Many are already assigned for common services, like 22 for SSH, 25 for SMTP and 80 for HTTP.&lt;/p&gt;

&lt;p&gt;Port scanning is the act of probing the ports of another computer to understand which ports are &amp;ldquo;open&amp;rdquo; (have services listening on them), &amp;ldquo;filtered&amp;rdquo; (prevented access by a firewall) and &amp;ldquo;closed&amp;rdquo; (have no services listening on them). Once the attacker has an idea of which ports are open, they can begin probing those services for weaknesses. For example, if I ran a port scan against a remote server and found port 25 SMTP to be open, I could try a number of attacks against it. I could telnet to the livehost&amp;rsquo;s IP address on port 25, and attempt to discover a username on the system using the &amp;lsquo;VRFY&amp;rsquo; command. Once I had a username, I could proceed with a brute force password cracking attempt - possibly on port 22 or against a web application if it was running on the host. I may not even need a username and password if I succeed in a buffer overflow attack against the email service listening on port 25.&lt;/p&gt;

&lt;h3 id=&#34;port-scanning-with-perl:0226148b78d51ab3b712e314ee5a8000&#34;&gt;Port scanning with Perl&lt;/h3&gt;

&lt;p&gt;A basic port scanner needs to be able to take an IP address of a livehost, enumerate a list of ports, send a packet to each port on the livehost and listen and decode the responses. Perl has a number of modules that make this easier. I&amp;rsquo;m going to step through each requirement one by one.&lt;/p&gt;

&lt;h4 id=&#34;parsing-command-line-arguments:0226148b78d51ab3b712e314ee5a8000&#34;&gt;Parsing command line arguments&lt;/h4&gt;

&lt;p&gt;We can use &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Pod::Usage&#34;&gt;Pod::Usage&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Getopt::Long;
use Pod::Usage;

GetOptions (
  &#39;help|?&#39;    =&amp;gt; sub { pod2usage(2) },
  &#39;ip=s&#39;      =&amp;gt; \my $target_ip,
);

# validate required args are given
die &amp;quot;Missing --ip parameter, try --help\n&amp;quot; unless $target_ip;

__END__

=head1 NAME

port_scanner - a concurrent randomized tcp/udp port scanner written in Perl

=head1 SYNOPSIS

port_scanner [options]

 Options:
  --ip,     -i   ip address to scan e.g. 10.30.1.52
  --help,   -h   display this help text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;GetOptions&lt;/code&gt; function parses command line arguments and assigns them to variables. Getop::Long can handle shortened option names so &lt;code&gt;--ip 10.0.1.5&lt;/code&gt; and &lt;code&gt;-i 10.0.1.5&lt;/code&gt; will both assign the IP address to the variable &lt;code&gt;$target_ip&lt;/code&gt;. If the program receives &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;-?&lt;/code&gt; it will print out the documentation using &lt;code&gt;pod2usage&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;discovering-the-local-ip-and-port:0226148b78d51ab3b712e314ee5a8000&#34;&gt;Discovering the local IP and port&lt;/h4&gt;

&lt;p&gt;To send an IP packet, we need both the destination and the local IP address. We&amp;rsquo;ll also need a local port.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Net::Address::IP::Local;
use IO::Socket::INET;

my $local_ip   = Net::Address::IP::Local-&amp;gt;public;

# find a random free port by opening a socket using the protocol
my $local_port = do {
  my $socket = IO::Socket::INET-&amp;gt;new(Proto =&amp;gt; &#39;tcp&#39;, LocalAddr =&amp;gt; $local_ip);
  my $socket_port = $socket-&amp;gt;sockport();
  $socket-&amp;gt;close;
  $socket_port;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get the local ip address, I call the &lt;code&gt;public&lt;/code&gt; method provided by the &lt;a href=&#34;https://metacpan.org/pod/Net::Address::IP::Local&#34;&gt;Net::Address::IP::Local&lt;/a&gt; module. Easy! Finding a local port that is available is more involved. In theory any unnamed port should be available, but there might be another service already using it. Instead I create a new socket object using &lt;a href=&#34;https://metacpan.org/pod/IO::Socket::INET&#34;&gt;IO::Socket::INET&lt;/a&gt; without specifying a local port. Under the hood, this attempts to open a socket on port zero, and the operating system will then automatically assign an available port to the socket (zero is reserved). This has the added benefit of randomizing the local port used by the scanner every time it runs. I then save the port number the socket was opened on, and close the socket.&lt;/p&gt;

&lt;h4 id=&#34;getting-a-list-of-ports-to-scan:0226148b78d51ab3b712e314ee5a8000&#34;&gt;Getting a list of ports to scan&lt;/h4&gt;

&lt;p&gt;For our simple scanner, I&amp;rsquo;ll focus on scanning named ports, that is port numbers pre-assigned to services by the &lt;a href=&#34;http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml&#34;&gt;IANA&lt;/a&gt;. Fortunately for us, the developers behind the popular NMAP tool have already assembled a text &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl/blob/master/data/nmap-services.txt&#34;&gt;file&lt;/a&gt; of named ports, and I&amp;rsquo;ll use this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use List::Util &#39;shuffle&#39;;

my %port_directory;
open my $port_file, &#39;&amp;lt;&#39;, &#39;data/nmap-services.txt&#39;
  or die &amp;quot;Error reading data/nmap-services.txt $!\n&amp;quot;;

while (&amp;lt;$port_file&amp;gt;)
{
  next if /^#/; # skip comments
  chomp;
  my ($name, $number_protocol, $probability, $comments) = split /\t/;
  my ($port, $proto) = split /\//, $number_protocol;

  $port_directory{$number_protocol} = {
    port        =&amp;gt; $port,
    proto       =&amp;gt; $proto,
    name        =&amp;gt; $name,
    probability =&amp;gt; $probability,
    comments    =&amp;gt; $comments,
  };free
}

my @ports = shuffle do {
    map { $port_directory{$_}-&amp;gt;{port} }
      grep { $port_directory{$_}-&amp;gt;{name} !~ /^unknown$/
             &amp;amp;&amp;amp; $port_directory{$_}-&amp;gt;{proto} eq &#39;tcp&#39; } keys %port_directory;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code starts by importing the &lt;code&gt;shuffle&lt;/code&gt; function from &lt;a href=&#34;https://metacpan.org/pod/List::Util&#34;&gt;List::Util&lt;/a&gt;, which I use later to randomize the order of the list of ports. I then open a filehandle to the nmap-services text file, loop through it building the &lt;code&gt;%port_directory&lt;/code&gt; hash. Finally I loop through the the port directory with &lt;code&gt;grep&lt;/code&gt;, extracting all the tcp ports not labeled &amp;ldquo;unknown&amp;rdquo;, use &lt;code&gt;map&lt;/code&gt; to extract the port number from the hash, shuffling the port numbers to randomize their entry into &lt;code&gt;@ports&lt;/code&gt; (shuffle may be unnecessary in newer versions of Perl as hash key order is randomized anyway).&lt;/p&gt;

&lt;h4 id=&#34;sending-packets-and-listening-for-responses:0226148b78d51ab3b712e314ee5a8000&#34;&gt;Sending packets and listening for responses&lt;/h4&gt;

&lt;p&gt;We need to send packets and listen for responses simultaneously, because if we send the packets first and &lt;em&gt;then&lt;/em&gt; listen for packets, we might have missed some responses in the interim. To do this I use &lt;code&gt;fork&lt;/code&gt; to create child processes for sending packets, and use the parent process to listen for responses.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Net::Pcap;
use POSIX qw/WNOHANG ceil/;

# apportion the ports to scan between processes
my $procs = 50;
my $batch_size = ceil(@ports / $procs);
my %total_ports = map { $_ =&amp;gt; &#39;filtered&#39; } @ports; # for reporting
my @child_pids;

for (1..$procs)
{
  my @ports_to_scan = splice @ports, 0, $batch_size;
  my $parent = fork;
  die &amp;quot;unable to fork!\n&amp;quot; unless defined ($parent);

  if ($parent)
  {
    push(@child_pids, $parent);
    next;
  }

  # child waits until the parent signals to continue
  my $continue = 0;
  local $SIG{CONT} = sub { $continue = 1};
  until ($continue) {}

  for my $target_port (@ports_to_scan)
  {
    sleep(1);
    send_packet($target_port);
  }
  exit 0; # exit child
}

# setup parent packet capture
my $device_name = pcap_lookupdev(\my $err);
pcap_lookupnet($device_name, \my $net, \my $mask, \$err);
my $pcap = pcap_open_live($device_name, 1024, 0, 1000, \$err);
pcap_compile(
  $pcap,
  \my $filter,
  &amp;quot;(src net $target_ip) &amp;amp;&amp;amp; (dst port $local_port)&amp;quot;,
  0,
  $mask
);
pcap_setfilter($pcap,$filter);

# signal the child pids to start sending
kill CONT =&amp;gt; $_ for @child_pids;

until (waitpid(-1, WNOHANG) == -1) # until all children exit
{
  my $packet_capture = pcap_next_ex($pcap,\my %header,\my $packet);

  if($packet_capture == 1)
  {
    read_packet($packet);
  }
  elsif ($packet_capture == -1)
  {
    warn &amp;quot;libpcap errored while reading a packet\n&amp;quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a lot of code to process, but l&amp;rsquo;m going to cover the broad strokes. The code forks 50 child processes and assigns a batch of ports to each child. I install a signal handler for the &lt;code&gt;CONT&lt;/code&gt; signal in each child, and pause the child processes until that signal is received. This is to stop the children from going ahead and firing off packets that the parent is not ready to capture. Once all the children have been created, the parent process sets up a packet capture object using &lt;a href=&#34;https://metacpan.org/pod/Lib::Pcap&#34;&gt;Lib::Pcap&lt;/a&gt;. The capture object is given a filter for the &lt;code&gt;$target_ip&lt;/code&gt; and the &lt;code&gt;$local_port&lt;/code&gt; which we discovered earlier.&lt;/p&gt;

&lt;p&gt;The parent then signals the children processes using &lt;code&gt;kill&lt;/code&gt; and the children begin sending packets using &lt;code&gt;send_packet&lt;/code&gt; (defined below). Finally the parent process starts a loop listening for packets using &lt;code&gt;waitpid&lt;/code&gt; to determine when all of the children have finished sending their packets and exited. During the loop, the parent calls &lt;code&gt;read_packet&lt;/code&gt; (defined below) every time it receives a new packet.&lt;/p&gt;

&lt;p&gt;You might be wondering what the constant &lt;code&gt;WNOHANG&lt;/code&gt; is for. When &lt;code&gt;waitpid&lt;/code&gt; is called with -1, it attempts to reap any terminated child processes. In the excellent &lt;a href=&#34;http://www.amazon.com/Network-Programming-Perl-Lincoln-Stein/dp/0201615711&#34;&gt;Network Programming with Perl&lt;/a&gt;, Lincoln Stein explains there are three scenarios which can cause &lt;code&gt;waitpid&lt;/code&gt; to hang or lose track of child processes; if a child process is terminated or restarted by a signal, if two child processes terminate at virtually the same time or if the parent process inadvertently creates new children via system calls. &lt;code&gt;WNOHANG&lt;/code&gt; protects against these scenarios to ensure all child processes will be properly reaped by the parent process.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s look at the &lt;code&gt;send_packet&lt;/code&gt; subroutine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Net::RawIP;

sub send_packet
{
  my ($target_port) = @_;

  Net::RawIP-&amp;gt;new({ ip =&amp;gt; {
                      saddr =&amp;gt; $local_ip,
                      daddr =&amp;gt; $target_ip,
                    },
                    tcp =&amp;gt; {
                      source =&amp;gt; $local_port,
                      dest   =&amp;gt; $target_port,
                      syn =&amp;gt; 1,
                    },
                  })-&amp;gt;send;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code uses the much under-appreciated &lt;a href=&#34;https://metacpan.org/pod/Net::RawIP&#34;&gt;Net::RawIP&lt;/a&gt; module to craft TCP packets and send them to our target destination. We set the SYN flag to 1 to trigger the beginning of a three-way TCP connection which we will never complete. This is a stealthy way to discover ports - by not completing the handshake our requests will not be logged unless the target has been configured to capture this data.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;read_packet&lt;/code&gt; subroutine is a bit more involved:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use NetPacket::Ethernet;
use NetPacket::IP;
use NetPacket::TCP;

sub read_packet
{
  my ($raw_data) = @_;
  my $ip_data = NetPacket::Ethernet::strip($raw_data);
  my $ip_packet = NetPacket::IP-&amp;gt;decode($ip_data);

  # is it TCP
  if ($ip_packet-&amp;gt;{proto} == 6)
  {
    my $tcp = NetPacket::TCP-&amp;gt;decode(NetPacket::IP::strip($ip_data));
    my $port = $tcp-&amp;gt;{src_port};
    my $port_name = exists $port_directory{&amp;quot;$port/tcp&amp;quot;}
      ? $port_directory{&amp;quot;$port/tcp&amp;quot;}-&amp;gt;{name}
      : &#39;&#39;;

    if ($tcp-&amp;gt;{flags} &amp;amp; SYN)
    {
      printf &amp;quot; %5d %-20s %-20s\n&amp;quot;, $port, &#39;open&#39;, $port_name;
      $total_ports{$port} = &#39;open&#39;;
    }
    elsif ($tcp-&amp;gt;{flags} &amp;amp; RST)
    {
      printf &amp;quot; %5d %-20s %-20s\n&amp;quot;, $port, &#39;closed&#39;, $port_name;
      $total_ports{$port} = &#39;closed&#39;;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use the &lt;a href=&#34;https://metacpan.org/pod/NetPacket&#34;&gt;NetPacket&lt;/a&gt; distribution to parse the incoming packets. The first check &lt;code&gt;if ($ip_packet-&amp;gt;{proto} == 6)&lt;/code&gt; is to check that we&amp;rsquo;re processing a TCP packet (each protocol has a number - see &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers&#34;&gt;list&lt;/a&gt;). The code then parses the TCP packet and looks up the port name in our &lt;code&gt;%port_directory&lt;/code&gt; created earlier. &lt;code&gt;SYN&lt;/code&gt; and &lt;code&gt;RST&lt;/code&gt; are constants exported by &lt;a href=&#34;https://metacpan.org/pod/NetPacket::TCP&#34;&gt;NetPacket::TCP&lt;/a&gt;, which are ANDed against the flags value of the TCP header to identify the type of TCP packet. If we&amp;rsquo;ve received a SYN packet, it looks like the port is open, a RST packet indicates the port is closed.&lt;/p&gt;

&lt;h4 id=&#34;summarizing-the-results:0226148b78d51ab3b712e314ee5a8000&#34;&gt;Summarizing the results&lt;/h4&gt;

&lt;p&gt;Once the port scan has finished, all closed and open ports should have been printed out. But there are also the filtered ports to think about - by definition we&amp;rsquo;ll never receive a response for those. I&amp;rsquo;ve used the &lt;code&gt;%total_ports&lt;/code&gt; hash to track the status of ports. Every port starts as &amp;ldquo;filtered&amp;rdquo;, and is set to &amp;ldquo;open&amp;rdquo; or &amp;ldquo;closed&amp;rdquo; as responses are received. We can then use this data to summarize the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;printf &amp;quot;\n %d ports scanned, %d filtered, %d closed, %d open\n&amp;quot;,
  scalar(keys %total_ports),
  scalar(grep { $total_ports{$_} eq &#39;filtered&#39; } keys %total_ports),
  scalar(grep { $total_ports{$_} eq &#39;closed&#39;   } keys %total_ports),
  scalar(grep { $total_ports{$_} eq &#39;open&#39;     } keys %total_ports);

END { pcap_close($pcap) if $pcap }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;END&lt;/code&gt; block executes in the final stage of a Perl program, and closes the packet capture object. This won&amp;rsquo;t execute if the program receives a INT or TERM signal during execution, so I can add signal handlers to ensure Perl shuts down in an orderly way, should a signal be received:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;BEGIN { $SIG{INT} = $SIG{TERM} = sub { exit 0 } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can add this code near the beginning of the program, but the &lt;code&gt;BEGIN&lt;/code&gt; block ensures it will execute early in the program&amp;rsquo;s startup phase, before the main code is executed.&lt;/p&gt;

&lt;h3 id=&#34;putting-it-together:0226148b78d51ab3b712e314ee5a8000&#34;&gt;Putting it together&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve saved the code into a &lt;a href=&#34;https://gist.github.com/dnmfarrell/3db321fc11b0d85f729d&#34;&gt;program&lt;/a&gt;. Now I can run it on the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ sudo $(which perl) port_scanner --ip 10.0.1.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I need to use &lt;code&gt;sudo&lt;/code&gt; because the libpcap requires root privileges to run. The program emits a lot of output, here&amp;rsquo;s a snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
   264 closed               bgmp                
    48 closed               auditd              
  9100 open                 jetdirect 
  2456 closed               altav-remmgt        
  3914 closed               listcrt-port-2      
    42 closed               nameserver          
  1051 closed               optima-vnet         
  1328 closed               ewall               
  4200 closed               vrml-multi-use      
    65 closed               tacacs-ds           
  8400 closed               cvd                 
  8042 closed               fs-agent            
  1516 closed               vpad                
   702 closed               iris-beep           
  1034 closed               zincite-a           
   598 closed               sco-websrvrmg3      

 2258 ports scanned, 25 filtered, 2229 closed, 4 open
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how the order is randomized, and we&amp;rsquo;ve found 4 open ports. If I run the program with &lt;code&gt;--help&lt;/code&gt; it prints out some useful instructions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Usage:
    port_scanner [options]

     Options:
      --ip,     -i   ip address to scan e.g. 10.30.1.52
      --help,   -h   display this help text
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wrap-up:0226148b78d51ab3b712e314ee5a8000&#34;&gt;Wrap-up&lt;/h3&gt;

&lt;p&gt;Our basic port scanner could be improved. For one thing we only scan named ports - it would be nice to accept a range of ports to scan. The supported protocols and TCP flags could also be expanded to yield better results against different machines. The user should also be able to control the number of child processes and the packet frequency to tune the scan to the sensitivities of the target. In part two I&amp;rsquo;ll show how to incorporate these changes and more into a fully-featured port scanner.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Host discovery with broadcast and echo</title>
      <link>http://perltricks.com/article/180/2015/7/6/Host-discovery-with-broadcast-and-echo/</link>
      <pubDate>Mon, 06 Jul 2015 12:27:10 +0000</pubDate>
      
      <guid>http://perltricks.com/article/180/2015/7/6/Host-discovery-with-broadcast-and-echo/</guid>
      <description>

&lt;p&gt;Network host discovery is the attempt to elicit the addresses of the hosts connected to a network. Last week I &lt;a href=&#34;http://perltricks.com/article/179/2015/7/1/Basic-network-hacking-with-Perl&#34;&gt;wrote&lt;/a&gt; about a unicast approach with Perl that enumerated through every address in the network subnet, messaging each address in turn to see if any hosts respond. This week I&amp;rsquo;ve been working on an alternative approach using broadcast and echo.&lt;/p&gt;

&lt;h3 id=&#34;icmp-and-echo:1ce3cb0a78c3ebf18e0e797ceac88b1e&#34;&gt;ICMP and echo&lt;/h3&gt;

&lt;p&gt;Internet Control Message Protocol (ICMP) is a networking protocol used by networking devices to coordinate with each other. ICMP messages contain a type and a code which have predefined &lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages&#34;&gt;meanings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An ICMP message of type 8 means echo request and hosts are expected to respond with an ICMP message of type 0 (echo reply). To discover hosts on a network, I can send an echo request to the network and capture the IP address of any echo replies received. Instead of cycling through every possible IP address in the subnet, I can send the echo request to the broadcast IP: &lt;code&gt;255.255.255.255&lt;/code&gt; and the message will automatically be sent to every host on the network.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re running a modern Linux, you can test this out at the command line using &lt;code&gt;ping&lt;/code&gt; (other versions may work without the &amp;ldquo;-b&amp;rdquo; switch):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ ping -b 255.255.255.255
WARNING: pinging broadcast address
PING 255.255.255.255 (255.255.255.255) 56(84) bytes of data.
64 bytes from 192.168.1.4: icmp_seq=1 ttl=64 time=92.9 ms
64 bytes from 192.168.1.4: icmp_seq=2 ttl=64 time=2.04 ms
64 bytes from 192.168.1.4: icmp_seq=3 ttl=64 time=136 ms
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you see one other host on my network is responding at the address &lt;code&gt;192.168.1.4&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;implementing-echo-in-perl:1ce3cb0a78c3ebf18e0e797ceac88b1e&#34;&gt;Implementing echo in Perl&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s possible to implement ping using nothing but core Perl modules. That is, if Perl is installed, this &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl/blob/master/livehost_echo&#34;&gt;script&lt;/a&gt; should work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/perl
use strict;
use warnings;
use Socket;
use Net::Ping;

# the checksum must be correct else hosts will ignore the request
my $msg_checksum = Net::Ping-&amp;gt;checksum(pack(&amp;quot;C2 n3&amp;quot;,8,0,0,0,1));
my $msg = pack(&amp;quot;C2 n3&amp;quot;, 8, 0, $msg_checksum, 0, 1);

socket(my $socket, AF_INET, SOCK_RAW, getprotobyname(&#39;icmp&#39;));
setsockopt($socket, SOL_SOCKET, SO_BROADCAST, 1);
send($socket, $msg, 0, sockaddr_in(0, inet_aton(&#39;255.255.255.255&#39;)));
bind($socket,sockaddr_in(0,inet_aton(0)));

while (1)
{
  my $addr = recv($socket, my $data, 1024, 0);
  my ($tmp, $tos, $len, $id, $offset, $tt, $proto, $checksum,
    $src_ip, $dest_ip, $options) = unpack(&#39;CCnnnCCnNNa*&#39;, $data);

  if ($dest_ip != 4294967295) # destination != 255.255.255.255
  {
    my ($port, $peer) = sockaddr_in($addr);
    printf &amp;quot;%s bytes from %s\n&amp;quot;, length($data), inet_ntoa($peer);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script starts by importing the &lt;code&gt;Socket&lt;/code&gt; and &lt;code&gt;Net::Ping&lt;/code&gt; modules - both part of the Perl core distribution. It uses the &lt;code&gt;checksum&lt;/code&gt; function from &lt;code&gt;Net::Ping&lt;/code&gt; to calculate the message checksum. The checksum is important because if it is incorrect, hosts will not reply. The script packs the code, the type, checksum and offset into &lt;code&gt;$msg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The script then creates a broadcast socket, and sends the message to the broadcast address (&lt;code&gt;255.255.255.255&lt;/code&gt;). The socket is then bound to the network address, and the script enters a while loop attempting to read data from the socket using &lt;code&gt;recv&lt;/code&gt;. Any received data is unpacked and the packet address saved in &lt;code&gt;$addr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The source and destination IP fields in the unpacked message are stored as 32 bit integers, so the script ignores packets whose destination matches the integer of the broadcast address, as this message was sent by the script. After that the script decodes the packet address and prints the results.&lt;/p&gt;

&lt;p&gt;Running this script on my network, I can see the same host as was returned by &lt;code&gt;ping&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ sudo ./livehost_echo                                 
28 bytes from 192.168.1.4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fingerprinting-hosts:1ce3cb0a78c3ebf18e0e797ceac88b1e&#34;&gt;Fingerprinting hosts&lt;/h3&gt;

&lt;p&gt;The primary issue with this technique is it can only discover hosts that respond to broadcast requests, and many do not. For example Chromebooks, smart phones and Linux machines usually don&amp;rsquo;t reply (OSX machines and many versions of Windows do though). This can be an advantage though: because the response rate to broadcast is different to unicast, the echo script can be used in conjunction with unicast to fingerprint hosts. If a machine responds to a unicast message but not a broadcast, we learn something about the identity of that host. For example if I use the &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl/blob/master/livehost_scanner&#34;&gt;livehost_scanner&lt;/a&gt; script on my home network:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sudo $(which perl) livehost_scanner                                                                                                                  
Gateway IP: 192.168.1.1
Starting scan
192.168.1.1 10:0d:7f:81:31:c2
192.168.1.2 5c:c5:d4:47:0a:13 (this machine)
192.168.1.7 38:e7:d8:00:9a:d5
192.168.1.4 e0:ac:cb:5e:d5:da
192.168.1.10 cc:3d:82:60:4b:95
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can see that there 2 other livehosts (excluding the router) which show up, but didn&amp;rsquo;t respond to an echo request. The echo script could be adapted to send other types of ICMP messages such as timestamp and subnet mask which can be used to further &lt;a href=&#34;http://www.sans.org/security-resources/idfaq/icmp_misuse.php&#34;&gt;identify&lt;/a&gt; a host.&lt;/p&gt;

&lt;h3 id=&#34;further-thoughts:1ce3cb0a78c3ebf18e0e797ceac88b1e&#34;&gt;Further thoughts&lt;/h3&gt;

&lt;p&gt;The echo script uses the broadcast technique which only works on IPv4 networks. IPv6 networks support multicast instead, but that would require changes to the script. Interestingly the number of potential addresses in a single IPv6 subnet, (I think) renders the unicast technique redundant.&lt;/p&gt;

&lt;p&gt;Another other problem with the echo script is that because it opens a raw socket, it requires root privileges to run. The &lt;code&gt;ping&lt;/code&gt; utility on the other hand is installed with setuserid permissions and runs as root regardless of the user&amp;rsquo;s own privileges.&lt;/p&gt;

&lt;h3 id=&#34;useful-resources:1ce3cb0a78c3ebf18e0e797ceac88b1e&#34;&gt;Useful resources&lt;/h3&gt;

&lt;p&gt;In preparing this script I learned a lot about sockets and network programming. Lincoln Stein&amp;rsquo;s &lt;a href=&#34;http://www.amazon.com/Network-Programming-Perl-Lincoln-Stein/dp/0201615711/ref=la_B000APT5P6_1_1&#34;&gt;Network Programming with Perl&lt;/a&gt; was an invaluable resource for understanding sockets and the arcane invocations to use with them. If you&amp;rsquo;re considering working with sockets, the &lt;a href=&#34;https://metacpan.org/pod/IO::Socket&#34;&gt;IO::Socket&lt;/a&gt; module has a cleaner interface than the &lt;a href=&#34;https://metacpan.org/pod/Socket&#34;&gt;Socket&lt;/a&gt; module (and is also part of core). The source code for the excellent &lt;a href=&#34;https://metacpan.org/pod/NetPacket&#34;&gt;NetPacket&lt;/a&gt; distribution was useful in understanding how to parse packets.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic network hacking with Perl</title>
      <link>http://perltricks.com/article/179/2015/7/1/Basic-network-hacking-with-Perl/</link>
      <pubDate>Wed, 01 Jul 2015 12:51:31 +0000</pubDate>
      
      <guid>http://perltricks.com/article/179/2015/7/1/Basic-network-hacking-with-Perl/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve been reading &lt;a href=&#34;https://www.packtpub.com/networking-and-servers/penetration-testing-perl-raw&#34;&gt;Penetration Testing With Perl&lt;/a&gt; by Douglas Berdeaux. The book was released late last year, and whilst Dave Cross gave it a fairly scathing &lt;a href=&#34;http://perlhacks.com/2015/02/penetration-testing-perl/&#34;&gt;review&lt;/a&gt; I&amp;rsquo;ve found it interesting so far. I&amp;rsquo;ve been coding and refactoring the scripts presented in the book in a GitHub &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl&#34;&gt;repo&lt;/a&gt; as I go. Here is some of the stuff I&amp;rsquo;ve learned so far.&lt;/p&gt;

&lt;h3 id=&#34;livehost-detection:f1808d343c8e37bf4bcdf4923d18881f&#34;&gt;Livehost Detection&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re connected to a network, it&amp;rsquo;s helpful to know the IP addresses of all of the other hosts on the same network. This &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl/blob/master/livehost_scanner&#34;&gt;script&lt;/a&gt; starts by detecting the network device name (or accepting it as an argument) and initializing a packet capture object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use feature &#39;say&#39;;
use Net::ARP;
use Net::Address::IP::Local;
use Net::Frame::Device;
use Net::Frame::Dump::Online;
use Net::Frame::Simple;
use Net::Netmask;
use Net::Pcap ();

my $network_device_name = $ARGV[0] if @ARGV;

unless ($network_device_name)
{
  $network_device_name = Net::Pcap::pcap_lookupdev(\my $error_msg);
  die &amp;quot;pcap device lookup failed &amp;quot; . ($error_msg || &#39;&#39;)
    if $error_msg || not defined $network_device_name;
}

my $device = Net::Frame::Device-&amp;gt;new(dev =&amp;gt; $network_device_name);

my $pcap = Net::Frame::Dump::Online-&amp;gt;new(
  dev =&amp;gt; $network_device_name,
  filter =&amp;gt; &#39;arp and dst host &#39; . $device-&amp;gt;ip,
  promisc =&amp;gt; 0,
  unlinkOnStop =&amp;gt; 1,
  timeoutOnNext =&amp;gt; 10
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It then detects the gateway IP (the Ip address of the network controller) and sends a broadcast packet to every IP address in the subnet. The packet capture object &lt;code&gt;$pcap&lt;/code&gt; will detect any responses. It then prints out the respondent&amp;rsquo;s IP and MAC address.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;printf &amp;quot;Gateway IP: %s\nStarting scan\n&amp;quot;, $device-&amp;gt;gatewayIp;

$pcap-&amp;gt;start;

for my $ip_address (Net::Netmask-&amp;gt;new($device-&amp;gt;subnet)-&amp;gt;enumerate)
{
  Net::ARP::send_packet(
    $network_device_name,
    $device-&amp;gt;ip,
    $ip_address,
    $device-&amp;gt;mac,
    &amp;quot;ff:ff:ff:ff:ff:ff&amp;quot;, # broadcast
    &amp;quot;request&amp;quot;,
  );
}

until ($pcap-&amp;gt;timeout)
{
  if (my $next = $pcap-&amp;gt;next)
  {
    my $frame = Net::Frame::Simple-&amp;gt;newFromDump($next);
    my $local_ip = Net::Address::IP::Local-&amp;gt;public;
    my $frame_ip = $frame-&amp;gt;ref-&amp;gt;{ARP}-&amp;gt;srcIp;
    my $frame_mac = $frame-&amp;gt;ref-&amp;gt;{ARP}-&amp;gt;src;
    say &amp;quot;$frame_ip $frame_mac&amp;quot;. ($local_ip eq $frame_ip ? &#39; (this machine)&#39; : &#39;&#39;);
  }
}
END { say &amp;quot;Exiting.&amp;quot;; $pcap-&amp;gt;stop }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I run this script on my home network, I get the following output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ sudo $(which perl) livehost_scanner
Gateway IP: 192.168.1.1
Starting scan
Gateway IP: 192.168.1.1
Starting scan
192.168.1.1 10:0d:7f:81:31:c2
192.168.1.2 5c:c5:d4:47:0a:13 (this machine)
192.168.1.3 68:09:27:03:d0:35
Exiting.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this I can deduce that there is one other machine connected to the network at &lt;code&gt;192.168.1.4&lt;/code&gt;, in addition to the router at &lt;code&gt;192.168.1.1&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;fingerprinting:f1808d343c8e37bf4bcdf4923d18881f&#34;&gt;Fingerprinting&lt;/h3&gt;

&lt;p&gt;Now I&amp;rsquo;ve identified the addresses of two hosts on my network, if I was an attacker I would want to try and identify the types of hosts they are, in order to determine which types of attacks to use against them.&lt;/p&gt;

&lt;p&gt;One way to fingerprint a host is using their &lt;a href=&#34;https://en.wikipedia.org/wiki/MAC_address&#34;&gt;MAC address&lt;/a&gt;. The first half of the address is the Organisationally Unique Identifier (OUI). The IEEE provide a &lt;a href=&#34;http://standards-oui.ieee.org/oui.txt&#34;&gt;file&lt;/a&gt; that lists all authorized OUIs and their manufacturer. So to identify the Manufacturer of the network device of the host, all we have to do is lookup their OUI in the file. This &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl/blob/master/id_target&#34;&gt;script&lt;/a&gt; does that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;

my $target_mac = shift or die &amp;quot;Usage\n\t./id_target \n&amp;quot;;

printf &amp;quot;Address: %s, MAC Manufacturer: %s\n&amp;quot;,
  $target_mac, oui_lookup($target_mac);

sub oui_lookup
{
  my $mac_address = shift;
  $mac_address =~ s/:/-/g;
  my $oui = substr $mac_address, 0, 8;

  open (my $oui_file, &#39;&amp;lt;&#39;, &#39;data/oui.txt&#39;) or die $!;
  while (my $line = &amp;lt;$oui_file&amp;gt;)
  {
    if($line =~ /$oui/i)
    {
      my ($address, $manufacturer_name) = split /\t+/, $line;
      return &amp;quot;$manufacturer_name&amp;quot;;
      last;
    }
  }
  return &amp;quot;Unknown&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I run this script on the Gateway MAC address, I can identify the access point manufacturer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ ./id_target 10:0d:7f:81:31:c2
Address: 10:0d:7f:81:31:c2, MAC Manufacturer: NETGEAR INC.,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aha! so the access point is made by Netgear. There was another host detected on my network at address &lt;code&gt;192.168.1.3&lt;/code&gt;. I can try and fingerprint them too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ ./id_target 68:09:27:03:d0:35
Address: 68:09:27:03:d0:35, MAC Manufacturer: Apple
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s an Apple machine. With this data I can either try to fingerprint the hosts further, or I can start testing them for weaknesses, using a port scan or a known vulnerability. A good source of vulnerabilities is &lt;a href=&#34;http://www.exploit-db.com&#34;&gt;exploit-db.com&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

