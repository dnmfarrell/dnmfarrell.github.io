<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Twitter on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/twitter/</link>
    <description>Recent content in Twitter on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Sep 2016 08:05:37 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/twitter/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Don&#39;t forget to #Perl</title>
      <link>http://perltricks.com/article/don-t-forget-to--perl/</link>
      <pubDate>Wed, 28 Sep 2016 08:05:37 +0000</pubDate>
      
      <guid>http://perltricks.com/article/don-t-forget-to--perl/</guid>
      <description>&lt;p&gt;When it comes to open source communities, programming comes first, but talking about programming is a close second. Perl programmers are pretty good about blogging (the &lt;a href=&#34;https://github.com/dnmfarrell/Perly-Bot&#34;&gt;Perly-Bot app&lt;/a&gt; that populates our community articles sidebar tracks around 30 blogs), but I&amp;rsquo;ve noticed that on Twitter, many Perl-related tweets lack a &lt;code&gt;#Perl&lt;/code&gt; hashtag. That&amp;rsquo;s a shame, as it helps others discover Perl related tweets via search, clicking the hashtag and in the &amp;ldquo;highlights&amp;rdquo; notification on the Twitter mobile app.&lt;/p&gt;

&lt;p&gt;Sometimes you may not want to include a Perl hashtag: perhaps you&amp;rsquo;ve hit the tweet character limit (&lt;code&gt;#Per&lt;/code&gt; is no good!) or maybe you&amp;rsquo;re blogging about several languages including Perl, and don&amp;rsquo;t want to dissuade non-Perl programmers from clicking the link. There are probably many scenarios where it doesn&amp;rsquo;t make sense to include the hashtag, and that&amp;rsquo;s fine. For everything else, there is &lt;code&gt;#Perl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hashtags are case insensitive so &lt;code&gt;#Perl&lt;/code&gt; and &lt;code&gt;#perl&lt;/code&gt; are good, but I wouldn&amp;rsquo;t &lt;code&gt;#PERL&lt;/code&gt; unless you&amp;rsquo;re trolling (yw trolls!). Unlike many programming languages, our favorite language has a unique name (kind of - there is the Perl &lt;a href=&#34;http://www.surnamedb.com/Surname/Perl&#34;&gt;surname&lt;/a&gt;). Let&amp;rsquo;s take advantage of it by including &lt;code&gt;#Perl&lt;/code&gt; in our tweets. If enough of us do it, who knows, we might even start trending again.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Promoting Perl community articles</title>
      <link>http://perltricks.com/article/promoting-perl-community-articles/</link>
      <pubDate>Thu, 26 May 2016 08:53:36 +0000</pubDate>
      
      <guid>http://perltricks.com/article/promoting-perl-community-articles/</guid>
      <description>

&lt;p&gt;The last part of Justin Searls&amp;rsquo; &lt;a href=&#34;https://vimeo.com/165527044#t=28m10s&#34;&gt;talk&lt;/a&gt; has some great advice for promoting Ruby that applies to Perl too. If you haven&amp;rsquo;t seen it, I&amp;rsquo;d encourage you to watch it. Justin points out that some tech projects like Ruby on Rails are essentially, done. They&amp;rsquo;re feature complete and achieve everything they set out to accomplish. This means that they&amp;rsquo;re no longer cutting edge tech, and consequently fewer articles are written about them.&lt;/p&gt;

&lt;p&gt;We see this with Perl too. Modules like &lt;a href=&#34;https://metacpan.org/pod/Moose&#34;&gt;Moose&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Mojolicious&#34;&gt;Mojolicious&lt;/a&gt; are battle-tested, proven libraries that do a wonderful job. So we don&amp;rsquo;t see many hype articles about them either. The solution to this is to focus on evergreen story telling:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tell stories that help people solve problems. And if you love Ruby, tell your story in Ruby.&lt;/p&gt;

&lt;p&gt;Justin Searls&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As Perl programmers we&amp;rsquo;re using the language to solve problems every day. And we&amp;rsquo;ll never run out of problems to solve: there are always new systems to integrate, new data challenges, algorithms to implement and bugs to fix. That&amp;rsquo;s why it doesn&amp;rsquo;t matter that so much has already been written about Perl - new experiences will always be around the corner. And new is good.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s tell more stories in Perl.&lt;/p&gt;

&lt;h3 id=&#34;promoting-content:80ed17a713a6abb8e6d084fd1190752e&#34;&gt;Promoting content&lt;/h3&gt;

&lt;p&gt;Many Perl programmers are regularly writing about Perl, so another thing we can always improve on is promoting new Perl content. This isn&amp;rsquo;t an exhaustive list, just a few suggestions on how to help.&lt;/p&gt;

&lt;p&gt;Last week I added the &amp;ldquo;Community Articles&amp;rdquo; toolbar to this website. It&amp;rsquo;s a JavaScript widget that&amp;rsquo;s powered by &lt;a href=&#34;https://github.com/dnmfarrell/Perly-Bot&#34;&gt;Perly::Bot&lt;/a&gt;. You can add this widget to your website with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;https://perltricks.com/widgets/toplinks/toplinks.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;div id=&amp;quot;toplinks&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The list of links is updated hourly, served over HTTPS and hosted on GitHub pages. The widget is clever enough to skip links to articles from the host domain too (it never shows links to PerlTricks.com on this site).&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d rather not add that sidebar, consider adding a &lt;a href=&#34;https://www.reddit.com/r/perl/widget&#34;&gt;widget&lt;/a&gt; for &lt;code&gt;/r/perl&lt;/code&gt;. The Reddit widget respects Do Not Track.&lt;/p&gt;

&lt;p&gt;Finally, participate on &lt;a href=&#34;https://reddit.com/r/perl&#34;&gt;/r/perl&lt;/a&gt; and Twitter! Link to Perl resources and content you like; upvote or retweet Perl-related tweets. If you have something to say, reply to tweets or add yours comments to the subreddit links. Use the &lt;code&gt;#perl&lt;/code&gt; hashtag.&lt;/p&gt;

&lt;h3 id=&#34;stuff-we-re-already-good-at:80ed17a713a6abb8e6d084fd1190752e&#34;&gt;Stuff we&amp;rsquo;re already good at&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/perl&#34;&gt;StackOverflow.com&lt;/a&gt; has excellent Perl answers that are regularly updated; this is a great resource for Perl programmers. &lt;a href=&#34;http://perlweekly.com&#34;&gt;PerlWeekly&lt;/a&gt; is a fantastic newsletter that links to the best Perl content of the week, subscribe if you haven&amp;rsquo;t already. &lt;a href=&#34;http://perlmonks.org&#34;&gt;PerlMonks&lt;/a&gt; has tonnes of in-depth Perl guides and resources.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;em&gt;Cover image by &lt;a href=&#34;http://newspaper.jaguarpaw.co.uk/&#34;&gt;jaguarpaw&lt;/a&gt;&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build a Twitter bot with Perl</title>
      <link>http://perltricks.com/article/154/2015/2/23/Build-a-Twitter-bot-with-Perl/</link>
      <pubDate>Mon, 23 Feb 2015 14:12:06 +0000</pubDate>
      
      <guid>http://perltricks.com/article/154/2015/2/23/Build-a-Twitter-bot-with-Perl/</guid>
      <description>

&lt;p&gt;Following on from last week&amp;rsquo;s Reddit bot &lt;a href=&#34;http://perltricks.com/article/151/2015/2/9/Build-a-Reddit-bot-with-Perl&#34;&gt;article&lt;/a&gt;, let&amp;rsquo;s look at how to build a Twitter bot using Perl. As you&amp;rsquo;d expect, Perl makes it easy to do, but before we get to the code, let&amp;rsquo;s talk about advantages.&lt;/p&gt;

&lt;p&gt;Adding tweet automation to an existing app can bring several benefits. Firstly it&amp;rsquo;s a time saver, allowing you to focus on other higher-value activities. Automation provides protection from manual transcription errors like misspelled words and broken urls. Automation also means it&amp;rsquo;s cheaper to increase your tweet volume and all else being equal, a higher tweet volume will lead to more Twitter followers. Sound good? Excellent, let&amp;rsquo;s get to the code then!&lt;/p&gt;

&lt;h3 id=&#34;writing-tweets:12c8fd35ec6bfe5464697c6b32eba8bb&#34;&gt;Writing tweets&lt;/h3&gt;

&lt;p&gt;The core code for writing tweets is very simple. I&amp;rsquo;m using the &lt;a href=&#34;https://metacpan.org/pod/Net::Twitter::Lite&#34;&gt;Net::Twitter::Lite&lt;/a&gt; distribution, which supports the latest version of the Twitter &lt;a href=&#34;https://dev.twitter.com/rest/public&#34;&gt;API&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use Net::Twitter::Lite::WithAPIv1_1;

sub tweet
{
  my ($text) = @_;

  my $twitter = Net::Twitter::Lite::WithAPIv1_1-&amp;gt;new(
    access_token_secret =&amp;gt; $ENV{TWITTER_ACCESS_SECRET},
    consumer_secret     =&amp;gt; $ENV{TWITTER_CONSUMER_SECRET},
    access_token        =&amp;gt; $ENV{TWITTER_ACCESS_TOKEN},
    consumer_key        =&amp;gt; $ENV{TWITTER_CONSUMER_KEY},
    user_agent          =&amp;gt; &#39;TwitterBotExample&#39;,
    ssl =&amp;gt; 1,
  );
  $twitter-&amp;gt;update($text);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code imports &lt;code&gt;Net::Twitter::Lite::WithAPIv1_1&lt;/code&gt; to use the new Twitter API. The subroutine &lt;code&gt;tweet&lt;/code&gt; takes some text as an argument. It then creates a new &lt;code&gt;Net::Twitter::Lite::WithAPIv1_1&lt;/code&gt; object, using environment vars as credentials. If you don&amp;rsquo;t have these credentials already, it&amp;rsquo;s free to register an application for your own Twitter account and &lt;a href=&#34;https://dev.twitter.com/oauth/overview/application-owner-access-tokens&#34;&gt;generate the tokens&lt;/a&gt;. Finally the subroutine calls the &lt;code&gt;update&lt;/code&gt; method to tweet the text.&lt;/p&gt;

&lt;p&gt;Now I can send one tweet by adding this line to my code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;tweet(&amp;quot;This is a computer speaking!&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;safety-first:12c8fd35ec6bfe5464697c6b32eba8bb&#34;&gt;Safety first&lt;/h3&gt;

&lt;p&gt;So far so good huh? However this code isn&amp;rsquo;t very safe. What if &lt;code&gt;$text&lt;/code&gt; is not provided as an argument, or our environment variables are not declared, or the call to Twitter fails? I&amp;rsquo;ll add some checks to handle these scenarios:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use Net::Twitter::Lite::WithAPIv1_1;
use Try::Tiny;

sub tweet
{
  my ($text) = @_;

  die &#39;tweet requires text as an argument&#39; unless $text;

  unless ($ENV{TWITTER_CONSUMER_KEY}
          &amp;amp;&amp;amp; $ENV{TWITTER_CONSUMER_SECRET}
          &amp;amp;&amp;amp; $ENV{TWITTER_ACCESS_TOKEN}
          &amp;amp;&amp;amp; $ENV{TWITTER_ACCESS_SECRET})
  {
    die &#39;Required Twitter Env vars are not all defined&#39;;
  }

  try
  {
    my $twitter = Net::Twitter::Lite::WithAPIv1_1-&amp;gt;new(
      access_token_secret =&amp;gt; $ENV{TWITTER_ACCESS_SECRET},
      consumer_secret     =&amp;gt; $ENV{TWITTER_CONSUMER_SECRET},
      access_token        =&amp;gt; $ENV{TWITTER_ACCESS_TOKEN},
      consumer_key        =&amp;gt; $ENV{TWITTER_CONSUMER_KEY},
      user_agent          =&amp;gt; &#39;TwitterBotExample&#39;,
      ssl =&amp;gt; 1,
    );
    $twitter-&amp;gt;update($text);
  }
  catch
  {
    die join(&#39; &#39;, &amp;quot;Error tweeting $text&amp;quot;,
                   $_-&amp;gt;code, $_-&amp;gt;message, $_-&amp;gt;error);
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code is largely the same as before, except now it checks for the required variables before processing. The code also imports &lt;a href=&#34;https://metacpan.org/pod/Try::Tiny&#34;&gt;Try::Tiny&lt;/a&gt; as I added a try/catch block around the twitter code. The catch block will activate if the Twitter interaction throws an exception. Because Net::Twitter::Lite throws structured exceptions, the catch block builds an exception string by extracting information from the structured exception, then calls &lt;code&gt;die&lt;/code&gt; itself.&lt;/p&gt;

&lt;p&gt;You might be wondering if it&amp;rsquo;s necessary to call &lt;code&gt;die&lt;/code&gt; at all. Can&amp;rsquo;t we just return &lt;code&gt;undef&lt;/code&gt; instead and keep our code running? The advantage of calling &lt;code&gt;die&lt;/code&gt; is that the caller of the &lt;code&gt;tweet&lt;/code&gt; subroutine is better placed to decide how to handle the issue, and so we defer that decision to them. If the calling code doesn&amp;rsquo;t handle &lt;code&gt;die&lt;/code&gt; correctly, we know the program will exit. But if we returned &lt;code&gt;undef&lt;/code&gt;, we would have no such assurances. This doesn&amp;rsquo;t mean however that the code &lt;em&gt;has&lt;/em&gt; to exit. Let&amp;rsquo;s assume I had hundreds of tweets to send out, maybe I just want to log the error somewhere and keep going:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;foreach my $text (@tweet_texts)
{
  try
  {
    tweet($text);
  }
  catch
  {
    log_error($_);
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I was printing a sequence of tweets, where ordering is important, I could still log the error but then call &lt;code&gt;die&lt;/code&gt; to exit the program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;foreach my $text (@sequence_of_texts)
{
  try
  {
    tweet($text);
  }
  catch
  {
    log_error($_);
    die $_; # exit the program
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;better-text-handling:12c8fd35ec6bfe5464697c6b32eba8bb&#34;&gt;Better text handling&lt;/h3&gt;

&lt;p&gt;So now the code is safer, how else can it be improved? One famous restriction is that a tweet cannot be longer than 140 characters. Right now if the &lt;code&gt;tweet()&lt;/code&gt; subroutine received a text string longer than 140 characters, the Twitter API would reject it, raise and exception and the code would die. I think we can do better than that.&lt;/p&gt;

&lt;p&gt;When I think about the contents of tweets that I send, I&amp;rsquo;m usually tweeting links to articles about Perl. Invariably they will include some text, a url and a hashtag. It&amp;rsquo;s useful to break these out into separate arguments to &lt;code&gt;tweet()&lt;/code&gt; because to make everything fit, you could truncate the text, but you wouldn&amp;rsquo;t want to truncate a url or hashtag as it might change the meaning and/or break the url.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use Net::Twitter::Lite::WithAPIv1_1;
use Try::Tiny;

sub tweet
{
  my ($text, $url, $hashtag) = @_;

  unless ($text &amp;amp;&amp;amp; $url &amp;amp;&amp;amp; $hashtag)
  {
    die &#39;tweet requires text, url and hashtag arguments&#39;;
  }

  unless ($ENV{TWITTER_CONSUMER_KEY}
          &amp;amp;&amp;amp; $ENV{TWITTER_CONSUMER_SECRET}
          &amp;amp;&amp;amp; $ENV{TWITTER_ACCESS_TOKEN}
          &amp;amp;&amp;amp; $ENV{TWITTER_ACCESS_SECRET})
  {
    die &#39;Required Twitter Env vars are not all defined&#39;;
  }

  # build tweet, max 140 chars
  my $tweet;
  
  if (length(&amp;quot;$text $hashtag&amp;quot;) &amp;lt; 118)
  {
    $tweet = &amp;quot;$text $url $hashtag&amp;quot;;
  }
  elsif (length($text) &amp;lt; 118)
  {
    $tweet = &amp;quot;$text $url&amp;quot;;
  }
  else # shorten text, drop the hashtag
  {
    $tweet = substr($text, 0, 113) . &amp;quot;... &amp;quot; . $url;
  }

  try
  {
    my $twitter = Net::Twitter::Lite::WithAPIv1_1-&amp;gt;new(
      access_token_secret =&amp;gt; $ENV{TWITTER_ACCESS_SECRET},
      consumer_secret     =&amp;gt; $ENV{TWITTER_CONSUMER_SECRET},
      access_token        =&amp;gt; $ENV{TWITTER_ACCESS_TOKEN},
      consumer_key        =&amp;gt; $ENV{TWITTER_CONSUMER_KEY},
      user_agent          =&amp;gt; &#39;TwitterBotExample&#39;,
      ssl =&amp;gt; 1,
    );
    $twitter-&amp;gt;update($tweet);
  }
  catch
  {
    die join(&#39; &#39;, &amp;quot;Error tweeting $text $url $hashtag&amp;quot;,
                   $_-&amp;gt;code, $_-&amp;gt;message, $_-&amp;gt;error);
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Twitter treats urls as having a length of 12 characters. Now the code checks the length of our arguments, truncating &lt;code&gt;$text&lt;/code&gt; if necessary. The hashtag will be included only if there is enough space.&lt;/p&gt;

&lt;p&gt;This code works for me, but you may want to do things a little differently. The Twitter credentials could be stored in a &lt;a href=&#34;http://perltricks.com/article/29/2013/9/17/How-to-Load-YAML-Config-Files&#34;&gt;configuration&lt;/a&gt; file, instead of environment variables. The &lt;code&gt;$hashtag&lt;/code&gt; argument could be an arrayref of hashtags, that are incrementally added to the tweet text, instead of a single text string which restricts it to an all-or-nothing basis.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

