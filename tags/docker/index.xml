<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/docker/</link>
    <description>Recent content in Docker on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Sep 2014 12:11:51 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Analyzing GitHub with the search API</title>
      <link>https://dnmfarrell.github.io/article/112/2014/9/5/Analyzing-GitHub-with-the-search-API/</link>
      <pubDate>Fri, 05 Sep 2014 12:11:51 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/112/2014/9/5/Analyzing-GitHub-with-the-search-API/</guid>
      <description>

&lt;p&gt;The Net::GitHub module provides a perly interface to GitHub&amp;rsquo;s feature-rich API. You can do everything with it, from creating new repos to managing issues and initiating pull requests. Today I&amp;rsquo;m going to focus on search.&lt;/p&gt;

&lt;h3 id=&#34;setup:aca40df9e1d07f7ddcf3dfd9a21817db&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;Grab yourself a copy of &lt;a href=&#34;https://metacpan.org/pod/Net::GitHub&#34;&gt;Net::GitHub&lt;/a&gt; (make sure it&amp;rsquo;s version 0.68 or higher). The CPAN Testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=Net-GitHub+0.68&#34;&gt;results&lt;/a&gt; show that it builds on all major platforms, including Windows. You can install it via from CPAN at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Net::GitHub
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;first-steps:aca40df9e1d07f7ddcf3dfd9a21817db&#34;&gt;First steps&lt;/h3&gt;

&lt;p&gt;First we need to create a search object. You can search GitHub anonymously up to 5 times per minute or if you authenticate, 20 times per minute. The module &lt;a href=&#34;https://metacpan.org/pod/Net::GitHub&#34;&gt;documentation&lt;/a&gt; shows examples of how to authenticate, so we&amp;rsquo;ll proceed here unauthenticated.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Net::GitHub::V3;

# unauthenticated
my $gh = Net::GitHub::V3-&amp;gt;new;
my $search = $gh-&amp;gt;search;
my %data = $search-&amp;gt;repositories({ q =&amp;gt; &#39;docker&#39;});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above creates a &lt;code&gt;$search&lt;/code&gt; object, and initiates a repo search for docker. The &lt;code&gt;%data&lt;/code&gt; hash contains the search results. Let&amp;rsquo;s have a look at them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;{&#39;incomplete_results&#39; =&amp;gt; bless( do{\(my $o = 0)}, &#39;JSON::XS::Boolean&#39; ),
 &#39;total_count&#39; =&amp;gt; 12830,
 &#39;items&#39; =&amp;gt; [ {
                   &#39;open_issues_count&#39; =&amp;gt; 771,
                   &#39;url&#39; =&amp;gt; &#39;https://api.github.com/repos/docker/docker&#39;,
                   &#39;has_downloads&#39; =&amp;gt; bless( do{\(my $o = 1)}, &#39;JSON::XS::Boolean&#39; ),
                   &#39;tags_url&#39; =&amp;gt; &#39;https://api.github.com/repos/docker/docker/tags&#39;,
                   &#39;forks_count&#39; =&amp;gt; 2794,
                   &#39;has_issues&#39; =&amp;gt; $VAR1-&amp;gt;{&#39;items&#39;}[0]{&#39;has_downloads&#39;},
                   &#39;clone_url&#39; =&amp;gt; &#39;https://github.com/docker/docker.git&#39;,
                   &#39;name&#39; =&amp;gt; &#39;docker&#39;,
                   &#39;private&#39; =&amp;gt; $VAR1-&amp;gt;{&#39;incomplete_results&#39;},
                   &#39;watchers_count&#39; =&amp;gt; 14846,
                   &#39;pushed_at&#39; =&amp;gt; &#39;2014-09-05T00:32:46Z&#39;,
                   &#39;description&#39; =&amp;gt; &#39;Docker - the open-source application container engine&#39;,
                   &#39;updated_at&#39; =&amp;gt; &#39;2014-09-04T21:59:25Z&#39;,
                   &#39;html_url&#39; =&amp;gt; &#39;https://github.com/docker/docker&#39;,
                   &#39;stargazers_count&#39; =&amp;gt; 14846,
                   &#39;size&#39; =&amp;gt; 135198,
                   &#39;watchers&#39; =&amp;gt; 14846,
                   &#39;created_at&#39; =&amp;gt; &#39;2013-01-18T18:10:
                   &#39;open_issues&#39; =&amp;gt; 771,
                   &#39;language&#39; =&amp;gt; &#39;Go&#39;,
                   &#39;git_url&#39; =&amp;gt; &#39;git://github.com/docker/docker.
                   &#39;full_name&#39; =&amp;gt; &#39;docker/docker&#39;,
                   &#39;homepage&#39; =&amp;gt; &#39;http://www.docker.com&#39;,
                   &#39;forks&#39; =&amp;gt; 2794,
                   &#39;score&#39; =&amp;gt; &#39;89.950935&#39;,
                    ...
                   },
            ]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve truncated the results for the sake of brevity, to show the top level key values and one simplified repo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;incomplete_results&lt;/code&gt; is a key value pair that returns a boolean true if the are more search results than those returned by the search&lt;/li&gt;
&lt;li&gt;&lt;code&gt;total_count&lt;/code&gt; shows the total number of repos returned by the search&lt;/li&gt;
&lt;li&gt;&lt;code&gt;items&lt;/code&gt; is the interesting one - it&amp;rsquo;s an arrayref of repo hashes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;getting-more-results:aca40df9e1d07f7ddcf3dfd9a21817db&#34;&gt;Getting more results&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s update the code to pull more results. GitHub permits up to 100 results per API call and a 1,000 results per search.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Net::GitHub::V3;

my $gh = Net::GitHub::V3-&amp;gt;new;
my $search = $gh-&amp;gt;search;

my @data = @{ $search-&amp;gt;repositories({ q =&amp;gt; &#39;docker&#39;,
                                      per_page =&amp;gt; 100 })-&amp;gt;{items} };

while ($search-&amp;gt;has_next_page) {
    sleep 12; # 5 queries max per minute
    push @data, @{ $search-&amp;gt;next_page-&amp;gt;{items} };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above executes the same search as before, except now I&amp;rsquo;m passing the &lt;code&gt;per_page&lt;/code&gt; parameter to get 100 results per call. I also extract the &lt;code&gt;items&lt;/code&gt; arrayref directly into the &lt;code&gt;@data&lt;/code&gt; array. The while loop will continue to call the search API until no further results are returned or we hit the 1,000 result limit.&lt;/p&gt;

&lt;h3 id=&#34;analyzing-the-data:aca40df9e1d07f7ddcf3dfd9a21817db&#34;&gt;Analyzing the data&lt;/h3&gt;

&lt;p&gt;So now we have a full set of results in , what can we do with it? One analysis that could be interesting is a count by programming language. Every repo hash contains a &lt;code&gt;language&lt;/code&gt; key value pair, so we can extract and count it. Lets see which language most docker-related repos are written in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Net::GitHub::V3;

my $gh = Net::GitHub::V3-&amp;gt;new;
my $search = $gh-&amp;gt;search;

my @data = @{ $search-&amp;gt;repositories({ q =&amp;gt; &#39;docker+created:&amp;gt;2014-09-01&#39;,
                                      per_page =&amp;gt; 100 })-&amp;gt;{items} };

while ($search-&amp;gt;has_next_page) {
    sleep 12; # 5 queries max per minute
    push @data, @{ $search-&amp;gt;next_page-&amp;gt;{items} };
}

my %languages;

for my $repo (@data) {
    my $language = $repo-&amp;gt;{language} ? $repo-&amp;gt;{language} : &#39;Other&#39;;
    $languages{ $language }++;
}

for (sort { $languages{$b} &amp;lt;=&amp;gt; $languages{$a} } keys %languages) {
    printf &amp;quot;%10s: %5i\n&amp;quot;, $_, $languages{$_};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s walk through this code. First of all, I changed the search argument to limit results to repos created since September 2014 using the &lt;code&gt;created&lt;/code&gt; qualifier. This was to ensure we didn&amp;rsquo;t hit the 1,000 result search limit. The GitHub search API supports a whole range of useful &lt;a href=&#34;https://developer.github.com/v3/search/#parameters&#34;&gt;search qualifiers&lt;/a&gt; (although it&amp;rsquo;s not documented, &lt;code&gt;created&lt;/code&gt; will take a full timestamp like &lt;code&gt;2014-09-01T00:00:00Z&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Next I declared the &lt;code&gt;%languages&lt;/code&gt; hash and iterated through the results, extracting each repo&amp;rsquo;s language. Where language was &lt;code&gt;undef&lt;/code&gt;, I labelled the repo &amp;ldquo;Other&amp;rdquo;. Finally I sorted the results and printed them using &lt;a href=&#34;http://perldoc.perl.org/functions/printf.html&#34;&gt;printf&lt;/a&gt;to get a nicely formatted output. Here are the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;     Shell:   238
     Other:    58
    Python:    13
      Ruby:    10
JavaScript:     8
        Go:     6
      Perl:     2
       PHP:     2
   Clojure:     1
      Java:     1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perhaps as is to be expected, the results show shell programs dominating the Docker space in September.&lt;/p&gt;

&lt;h3 id=&#34;further-info:aca40df9e1d07f7ddcf3dfd9a21817db&#34;&gt;Further Info&lt;/h3&gt;

&lt;p&gt;GitHub&amp;rsquo;s search API supports more than just repo search. You can search issues, code and users as well. Check out the official GitHub search API &lt;a href=&#34;https://developer.github.com/v3/search/&#34;&gt;documentation&lt;/a&gt; for more examples.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::GitHub&#34;&gt;Net::GitHub&lt;/a&gt; provides an interface for far more than just search though. It&amp;rsquo;s a full-featured API - you can literally manage your GitHub account via Perl code with Net::GitHub. The developer Fayland Lam has provided loads of documentation, and I found him helpful responsive to enquiries. Thanks Fayland!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re looking for more than just search, you may also want to look at Ingy döt Net&amp;rsquo;s awesome &lt;a href=&#34;https://github.com/ingydotnet/git-hub&#34;&gt;git-hub&lt;/a&gt;, which provides the full power of GitHub at the command line.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN July 2014</title>
      <link>https://dnmfarrell.github.io/article/106/2014/8/1/What-s-new-on-CPAN-July-2014/</link>
      <pubDate>Fri, 01 Aug 2014 12:38:59 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/106/2014/8/1/What-s-new-on-CPAN-July-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:9cb6897c30761fc646fee7a543d84699&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AntTweakBar&#34;&gt;AntTweakBar&lt;/a&gt; provides Perl bindings for the GUI library&lt;/li&gt;
&lt;li&gt;Use PayPoint&amp;rsquo;s merchant engine with &lt;a href=&#34;https://metacpan.org/pod/Business::PayPoint::MCPE&#34;&gt;Business::PayPoint::MCPE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::PCDuino&#34;&gt;Device::PCDuino&lt;/a&gt; is a hardware interface for the pcDuino, by Timm Murray author of UAV::Pilot&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HBase::JSONRest&#34;&gt;HBase::JSONRest&lt;/a&gt; is a RESTful interface to Apache HBase&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Amazon::Utils&#34;&gt;Net::Amazon::Utils&lt;/a&gt; provides helper utils for AWS&lt;/li&gt;
&lt;li&gt;Access Desk.com&amp;rsquo;s API with &lt;a href=&#34;https://metacpan.org/pod/WWW::Desk&#34;&gt;WWW::Desk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:9cb6897c30761fc646fee7a543d84699&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Test GnuPG email sign/encrypt with &lt;a href=&#34;https://metacpan.org/pod/App::Eduard&#34;&gt;App::Eduard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::plackbench&#34;&gt;App::plackbench&lt;/a&gt; is a benchmarking tool for Plack applications&lt;/li&gt;
&lt;li&gt;Ensure that you only run a command once with &lt;a href=&#34;https://metacpan.org/pod/App::single&#34;&gt;App::single&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:9cb6897c30761fc646fee7a543d84699&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::Lite&#34;&gt;Bio::Lite&lt;/a&gt; is a lightweight implementation of useful bio Perl functions&lt;/li&gt;
&lt;li&gt;Convert email addresses into the DNS rname format and vice versa using &lt;a href=&#34;https://metacpan.org/pod/DNS::RName::Converter&#34;&gt;DNS::RName::Converter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Hash::Ordered&#34;&gt;Hash::Ordered&lt;/a&gt; provides a simple implementation of an ordered hash with robust performance. Author David Golden &lt;a href=&#34;https://www.youtube.com/watch?v=p4U6FWyRBoQ&amp;amp;feature=youtu.be&#34;&gt;presented&lt;/a&gt; the module and comparison benchmarks recently at NY.pm (&lt;a href=&#34;http://www.dagolden.com/wp-content/uploads/2009/04/Adventures-in-Optimization-NYpm-July-2014.pdf&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Generate sets of English names with &lt;a href=&#34;https://metacpan.org/pod/Mock::Person::EN&#34;&gt;Mock::Person::EN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pod::Markdown::Github&#34;&gt;Pod::Markdown::Github&lt;/a&gt; converts POD to Github-sepcific markdown&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:9cb6897c30761fc646fee7a543d84699&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Benchmark::Report::GitHub&#34;&gt;Benchmark::Report::GitHub&lt;/a&gt; generates benchmark reports from Travis-CI and publishes them on GitHub wiki&lt;/li&gt;
&lt;li&gt;Augment your DBIx::Class schema objects with additional logic using &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Wrapper&#34;&gt;DBIx::Class::Wrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Git::Contributors&#34;&gt;Dist::Zilla::Plugin::Git::Contributors&lt;/a&gt; pulls all of the author names from your Git commit history and adds them to your module&amp;rsquo;s metadata&lt;/li&gt;
&lt;li&gt;Looking for a drop-in replacement for Getop::Long with tab completion? Check out &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long::Complete&#34;&gt;Getopt::Long::Complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JCONF is a JSON format optimized for configuration files. &lt;a href=&#34;https://metacpan.org/pod/JCONF::Writer&#34;&gt;JCONF::Writer&lt;/a&gt; produces JCONF files from Perl data structures&lt;/li&gt;
&lt;li&gt;Enable OAuth2 support in command line applications with &lt;a href=&#34;https://metacpan.org/pod/OAuth::Cmdline&#34;&gt;OAuth::Cmdline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pegex::Forth&#34;&gt;Pegex::Forth&lt;/a&gt; is a Forth parser and interpreter built on Pegex&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Refine&#34;&gt;Refine&lt;/a&gt; is a clever module that let&amp;rsquo;s you add methods to objects (not classes) at runtime&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://metacpan.org/pod/Type::Tiny::XS&#34;&gt;Type::Tiny::XS&lt;/a&gt; for an even faster Type::Tiny&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:9cb6897c30761fc646fee7a543d84699&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Map::Tube::London&#34;&gt;Map::Tube::London&lt;/a&gt; will tell you the shortest route between two stations on the London Underground&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Pangram&#34;&gt;Text::Pangram&lt;/a&gt; identifies strings which are pangrams&lt;/li&gt;
&lt;li&gt;Access your Zombies Run! stats using &lt;a href=&#34;https://metacpan.org/pod/WebService::ZombiesRun&#34;&gt;WebService::ZombiesRun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mojolicious:9cb6897c30761fc646fee7a543d84699&#34;&gt;Mojolicious&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::UserAgent::UnixSocket&#34;&gt;Mojo::UserAgent::UnixSocket&lt;/a&gt; enables Mojo::UserAgent to interact with sockets&lt;/li&gt;
&lt;li&gt;Use HTML::Template::Pro templates in your application with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::HTMLTemplateProRenderer&#34;&gt;Mojolicious::Plugin::HTMLTemplateProRenderer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support RESTful operations with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::REST&#34;&gt;Mojolicious::Plugin::REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Log webpage user events with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Surveil&#34;&gt;Mojolicious::Plugin::Surveil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing:9cb6897c30761fc646fee7a543d84699&#34;&gt;Testing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Subtests&#34;&gt;Test::Subtests&lt;/a&gt; is interesting: it wraps Test::More tests into subtests and can allow some of them to fail&lt;/li&gt;
&lt;li&gt;Write RSpec - like tests for Rex with &lt;a href=&#34;https://metacpan.org/pod/Rex::Test::Spec&#34;&gt;Rex::Test::Spec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Deep::DateTime::RFC3339&#34;&gt;Test::Deep::DateTime::RFC3339&lt;/a&gt; tests that RFC3339 timestamps are within a certain tolerance&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Docker::MySQL&#34;&gt;Test::Docker::MySQL&lt;/a&gt; launches MySQL docker containers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:9cb6897c30761fc646fee7a543d84699&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Reuse your Kelp routes with &lt;a href=&#34;https://metacpan.org/pod/KelpX::AppBuilder&#34;&gt;KelpX::AppBuilder&lt;/a&gt; (Kelp is a Plack based web micro-framework)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::App::CGIBin::Streaming&#34;&gt;Plack::App::CGIBin::Streaming&lt;/a&gt; enables CGI applcaitions to use the Palck streaming protocol&lt;/li&gt;
&lt;li&gt;Tie variables to DuckDuckGo search using &lt;a href=&#34;https://metacpan.org/pod/Tie::DuckDuckGo&#34;&gt;Tie::DuckDuckGo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

