<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/json/</link>
    <description>Recent content in Json on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Oct 2015 13:49:32 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/json/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - September 2015</title>
      <link>http://perltricks.com/article/196/2015/10/1/What-s-new-on-CPAN---September-2015/</link>
      <pubDate>Thu, 01 Oct 2015 13:49:32 +0000</pubDate>
      
      <guid>http://perltricks.com/article/196/2015/10/1/What-s-new-on-CPAN---September-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month:9d36872dc3dcca82f0a59354eccd9216&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/MsgPack::RPC&#34;&gt;MsgPack::RPC&lt;/a&gt; is a client for the &lt;a href=&#34;https://github.com/msgpack-rpc/msgpack-rpc/blob/master/spec.md&#34;&gt;MessagePack-RPC&lt;/a&gt; standard. It&amp;rsquo;s fully featured, providing send, notify, event subscription and logging.&lt;/p&gt;

&lt;p&gt;Module author Yanick Champoux has &lt;a href=&#34;http://techblog.babyl.ca/entry/neovim-part-1&#34;&gt;blogged&lt;/a&gt; about his motivations for developing MsgPack::RPC to use it with &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt;. His entertaining &lt;a href=&#34;http://techblog.babyl.ca/entry/neovim-way-to-go&#34;&gt;musings&lt;/a&gt; are a good read. Now you can get an API to Neovim using his other new module, &lt;a href=&#34;https://metacpan.org/pod/Neovim::RPC&#34;&gt;Neovim::RPC&lt;/a&gt;. Awesome work!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps:9d36872dc3dcca82f0a59354eccd9216&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::Client&#34;&gt;API::Client&lt;/a&gt; is a general-purpose API client class&lt;/li&gt;
&lt;li&gt;Get simple OATH authentication with &lt;a href=&#34;https://metacpan.org/pod/App::OATH&#34;&gt;App::OATH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::p5stack&#34;&gt;App::p5stack&lt;/a&gt; manages your dependencies and Perl requirements in a local directory. Looks useful for standalone projects, packaging etc&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::PhotoBackup::Server&#34;&gt;Net::PhotoBackup::Server&lt;/a&gt; - everyone backs up their photos right?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Rarbg::torrentapi&#34;&gt;Rarbg::torrentapi&lt;/a&gt; is a Wrapper around Rarbg torrentapi&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Zotero&#34;&gt;WWW::Zotero&lt;/a&gt; provides a Perl interface to the Zotero API&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Scaleway&#34;&gt;WebService::Scaleway&lt;/a&gt; is a Perl interface to Scaleway, the cloud VPN provider&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:9d36872dc3dcca82f0a59354eccd9216&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::Station&#34;&gt;Config::Station&lt;/a&gt; looks interesting: class-based; it can load configurations from files and the environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:9d36872dc3dcca82f0a59354eccd9216&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Log all DBI queries with &lt;a href=&#34;https://metacpan.org/pod/DBI::Log&#34;&gt;DBI::Log&lt;/a&gt;. Awesome!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::TempDB&#34;&gt;DBIx::TempDB&lt;/a&gt; creates temporary databases for testing - supports Postgres, MySQL, SQLite&lt;/li&gt;
&lt;li&gt;Render data structures for easy grepping using &lt;a href=&#34;https://metacpan.org/pod/Data::Crumbr&#34;&gt;Data::Crumbr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Diachronic collocation index using &lt;a href=&#34;https://metacpan.org/pod/DiaColloDB&#34;&gt;DiaColloDB&lt;/a&gt;. Don&amp;rsquo;t know what this is, but it looks interesting.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Image::JpegMinimal&#34;&gt;Image::JpegMinimal&lt;/a&gt; creates JPEG previews without headers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MarpaX::RFC::RFC3987&#34;&gt;MarpaX::RFC::RFC3987&lt;/a&gt; parse and validate IRIs with this Marpa module&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Message::String&#34;&gt;Message::String&lt;/a&gt; a &amp;ldquo;pragma&amp;rdquo; to declare and organise messaging.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Brat::Handler&#34;&gt;Brat::Handler&lt;/a&gt; is a Perl module for managing Brat files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control:9d36872dc3dcca82f0a59354eccd9216&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Class::Anonymous&#34;&gt;Class::Anonymous&lt;/a&gt; get private classes with private data &amp;ldquo;for realz&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;This looks like a useful analysis tool; &lt;a href=&#34;https://metacpan.org/pod/Devel::Trace::Subs&#34;&gt;Devel::Trace::Subs&lt;/a&gt; tracks code flow and stack traces.&lt;/li&gt;
&lt;li&gt;Do acceptance testing for JSON-Schema based validators with &lt;a href=&#34;https://metacpan.org/pod/Test::JSON::Schema::Acceptance&#34;&gt;Test::JSON::Schema::Acceptance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Yes!! Retry test functions on failure using &lt;a href=&#34;https://metacpan.org/pod/Test::Retry&#34;&gt;Test::Retry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware:9d36872dc3dcca82f0a59354eccd9216&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Perl extension for &lt;a href=&#34;https://metacpan.org/pod/Device::Modem::SMSModem&#34;&gt;Device::Modem::SMSModem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A driver for the Pertelian X2040 USB LCD with &lt;a href=&#34;https://metacpan.org/pod/Device::Pertelian&#34;&gt;Device::Pertelian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other:9d36872dc3dcca82f0a59354eccd9216&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easily tie database data to Gtk2 / Wx based apps using &lt;a href=&#34;https://metacpan.org/pod/Gtk2::Ex::DbLinker::DbTools&#34;&gt;Gtk2::Ex::DbLinker::DbTools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eliminate an entire email thread with &lt;a href=&#34;https://metacpan.org/pod/Mail::ThreadKiller&#34;&gt;Mail::ThreadKiller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics:9d36872dc3dcca82f0a59354eccd9216&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Image::Libpuzzle&#34;&gt;Image::Libpuzzle&lt;/a&gt; provides a Perl interface to libpuzzle - the image similarity library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::Tradis&#34;&gt;Bio::Tradis&lt;/a&gt; can Bio-Tradis contains a set of tools to analyze the output from TraDIS analyses&lt;/li&gt;
&lt;li&gt;Manipulate RGB tuples with &lt;a href=&#34;https://metacpan.org/pod/Number::RGB&#34;&gt;Number::RGB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Time::Date&#34;&gt;Time::Date&lt;/a&gt; appears to be the simplest date time implementation in Perl yet. I wonder what the limitations are?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:9d36872dc3dcca82f0a59354eccd9216&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a JSON View that owns its own data with &lt;a href=&#34;https://metacpan.org/pod/Catalyst::View::JSON::PerRequest&#34;&gt;Catalyst::View::JSON::PerRequest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add templates to the Data Section of Catalyst views using &lt;a href=&#34;https://metacpan.org/pod/Catalyst::View::MicroTemplate::DataSection&#34;&gt;Catalyst::View::MicroTemplate::DataSection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Replay terminal captures in your Dancer app using &lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Showterm&#34;&gt;Dancer::Plugin::Showterm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Future::Mojo&#34;&gt;Future::Mojo&lt;/a&gt; let&amp;rsquo;s you use futures with Mojo::IOLoop. Very cool!&lt;/li&gt;
&lt;li&gt;The arms-race for faster continues! Replace HTTP::Headers and HTTP::Headers::Fast with &lt;a href=&#34;https://metacpan.org/pod/HTTP::XSHeaders&#34;&gt;HTTP::XSHeaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mercury&#34;&gt;Mercury&lt;/a&gt; is an application broker class&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Check your DuckDuckGo cheatsheets with Perl</title>
      <link>http://perltricks.com/article/190/2015/8/28/Check-your-DuckDuckGo-cheatsheets-with-Perl/</link>
      <pubDate>Fri, 28 Aug 2015 02:10:48 +0000</pubDate>
      
      <guid>http://perltricks.com/article/190/2015/8/28/Check-your-DuckDuckGo-cheatsheets-with-Perl/</guid>
      <description>

&lt;p&gt;With DuckDuckGo&amp;rsquo;s global &lt;a href=&#34;https://duck.co/blog&#34;&gt;Quack &amp;amp; Hack&lt;/a&gt; just around the corner, I&amp;rsquo;ve pulled together a &lt;a href=&#34;https://github.com/dnmfarrell/DDG-cheatsheet-check&#34;&gt;script&lt;/a&gt; for checking &lt;a href=&#34;http://perltricks.com/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier&#34;&gt;cheatsheets&lt;/a&gt;. The script checks the cheatsheet is valid JSON and has the required entries and values.&lt;/p&gt;

&lt;h3 id=&#34;setup:ba1b9af695697190964a2575a16eb6fa&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;To run the script, download it from &lt;a href=&#34;https://github.com/dnmfarrell/DDG-cheatsheet-check/blob/master/cheatsheet_check&#34;&gt;Github&lt;/a&gt;. It requires the &lt;a href=&#34;https://metacpan.org/pod/JSON&#34;&gt;JSON&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/HTTP::Tiny&#34;&gt;HTTP::Tiny&lt;/a&gt; Perl modules which you can install with &lt;code&gt;cpan&lt;/code&gt; at the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan JSON HTTP::Tiny
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to give execute permissions to the script too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ chmod 744 cheatsheet_check
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage:ba1b9af695697190964a2575a16eb6fa&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;Once you have a cheatsheet in JSON that you want to check, just pass the filepath to &lt;code&gt;cheatsheet_check&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ ./cheatsheet_check /path/to/cheatsheet.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example output for the &lt;code&gt;perldoc&lt;/code&gt; cheatsheet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Subtest: file
    ok 1 - file exists
    ok 2 - filename is appropriate
    ok 3 - file content can be read
    ok 4 - content is valid JSON
    1..4
ok 1 - file
    # Subtest: headers
    ok 1 - has id
    ok 2 - has name
    ok 3 - has description
    1..3
ok 2 - headers
    # Subtest: metadata
    ok 1 - has metadata
    ok 2 - has metadata sourceName
    ok 3 - has metadata sourceUrl
    ok 4 - sourceUrl is not undef
    ok 5 - fetch sourceUrl
    1..5
ok 3 - metadata
    # Subtest: sections
    ok 1 - has section_order
    ok 2 - section_order is an array of section names
    ok 3 - has sections
    ok 4 - sections is a hash of section key/pairs
    ok 5 - &#39;Usage&#39; exists in sections
    ok 6 - &#39;Module Options&#39; exists in sections
    ok 7 - &#39;Search Options&#39; exists in sections
    ok 8 - &#39;Common Options&#39; exists in sections
    ok 9 - &#39;Search Options&#39; exists in section_order
    ok 10 - &#39;Search Options&#39; is an array
    ok 11 - &#39;Search Options&#39; entry: 0 has a key
    ok 12 - &#39;Search Options&#39; entry: 0 has a val
    ok 13 - &#39;Search Options&#39; entry: 1 has a key
    ok 14 - &#39;Search Options&#39; entry: 1 has a val
    ok 15 - &#39;Search Options&#39; entry: 2 has a key
    ok 16 - &#39;Search Options&#39; entry: 2 has a val
    ok 17 - &#39;Common Options&#39; exists in section_order
    ok 18 - &#39;Common Options&#39; is an array
    ok 19 - &#39;Common Options&#39; entry: 0 has a key
    ok 20 - &#39;Common Options&#39; entry: 0 has a val
    ok 21 - &#39;Common Options&#39; entry: 1 has a key
    ok 22 - &#39;Common Options&#39; entry: 1 has a val
    ok 23 - &#39;Common Options&#39; entry: 2 has a key
    ok 24 - &#39;Common Options&#39; entry: 2 has a val
    ok 25 - &#39;Common Options&#39; entry: 3 has a key
    ok 26 - &#39;Common Options&#39; entry: 3 has a val
    ok 27 - &#39;Common Options&#39; entry: 4 has a key
    ok 28 - &#39;Common Options&#39; entry: 4 has a val
    ok 29 - &#39;Module Options&#39; exists in section_order
    ok 30 - &#39;Module Options&#39; is an array
    ok 31 - &#39;Module Options&#39; entry: 0 has a key
    ok 32 - &#39;Module Options&#39; entry: 0 has a val
    ok 33 - &#39;Module Options&#39; entry: 1 has a key
    ok 34 - &#39;Module Options&#39; entry: 1 has a val
    ok 35 - &#39;Module Options&#39; entry: 2 has a key
    ok 36 - &#39;Module Options&#39; entry: 2 has a val
    ok 37 - &#39;Module Options&#39; entry: 3 has a key
    ok 38 - &#39;Module Options&#39; entry: 3 has a val
    ok 39 - &#39;Usage&#39; exists in section_order
    ok 40 - &#39;Usage&#39; is an array
    ok 41 - &#39;Usage&#39; entry: 0 has a key
    ok 42 - &#39;Usage&#39; entry: 0 has a val
    ok 43 - &#39;Usage&#39; entry: 1 has a key
    ok 44 - &#39;Usage&#39; entry: 1 has a val
    1..44
ok 4 - sections
1..4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run over 20 different tests against the cheatsheet. The script checks that the JSON is valid, that the required headers are present (e.g. id, name and description). It checks that the metadata is valid and points to a live URL. Finally it checks that the sections are valid and correctly mapped.&lt;/p&gt;

&lt;h3 id=&#34;wrap-up:ba1b9af695697190964a2575a16eb6fa&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;Remember, even if the cheatsheet passes all the tests, you still need to check it looks right in the browser. &lt;a href=&#34;https://metacpan.org/pod/App::DuckPAN&#34;&gt;App::DuckPAN&lt;/a&gt; can help with that. This Saturday I&amp;rsquo;ll be hanging out at the NYC Quack &amp;amp; Hack at &lt;a href=&#34;http://www.meetup.com/Quack-Hack-New-York-City/events/224567174/&#34;&gt;Orbital&lt;/a&gt;. I look forward to seeing everyone there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; added HTTP::Tiny dependency. 2015-08-28&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing DuckDuckGo plugins just got easier</title>
      <link>http://perltricks.com/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier/</link>
      <pubDate>Sat, 22 Aug 2015 14:05:25 +0000</pubDate>
      
      <guid>http://perltricks.com/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier/</guid>
      <description>

&lt;p&gt;The developers behind DuckDuckGo, the search engine that doesn&amp;rsquo;t track you, have made it easier than ever to write plugins for the site. With the first global &lt;a href=&#34;https://duck.co/blog/post/196/the-first-global-quack-hack&#34;&gt;Quack &amp;amp; Hack&lt;/a&gt; event taking place later this month, there&amp;rsquo;s never been a better time to get involved.&lt;/p&gt;

&lt;h3 id=&#34;instant-answers:06f8e3dfccc590daeee2c2b9ec28de7c&#34;&gt;Instant Answers&lt;/h3&gt;

&lt;p&gt;The DuckDuckGo engine supports several types of plugin, but instant answers that provide a static &amp;ldquo;cheatsheet&amp;rdquo; are a simple to get started. &lt;a href=&#34;http://perltricks.com/article/169/2015/4/20/Writing-DuckDuckGo-instant-answers-is-easy&#34;&gt;Previously&lt;/a&gt; developing a new instant answer would require a Perl module, a test file and a plain text version of the response. Now all you need to provide is a JSON file of your instant answer and you&amp;rsquo;re in business.&lt;/p&gt;

&lt;h3 id=&#34;setup:06f8e3dfccc590daeee2c2b9ec28de7c&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to fork the DuckDuckGo &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies&#34;&gt;repo&lt;/a&gt; and clone your forked repo to your development machine. Optionally you can install &lt;a href=&#34;https://metacpan.org/pod/App::DuckPAN&#34;&gt;App::DuckPAN&lt;/a&gt;, which can launch a local version of the DuckDuckGo site for testing your code. Another way to test the cheatsheet is via &lt;a href=&#34;https://vimeo.com/132712266&#34;&gt;Codio&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;an-instant-answer-json-file:06f8e3dfccc590daeee2c2b9ec28de7c&#34;&gt;An Instant Answer JSON file&lt;/h3&gt;

&lt;p&gt;Instant answer JSON files should be created in the &lt;code&gt;share/goodie/cheat_sheets&lt;/code&gt; directory in the repo. A good way to start is to copy one of the existing files and change it to include your content.&lt;/p&gt;

&lt;p&gt;This is a truncated example from my &lt;code&gt;perldoc&lt;/code&gt; instant answer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;{
    &amp;quot;id&amp;quot;: &amp;quot;perldoc_cheat_sheet&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;perldoc&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Perl Documentation&amp;quot;,
    &amp;quot;metadata&amp;quot;: {
        &amp;quot;sourceName&amp;quot;: &amp;quot;perldoc Manual&amp;quot;,
        &amp;quot;sourceUrl&amp;quot;: &amp;quot;http://perldoc.perl.org/perldoc.html&amp;quot;
    },
    &amp;quot;section_order&amp;quot;: [&amp;quot;Usage&amp;quot;, &amp;quot;Module Options&amp;quot;, &amp;quot;Search Options&amp;quot;, &amp;quot;Common Options&amp;quot;],
    &amp;quot;sections&amp;quot;: {
        &amp;quot;Usage&amp;quot;: [
        {
            &amp;quot;key&amp;quot;: &amp;quot;[perldoc &amp;lt;option&amp;gt;]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;start perldoc&amp;quot;
        },
        {
            &amp;quot;key&amp;quot;: &amp;quot;[perldoc perldoc]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;perldoc help&amp;quot;
        }
        ],
       ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; fields should be unique values that describe the plugin. The &lt;code&gt;metadata&lt;/code&gt; fields describe the source of the information in the instant answer. It&amp;rsquo;s good to use a canonical source - in this case I referenced the official Perl documentation.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sections&lt;/code&gt; field is the content of the instant answer. Each entry is a key value for an array of key pairs. &lt;code&gt;section_order&lt;/code&gt; describes the order in which the sections will be displayed in the search engine results, so make sure you put the most important sections first!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a closer look at a section entry, here is &lt;code&gt;Module Options&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;        &amp;quot;Module Options&amp;quot;: [
        {
            &amp;quot;key&amp;quot;: &amp;quot;Module::Name&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;Show module documentation&amp;quot;
        },
        {
            &amp;quot;key&amp;quot;: &amp;quot;[-l Module::Name]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;Module filepath&amp;quot;
        },
        {
            &amp;quot;key&amp;quot;: &amp;quot;[-m Module::Name]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;Module source code&amp;quot;
        },
        {
            &amp;quot;key&amp;quot;: &amp;quot;[-lm Module::Name]&amp;quot;,
            &amp;quot;val&amp;quot;: &amp;quot;Module filepath (alt.)&amp;quot;
        }
        ],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;Module Options&amp;rdquo; is the section name, this must be present exactly in the &lt;code&gt;section_order&lt;/code&gt; field, or this section will not appear at all. The section name text is the subheading used for the section, so be sure to choose something readable: &amp;ldquo;Module Options&amp;rdquo; is better than &amp;ldquo;module_options&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Each key pair entry represents the text to be displayed for the instant answer, the &lt;code&gt;key&lt;/code&gt; text should be the code and &lt;code&gt;val&lt;/code&gt; the description. If the &lt;code&gt;key&lt;/code&gt; text contains spaces, wrap the text in square brackets to ensure it&amp;rsquo;s displayed as code on the web page (see this article&amp;rsquo;s cover image for examples). You can find the complete perldoc JSON file &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/share/goodie/cheat_sheets/json/perldoc.json&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;wrap-up:06f8e3dfccc590daeee2c2b9ec28de7c&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;You can test your instant answer using &lt;a href=&#34;https://metacpan.org/pod/App::DuckPAN&#34;&gt;App::DuckPAN&lt;/a&gt; (see my previous &lt;a href=&#34;http://perltricks.com/article/169/2015/4/20/Writing-DuckDuckGo-instant-answers-is-easy&#34;&gt;article&lt;/a&gt; for examples). If you want to discuss your instant answer with a developer, or resolve an issue, the DuckDuckGo team are on Slack, you can request access via &lt;a href=&#34;mailto:QuackSlack@duckduckgo.com?subject=AddMe&#34;&gt;email&lt;/a&gt;. The official &lt;a href=&#34;https://duck.co/duckduckhack/goodie_overview&#34;&gt;documentation&lt;/a&gt; is also useful.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve finished an instant answer, create a pull request! The DuckDuckGo developers will review your code and give feedback. Once your instant answer is approved, it will go live within a few days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; Changed chat details for DDG slack 2015-08-26&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - April 2015</title>
      <link>http://perltricks.com/article/172/2015/5/7/What-s-new-on-CPAN---April-2015/</link>
      <pubDate>Thu, 07 May 2015 11:47:25 +0000</pubDate>
      
      <guid>http://perltricks.com/article/172/2015/5/7/What-s-new-on-CPAN---April-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month:9d09a9b22344f6529aec729c81bcf9ca&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;Dancer::Plugin::Test::Jasmine by Yanick Champoux provides a way to inject Jasmine tests into Dancer applications. So cool!&lt;/p&gt;

&lt;p&gt;Jasmine is a popular JavaScript test framework, and with frontend frameworks like AngularJS, a large amount of application logic often falls outside of the vista of Perl unit testing. Yanick&amp;rsquo;s module provides a way to run Jasmine tests in Perl. He&amp;rsquo;s also &lt;a href=&#34;http://techblog.babyl.ca/entry/dancer-jasmine&#34;&gt;written&lt;/a&gt; about it. Check it out!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps:9d09a9b22344f6529aec729c81bcf9ca&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Tangerine&#34;&gt;App::Tangerine&lt;/a&gt; is a terminal app for reporting module dependencies&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::PAUSE::TimeMachine&#34;&gt;App::PAUSE::TimeMachine&lt;/a&gt; lets you view the PAUSE package list over time&lt;/li&gt;
&lt;li&gt;Get slack notifications about Git releases with &lt;a href=&#34;https://metacpan.org/pod/App::GitHooks::Plugin::NotifyReleasesToSlack&#34;&gt;App::GitHooks::Plugin::NotifyReleasesToSlack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::CouchDB&#34;&gt;Data::CouchDB&lt;/a&gt; is an API for CouchDB the document database&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Minecraft::Fishbans&#34;&gt;WebService::Minecraft::Fishbans&lt;/a&gt; provides an API for searching Minecraft banned user services&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:9d09a9b22344f6529aec729c81bcf9ca&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Electron&#34;&gt;Alien::Electron&lt;/a&gt; will install the awesome &lt;a href=&#34;http://electron.atom.io/&#34;&gt;electron&lt;/a&gt; framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/palien&#34;&gt;palien&lt;/a&gt; is a command line app for interfacing with Alien::Base based distributions&lt;/li&gt;
&lt;li&gt;Query FreeBSD for a list of running jails using &lt;a href=&#34;https://metacpan.org/pod/FreeBSD::Jails&#34;&gt;FreeBSD::Jails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Are you missing all those lovely modules that were discarded from the Perl core? Then you&amp;rsquo;ll love &lt;a href=&#34;https://metacpan.org/pod/Bundle::ExCore&#34;&gt;Bundle::ExCore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::JBoss&#34;&gt;Net::JBoss&lt;/a&gt; provides bindings for the JBoss Management API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:9d09a9b22344f6529aec729c81bcf9ca&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::DynamoDB::Simple&#34;&gt;Amazon::DynamoDB::Simple&lt;/a&gt; provides an simplified API for Amazon&amp;rsquo;s DynamoDB, but requires data in 2 AWS regions.&lt;/li&gt;
&lt;li&gt;Another AWS project, &lt;a href=&#34;https://metacpan.org/pod/Paws&#34;&gt;Paws&lt;/a&gt; is an ambitious attempt at unified framework covering all AWS services&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::XS::Sugar&#34;&gt;JSON::XS::Sugar&lt;/a&gt; provides super fast JSON serialization with fine-grained control of boolean values&lt;/li&gt;
&lt;li&gt;Useful for database development,&lt;a href=&#34;https://metacpan.org/pod/Data::ShortNameProvider&#34;&gt;Data::ShortNameProvider&lt;/a&gt; will generate short names unlikely to clash with existing ones&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-version-control:9d09a9b22344f6529aec729c81bcf9ca&#34;&gt;Development and Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Subunits&#34;&gt;Test::Subunits&lt;/a&gt;, a new module from Damian Conway, extracts subunit tests from code, or runs inline unit tests. Wowl!&lt;/li&gt;
&lt;li&gt;Throw and delay exceptions with &lt;a href=&#34;https://metacpan.org/pod/Exception::Delayed&#34;&gt;Exception::Delayed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Munge::Whitespace&#34;&gt;Dist::Zilla::Plugin::Munge::Whitespace&lt;/a&gt; will strip trailing whitespace from files&lt;/li&gt;
&lt;li&gt;Trace the origin of loaded modules using &lt;a href=&#34;https://metacpan.org/pod/Devel::Module::Trace&#34;&gt;Devel::Module::Trace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooX::Role::Chatty&#34;&gt;MooX::Role::Chatty&lt;/a&gt; is a configurable progress message reporter&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware:9d09a9b22344f6529aec729c81bcf9ca&#34;&gt;Hardware&lt;/h3&gt;

&lt;p&gt;Two new BusPirate modules from Paul Evans:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::BusPirate::Chip::SSD1306&#34;&gt;Device::BusPirate::Chip::SSD1306&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::BusPirate::Chip::DS1307&#34;&gt;Device::BusPirate::Chip::DS1307&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:9d09a9b22344f6529aec729c81bcf9ca&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::Text::Shorten::ForTwitter&#34;&gt;Acme::Text::Shorten::ForTwitter&lt;/a&gt; shortens Twitter text in a clever, extensible way&lt;/li&gt;
&lt;li&gt;Create beautiful photo websites with &lt;a href=&#34;https://metacpan.org/pod/Photography::Website&#34;&gt;Photography::Website&lt;/a&gt;. Check out the &lt;a href=&#34;http://www.superformosa.nl/&#34;&gt;example&lt;/a&gt;. A command line &lt;a href=&#34;https://metacpan.org/pod/distribution/Photography-Website/bin/photog&#34;&gt;app&lt;/a&gt; is also available.&lt;/li&gt;
&lt;li&gt;Great new Catalyst feature: &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::MapComponentDependencies&#34;&gt;Catalyst::Plugin::MapComponentDependencies&lt;/a&gt; provides dependency handling for Catalyst components&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::JWT&#34;&gt;Mojo::JWT&lt;/a&gt; provides JSON web tokens for Mojolicious&lt;/li&gt;
&lt;li&gt;Send messages to users of your Dancer2 web app using &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::Growler&#34;&gt;Dancer2::Plugin::Growler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2015</title>
      <link>http://perltricks.com/article/156/2015/3/2/What-s-new-on-CPAN---February-2015/</link>
      <pubDate>Mon, 02 Mar 2015 13:52:10 +0000</pubDate>
      
      <guid>http://perltricks.com/article/156/2015/3/2/What-s-new-on-CPAN---February-2015/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. February&amp;rsquo;s uploads were a goldmine of new toys. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month:0c3bc4cdcc6acb237b0fa963bfd7aa24&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Serialize&#34;&gt;File::Serialize&lt;/a&gt; will read from and write to from yaml, json and toml files, seamlessly converting from native Perl data structures into the required format. It just does the right thing, leaving the developer to focus on their code.&lt;/p&gt;

&lt;p&gt;Module author Yanick Champoux also wrote an &lt;a href=&#34;http://techblog.babyl.ca/entry/file-serialize&#34;&gt;article&lt;/a&gt; about it. With so many great new CPAN uploads, it&amp;rsquo;s not easy choosing the module of the month. What I like about File::Serialize is that it solves a common problem conveniently, and I know I&amp;rsquo;ll use it in my code. Check it out!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps:0c3bc4cdcc6acb237b0fa963bfd7aa24&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/App::cloc&#34;&gt;App::cloc&lt;/a&gt; is the a brand new CPAN package for the established &lt;a href=&#34;http://cloc.sourceforge.net/&#34;&gt;cloc&lt;/a&gt; application. Great to see it on CPAN&lt;/p&gt;

&lt;p&gt;Wow. &lt;a href=&#34;https://metacpan.org/pod/Finance::Nadex&#34;&gt;Finance::Nadex&lt;/a&gt; is a full featured API for the North American Derivatives Exchange. Make sure you do your unit testing before selling options on Anacott Steel!&lt;/p&gt;

&lt;p&gt;Automatically spin up surveys with &lt;a href=&#34;https://metacpan.org/pod/Net::Surveymonkey&#34;&gt;Net::Surveymonkey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Google::SafeBrowsing3&#34;&gt;Net::Google::SafeBrowsing3&lt;/a&gt; provides an interface for the latest version of Google&amp;rsquo;s safe browsing API&lt;/p&gt;

&lt;p&gt;This is interesting: &lt;a href=&#34;https://metacpan.org/pod/WebService::Prismatic::InterestGraph&#34;&gt;WebService::Prismatic::InterestGraph&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Several Amazon AWS goodies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AWS::IP&#34;&gt;AWS::IP&lt;/a&gt; provides Amazon AWS ip ranges in a searchable, cache-able way (disclosure, I am the module author)&lt;/li&gt;
&lt;li&gt;Verify SNS messages with &lt;a href=&#34;https://metacpan.org/pod/AWS::SNS::Verify&#34;&gt;AWS::SNS::Verify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::S3::Thin&#34;&gt;Amazon::S3::Thin&lt;/a&gt; is a lightweight, transparent interface for S3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:0c3bc4cdcc6acb237b0fa963bfd7aa24&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easily parse callgrind output in Perl with &lt;a href=&#34;https://metacpan.org/pod/Callgrind::Parser&#34;&gt;Callgrind::Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Distribution::Metadata&#34;&gt;Distribution::Metadata&lt;/a&gt; assembles distribution metadata&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Chef::Knife::Cmd&#34;&gt;Chef::Knife::Cmd&lt;/a&gt; is a convenience wrapper for the Chef knife command&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:0c3bc4cdcc6acb237b0fa963bfd7aa24&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::BOM::Utils&#34;&gt;File::BOM::Utils&lt;/a&gt; lets you manipulate byte order marks in files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Panda::Time&#34;&gt;Panda::Time&lt;/a&gt; purports to be a super fast time module, looks good.. See also &lt;a href=&#34;https://metacpan.org/pod/Panda::Date&#34;&gt;Panda::Date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handle JSON web requests more conveniently with &lt;a href=&#34;https://metacpan.org/pod/LWP::JSON::Tiny&#34;&gt;LWP::JSON::Tiny&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-version-control:0c3bc4cdcc6acb237b0fa963bfd7aa24&#34;&gt;Development and Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Call::Haskell&#34;&gt;Call::Haskell&lt;/a&gt; provides a foreign function interface for the functional programming language. See also &lt;a href=&#34;https://metacpan.org/pod/Functional::Types&#34;&gt;Functional::Types&lt;/a&gt; which implements a Haskell-like type system in Perl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Crypt&#34;&gt;Git::Crypt&lt;/a&gt; will encrypt and decrypt files for storing sensitive data in repos. Cleverly the encryption is done line-by-line to reduce version control noise&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/GitHub::MergeVelocity&#34;&gt;GitHub::MergeVelocity&lt;/a&gt; produces a neat report on GitHub repos showing how quickly they merge (and close) pull requests. Use it if you&amp;rsquo;re in doubt of whether to contribute to a repo!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware:0c3bc4cdcc6acb237b0fa963bfd7aa24&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Hypnocube&#34;&gt;Device::Hypnocube&lt;/a&gt; lets you control a hypnocube with Perl code - flashing lights!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-and-international:0c3bc4cdcc6acb237b0fa963bfd7aa24&#34;&gt;Science and International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Algorithm::BitVector&#34;&gt;Algorithm::BitVector&lt;/a&gt; is a port of the popular Python library BitVector, by the original author&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FAST&#34;&gt;FAST&lt;/a&gt; provides Unix-like tools for analyzing bioinformatic sequence records&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:0c3bc4cdcc6acb237b0fa963bfd7aa24&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/LWPx::UserAgent::Cached&#34;&gt;LWPx::UserAgent::Cached&lt;/a&gt; caches HTTP get requests and is polite enough to let you use your own cache, with sane defaults&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Articulate&#34;&gt;Articulate&lt;/a&gt; is a lightweight CMS plugin for Dancer&lt;/li&gt;
&lt;li&gt;Lithium::WebDriver is an awesome, full featured library that can create and control webdriver instances in both Selenium and Phantomjs sessions. Module seems more up to date on &lt;a href=&#34;https://github.com/GrayTShirt/Lithium-WebDriver&#34;&gt;GitHub&lt;/a&gt;. Also see &lt;a href=&#34;https://metacpan.org/pod/Test::Lithium&#34;&gt;Test::Lithium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pulp&#34;&gt;Pulp&lt;/a&gt; provides syntactic sugar for the Kelp web framework&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

