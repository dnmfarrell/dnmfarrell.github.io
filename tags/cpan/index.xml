<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpan on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/cpan/</link>
    <description>Recent content in Cpan on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Feb 2016 15:02:35 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/cpan/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - January 2015</title>
      <link>http://perltricks.com/article/213/2016/2/10/What-s-new-on-CPAN---January-2015/</link>
      <pubDate>Wed, 10 Feb 2016 15:02:35 +0000</pubDate>
      
      <guid>http://perltricks.com/article/213/2016/2/10/What-s-new-on-CPAN---January-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; Last year&amp;rsquo;s &amp;ldquo;module of the month&amp;rdquo; experiment has come to an end. I think there are better ways to promote Perl modules and developers (see &lt;a href=&#34;http://cpan-weekly.org/&#34;&gt;CPAN Weekly&lt;/a&gt; for example).&lt;/p&gt;

&lt;h3 id=&#34;apis-apps:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Convert CPAN distributions into RPM packages with the newly-repackaged &lt;a href=&#34;https://metacpan.org/pod/App::CPANtoRPM&#34;&gt;App::CPANtoRPM&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Inspect&#34;&gt;App::Inspect&lt;/a&gt; helps you easily find the versions and locations of installed modules&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::tt&#34;&gt;App::tt&lt;/a&gt; is a command line time tracking app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Duo&#34;&gt;Net::Duo&lt;/a&gt; provides a Perl API for the popular multifactor authentication service&lt;/li&gt;
&lt;li&gt;Read articles from two popular sources at the command line: &lt;a href=&#34;https://metacpan.org/pod/App::tldr&#34;&gt;App::tldr&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/WebService::TDWTF&#34;&gt;WebService::TDWTF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Conveniently find local outdated modules and for CPAN:&lt;a href=&#34;https://metacpan.org/pod/CPAN::Diff&#34;&gt;CPAN::Diff&lt;/a&gt; and Pinto: &lt;a href=&#34;https://metacpan.org/pod/DarkPAN::Compare&#34;&gt;DarkPAN::Compare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dispatch log events to Slack with log4perl and &lt;a href=&#34;https://metacpan.org/pod/Log::Dispatch::Slack&#34;&gt;Log::Dispatch::Slack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Useful for low-level network tasks, &lt;a href=&#34;https://metacpan.org/pod/Net::Frame::Layer::VRRP&#34;&gt;Net::Frame::Layer::VRRP&lt;/a&gt; provides a Virtual Router Redundancy Protocol class&lt;/li&gt;
&lt;li&gt;A simple way to get a high-resolution Unix epoch: &lt;a href=&#34;https://metacpan.org/pod/Time::TAI::Simple&#34;&gt;Time::TAI::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Types::SQL&#34;&gt;Types::SQL&lt;/a&gt; is library of SQL types; useful for Moo/Moose/Mouse classes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Interesting; call functions / methods from a different caller with &lt;a href=&#34;https://metacpan.org/pod/Call::From&#34;&gt;Call::From&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Export::Declare&#34;&gt;Export::Declare&lt;/a&gt; provides simple and clean ways to export code and variables.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Importer&#34;&gt;Importer&lt;/a&gt; provides convenient routines for importing (and renaming!) code from modules&lt;/li&gt;
&lt;li&gt;Easily test non-blocking Perl scripts (like Mojo apps) with &lt;a href=&#34;https://metacpan.org/pod/Test::Script::Async&#34;&gt;Test::Script::Async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test2::Workflow&#34;&gt;Test2::Workflow&lt;/a&gt; is a framework for building testing workflows (e.g. &lt;a href=&#34;https://metacpan.org/pod/Test2::Tools::Spec&#34;&gt;Test2::Tools::Spec&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Make scalars which execute a subroutine every time they&amp;rsquo;re accessed using &lt;a href=&#34;https://metacpan.org/pod/Tie::Scalar::Callback&#34;&gt;Tie::Scalar::Callback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run Visual Basic and JavaScript code via OLE with &lt;a href=&#34;https://metacpan.org/pod/Win32::VBScript&#34;&gt;Win32::VBScript&lt;/a&gt;. Fun!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Paul Evans continues to deliver new hardware tools via &lt;a href=&#34;https://metacpan.org/pod/Device::Chip&#34;&gt;Device::Chip&lt;/a&gt;! Get a driver for the PCF8563 chip (&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::PCF8563&#34;&gt;Device::Chip::PCF8563&lt;/a&gt;), and a driver for SD and MMC cards (&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::SDCard&#34;&gt;Device::Chip::SDCard&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Poker::Eval&#34;&gt;Poker::Eval&lt;/a&gt; is a base class providing routines for Poker games including dealing, scoring and calculating expected win rates.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/URI::redis&#34;&gt;URI::redis&lt;/a&gt; provides a URI class specific to Redis URIs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::HTS&#34;&gt;Bio::HTS&lt;/a&gt; is an early-stage Perl interface for htslib&lt;/li&gt;
&lt;li&gt;Get cryptographically-secure and fast pseudo random number generators using &lt;a href=&#34;https://metacpan.org/pod/Crypt::DRBG&#34;&gt;Crypt::DRBG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:f7741ed44cc1868eb231f608e2ef499e&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create CGI (yes!) GitHub webhooks with&lt;a href=&#34;https://metacpan.org/pod/CGI::Github::Webhook&#34;&gt;CGI::Github::Webhook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Curious: &lt;a href=&#34;https://metacpan.org/pod/Lemplate&#34;&gt;Lemplate&lt;/a&gt; compiles TT templates to standalone Lua modules for OpenResty&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Modern Perl 4th edition, a review</title>
      <link>http://perltricks.com/article/205/2015/12/21/Modern-Perl-4th-edition--a-review/</link>
      <pubDate>Mon, 21 Dec 2015 00:02:25 +0000</pubDate>
      
      <guid>http://perltricks.com/article/205/2015/12/21/Modern-Perl-4th-edition--a-review/</guid>
      <description>

&lt;p&gt;The 4th edition of &lt;a href=&#34;https://pragprog.com/book/swperl/modern-perl-fourth-edition&#34;&gt;Modern Perl&lt;/a&gt; by chromatic is out. I was given an advance copy to review and the book features my praise quote, so I figured it was about time I wrote my notes up into a longer review. Overall I really like the changes to the new edition; in my opinion, Modern Perl continues to provide a valuable introduction to idiomatic Perl programming.&lt;/p&gt;

&lt;h3 id=&#34;learn-the-idiomatic-perl-style:1a23e64e513dff9cb8ce1f594e62a037&#34;&gt;Learn the idiomatic Perl style&lt;/h3&gt;

&lt;p&gt;Modern Perl isn&amp;rsquo;t like your typical dry programming book. For one thing, it&amp;rsquo;s opinionated. Author chromatic draws on his experience to provide an insiders&amp;rsquo; guide that shows the &lt;em&gt;right&lt;/em&gt; way to program in Perl.&lt;/p&gt;

&lt;p&gt;The text is fast-moving and doesn&amp;rsquo;t baby the reader. Instead of &amp;ldquo;hello World&amp;rdquo;, the book begins by teaching the reader how to use &lt;code&gt;perldoc&lt;/code&gt; and draw upon the official documentation when they get stuck. Don&amp;rsquo;t waste time with Google when the answer &lt;a href=&#34;http://perltricks.com/article/155/2015/2/26/Hello-perldoc--productivity-booster&#34;&gt;can be found in seconds&lt;/a&gt; at the command line.&lt;/p&gt;

&lt;p&gt;Chapters 1 and 2 introduce the Perl philosophy and Community. The book rapidly covers the major features of Perl (chapters 3 - 7) and even more advanced topics like recursion, anonymous functions and closures. Peppered throughout are gems of wisdom explaining the rationale behind a given concept. For instance, on including parentheses on all function calls (even ones without arguments):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While these parentheses are not strictly necessary for these examples—even with strict enabled—they provide clarity to human readers as well as Perl’s parser. When in doubt, use them.&lt;/p&gt;

&lt;p&gt;Modern Perl 4th edition, Chapter 5, Declaring Functions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The focus here, though is on the practical and chromatic quickly moves on to advising on elements of good Perl style and how to learn it (chapter 8) and real-World programming tips (chapter 9). This is an honest, expert&amp;rsquo;s account of Perl, and chapter 11 describes what to avoid in Perl (chapter 5 also has an entry on function misfeatures).&lt;/p&gt;

&lt;p&gt;Whilst this is an introductory text, chromatic does find time to touch upon several intermediate concepts like taint, schwartzian transforms and tail call optimizations. There is something for everybody: re-reading the &lt;a href=&#34;http://modernperlbooks.com/books/modern_perl_2014/05-perl-functions.html#U3RhdGV2ZXJzdXNDbG9zdXJlcw&#34;&gt;section&lt;/a&gt; State-versus-Closures (chapter 5) I learned a nuance that I hadn&amp;rsquo;t appreciated before.&lt;/p&gt;

&lt;p&gt;Modern Perl does assume a lot and this could make it challenging for complete novices. For example the code snippets assume the reader can distinguish between command line and Perl programming context. Map and grep are used in examples but are not covered in the language overview chapters. But these are minor nits.&lt;/p&gt;

&lt;h3 id=&#34;modern-perl:1a23e64e513dff9cb8ce1f594e62a037&#34;&gt;&amp;ldquo;Modern&amp;rdquo; Perl?&lt;/h3&gt;

&lt;p&gt;About 10 years ago, Perl enjoyed something of a &lt;a href=&#34;http://www.modernperlbooks.com/mt/2009/07/milestones-in-the-perl-renaissance.html&#34;&gt;renaissance&lt;/a&gt; called &amp;ldquo;Modern Perl&amp;rdquo;. This was a movement that developed powerful new libraries, tools and applications which invigorated Perl programming and gave it a new lease-of-life. Today the phrase is almost synonymous with Perl &amp;ldquo;best practices&amp;rdquo; and its ethos continues to help Perl flourish.&lt;/p&gt;

&lt;h3 id=&#34;what-s-changed:1a23e64e513dff9cb8ce1f594e62a037&#34;&gt;What&amp;rsquo;s changed&lt;/h3&gt;

&lt;p&gt;The 4th edition brings a lot of changes, but it&amp;rsquo;s a case of evolution, not revolution. New Perl features like the double-diamond operator (&lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;) and &lt;a href=&#34;http://perltricks.com/article/72/2014/2/24/Perl-levels-up-with-native-subroutine-signatures&#34;&gt;subroutine signatures&lt;/a&gt; are covered. Almost every paragraph has been &lt;a href=&#34;https://github.com/chromatic/modern_perl_book/commits/master&#34;&gt;updated&lt;/a&gt;), but the chapter structure remains the same and many of the edits are tweaks rather than wholesale re-writes. Many of the changes improve the readability of the text, others de-jargonize it, like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Functions are a prime mechanism for abstraction, encapsulation, and re-use in Perl.&lt;/p&gt;

&lt;p&gt;Modern Perl, 3rd Edition, Chapter 5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;became:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Functions are a prime mechanism for organizing code into similar groups, identifying individual pieces by name, and providing reusable units of behavior.&lt;/p&gt;

&lt;p&gt;Modern Perl, 3rd Edition, Chapter 5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which is clearly easier for beginners to understand. Code-wise, many of the examples have changed from a BSD to K&amp;amp;R style, presumably to save vertical space. Overall the book length remains about the same (205 vs 204 pages).&lt;/p&gt;

&lt;p&gt;The biggest change with the new edition comes from The Pragmatic Bookshelf - their version is simply &lt;em&gt;gorgeous&lt;/em&gt;. Full color with larger fonts, icons and callouts, the book really pops. This is the layout Modern Perl needs &lt;em&gt;and&lt;/em&gt; deserves. See this comparison between the Onyx Neon and Pragmatic Bookshelf versions:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://googledrive.com/host/0BwRnByTz2iUXUFN1Smo5WGJRZ0U/&#34; title=&#34;The Pragmatic Bookshelf edition is gorgeous&#34;&gt;&lt;img src=&#34;http://googledrive.com/host/0BwRnByTz2iUXeDgzVlJRWmtkX0k/&#34; alt=&#34;Modern Perl side-by-side comparison of editions&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;alternatives:1a23e64e513dff9cb8ce1f594e62a037&#34;&gt;Alternatives&lt;/h3&gt;

&lt;p&gt;As an opinionated introduction to Perl, Modern Perl is a compromise between a tutorial and a best-practices style cookbook. I love the direction and terse writing style, but the book might move too fast for complete beginners. So it depends on what you&amp;rsquo;re looking for - &lt;a href=&#34;http://www.amazon.com/Beginning-Perl-Curtis-Poe/dp/1118013840&#34;&gt;Beginning Perl&lt;/a&gt; and &lt;a href=&#34;http://www.amazon.com/Learning-Perl-Randal-L-Schwartz/dp/1449303587&#34;&gt;Learning Perl&lt;/a&gt; are fine introductions to the language. &lt;a href=&#34;http://www.amazon.com/Effective-Perl-Programming-Idiomatic-Development/dp/0321496949&#34;&gt;Effective Perl Programming&lt;/a&gt; is my favorite Perl cookbook. But Modern Perl is a unique blend of both styles.&lt;/p&gt;

&lt;h3 id=&#34;where-to-get-it:1a23e64e513dff9cb8ce1f594e62a037&#34;&gt;Where to get it&lt;/h3&gt;

&lt;p&gt;You can read Modern Perl &lt;a href=&#34;http://modernperlbooks.com/books/modern_perl_2014/index.html&#34;&gt;online&lt;/a&gt; for free, and there are downloadable versions available from &lt;a href=&#34;http://onyxneon.com/books/modern_perl/index.html&#34;&gt;Onyx Neon&lt;/a&gt;. If you want it as an ebook, I would recommend the Pragmatic Bookshelf &lt;a href=&#34;https://pragprog.com/book/swperl/modern-perl-fourth-edition&#34;&gt;version&lt;/a&gt; - it&amp;rsquo;s beautifully styled, free, and you&amp;rsquo;ll be eligible for updates to the text as/when they appear.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create GitHub files automatically with Dist::Zilla</title>
      <link>http://perltricks.com/article/203/2015/12/9/Create-GitHub-files-automatically-with-Dist--Zilla/</link>
      <pubDate>Wed, 09 Dec 2015 13:46:17 +0000</pubDate>
      
      <guid>http://perltricks.com/article/203/2015/12/9/Create-GitHub-files-automatically-with-Dist--Zilla/</guid>
      <description>

&lt;p&gt;I use &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt; to release my code to CPAN. I really like it as with a single command I can build, package and ship a distribution. But most of my code lives on GitHub. In fact, a quick check shows that I have 90 &lt;a href=&#34;https://github.com/dnmfarrell&#34;&gt;repos&lt;/a&gt;, but only 13 distributions on &lt;a href=&#34;https://metacpan.org/author/DFARRELL&#34;&gt;CPAN&lt;/a&gt;. So only 14% of my code makes it to CPAN.&lt;/p&gt;

&lt;p&gt;Traditionally Dist::Zilla makes a distinction between your code and the files needed for CPAN and PAUSE to work, (like package metadata, a readme etc). The basic use case goes like this: you write your class files, scripts and unit tests, and when you tell Dist::Zilla to release the distribution, it generates all of the extra files, creates a tarball and uploads it to &lt;a href=&#34;https://pause.perl.org/pause/query&#34;&gt;PAUSE&lt;/a&gt;. The problem is though, some of those additional files would be nice to have in my GitHub repos too. I don&amp;rsquo;t want to write another &lt;code&gt;readme.md&lt;/code&gt;, or spend time copying the license file into the repo if Dist::ZIlla can already generate one. To solve this issue I use two Dist::Zilla plugins from &lt;a href=&#34;https://metacpan.org/author/RTHOMPSON&#34;&gt;Ryan Thompson&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;setup:3e7badd427fe2f7b2dcf3dadf6e1d80b&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;To use the code in this article, you&amp;rsquo;ll need to install Dist::Zilla and the two plugin modules described below. You can do that with &lt;code&gt;cpan&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Dist::Zilla \
  Dist::Zilla::Plugin::ReadmeAnyFromPod  \
  Dist::Zilla::Plugin::CopyFilesFromBuild
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re installing Dist::Zilla consider using &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanminus&lt;/a&gt; instead, with no tests for a much faster install:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpanm --notest Dist::Zilla \ 
  Dist::Zilla::Plugin::ReadmeAnyFromPod \
  Dist::Zilla::Plugin::CopyFilesFromBuild
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-a-readme-automatically:3e7badd427fe2f7b2dcf3dadf6e1d80b&#34;&gt;Creating a readme automatically&lt;/h3&gt;

&lt;p&gt;Ryan&amp;rsquo;s module &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::ReadmeAnyFromPod&#34;&gt;Dist::Zilla::Plugin::ReadmeAnyFromPod&lt;/a&gt; can generate a readme automatically, in any common format. It uses the Pod text from the main modules in the distribution. I use it to create my GitHub readme files in Pod, by adding the following text to my &lt;code&gt;dist.ini&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ReadmeAnyFromPod]
type = pod 
filename = README.pod
location = root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I build the distribution with Dist::Zilla, it will generate a new readme for me, including the author, copyright and version information in addition to the documentation already in the main module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ dzil build &amp;amp;&amp;amp; dzil clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line instructs Dist::Zilla to build the distribution, which generates the new &lt;code&gt;README.pod&lt;/code&gt; and then clean up the build files that it generated, leaving a clean working directory.&lt;/p&gt;

&lt;h3 id=&#34;adding-a-license:3e7badd427fe2f7b2dcf3dadf6e1d80b&#34;&gt;Adding a license&lt;/h3&gt;

&lt;p&gt;I use another module from Ryan, &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::CopyFilesFromBuild&#34;&gt;Dist::Zilla::Plugin::CopyFilesFromBuild&lt;/a&gt; to copy the software license from the Dist::Zilla build into my project directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[CopyFilesFromBuild]
copy = LICENSE
[GatherDir]
exclude_filename = LICENSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will copy the license out of the build directory into the root project directory. The &lt;code&gt;exclude_filename&lt;/code&gt; clause is there so that during the &lt;em&gt;next&lt;/em&gt; build, Dist::Zilla does not include the generated license in the working directory of files. Running this in the same way as before, I can generate whatever license text I want for my distribution (the type of license is specified in the &lt;code&gt;dist.ini&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ dzil build &amp;amp;&amp;amp; dzil clean
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;helping-others:3e7badd427fe2f7b2dcf3dadf6e1d80b&#34;&gt;Helping others&lt;/h3&gt;

&lt;p&gt;Dist::Zilla is great, but if you don&amp;rsquo;t have it, installing a distribution from GitHub can really suck. Recently a friend was trying to deploy some code of mine to his Macbook with a vanilla Perl install. I didn&amp;rsquo;t want to upload the code to CPAN and wait for PAUSE to index it. Installing Dist::Zilla on the his machine was not a great option either: Dist::Zilla is a beast. According to Devel::Modlist, Dist::Zilla has &lt;strong&gt;178&lt;/strong&gt; non-core dependencies (including indirectly-used modules). That&amp;rsquo;s the price you pay for automation and modularity - Dist::Zilla is working hard so us module authors don&amp;rsquo;t have to. But for someone who barely knows Perl, installing Dist::Zilla in a virgin environment can be a nightmare.&lt;/p&gt;

&lt;p&gt;To get around this issue, I used &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::CopyFilesFromBuild&#34;&gt;Dist::Zilla::Plugin::CopyFilesFromBuild&lt;/a&gt; again to copy the Makefile.PL and cpanfile into the project directory. My friend then cloned the directory with Git and used &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanminus&lt;/a&gt; to install it. Easy! It worked so well, I&amp;rsquo;m going to include a Makefile and cpanfile in my GitHub repos from now on.&lt;/p&gt;

&lt;h3 id=&#34;a-sample-dist-zilla-config:3e7badd427fe2f7b2dcf3dadf6e1d80b&#34;&gt;A sample Dist::Zilla config&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s a &lt;code&gt;dist.ini&lt;/code&gt; from a &lt;a href=&#34;https://github.com/dnmfarrell/Settlers-Game&#34;&gt;repo&lt;/a&gt; of mine that uses the code in this article. As certain directives are required in order, it can be useful to see the entire context:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name    = Settlers-Game
author  = David Farrell 
license = FreeBSD
copyright_holder = David Farrell
copyright_year   = 2015
version = 0.06

[CPANFile]
[License]
[CopyFilesFromBuild]
copy = cpanfile
copy = LICENSE
copy = Makefile.PL
[GatherDir]
exclude_filename = cpanfile
exclude_filename = LICENSE
exclude_filename = Makefile.PL
[PkgVersion]
[AutoPrereqs]
[GithubMeta]
[ChangelogFromGit]
[MetaYAML]
[MetaJSON]
[MakeMaker]
[ModuleBuild]
[ManifestSkip]
[Manifest]
[PodWeaver]
[ReadmeAnyFromPod]
type = pod
filename = README.pod
location = root
[PodSyntaxTests]
[PodCoverageTests]
[TestRelease]
[Test::EOL]
[UploadToCPAN]
[ConfirmRelease]
[Clean]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use this config with Dist::Zilla you&amp;rsquo;ll need some additional plugins:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Dist::Zilla::Plugin::Clean \
  Dist::Zilla::Plugin::GithubMeta \
  Dist::Zilla::Plugin::ChangelogFromGit \
  Dist::Zilla::Plugin::PodWeaver
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion:3e7badd427fe2f7b2dcf3dadf6e1d80b&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Ok it&amp;rsquo;s not &lt;em&gt;all&lt;/em&gt; gravy. The copy file method has one downside: it overwrites the copied files every time they&amp;rsquo;re generated. This isn&amp;rsquo;t an issue for me; the commit diff only shows the changed lines, but some people may not like it.&lt;/p&gt;

&lt;p&gt;For more information on Dist::Zilla, check out the official &lt;a href=&#34;http://dzil.org/tutorial/contents.html&#34;&gt;documentation&lt;/a&gt;. For a completely different approach to releasing code to CPAN, you may like&lt;a href=&#34;https://metacpan.org/pod/%20Module::Release&#34;&gt;Module::Release&lt;/a&gt;. Oh and if you find yourself in a new development environment, needing to install dependencies for a local module, David Golden has a useful &lt;a href=&#34;http://www.dagolden.com/index.php/1528/five-ways-to-install-modules-prereqs-by-hand/&#34;&gt;post&lt;/a&gt; that includes five different ways to do it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to install any* Perl module</title>
      <link>http://perltricks.com/article/200/2015/11/28/How-to-install-any--Perl-module/</link>
      <pubDate>Sat, 28 Nov 2015 00:11:17 +0000</pubDate>
      
      <guid>http://perltricks.com/article/200/2015/11/28/How-to-install-any--Perl-module/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s our 200th article! Installing CPAN modules can be a pain, particularly for users not familiar with the Perl toolchain. To try something different, I&amp;rsquo;m uploading the article as an image file under creative commons. Feel free to share it, use it, whatever. If you use Perl at your office, maybe print it out for reference. You can download a copy &lt;a href=&#34;https://drive.google.com/file/d/0BwRnByTz2iUXQk5KcVNHcElJRUU/view?usp=sharing&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://googledrive.com/host/0BwRnByTz2iUXQk5KcVNHcElJRUU&#34; title=&#34;Install Any Perl Module&#34;&gt;&lt;img src=&#34;https://googledrive.com/host/0BwRnByTz2iUXUVBJSllmeUJiU00&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[*] You can install any Perl module, but it may not be a good idea™&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello perldoc, productivity booster</title>
      <link>http://perltricks.com/article/155/2015/2/26/Hello-perldoc--productivity-booster/</link>
      <pubDate>Thu, 26 Feb 2015 13:42:57 +0000</pubDate>
      
      <guid>http://perltricks.com/article/155/2015/2/26/Hello-perldoc--productivity-booster/</guid>
      <description>

&lt;p&gt;Imagine this scenario: you&amp;rsquo;re using the DateTime module but you can&amp;rsquo;t remember the exact name of a function it provides. What do you do? You could open your browser, go to &lt;a href=&#34;https://metacpan.org/&#34;&gt;MetaCPAN&lt;/a&gt;, search for DateTime and look up the answer in the module&amp;rsquo;s documentation. A faster way would be to switch to the command line, and type &lt;code&gt;perldoc DateTime&lt;/code&gt; to display the module&amp;rsquo;s documentation right there in the terminal.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perldoc&lt;/code&gt; is a command line program for reading Perl documentation. It comes with Perl, so if you&amp;rsquo;ve got Perl installed, perldoc should be available too. Using perldoc is easy: as you&amp;rsquo;ve already seen, to view the documentation of a module you&amp;rsquo;ve installed, at the command line type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc Module::Name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;perldoc will search for the module and if it finds it, display the module&amp;rsquo;s documentation (written in Pod). Using perldoc you can learn more about any aspect of Perl almost instantly. Want to know more about Pod? Try &lt;code&gt;perldoc pod&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;dial-f-for-functions:950e91211886bd6e410eb5c07d6bf43a&#34;&gt;Dial -f for functions&lt;/h3&gt;

&lt;p&gt;Perl has a huge number of built-in functions, about 224 depending on the Perl version. Who can remember exactly how they all work? I know I can&amp;rsquo;t. To lookup a Perl function, use perldoc with the &lt;code&gt;-f&lt;/code&gt; switch. For instance to look up the documentation on the &lt;code&gt;rindex&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc -f rindex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will display:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rindex STR,SUBSTR,POSITION
rindex STR,SUBSTR
      Works just like index() except that it returns the position of the
      last occurrence of SUBSTR in STR. If POSITION is specified,
      returns the last occurrence beginning at or before that position.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aha! This is all well and good, but what do you do if you can&amp;rsquo;t remember the function name? Well you could use &lt;a href=&#34;https://metacpan.org/pod/B::Keywords&#34;&gt;B::Keywords&lt;/a&gt;, but another way would be to check out &lt;code&gt;perlfunc&lt;/code&gt; the Perl documentation on built-in functions. To read it, with perldoc just type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc perlfunc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;predefined-variables:950e91211886bd6e410eb5c07d6bf43a&#34;&gt;Predefined Variables&lt;/h3&gt;

&lt;p&gt;As with functions, Perl has a large number of predefined variables that do everything from storing the program name to tracking the state of the regex engine. They&amp;rsquo;re really useful, but often have obscure names like &lt;code&gt;$^O&lt;/code&gt; (the OS name). So if you find yourself needing to check whether you&amp;rsquo;re looking at a list separator (&lt;code&gt;$&amp;quot;&lt;/code&gt;) or an output separator (&lt;code&gt;$/&lt;/code&gt;), just use perldoc with the &lt;code&gt;-v&lt;/code&gt; switch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc -v $/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because some predefined variables have weird names, you may need to quote them on the command line for perldoc to work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc -v &#39;$&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The predefined variables documentation is known as &lt;code&gt;perlvar&lt;/code&gt;. It&amp;rsquo;s well worth a read through at least once (&lt;code&gt;perldoc perlvar&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;searching-the-documentation:950e91211886bd6e410eb5c07d6bf43a&#34;&gt;Searching the documentation&lt;/h3&gt;

&lt;p&gt;Perl has a lot of great documentation, but it can be hard to remember the names of all of the entries. If you ever want to browse the table of contents, use &lt;code&gt;perl&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc perl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Many people recommend perltoc for this, but for finding relevant entries, I think the perl entry is easier to browse than perltoc.&lt;/p&gt;

&lt;p&gt;Perl also has an extensive FAQ, (another entry that&amp;rsquo;s worth a read through). It has loads of answers to common queries. As usual you can read it with &lt;code&gt;perldoc faq&lt;/code&gt;, but you can also search it using the &lt;code&gt;-q&lt;/code&gt; switch. Want to know if there are any good IDEs for Perl? (a common newbie question):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -q ide
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Is there an IDE or Windows Perl Editor?
 Perl programs are just plain text, so any editor will do.

 If you&#39;re on Unix, you already have an IDE--Unix itself. The Unix
 philosophy is the philosophy of several small tools that each do one thing
 and do it well. It&#39;s like a carpenter&#39;s toolbox.

 If you want an IDE, check the following (in alphabetical order, not order
 of preference):

 Eclipse


     The Eclipse Perl Integration Project integrates Perl editing/debugging
     with Eclipse.

 Komodo


     ActiveState&#39;s cross-platform (as of October 2004, that&#39;s Windows,
     Linux, and Solaris), multi-language IDE has Perl support, including a
     regular expression debugger and remote debugging.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;finding-module-install-locations:950e91211886bd6e410eb5c07d6bf43a&#34;&gt;Finding module install locations&lt;/h3&gt;

&lt;p&gt;perldoc isn&amp;rsquo;t just about documentation. If you need to find out where a module is installed, using the &lt;code&gt;-l&lt;/code&gt; switch, perldoc will return the filepath of the module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc -l Test::More
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you get the path, you can open it in an editor directly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ vi $(perldoc -l Test::More)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One trick here: some modules don&amp;rsquo;t have any POD in them, for those modules, use &lt;code&gt;-lm&lt;/code&gt; to still return the path.&lt;/p&gt;

&lt;h3 id=&#34;read-module-source-code-in-perldoc:950e91211886bd6e410eb5c07d6bf43a&#34;&gt;Read module source code in perldoc&lt;/h3&gt;

&lt;p&gt;Finally, perldoc can also display module source code. Just use the &lt;code&gt;-m&lt;/code&gt; switch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc -m Test::More
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wrap-up:950e91211886bd6e410eb5c07d6bf43a&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;This article has covered the most common features, but perldoc has a bunch of other capabilities that you can read about at the command line with &lt;code&gt;man perldoc&lt;/code&gt;. The Perl documentation is also &lt;a href=&#34;http://perldoc.perl.org/&#34;&gt;online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keep in mind that as you get more proficient with perldoc, you&amp;rsquo;ll need the online resources less and less. Get in the habit of switching to the command line, looking up something in perldoc and flipping right back to programming - it&amp;rsquo;s a productivity win.&lt;/p&gt;

&lt;h3 id=&#34;perldoc-cheatsheet:950e91211886bd6e410eb5c07d6bf43a&#34;&gt;perldoc cheatsheet&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;perldoc [option]

Module Options                               
--------------                               
         Module documentation     
-l       Module filepath          
-lm      Module filepath (alt.)   
-m       Module source


Search Options
--------------
-f     Get a built-in function definition
-v     Get a variable definition
-q      Search the faq for a keyword


Commonly Used Entries
---------------------
perl         Language overview, list of all other entries
perltoc      Table of contents
perlfunc     Built-in functions documentation
perlvar      Predefined variables documentation
perlref      References documentation
perlre       Regex documentation
faq          The Perl FAQ

Help
----
man perldoc     List of all perldoc options
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>The best of what&#39;s new on CPAN 2014</title>
      <link>http://perltricks.com/article/145/2015/1/15/The-best-of-what-s-new-on-CPAN-2014/</link>
      <pubDate>Thu, 15 Jan 2015 14:44:40 +0000</pubDate>
      
      <guid>http://perltricks.com/article/145/2015/1/15/The-best-of-what-s-new-on-CPAN-2014/</guid>
      <description>

&lt;p&gt;2014 has come and gone, which means that we&amp;rsquo;ve completed 12 editions of &amp;ldquo;What&amp;rsquo;s New on CPAN&amp;rdquo;. This seems like an appropriate moment to take stock and reflect on the past year of new CPAN uploads. I&amp;rsquo;ve compiled a shortlist of modules by using the scientific approach of &amp;ldquo;stuff that I remember&amp;rdquo;. Have a think about what would be on your &amp;ldquo;best of&amp;rdquo; list, and maybe let the author know, or better, write about it and let the World know.&lt;/p&gt;

&lt;h3 id=&#34;config-devops:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;p&gt;Ingy and David&amp;rsquo;s grant work on the next generation of &lt;a href=&#34;https://metacpan.org/pod/Inline&#34;&gt;Inline&lt;/a&gt; generated a lot of excitement. But along with re-furbishing the whole Inline ecosystem, a number of side-effect modules were created too. One of those is &lt;a href=&#34;https://metacpan.org/pod/Devel::PerlLog&#34;&gt;Devel::PerlLog&lt;/a&gt; which simply logs a configurable message every time a Perl process starts.&lt;/p&gt;

&lt;p&gt;C-related Perl libraries got a big boost in 2014. Asides from Ingy&amp;rsquo;s refreshed &lt;a href=&#34;https://metacpan.org/pod/Inline::C&#34;&gt;Inline::C&lt;/a&gt;, Graham Ollis has been working and &lt;a href=&#34;https://www.youtube.com/watch?v=cY-yqQ_nmtw&amp;amp;list=PLvxiAPPfDjyP293FgDJjK0CXaZq6EH0pC&#34;&gt;presenting&lt;/a&gt; on another XS alternative: FFI. &lt;a href=&#34;https://metacpan.org/pod/FFI::CheckLib&#34;&gt;FFI::CheckLib&lt;/a&gt; will check that a particular C library is available as well as &lt;a href=&#34;https://metacpan.org/pod/FFI::TinyCC&#34;&gt;FFI::TinyCC&lt;/a&gt;, a compiler interface.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Module::Loader&#34;&gt;Module::Loader&lt;/a&gt; is a nifty way of loading plugins at runtime.&lt;/p&gt;

&lt;h3 id=&#34;data:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Data&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Hash::Ordered&#34;&gt;Hash::Ordered&lt;/a&gt; was a best-in-class implementation of an ordered hash class by David Golden. He also gave an in-depth &lt;a href=&#34;https://www.youtube.com/watch?v=p4U6FWyRBoQ&amp;amp;feature=youtu.be&#34;&gt;talk&lt;/a&gt; of the trade offs of the solution and the alternatives on CPAN (slides &lt;a href=&#34;http://www.dagolden.com/wp-content/uploads/2009/04/Adventures-in-Optimization-NYpm-July-2014.pdf&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Did you know that &lt;a href=&#34;https://metacpan.org/pod/File::Slurp&#34;&gt;File::Slurp&lt;/a&gt; can have issues with the Perl encoding layer? (among other &lt;a href=&#34;http://blogs.perl.org/users/leon_timmermans/2013/05/why-you-dont-need-fileslurp.html&#34;&gt;issues&lt;/a&gt;). Leon Timmermans wrote &lt;a href=&#34;https://metacpan.org/pod/File::Slurper&#34;&gt;File::Slurper&lt;/a&gt; as a better alternative.&lt;/p&gt;

&lt;p&gt;Ah &lt;a href=&#34;https://metacpan.org/pod/Sereal&#34;&gt;Sereal&lt;/a&gt;, the super-fast seralizer software. &lt;a href=&#34;https://metacpan.org/pod/SerealX::Store&#34;&gt;SerealX::Store&lt;/a&gt; was an attempt to create a storable-like interface over Sereal, except tastier. &lt;a href=&#34;https://metacpan.org/pod/XML::Dataset&#34;&gt;XML::Dataset&lt;/a&gt; implements a simple DSL for extracting data from XML/XHTML documents.&lt;/p&gt;

&lt;h3 id=&#34;databases:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Databases&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Raw&#34;&gt;DBIx::Raw&lt;/a&gt; provides both low level SQL control and time-saving abstractions to fill a niche role for DB access. Divine the database datatype of a scalar using &lt;a href=&#34;https://metacpan.org/pod/SQL::Type::Guess&#34;&gt;SQL::Type::Guess&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;fun:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Fun&lt;/h3&gt;

&lt;p&gt;Remember the big debate about Perl 5&amp;rsquo;s version numbering? Whilst some tirelessly debating the topic, others were hard at work at real solutions™. This is &lt;a href=&#34;https://metacpan.org/pod/Acme::Futuristic::Perl&#34;&gt;Acme::Futuristic::Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Speaking of real solutions™, check out &lt;a href=&#34;https://metacpan.org/pod/bare&#34;&gt;bare&lt;/a&gt; which removes the need to use sigils for scalars. Finally, the last barrier to mass adoption of Perl has been solved!&lt;/p&gt;

&lt;h3 id=&#34;hardware:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Hardware&lt;/h3&gt;

&lt;p&gt;CPAN advanced more in hardware-related modules than perhaps any other area. YAPC NA 2014 was awash with drones. This really does seem like a promising area for Perl to lay claim. Several modules stand out in particular. Let&amp;rsquo;s start with the shiny: Timm Murray&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/UAV::Pilot::ARDrone&#34;&gt;UAV::Pilot::ARDrone&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/release/UAV-Pilot-WumpusRoverr&#34;&gt;UAV::Pilot::WumpusRover&lt;/a&gt; enables WiFi remote control (with video) of drones! Timm&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Device::WebIO&#34;&gt;Device::WebIO&lt;/a&gt; provides a standardized interface for accessing many devices with drivers available for Raspberry Pi and Arduino among others.&lt;/p&gt;

&lt;p&gt;Another significant development was Paul Evan&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Device::BusPirate&#34;&gt;Device::BusPirate&lt;/a&gt;, for the Bus Pirate hardware tool. Finally, check out &lt;a href=&#34;https://metacpan.org/pod/VIC&#34;&gt;VIC&lt;/a&gt;, Vikas Kumar&amp;rsquo;s amazing DSL for PIC micro-controllers.&lt;/p&gt;

&lt;h3 id=&#34;presenting-software:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Presenting Software&lt;/h3&gt;

&lt;p&gt;Pretend you&amp;rsquo;re a command line wizard with &lt;a href=&#34;https://metacpan.org/pod/App::Cleo&#34;&gt;App::Cleo&lt;/a&gt;, which will playback a list of commands from a file for airtight demos. No more typos!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/App::revealup&#34;&gt;App::revealup&lt;/a&gt; enables markdown driven presentations with Reveal.js, by implementing a mini HTTP server. I &lt;a href=&#34;http://perltricks.com/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup&#34;&gt;wrote&lt;/a&gt; about it (&lt;a href=&#34;http://perltricks.com/article/134/2014/11/13/Advanced-slideshow-maneuvers&#34;&gt;twice&lt;/a&gt;) and use it all the time, highly recommended.&lt;/p&gt;

&lt;h3 id=&#34;testing:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;There was a tonne of new testing stuff this year, but not much stuck with me. One module that did was &lt;a href=&#34;https://metacpan.org/pod/Test::RequiresInternet&#34;&gt;Test::RequiresInternet&lt;/a&gt;. Import this module with &lt;code&gt;use&lt;/code&gt; and it will skip over the unit tests in your test file unless an active internet connection is found. Very handy!&lt;/p&gt;

&lt;p&gt;Not exactly testing related, but surely useful for debugging, &lt;a href=&#34;https://metacpan.org/pod/Regexp::Lexer&#34;&gt;Regexp::Lexer&lt;/a&gt; tokenizes regexes, which is just cool.&lt;/p&gt;

&lt;h3 id=&#34;web:8cae8fcd55840421fc8b31900526d80c&#34;&gt;Web&lt;/h3&gt;

&lt;p&gt;Masahiro Nagano created &lt;a href=&#34;https://metacpan.org/pod/Gazelle&#34;&gt;Gazelle&lt;/a&gt;, a highly optimized pre-forking Plack handler with Nginx-like performance. Incredible stuff!&lt;/p&gt;

&lt;p&gt;2014 also brought the usual flood of plugins for the major web frameworks. Big news for Mojo fans was the announcement of the platform moving away from MongoDB support and embracing a Postgres backend instead with &lt;a href=&#34;https://metacpan.org/pod/Mojo::Pg&#34;&gt;Mojo::Pg&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Web scrapers and QA testers did well: &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize::PhantomJS&#34;&gt;WWW::Mechanize::PhantomJS&lt;/a&gt; implements a headless, JavaScript enabled browser with the typical friendly mechanize interface. &lt;a href=&#34;https://metacpan.org/pod/Selenium::Screenshot&#34;&gt;Selenium::Screenshot&lt;/a&gt; combines Selenium&amp;rsquo;s screenshot ability with &lt;a href=&#34;https://metacpan.org/pod/Image::Compare&#34;&gt;Image::Compare&lt;/a&gt; to detect changes in web pages.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Who has the best package manager? Part one</title>
      <link>http://perltricks.com/article/110/2014/8/21/Who-has-the-best-package-manager--Part-one/</link>
      <pubDate>Thu, 21 Aug 2014 13:03:03 +0000</pubDate>
      
      <guid>http://perltricks.com/article/110/2014/8/21/Who-has-the-best-package-manager--Part-one/</guid>
      <description>

&lt;p&gt;Every major language has thousands of libraries which enable programmers to reach higher, further and faster than before. Package managers (the online systems for sharing code) are key to a language&amp;rsquo;s success; Perl, PHP, Python, Ruby and Node.js all have strong offerings. But which one is the best and what can we learn from each of them? This article is the first in a two-part series where I review each package manager. Part one focuses on searching and using packages and part two will look at how easy it is to upload and share packages.&lt;/p&gt;

&lt;h3 id=&#34;terminology:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Terminology&lt;/h3&gt;

&lt;p&gt;The term &amp;ldquo;package manager&amp;rdquo; isn&amp;rsquo;t strictly accurate when referring to the online code sharing systems. &lt;a href=&#34;http://rubygems.org/&#34;&gt;RubyGems&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.org/&#34;&gt;npm&lt;/a&gt; are described as package managers but for Python &lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;PyPI&lt;/a&gt; is a package index and &lt;code&gt;pip&lt;/code&gt; is the package manager. Similarly, &lt;a href=&#34;https://metacpan.org&#34;&gt;metacpan&lt;/a&gt; is a search engine for &lt;a href=&#34;http://www.cpan.org/%20&#34;&gt;CPAN&lt;/a&gt;. I use the term &amp;ldquo;package manager&amp;rdquo; to refer to the commonly-used collection of tools used for searching, reviewing, installing and sharing code.&lt;/p&gt;

&lt;h3 id=&#34;inputs-and-scoring-criteria:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Inputs and Scoring Criteria&lt;/h3&gt;

&lt;p&gt;The following package managers were reviewed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://packagist.org&#34;&gt;Packagist&lt;/a&gt; for PHP&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;PyPi&lt;/a&gt; for Python&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org&#34;&gt;metacpan&lt;/a&gt; for Perl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.org/&#34;&gt;npm&lt;/a&gt; for Node.js&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rubygems.org/&#34;&gt;RubyGems&lt;/a&gt; for Ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every package manager was scored against 5 criteria:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search - how easy is it to find what you&amp;rsquo;re looking for. An ideal search function would return the most relevant packages first, and provide information to help users differentiate packages.&lt;/li&gt;
&lt;li&gt;Metadata - what supporting data is provided to give context and enable the user understand the package better: name, description, number of downloads, unit test coverage, portability, dependencies, user reviews etc/&lt;/li&gt;
&lt;li&gt;Documentation - accessibility and usability of the package documentation. Easy-to-use documentation is clear and consistent in layout and provides useful information for would-be package consumers.&lt;/li&gt;
&lt;li&gt;Source - accessibility and usability of the source code. The source code should be easily inspect-able which means providing an easily navigable directory tree and presenting the code in a readable, helpful way.&lt;/li&gt;
&lt;li&gt;Installation - how easy is it to install a package: are instructions provided and does the installation work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I scored each criterion between 1 and 5, with 5 being best. Clearly this is a subjective approach both in the criteria chosen and strength of the rating given. Whether the results are &lt;em&gt;useful&lt;/em&gt; or not I leave for you, the reader to decide.&lt;/p&gt;

&lt;h3 id=&#34;method:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Method&lt;/h3&gt;

&lt;p&gt;3 search terms were used: &amp;ldquo;selenium&amp;rdquo;, &amp;ldquo;sqlite3&amp;rdquo; and &amp;ldquo;web framework&amp;rdquo;. The search term was unquoted when entered. Selenium should be an easy search term as it&amp;rsquo;s a unique name and common library (bindings to &lt;a href=&#34;http://docs.seleniumhq.org/projects/webdriver/&#34;&gt;Selenium WebDriver&lt;/a&gt;). SQLite3 is slightly more difficult as it includes a version number and many packages named &amp;ldquo;sqlite&amp;rdquo; are intended for SQLite3. Web framework is the most difficult as it is a description rather than a name and yet we wanted the search to return relevant results like Sinatra, Django, and express. For each language I used a recommended list of web frameworks as my target packages. In all searches I considered the sorting of relevant results and the usefulness of information provided in the search results.&lt;/p&gt;

&lt;p&gt;Upon locating a target result in each search, I opened the package page and scored the other criteria. Only the packages returned by the 3 search terms were considered.&lt;/p&gt;

&lt;h3 id=&#34;php-packagist:e4033a7178e3036bc1983cb5214477f8&#34;&gt;PHP: Packagist&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_packagist.png&#34; title=&#34;The Packagist homepage&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_packagist_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First up is &lt;a href=&#34;https://packagist.org/statistics&#34;&gt;Packagist&lt;/a&gt;, the largest PHP package search engine, with over 36,000 &lt;a href=&#34;https://packagist.org/statistics&#34;&gt;packages&lt;/a&gt; indexed. Packagist integrates with &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;, a PHP dependency management system.&lt;/p&gt;

&lt;p&gt;Packagist auto-focused to the text search box and provided live search results as I entered the search terms. For every search result Packagist return the package name, description, number of downloads and star count. Search results were paginated and no facility for sorting or filtering the search results was provided.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_packagist_search_selenium.png&#34; title=&#34;Packagist search&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_packagist_search_selenium_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The search results were mixed: the target &lt;a href=&#34;https://packagist.org/packages/alexandresalome/php-selenium&#34;&gt;selenium package&lt;/a&gt; was returned 3rd on the list of results. The SQLite3 search did not return any useful packages (bindings to SQLite3), but this is perhaps because PHP 5.3 ships with a built in &lt;a href=&#34;http://php.net/manual/en/book.sqlite3.php&#34;&gt;SQLite class&lt;/a&gt;. The Web Framework &lt;a href=&#34;https://packagist.org/search/?q=web%20framework&#34;&gt;search&lt;/a&gt; did not return any &lt;a href=&#34;http://mashable.com/2014/04/04/php-frameworks-build-applications/&#34;&gt;target packages&lt;/a&gt; in the top 20 results, with &lt;a href=&#34;https://packagist.org/packages/laravel/framework&#34;&gt;Laravel&lt;/a&gt; being returned 21&lt;sup&gt;st&lt;/sup&gt;.&lt;/p&gt;

&lt;h4 id=&#34;search-3-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Search: &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;Packagist provided a basic set of metadata including: name, description, version number, download statistics, version history and dependencies. No package had license information, unit test coverage, platform compatibility or continuous integration results. There was no facility to &amp;ldquo;star&amp;rdquo; or review a module (presumably the star count on the search results came from GitHub).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_packagist_laravel.png&#34; title=&#34;Laravel package page&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_packagist_laravel_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;metadata-2-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Metadata: &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;Documentation was sparse - a link was provided to the GitHub repo, which displays the repo readme by default. There seemed to be little consistency across packages in terms of headings or content.&lt;/p&gt;

&lt;h4 id=&#34;documentation-2-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Documentation: &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;Packagist linked to the source repos on GitHub. The code was easy to navigate although the directory tree structures were inconsistent.&lt;/p&gt;

&lt;h4 id=&#34;source-3-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Source: &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;Installation with PHP Composer is done by marking the target package as &amp;ldquo;required&amp;rdquo; in a json file. packages can be installed directly using Composer on the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ composer.phar require &amp;quot;laravel/framework&amp;quot;: &amp;quot;4.2.8&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Helpfully, Packagist listed the required text on every package page.&lt;/p&gt;

&lt;h4 id=&#34;installation-5-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Installation: &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;h5 id=&#34;packagist-overall-3-0:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Packagist overall: 3.0&lt;/h5&gt;

&lt;h3 id=&#34;python-pypi:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Python: PyPI&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_pypi.png&#34; title=&#34;The PyPI homepage&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_pypi_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next up is Python&amp;rsquo;s &lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;PyPi&lt;/a&gt;, which has over 47,500 packages.&lt;/p&gt;

&lt;p&gt;PyPI&amp;rsquo;s search results returned the package name, a match-strength indicator called &amp;ldquo;weight&amp;rdquo; and a description. The search results for &lt;a href=&#34;https://pypi.python.org/pypi/selenium/2.42.1&#34;&gt;Selenium&lt;/a&gt; and &lt;a href=&#34;https://pypi.python.org/pypi/db-sqlite3/0.0.1&#34;&gt;SQLite3&lt;/a&gt; were good with the target libraries in the top 2 results each time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_pypi_search_selenium.png&#34; title=&#34;PyPI search&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_pypi_search_selenium_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The search results for &amp;ldquo;web framework&amp;rdquo; were mixed: I was looking for common Python &lt;a href=&#34;https://wiki.python.org/moin/WebFrameworks&#34;&gt;web frameworks&lt;/a&gt; and only one, &lt;a href=&#34;https://pypi.python.org/pypi/watson-framework/2.2.7&#34;&gt;Watson&lt;/a&gt; was listed in the top 20 results. Django was 280&lt;sup&gt;th&lt;/sup&gt; with Flask arriving 574&lt;sup&gt;th&lt;/sup&gt; in the list. PyPI was the only package manager to not paginate search results, which made it easy to traverse search results results and export them. There was no function to filter or sort the results under different criteria.&lt;/p&gt;

&lt;h4 id=&#34;search-3-5-1:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Search: &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;The metadata provided varied from package to package, but PyPI usually provided: the last upload date, number of downloads, author name, package owner and maintainers, package homepage link and a DOAP.xml record. The &lt;a href=&#34;https://pypi.python.org/pypi/watson-framework/2.2.7&#34;&gt;Watson&lt;/a&gt; package included a build status with unit test coverage. Only 1 of the three packages provided a license. There didn&amp;rsquo;t seem to be a facility to provide user reviews or &amp;ldquo;stars&amp;rdquo; which would indicate whether a package was any good or not.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_pypi_selenium.png&#34; title=&#34;Selenium package page&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_pypi_selenium_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;metadata-3-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Metadata: &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;Documentation was mixed with either no documentation or just a high level synopsis provided. In most cases an external link to another site provided more documentation, but it&amp;rsquo;s not consistent (it could be Google code, GitHub or a project-specific website).&lt;/p&gt;

&lt;h4 id=&#34;documentation-2-5-1:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Documentation: &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;All of the packages source code was hosted externally by GitHub or Google code and a link is provided by PyPI. This is fine, but it can take several hops to find the actual source code, and the structure of the source code tree varies from package to package; it might just be a collection of *.py files in a root folder for example.&lt;/p&gt;

&lt;h4 id=&#34;source-2-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Source: &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;PyPI provides installation guidance on it&amp;rsquo;s homepage. Additionally most of the reviewed packages&amp;rsquo; documentation contained command line code instructions for installing the packages. All three packages installed without a hitch using &lt;code&gt;pip&lt;/code&gt;, although it appeared that no unit tests were run on install, so whether the packages work or not is an open question.&lt;/p&gt;

&lt;h4 id=&#34;installation-5-5-1:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Installation: &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;h5 id=&#34;pypi-overall-3-0:e4033a7178e3036bc1983cb5214477f8&#34;&gt;PyPI overall: 3.0&lt;/h5&gt;

&lt;h3 id=&#34;perl-metacpan:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Perl: metacpan&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_metacpan.png&#34; title=&#34;The metacpan homepage&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_metacpan_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/&#34;&gt;metacpan&lt;/a&gt; is described as a CPAN &lt;a href=&#34;https://metacpan.org/about&#34;&gt;search engine&lt;/a&gt; and provides nearly all of the features of CPAN, plus many features that CPAN doesn&amp;rsquo;t offer. It has been around since 2013, and indexes over 30,000 packages.&lt;/p&gt;

&lt;p&gt;metacpan&amp;rsquo;s search page autofocused on the text input search box and provide predictive text search. The search results contained the package name, description, an average review score (if there are any reviews), a count of &amp;ldquo;++&amp;ldquo;s (which are like GitHub stars) and the author name. Helpfully, sub-packages in the same namespace were indented below higher-level packages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_cpan_selenium_search.png&#34; title=&#34;metacpan search&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_cpan_selenium_search_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Selenium search returned the target package (&lt;a href=&#34;https://metacpan.org/pod/WWW::Selenium&#34;&gt;WWW:Selenium&lt;/a&gt;) first, however SQLite3&amp;rsquo;s target package (&lt;a href=&#34;https://metacpan.org/pod/DBD::SQLite&#34;&gt;DBD::SQLite&lt;/a&gt;) was returned 17th in the search results. The Web Framework search results were not great: the first 20 results were for old frameworks or irrelevant packages. However the target packages (e.g. Catalyst, Dancer, Mojolicious and Kelp) were found in top 40 results. metacpan paginated the search results, 20 per page, which meant the target packages were actually on &lt;a href=&#34;https://metacpan.org/search?p=2&amp;amp;q=web+framework&#34;&gt;page 2&lt;/a&gt; . No method to filter or sort the search results was provided.&lt;/p&gt;

&lt;h4 id=&#34;search-3-5-2:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Search: &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_cpan_sqlite.png&#34; title=&#34;DBD::SQLite package page&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_cpan_sqlite_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;metacpan provided a wealth of package metadata: the package name, description, version number, activity histogram, issues list, CPAN Testers &lt;a href=&#34;http://www.cpantesters.org/distro/D/DBD-SQLite.html?oncpan=1&amp;amp;distmat=1&amp;amp;version=1.42&#34;&gt;results&lt;/a&gt; (an external CI platform that runs the package against many different operating systems and Perl versions to detect portability issues), &lt;a href=&#34;http://cpants.cpanauthors.org/kwalitee&#34;&gt;kwalitee&lt;/a&gt; rating, reviews and &amp;ldquo;++&amp;rdquo; counts. It also provides a dependencies list, a dependent packages list and a nifty dependencies chart. This example is for &lt;a href=&#34;https://metacpan.org/pod/WWW::Selenium&#34;&gt;WWW::Selenium&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Curiously metacpan did not provide download statistics for any package. This would seem like a useful quality indicator for users. metacpan may suffer a little from &amp;ldquo;information overload&amp;rdquo; - there were so many links and metrics it could be hard for a user to disseminate the important metrics from the noise. Although metacpan listed the license name, it didn&amp;rsquo;t provide a link to the underlying license text which would be useful. Unit test coverage was not reported.&lt;/p&gt;

&lt;h4 id=&#34;metadata-5-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Metadata: &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;Documentation was extensive, except in the case of the web framework package (Dancer) which includes high-level examples and then links for documentation contained in other packages. What was especially nice was that the documentation was easily accessible and consistently styled across all three packages as it was all presented though metacpan.&lt;/p&gt;

&lt;h4 id=&#34;documentation-5-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Documentation: &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;A direct link to the source code was provided on every package page. The source code is also hosted on metacpan and consistently styled. Some useful measures were provided: the number of lines of code, the number of lines of documentation and the file size in kilobytes. I was also able to toggle on and off the inline documentation (called &amp;ldquo;Pod&amp;rdquo;) and view the code raw. Another useful feature: every package reference in the source code is a hyperlink to the source code of that package.&lt;/p&gt;

&lt;p&gt;However it was not clear how to navigate the package tree (the links are in the name of the package itself). One package was hosted on GitHub and a direct link to the repo was provided on the package page - so the user has the option of viewing the source on GitHub if they prefer it to metacpan.&lt;/p&gt;

&lt;h4 id=&#34;source-5-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Source: &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;No information was provided by metacpan on how to install a module.&lt;/p&gt;

&lt;h4 id=&#34;installation-1-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Installation: &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;h5 id=&#34;metacpan-overall-3-8:e4033a7178e3036bc1983cb5214477f8&#34;&gt;metacpan overall: 3.8&lt;/h5&gt;

&lt;p&gt;Node.js: npm&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_npm.png&#34; title=&#34;The npm homepage&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_npm_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.org/&#34;&gt;npm&lt;/a&gt; is the Node.js package manager. It boasts over 89,500 packages, which is the most of any package manager in this review.&lt;/p&gt;

&lt;p&gt;The npm search results were good: although the target Selenium &lt;a href=&#34;https://www.npmjs.org/package/selenium-webdriver&#34;&gt;package&lt;/a&gt; was 7th in the list of results, both the SQLite3 and Web Framework searches returned the target packages (&lt;a href=&#34;https://www.npmjs.org/package/sqlite3&#34;&gt;sqlite3&lt;/a&gt;, [](&lt;a href=&#34;https://www.npmjs.org/package/express)express&#34;&gt;https://www.npmjs.org/package/express)express&lt;/a&gt;) first in the results list. npm displayed the package name, description, download statistics, a &amp;ldquo;star&amp;rdquo; count and a keyword list. The search results were paginated and no filtering or sorting function was provided.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_npm_search_webf.png&#34; title=&#34;npm web framework search&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_npm_search_webf_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;search-5-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Search: &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;npm provided a useful set of metadata including: download statistics, license, issues link, version, dependencies and dependant packages When available it also pulled the Travis CI status from GitHub. No information was provided regarding unit test coverage or platform availability. There didn&amp;rsquo;t seem to be a function for adding user reviews of packages to npm.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_npm_express.png&#34; title=&#34;express package page&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_npm_express_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;metadata-4-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Metadata: &lt;sup&gt;4&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;Documentation was poor - npm just displayed the package readme. Although the documentation was consistently styled, it was not consistent in layout or content. Every package used different headings and different content.&lt;/p&gt;

&lt;h4 id=&#34;documentation-2-5-2:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Documentation: &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;npm just provided links to the source repo. The Selenium &lt;a href=&#34;https://code.google.com/p/selenium/&#34;&gt;repo&lt;/a&gt; was on Google Code and npm provided the URL but did not link to it. The Selenium source code link did not even direct to the Node.js package - it went to the main Selenium source code. The other two packages (SQLite3, express) were better: they were GitHub hosted with consistent package trees (lib and test directories) and it was easy to browse the source.&lt;/p&gt;

&lt;h4 id=&#34;source-3-5-1:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Source: &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;The npm homepage explained how to install a package, and linked to a more detailed page of examples. Every package page included installation instructions. All three packages installed without issue. It wasn&amp;rsquo;t clear if any unit tests were run as part of installation.&lt;/p&gt;

&lt;h4 id=&#34;installation-5-5-2:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Installation: &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;h5 id=&#34;npm-overall-3-8:e4033a7178e3036bc1983cb5214477f8&#34;&gt;npm overall: 3.8&lt;/h5&gt;

&lt;h3 id=&#34;ruby-rubygems:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Ruby: RubyGems&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_gem.png&#34; title=&#34;The RubyGems homepage&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_gem_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://rubygems.org&#34;&gt;RubyGems&lt;/a&gt; is the Ruby package manager and has over 87,000 packages.&lt;/p&gt;

&lt;p&gt;RubyGems search was mixed, for the SQLite3 and Selenium searches the target package was returned in the top 2 results. However RubyGems returned no results for the Web Framework search, which given the popularity of Ruby on Rails is astonishing. For each search result RubyGems displayed the package name, description and number of downloads. Results were paginated and no facility was provided for sorting or filtering the results returned.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_gem_search_webf.png&#34; title=&#34;RubyGems web framework search&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_gem_search_webf_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;search-2-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Search: &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;A basic set of metadata was provided: package name, description, author(s), version number, download statistics, license name, dependencies and a version history time line. There was no facility to &amp;ldquo;star&amp;rdquo; or review a module. No information was provided regarding cross platform support or unit test coverage.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_gem_sqlite.png&#34; title=&#34;SQLite package page&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_gem_sqlite_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;metadata-2-5-1:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Metadata: &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;RubyGems&amp;rsquo; documentation consisted of a link to an external site. The SQLite3 package used &lt;a href=&#34;http://rubydoc.info/&#34;&gt;RubyDoc&lt;/a&gt; which is like a nicer-looking JavaDoc. Selenium-Webdriver used Google code and in the case of Sinatra, their own &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;website&lt;/a&gt;. The documentation was inconsistent in style, layout, content and quality.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/110/pm_gem_sqlite_doc.png&#34; title=&#34;SQLite documentation&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/110/pm_gem_sqlite_doc_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;documentation-2-5-3:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Documentation: &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;RubyGems provided a link to the externally hosted repo for 2 packages (&lt;a href=&#34;http://rubygems.org/gems/sinatra&#34;&gt;Sinatra&lt;/a&gt;, &lt;a href=&#34;http://rubygems.org/gems/selenium-webdriver&#34;&gt;Selenium-Webdriver&lt;/a&gt;). The Selenium source code &lt;a href=&#34;https://code.google.com/p/selenium/source/list&#34;&gt;link&lt;/a&gt; was to the base Selenium package, not the Ruby package. For the SQLite3 package no link to the source code was provided.&lt;/p&gt;

&lt;h4 id=&#34;source-2-5-1:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Source: &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;p&gt;Every package page provided command line installation instructions. However on my machine (Fedora 19), 2 of the packages failed to install with the same error: &lt;code&gt;mkmf.rb can&#39;t find header files for ruby&lt;/code&gt;. I was able to install the packages using the Fedora package manager instead.&lt;/p&gt;

&lt;h4 id=&#34;installation-2-5:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Installation: &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/h4&gt;

&lt;h5 id=&#34;rubygems-overall-2-0:e4033a7178e3036bc1983cb5214477f8&#34;&gt;RubyGems overall: 2.0&lt;/h5&gt;

&lt;h3 id=&#34;conclusion:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.org/&#34;&gt;npm&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/&#34;&gt;metacpan&lt;/a&gt; both scored 3.8 and tied for first place. npm has a great search feature, but needs better documentation. No package manager provided a means for sorting or further filtering the search results, which seems like a missed opportunity - it would be very helpful to be able to sort search results by the date of last upload - this would help the user eliminate stale packages from the results.&lt;/p&gt;

&lt;p&gt;metacpan&amp;rsquo;s search could have been better but it&amp;rsquo;s documentation was excellent. It&amp;rsquo;s interesting that CPAN enforces almost zero requirements on documentation, yet overall it scored the highest. This might be because the underlying CPAN toolchain is 19 years old and has well-established conventions. metacpan also presented the source code nicely with several enhancements to make it easier, such as being able to toggle the display of inline documentation. metacpan should provide installation instructions for every package, which would be easy boilerplate using the &lt;code&gt;cpan&lt;/code&gt; command line tool. The distributed network of CPAN mirrors may mean that download statistics are not easily available to metacpan, but it could be a useful addition to the rich set of package metadata that metacpan provides.&lt;/p&gt;

&lt;p&gt;PyPI and Packagist were all-rounders, with each scoring 3.0. In both cases better documentation and more package metadata would make them more usable.&lt;/p&gt;

&lt;p&gt;RubyGems score of just 2.0 leaves room for improvement in all areas. I&amp;rsquo;m guessing but I think the strange search results could be improved by searching the package description as well as the package name, so that searches for &amp;ldquo;web framework&amp;rdquo; returns results.&lt;/p&gt;

&lt;p&gt;In part two I&amp;rsquo;ll consider how well each of these package managers enables users to upload and share packages.&lt;/p&gt;

&lt;h3 id=&#34;evaluation:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Evaluation&lt;/h3&gt;

&lt;p&gt;The results are subjective but I hope they&amp;rsquo;re approximately representative. Choosing different search terms could have changed the results significantly - perhaps different packages are better documented than others for example. Also the uniform weighting given to each of the criteria could be changed to reflect the relative importance of each criterion (is search is more important than source code accessibility?). Also don&amp;rsquo;t rule out author ignorance :). The list of package managers could also be expanded. I&amp;rsquo;ve focused here on scripting language package managers, but there are &lt;a href=&#34;http://www.modulecounts.com/&#34;&gt;many&lt;/a&gt; to choose from.&lt;/p&gt;

&lt;h3 id=&#34;thanks:e4033a7178e3036bc1983cb5214477f8&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;Thanks to Neil Bowers for providing the initial idea and feedback on this article. All errors are my own.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Celebrate CPAN day on August 16th</title>
      <link>http://perltricks.com/article/109/2014/8/13/Celebrate-CPAN-day-on-August-16th/</link>
      <pubDate>Wed, 13 Aug 2014 12:43:17 +0000</pubDate>
      
      <guid>http://perltricks.com/article/109/2014/8/13/Celebrate-CPAN-day-on-August-16th/</guid>
      <description>

&lt;p&gt;Back in 1995 CPAN was a visionary concept that propelled Perl to the height of its popularity during the dotcom boom. For the first time there was a single, integrated online system for Perl programmers to distribute software. Today CPAN continues to go from &lt;a href=&#34;http://neilb.org/cpan-report/&#34;&gt;strength to strength&lt;/a&gt; as Perl&amp;rsquo;s &amp;ldquo;killer feature&amp;rdquo;. CPAN Day is August the 16th - the day of the first ever upload to CPAN, and a fantastic opportunity to celebrate our wonderful tool and give back to the Perl community.&lt;/p&gt;

&lt;h3 id=&#34;ways-to-celebrate:37fcf7f7809608d85d3fba77ced9a502&#34;&gt;Ways to celebrate&lt;/h3&gt;

&lt;p&gt;The idea of CPAN Day was conceived by Philippe Bruhat from an IRC conversation with Neil Bowers. Since then, Neil has blogged daily about different ways to celebrate CPAN Day. Most of these ideas are Neil&amp;rsquo;s:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Help make history by releasing a new &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/07/the-ghost-of-cpan-days-past.html&#34;&gt;distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Give your module good &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/07/give-your-modules-a-good-abstract.html&#34;&gt;extract&lt;/a&gt;, &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/craft-the-first-paragraph-of-your-description.html&#34;&gt;description&lt;/a&gt;, &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/07/give-your-modules-a-good-synopsis.html&#34;&gt;synopsis&lt;/a&gt; []() or &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/07/give-your-module-a-good-see-also-section.html&#34;&gt;see also&lt;/a&gt; section&lt;/li&gt;
&lt;li&gt;Thank a &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/thank-a-cpan-author-on-cpan-day.html&#34;&gt;CPAN author&lt;/a&gt; or acknowledge a &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/acknowledge-your-contributors-on-cpan-day.html&#34;&gt;contributor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Help keep Perl strong and donate to the &lt;a href=&#34;https://secure.donor.com/pf012/give&#34;&gt;Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Put your module on &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/put-your-cpan-distributions-on-github.html&#34;&gt;Github&lt;/a&gt; so other programmers can easily contribute&lt;/li&gt;
&lt;li&gt;Classify your &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/classify-your-rt-tickets-on-cpan-day.html&#34;&gt;RT tickets&lt;/a&gt; or fix a &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/fix-a-bug-on-cpan-day.html&#34;&gt;bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you have a stable module, let others know and update the distribution version to 1.0&lt;/li&gt;
&lt;li&gt;Check your &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/check-your-test-coverage-with-develcover.html&#34;&gt;test coverage&lt;/a&gt; with Devel::Cover&lt;/li&gt;
&lt;li&gt;Make your module more portable by fixing your CPAN Testers &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/fix-your-cpan-testers-failures.html&#34;&gt;failures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Increase your module&amp;rsquo;s &amp;ldquo;kwalitee&amp;rdquo; by improving your &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/get-cpants-clean-on-cpan-day.html&#34;&gt;CPANTS rating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maybe improve your module &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/dont-be-afraid-to-rename-your-module-dist.html&#34;&gt;name&lt;/a&gt; or remove the &lt;a href=&#34;http://blogs.perl.org/users/book/2014/08/curating-cpan-sometimes-mean-deleting-stuff.html&#34;&gt;module&lt;/a&gt; entirely&lt;/li&gt;
&lt;li&gt;Write an article about your favourite CPAN module&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So there are loads of different ways to contribute! Earlier today I caught up with Neil Bowers and asked him if he had to pick one, which was the most important contribution. Neil said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I would pick the see also section - it outlines other relevant modules, the pros and cons of each one and saves people time when first approaching a problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For you self-interested module authors out there, Neil also explained that a good SEE ALSO section can make your own module more popular. This is because &lt;a href=&#34;https://metacpan.org/&#34;&gt;metacpan&lt;/a&gt; is built on elastic search and by listing other modules in the SEE ALSO, you ensure that your modules appear in the search results for those other modules.&lt;/p&gt;

&lt;p&gt;So how will you celebrate CPAN Day? Even if you did just one of the above suggestions, you&amp;rsquo;d be supporting the community in some way. Apparently some of CPAN&amp;rsquo;s most prolific authors are planning large releases to CPAN. Diff records will be broken, commit history will be made. I&amp;rsquo;m planning to move my modules to GitHub and to thank an author. I can&amp;rsquo;t wait to see what everyone else does. The inaugural CPAN Day is August 16th 2014, let&amp;rsquo;s make it &lt;em&gt;our&lt;/em&gt; day!&lt;/p&gt;

&lt;h3 id=&#34;thanks:37fcf7f7809608d85d3fba77ced9a502&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;Thanks to Neil Bowers for contributing additional detail in support of this article.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parse Excel with ease using Perl</title>
      <link>http://perltricks.com/article/108/2014/8/5/Parse-Excel-with-ease-using-Perl/</link>
      <pubDate>Tue, 05 Aug 2014 13:41:48 +0000</pubDate>
      
      <guid>http://perltricks.com/article/108/2014/8/5/Parse-Excel-with-ease-using-Perl/</guid>
      <description>

&lt;p&gt;In the business world, it seems like Excel spreadsheets are everywhere. Recently I had to parse several hundred spreadsheets under a tight deadline for a client. To make matters worse, the spreadsheets were in a mix of Excel 2003 (xls) and 2007 (xlsx) formats. Fortunately I know Perl, and using the Spreadsheet::Read module, it was easy. This article will show you how to use Spreadsheet::Read to parse Excel spreadsheets.&lt;/p&gt;

&lt;h3 id=&#34;requirements:0b46a0650427715cdfe7d0a01e84588d&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to install &lt;a href=&#34;https://metacpan.org/pod/Spreadsheet::Read&#34;&gt;Spreadsheet::Read&lt;/a&gt; and a couple of interface modules. &lt;a href=&#34;https://metacpan.org/pod/Spreadsheet::ParseExcel&#34;&gt;Spreadsheet::ParseExcel&lt;/a&gt; is an interface for Excel 2003 spreadsheets and &lt;a href=&#34;https://metacpan.org/pod/Spreadsheet::XLSX&#34;&gt;Spreadsheet::XLSX&lt;/a&gt; is for reading the modern Excel format. You can install all three modules from the terminal using cpan:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Spreadsheet::ParseExcel Spreadsheet::XLSX Spreadsheet::Read
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;using-spreadsheet-read:0b46a0650427715cdfe7d0a01e84588d&#34;&gt;Using Spreadsheet::Read&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s parse the spreadsheet shown in the cover image, which contains an income statement. Spreadsheet::Read provides a simple, unified interface for reading spreadsheets. It exports the &lt;code&gt;ReadData&lt;/code&gt; function which requires a filepath to the spreadsheet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Spreadsheet::Read;

my $workbook = ReadData(&#39;income_statement.xlsx&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;$workbook&lt;/code&gt; contains the data structure representing the spreadsheet. We can inspect this structure by printing it with &lt;a href=&#34;https://metacpan.org/pod/Data::Printer&#34;&gt;Data::Printer&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;\ [
    [0] {
        error     undef,
        parser    &amp;quot;Spreadsheet::XLSX&amp;quot;,
        sheet     {
            Sheet1   1
        },
        sheets    1,
        type      &amp;quot;xlsx&amp;quot;,
        version   0.13
    },
    [1] {
        attr     [],
        B1       &amp;quot;Income Statement 2014&amp;quot;,
        B2       &amp;quot;Revenue&amp;quot;,
        B3       &amp;quot;Cost of goods sold&amp;quot;,
        B4       &amp;quot;Gross profit&amp;quot;,
        B5       &amp;quot;Financing costs&amp;quot;,
        B6       &amp;quot;Tax&amp;quot;,
        B7       &amp;quot;Net profit&amp;quot;,
        cell     [
            [0] [],
            [1] [],
            [2] [
                [0] undef,
                [1] &amp;quot;Income Statement 2014&amp;quot;,
                [2] &amp;quot;Revenue&amp;quot;,
                [3] &amp;quot;Cost of goods sold&amp;quot;,
                [4] &amp;quot;Gross profit&amp;quot;,
                [5] &amp;quot;Financing costs&amp;quot;,
                [6] &amp;quot;Tax&amp;quot;,
                [7] &amp;quot;Net profit&amp;quot;
            ],
            [3] [
                [0] undef,
                [1] undef,
                [2] 50000,
                [3] 2500,
                [4] 47500,
                [5] 7150,
                [6] 10087.5,
                [7] 30262.5
            ]
        ],
        C2       &amp;quot; $ 50,000.00 &amp;quot;,
        C3       &amp;quot; $ 2,500.00 &amp;quot;,
        C4       &amp;quot; $ 47,500.00 &amp;quot;,
        C5       &amp;quot; $ 7,150.00 &amp;quot;,
        C6       &amp;quot; $ 10,087.50 &amp;quot;,
        C7       &amp;quot; $ 30,262.50 &amp;quot;,
        label    &amp;quot;Sheet1&amp;quot;,
        maxcol   3,
        maxrow   7
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shows that &lt;code&gt;$workbook&lt;/code&gt; is an arrayref, whose first element describes the file, and subsequent elements represent the individual worksheets. The &lt;code&gt;label&lt;/code&gt; key pair contains the worksheet name, access it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$workbook-&amp;gt;[1]{label}; #Sheet1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cells can be referenced using Excel&amp;rsquo;s grid notation (&amp;ldquo;A3&amp;rdquo;) or via standard Perl array access. The different between these is formatting:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$workbook-&amp;gt;[1]{C2}; #$ 50,000.00

$workbook-&amp;gt;[1]{cell}[3][2]; #50000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if you need to perform additional processing on the data you&amp;rsquo;re extracting (such as saving to a database), you probably want to use the &lt;code&gt;{cell}&lt;/code&gt; notation, to obtain clean data. With Spreadsheet::Read array indexes begin at 1, so cell &amp;ldquo;C2&amp;rdquo; is [3][2].&lt;/p&gt;

&lt;p&gt;Perhaps you want to loop through two columns at once and print them? No problem:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;for (2..7) {
    print &amp;quot;$workbook-&amp;gt;[1]{cell}[2][$_]: $workbook-&amp;gt;[1]{cell}[3][$_]\n&amp;quot;; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are some data points which Spreadsheet::Read does not provide: you cannot access the underlying formula of a cell and the styling data is also not available.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:0b46a0650427715cdfe7d0a01e84588d&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Spreadsheet::Read isn&amp;rsquo;t just great for command line apps, it has many uses. Unlike the Microsoft .Net interop library, Perl&amp;rsquo;s Excel interfaces are not single threaded and do not require Excel to be installed to work. Instead Spreadsheet::Read directly parses the Excel file. That makes it possible to process large computing tasks in parallel. Another possible use case is for a spreadsheet upload interface on a web application; Spreadsheet::Read also supports the Libre / Open Office formats as well as CSV text files.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl distributions, modules, packages explained</title>
      <link>http://perltricks.com/article/96/2014/6/13/Perl-distributions--modules--packages-explained/</link>
      <pubDate>Fri, 13 Jun 2014 12:26:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/96/2014/6/13/Perl-distributions--modules--packages-explained/</guid>
      <description>

&lt;p&gt;&lt;em&gt;It can be confusing for new Perl programmers to understand the terminology used to describe Perl distributions and their accompanying files. This article explains the core concepts.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;package-module-distribution:17113ac399bf5596ee1d46e47a6ce58b&#34;&gt;Package, Module, Distribution&lt;/h3&gt;

&lt;p&gt;A Perl package is just a section of code defined in a .pm file, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Data::Connector;

sub connect {
    # do something
    ...
}
1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The start of the package begins with the &amp;ldquo;package&amp;rdquo; declaration. A package is a lot like a class, except that it can denote a collection of subroutines and variables, and not necessarily be instantiated as an object. Usually a .pm file will have one package declaration per file, but you can have multiple packages in a .pm file, similar to Java and C# where you can have multiple classes in a single file.&lt;/p&gt;

&lt;p&gt;A module is a .pm file (&amp;ldquo;pm&amp;rdquo; means Perl Module). When you import a module with &amp;ldquo;require&amp;rdquo; or &amp;ldquo;use&amp;rdquo;, you are literally referencing the file name and not the package(s) contained in the file. For example to import the &amp;ldquo;Data::Connector&amp;rdquo; package defined above, we could save it in a file called &amp;ldquo;Whatever.pm&amp;rdquo; and later reference it in a script like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Whatever;

# call connect subroutine declared in Data::Connector package
Data::Connector::connect();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All .pm files must end with a &amp;ldquo;true&amp;rdquo; value per Perl&amp;rsquo;s requirements, so most authors either place &amp;ldquo;1;&amp;rdquo; or &amp;ldquo;__PACKAGE__;&amp;rdquo; as the last line of the .pm file. In Perl a true value is any value that is not: null, zero or a zero-length string.&lt;/p&gt;

&lt;p&gt;A distribution is a collection of files that usually includes a Perl module and several other files. There is no strict standard as to which files must be included in a distribution, however for the distribution to be indexed on CPAN and install-able by the CPAN command line client, the distribution needs to include some core files. Distributions have versions - so a Perl module on CPAN will have one distribution for every version of the module. These are the main files and directories you&amp;rsquo;ll encounter in distributions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;README - a brief description of how to install the distribution, sometimes includes a license and examples of how to use the module(s).&lt;/li&gt;
&lt;li&gt;LICENSE - the license for the code - a non-commercial license like the GPL, artistic, BSD etc are common.&lt;/li&gt;
&lt;li&gt;META.yml/ META.json - files that contain the metadata describing the distribution: the author, license, version, pre-requisite modules for use etc. They are auto-generated as part of the distribution build process and can be ignored.&lt;/li&gt;
&lt;li&gt;Makefile.PL and or Build.PL - these are Perl files that are used to install the module(s) in the distribution. Worth looking at when you&amp;rsquo;re having installation issues.&lt;/li&gt;
&lt;li&gt;MANIFEST - a list of the files included in the distribution.&lt;/li&gt;
&lt;li&gt;lib - a directory containing Perl modules - usually the core code of the distribution.&lt;/li&gt;
&lt;li&gt;t - the test files directory. These are run when the module is installed. If you have failing tests on installation, it can be helpful to review the test files in the t/ directory to find out the specifics of the test.&lt;/li&gt;
&lt;li&gt;bin - if the distribution contains an app, (Perl script) it will be in here. Often the app uses modules contained in the lib directory.&lt;/li&gt;
&lt;li&gt;Changes - a list of changes from distribution version to version.&lt;/li&gt;
&lt;li&gt;xt - the extended test files directory, usually used for author tests that you don&amp;rsquo;t need to run.&lt;/li&gt;
&lt;li&gt;eg - a directory of example Perl scripts, using the module(s) contained in the distribution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the typical directories and files found in a Perl distribution but as there is no fixed standard, distribution authors are free to include and exclude the files they wish. For a good example, check out the files provided by David Golden in a distribution of the the popular &lt;a href=&#34;https://metacpan.org/source/DAGOLDEN/HTTP-Tiny-0.043&#34;&gt;HTTP::Tiny&lt;/a&gt; module.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:17113ac399bf5596ee1d46e47a6ce58b&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Once you get to grips with Perl packages, modules and distributions it&amp;rsquo;s far easier to start hacking on Perl modules that don&amp;rsquo;t work the way you want them to. For example, in the case of a module that won&amp;rsquo;t install, you can download the distribution from CPAN (at the command line &amp;ldquo;cpan -g Module::Name&amp;rdquo;), untar it, and patch the failing tests, or examine the source code in the lib directory and resolve a bug or two. Before long you&amp;rsquo;ll be releasing your own distributions to CPAN!&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F96%2F2014%2F6%2F13%2FPerl-distributions-modules-packages-explained&amp;amp;text=Perl+distributions%2C+modules%2C+packages+explained&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F96%2F2014%2F6%2F13%2FPerl-distributions-modules-packages-explained&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - May 2014</title>
      <link>http://perltricks.com/article/93/2014/6/2/What-s-new-on-CPAN---May-2014/</link>
      <pubDate>Mon, 02 Jun 2014 12:31:35 +0000</pubDate>
      
      <guid>http://perltricks.com/article/93/2014/6/2/What-s-new-on-CPAN---May-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;alien:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Alien&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install a local ImageMagic with &lt;a href=&#34;https://metacpan.org/pod/Alien::ImageMagick&#34;&gt;Alien::ImageMagick&lt;/a&gt;. No more &lt;a href=&#34;http://perltricks.com/article/57/2014/1/1/Shazam-Use-Image-Magick-with-Perlbrew-in-minutes&#34;&gt;hacks&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::SamTools&#34;&gt;Alien::SamTools&lt;/a&gt; will install the SamTools C libs and headers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apis:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Activiti::Rest::Client&#34;&gt;Activiti::Rest::Client&lt;/a&gt; provides an API for Activit, the open source workflow and BPM platform&lt;/li&gt;
&lt;li&gt;Use the decNumber C library with &lt;a href=&#34;https://metacpan.org/pod/Math::decNumber&#34;&gt;Math::decNumber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Sensu::API::Client&#34;&gt;Sensu::API::Client&lt;/a&gt; is an API client for Sensu, an open source monitoring framework&lt;/li&gt;
&lt;li&gt;Sentry is an exceptions tracking service and &lt;a href=&#34;https://metacpan.org/pod/Sentry::Raven&#34;&gt;Sentry::Raven&lt;/a&gt; provides an API for it&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Liquidweb::Lite&#34;&gt;WWW::Liquidweb::Lite&lt;/a&gt; provides an API for Liquidweb hosting&lt;/li&gt;
&lt;li&gt;Access the OANDA exchange rates API with &lt;a href=&#34;https://metacpan.org/pod/WebService::OANDA::ExchangeRates&#34;&gt;WebService::OANDA::ExchangeRates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::CSE&#34;&gt;App::CSE&lt;/a&gt; implements the Code Search Engine as an app&lt;/li&gt;
&lt;li&gt;Run multiple apps in command with &lt;a href=&#34;https://metacpan.org/pod/App::Munner&#34;&gt;App::Munner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Table2YAML&#34;&gt;App::Table2YAML&lt;/a&gt; will convert tables to YAML&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::revealup&#34;&gt;App::revealup&lt;/a&gt; is an awesome app that converts markdown documents into an HTTP served slideshow with revealup.js - check it out.&lt;/li&gt;
&lt;li&gt;Perl&amp;rsquo;s compile-only mode doesn&amp;rsquo;t always load modules in the correct order or location. &lt;a href=&#34;https://metacpan.org/pod/App::perlminlint&#34;&gt;App::perlminlint&lt;/a&gt; aims to fix that (current version 0.1 needs a minor patch)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bots:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Bots&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Capulcu::Bot&#34;&gt;Capulcu::Bot&lt;/a&gt; is a highly customizable and modular IRC bot&lt;/p&gt;

&lt;p&gt;Several new &lt;a href=&#34;https://metacpan.org/pod/Bot::Cobalt&#34;&gt;Bot::Cobalt&lt;/a&gt; plugins for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::Cobalt::Plugin::Bitly&#34;&gt;Bitly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::Cobalt::Plugin::Figlet&#34;&gt;Figlet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::Cobalt::Plugin::Twitter&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::Cobalt::Plugin::Urban&#34;&gt;Urban Dictionary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::Cobalt::Plugin::RandomQuote&#34;&gt;RandomQuote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::Cobalt::Plugin::SeenURL&#34;&gt;SeenURL&lt;/a&gt; (URLs already linked)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Debug Perl data structures with &lt;a href=&#34;https://metacpan.org/pod/Data::Debug&#34;&gt;Data::Debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Validate::Perl&#34;&gt;Data::Validate::Perl&lt;/a&gt; will validate Perl data structures using a Parse::Yapp grammar&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::EDI::X12&#34;&gt;Data::EDI::X12&lt;/a&gt; will process EDI x12 documents&lt;/li&gt;
&lt;li&gt;Safely slurp files again with File::Slurp::Sane&lt;/li&gt;
&lt;li&gt;Render SVG as a Cairo surface with &lt;a href=&#34;https://metacpan.org/pod/Image::CairoSVG&#34;&gt;Image::CairoSVG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MARC::Parser::RAW&#34;&gt;MARC::Parser::RAW&lt;/a&gt; parses MARC records in a fault-tolerant way&lt;/li&gt;
&lt;li&gt;Easily generate Marpa parsers using &lt;a href=&#34;https://metacpan.org/pod/MarpaX::Simple&#34;&gt;MarpaX::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MemcacheDBI&#34;&gt;MemcacheDBI&lt;/a&gt; implements a memcache queue for DBI commands&lt;/li&gt;
&lt;li&gt;Given an input, &lt;a href=&#34;https://metacpan.org/pod/SQL::Type::Guess&#34;&gt;SQL::Type::Guess&lt;/a&gt; attempts to derive the correct SQL column datatype&lt;/li&gt;
&lt;li&gt;Parse TOML with &lt;a href=&#34;https://metacpan.org/pod/TOML::Parser&#34;&gt;TOML::Parser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Command::Interactive&#34;&gt;Command::Interactive&lt;/a&gt; provides a command line interface for process invocation, e.g. capture a password and launch a process with the captured password.&lt;/p&gt;

&lt;p&gt;Curses! New widgets &lt;a href=&#34;https://metacpan.org/pod/Curses::UI::Number&#34;&gt;Curses::UI::Number&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Curses::UI::Time&#34;&gt;Curses::UI::Time&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New Dist::Zilla plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prevent an accidental release with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::BlockRelease&#34;&gt;BlockRelease&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get a count of RT and Github issues with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckIssues&#34;&gt;CheckIssues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::ContributorsFromPod&#34;&gt;ContributorsFromPod&lt;/a&gt; updates your META file with contributors from your module&amp;rsquo;s POD&lt;/li&gt;
&lt;li&gt;Dynamically inject Makefile pre-reqs during installation with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::DynamicPrereqs&#34;&gt;DynamicPrereqs&lt;/a&gt; (useful for platform specific reqs).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::ModuleBuildTiny::Fallback&#34;&gt;ModuleBuildTiny::Fallback&lt;/a&gt; creates a Build.PL file using Module::Build::Tiny if it&amp;rsquo;s available&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Zilla::Dist&#34;&gt;Zilla::Dist&lt;/a&gt; creates Perl distributions from an acmeist (language agnostic) source structure&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::Minimal::Object&#34;&gt;Log::Minimal::Object&lt;/a&gt; provides an OO interface for Log::Minimal&lt;/p&gt;

&lt;p&gt;Add roles to Moo objects at runtime with &lt;a href=&#34;https://metacpan.org/pod/MooX::Traits&#34;&gt;MooX::Traits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::Enumeration&#34;&gt;MooseX::Enumeration&lt;/a&gt; adds enumerated types for Moose classes, woohoo!&lt;/p&gt;

&lt;p&gt;Create configurable stack traces with &lt;a href=&#34;https://metacpan.org/pod/Stacktrace::Configurable&#34;&gt;Stacktrace::Configurable&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;maths-science-language:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Maths, Science &amp;amp; Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easily translate compass points with &lt;a href=&#34;https://metacpan.org/pod/Compass::Points&#34;&gt;Compass::Points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Date::QuarterOfYear&#34;&gt;Date::QuarterOfYear&lt;/a&gt; parses dates and returns the year quarter, without using the heavy DateTime module&lt;/li&gt;
&lt;li&gt;Parse words into known and unknown parts with &lt;a href=&#34;https://metacpan.org/pod/Lingua::Word::Parser&#34;&gt;Lingua::Word::Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manipulate text case with &lt;a href=&#34;https://metacpan.org/pod/String::CamelSnakeKebab&#34;&gt;String::CamelSnakeKebab&lt;/a&gt; (ported from Clojure)&lt;/li&gt;
&lt;li&gt;Draw braille characters at the terminal with &lt;a href=&#34;https://metacpan.org/pod/Term::Drawille&#34;&gt;Term::Drawille&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;security:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Security&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Polybius&#34;&gt;Crypt::Polybius&lt;/a&gt; implements the Polybius Square cipher&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Passwords&#34;&gt;Passwords&lt;/a&gt; is a simple API for hashing and validating passwords&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:f56c2d0a2baa3ca014236b4dac6dfb7e&#34;&gt;Web&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::Model::Net::Stripe&#34;&gt;Catalyst::Model::Net::Stripe&lt;/a&gt; provides a Catalyst model using &lt;a href=&#34;https://metacpan.org/pod/Net::Stripe&#34;&gt;Net::Stripe&lt;/a&gt; (the payments service)&lt;/p&gt;

&lt;p&gt;Implement a stronger Dancer session id with &lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::SecureSessionID&#34;&gt;Dancer::Plugin::SecureSessionID&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/HTTP::Request::AsCurl&#34;&gt;HTTP::Request::AsCurl&lt;/a&gt; converts an HTTP::Request object into a curl command&lt;/p&gt;

&lt;p&gt;New Mojolicious toys!:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support offline web applications with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::AppCacheManifest&#34;&gt;AppCacheManifest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clear an upsteam cache with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::CachePurge&#34;&gt;CachePurge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::RenderSteps&#34;&gt;RenderSteps&lt;/a&gt; helps you create async controllers with minimal code&lt;/li&gt;
&lt;li&gt;Easily manage thumbnails using &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Thumbnail&#34;&gt;Thumbnail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::TimeAgo&#34;&gt;TimeAgo&lt;/a&gt; elegantly convert dates to human-readable dates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::App::HostMap&#34;&gt;Plack::App::HostMap&lt;/a&gt; can dispatch requests to applications based on host names, in constant time&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parsing data couldn&#39;t be easier with XML::Dataset</title>
      <link>http://perltricks.com/article/87/2014/5/9/Parsing-data-couldn-t-be-easier-with-XML--Dataset/</link>
      <pubDate>Fri, 09 May 2014 03:14:01 +0000</pubDate>
      
      <guid>http://perltricks.com/article/87/2014/5/9/Parsing-data-couldn-t-be-easier-with-XML--Dataset/</guid>
      <description>

&lt;p&gt;&lt;em&gt;It&amp;rsquo;s hard to believe that when it comes to XML parsing CPAN hasn&amp;rsquo;t already got you covered, but &lt;a href=&#34;https://metacpan.org/pod/XML::Dataset&#34;&gt;XML::Dataset&lt;/a&gt; is a new module that fills a useful void. XML::Dataset let&amp;rsquo;s you declare a plaintext data collection schema, and then goes and extracts the data for you, super fast. Read on to see how it works.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:2f6e0c408059a4f921b8d668bba7c6d3&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;The CPAN Testers results &lt;a href=&#34;http://matrix.cpantesters.org/?dist=XML-Dataset+0.006&#34;&gt;show&lt;/a&gt; that XML::Dataset v0.06 will run on any platform with Perl (down to 5.8.9). To install the module with CPAN, open up the terminal and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan XML::Dataset
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;your-data-extracted:2f6e0c408059a4f921b8d668bba7c6d3&#34;&gt;Your data, extracted&lt;/h3&gt;

&lt;p&gt;To use XML::Dataset you&amp;rsquo;ll need some stringified XML source data and a data profile. A profile is just a plaintext schema which specifies the data you&amp;rsquo;d like to extract. Let&amp;rsquo;s look at an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use XML::Dataset;
use Data::Printer;

my $sample_data = q(&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;colleagues&amp;gt;
    &amp;lt;colleague&amp;gt;
        &amp;lt;title&amp;gt;The Boss&amp;lt;/title&amp;gt;
        &amp;lt;phone&amp;gt;+1 202-663-9108&amp;lt;/phone&amp;gt;
    &amp;lt;/colleague&amp;gt;
    &amp;lt;colleague&amp;gt;
        &amp;lt;title&amp;gt;Admin Assistant&amp;lt;/title&amp;gt;
        &amp;lt;phone&amp;gt;+1 347-999-5454&amp;lt;/phone&amp;gt;
        &amp;lt;email&amp;gt;inbox@the_company.com&amp;lt;/email&amp;gt;
    &amp;lt;/colleague&amp;gt;
    &amp;lt;colleague&amp;gt;
        &amp;lt;title&amp;gt;Minion&amp;lt;/title&amp;gt;
        &amp;lt;phone&amp;gt;+1 792-123-4109&amp;lt;/phone&amp;gt;
    &amp;lt;/colleague&amp;gt;
&amp;lt;/colleagues&amp;gt;);

my $sample_data_profile
    = q(colleagues
            colleague
                title   = dataset:colleagues
                email   = dataset:colleagues
                phone   = dataset:colleagues);

p parse_using_profile($sample_data, $sample_data_profile);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above declares a simple XML dataset ($sample_data) and a data profile to extract the required data ($sample_data_profile). XML::Dataset requires every indented newline in the data profile to map to another nested level of the data set. Once we reach the data attributes we want to extract, we simply assign a dataset to them (dataset:colleagues).&lt;/p&gt;

&lt;p&gt;XML::Dataset exports the &amp;ldquo;parse_using_profile&amp;rdquo; function which extracts the data using our data profile and returns a Perl data structure. We use &lt;a href=&#34;https://metacpan.org/pod/Data::Printer&#34;&gt;Data::Printer&lt;/a&gt; to print out the results. Running this code we get this output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;\ {
    colleagues   [
        [0] {
            phone   &amp;quot;+1 202-663-9108&amp;quot;,
            title   &amp;quot;The Boss&amp;quot;
        },
        [1] {
            email   &amp;quot;inbox@the_company.com&amp;quot;,
            phone   &amp;quot;+1 347-999-5454&amp;quot;,
            title   &amp;quot;Admin Assistant&amp;quot;
        },
        [2] {
            phone   &amp;quot;+1 792-123-4109&amp;quot;,
            title   &amp;quot;Minion&amp;quot;
        },
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that XML::Dataset had no problem extracting the one email address that was present in the data, even though the other colleagues did not have that attribute. What if we wanted to collect emails and phone numbers, but in separate datasets? All we need to do is update $sample_data_profile with two datasets:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $sample_data_profile
    = q(colleagues
            colleague
                title   = dataset:emails dataset:phones
                email   = dataset:emails
                phone   = dataset:phones);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Re-running the code, XML::Dataset now produces two datasets for us:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;\ {
    emails   [
        [0] {
            title   &amp;quot;The Boss&amp;quot;
        },
        [1] {
            email   &amp;quot;inbox@the_company.com&amp;quot;,
            title   &amp;quot;Admin Assistant&amp;quot;
        },
        [2] {
            title   &amp;quot;Minion&amp;quot;
        }
    ],
    phones   [
        [0] {
            phone   &amp;quot;+1 202-663-9108&amp;quot;,
            title   &amp;quot;The Boss&amp;quot;
        },
        [1] {
            phone   &amp;quot;+1 347-999-5454&amp;quot;,
            title   &amp;quot;Admin Assistant&amp;quot;
        },
        [2] {
            phone   &amp;quot;+1 792-123-4109&amp;quot;,
            title   &amp;quot;Minion&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-real-example:2f6e0c408059a4f921b8d668bba7c6d3&#34;&gt;A real example&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s write a program to parse a a more realistic data set. Many websites provide a sitemap that lists all of the content on the website, and when it was last updated. This information is used by search engines to optimize their crawling routines. The sitemap has a defined xml format, so it&amp;rsquo;s a cinch to parse it with XML::Dataset:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use XML::Dataset;
use Data::Printer;
use HTTP::Tiny;

my $url = &#39;http://perltricks.com/static/sitemap.xml&#39;;

my $sitemap_data 
    = HTTP::Tiny-&amp;gt;new-&amp;gt;get($url)-&amp;gt;{content};

my $sitemap_data_profile
    = q(urlset
            url
                loc     = dataset:sitemap_locations_modified
                lastmod = dataset:sitemap_locations_modified);

p parse_using_profile($sitemap_data, $sitemap_data_profile);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above downloads the PerlTricks.com sitemap using &lt;a href=&#34;https://metacpan.org/pod/HTTP::Tiny&#34;&gt;HTTP::Tiny&lt;/a&gt; and extracts every URL and last modified timestamp from the sitemap. Running the code, we get this output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;\ {
    sitemap_locations_modified   [
        [0]  {
            lastmod   &amp;quot;2014-05-09&amp;quot;,
            loc       &amp;quot;http://perltricks.com/&amp;quot;
        },
        [1]  {
            lastmod   &amp;quot;2013-03-24&amp;quot;,
            loc       &amp;quot;http://perltricks.com/article/1/2013/3/24/3-quick-ways-to-find-out-the-version-number-of-an-installed-Perl-module-from-the-terminal&amp;quot;
        },
        [2]  {
            lastmod   &amp;quot;2013-03-27&amp;quot;,
            loc       &amp;quot;http://perltricks.com/article/3/2013/3/27/How-to-cleanly-uninstall-a-Perl-module&amp;quot;
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No problem! We could re-use that same program to download and parse any sitemap on the Internet.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:2f6e0c408059a4f921b8d668bba7c6d3&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;XML::Dataset is fantastic for extracting fixed data schemas from XML. The plaintext data profiles are so easy to use, a non-programmer could write them. XML::Dataset is also fast: under the hood it uses XML::LibXML (and a few optimizations) and could be adapted for well-formatted HTML. It has great &lt;a href=&#34;https://metacpan.org/pod/XML::Dataset&#34;&gt;documentation&lt;/a&gt; and offers some advanced features like partial dataset parse dispatching. Module author James Spurin deserves credit for producing a quality module and a welcome addition to CPAN&amp;rsquo;s XML namespace.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do you have a much-loved CPAN module that you&amp;rsquo;d like us to cover? Drop us an &lt;a href=&#34;mailto:perltricks.com@gmail.com&#34;&gt;email&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/dullhunk/3948166814/in/photolist-71TorC-5RcLVC-5RcLk1-5R8vpe-5RcMC9-5R8w7D-5R8v7e-5RcM9Q-5RcLeL-5R8upk-5RcMso-5RcL7J-72QCEU-7KoKym-72QCsE-6FtTJ-6m6pyB-5AJCpY-6FvjN-6FuLy-6FtQL-6Fv4J-5BHeXd-6FuUe-6FtXH-6Fu9t-6FuAs-5AJCs3-5AJCsd-5AJCro-tS2dS-6kzkkD-6kDvjQ-6kDAtY-6kDvzS-6kD45L-6kzqYM-6kDvsE-6kDuys-6kDvcE-6m6prT-6kDupU-6kDuWw-6kDv6j-6kzkd2-6kDALo-5AJCsA-CJhVy-5AJCrN-5MzAkw&#34;&gt;Duncun Hull&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - April 2014</title>
      <link>http://perltricks.com/article/86/2014/5/1/What-s-new-on-CPAN---April-2014/</link>
      <pubDate>Thu, 01 May 2014 12:20:07 +0000</pubDate>
      
      <guid>http://perltricks.com/article/86/2014/5/1/What-s-new-on-CPAN---April-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. April was a mix but there were a few gems amongst the dust. Think &amp;ldquo;Atari landfill excavation&amp;rdquo; and enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:a1e18cc475b25ae187356826556ddec3&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Pinboard&#34;&gt;WWW::Pinboard&lt;/a&gt; is an API for pinboard.in&lt;/li&gt;
&lt;li&gt;Export your gmail rules into a procmail format with &lt;a href=&#34;https://metacpan.org/pod/Mail::Google::Procmailrc&#34;&gt;Mail::Google::Procmailrc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:a1e18cc475b25ae187356826556ddec3&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::pdf2json&#34;&gt;Alien::pdf2json&lt;/a&gt; installs pdf2json which can also convert PDFs to XML&lt;/li&gt;
&lt;li&gt;Keep two instances of Music Player Daemon in sync with &lt;a href=&#34;https://metacpan.org/pod/App::MPDSync&#34;&gt;App::MPDSync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Augment your code review process with &lt;a href=&#34;https://metacpan.org/pod/Git::Code::Review&#34;&gt;Git::Code::Review&lt;/a&gt; (tutorial &lt;a href=&#34;https://metacpan.org/pod/Git::Code::Review::Tutorial&#34;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Analyze the results of the du command with &lt;a href=&#34;https://metacpan.org/pod/distribution/App-Du-Analyze/bin/analyze-du&#34;&gt;App::Du::Analyze&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:a1e18cc475b25ae187356826556ddec3&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Generate fake data intended for a relational database with &lt;a href=&#34;https://metacpan.org/pod/Data::Generator::FromDDL&#34;&gt;Data::Generator::FromDDL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Automating your life with &lt;a href=&#34;https://metacpan.org/pod/Exobrain&#34;&gt;Exobrain&lt;/a&gt;? Now connect to more services with &lt;a href=&#34;https://metacpan.org/pod/Exobrain::Foursquare&#34;&gt;Exobrain::HabitRPG&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Exobrain::Foursquare&#34;&gt;Exobrain::Foursquare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Store your serealized Perl data structure with &lt;a href=&#34;https://metacpan.org/pod/SerealX::Store&#34;&gt;SerealX::Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Types::DateTime&#34;&gt;Types::DateTime&lt;/a&gt; provides a Moo/Moose compatible datetime type constraint&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:a1e18cc475b25ae187356826556ddec3&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create your own BackPAN index with the aptly named &lt;a href=&#34;https://metacpan.org/pod/BackPAN::Index::Create&#34;&gt;BackPAN::Index::Create&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckBin&#34;&gt;Dist::Zilla::Plugin::CheckBin&lt;/a&gt; will add a check to your distribution that a certain command is available&lt;/li&gt;
&lt;li&gt;Enfroce strict version numbers with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckStrictVersion&#34;&gt;Dist::Zilla::Plugin::CheckStrictVersion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::PAUSE::Permissions&#34;&gt;Dist::Zilla::Plugin::Test::PAUSE::Permissions&lt;/a&gt; will check your PAUSE permissions at dzil&amp;rsquo;s gather files stage&lt;/li&gt;
&lt;li&gt;Want dzil to add a date to your distro but not change the line numbers? &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::OurDate&#34;&gt;Dist::Zilla::Plugin::OurDate&lt;/a&gt; is your friend&lt;/li&gt;
&lt;li&gt;Export lexical variables in your packages with &lt;a href=&#34;https://metacpan.org/pod/Exporter::LexicalVars&#34;&gt;Exporter::LexicalVars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read and edit ELAN files with &lt;a href=&#34;https://metacpan.org/pod/File::ELAN&#34;&gt;File::ELAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Re-using the same modules over and over in your solution? &lt;a href=&#34;https://metacpan.org/pod/Import::Base&#34;&gt;Import::Base&lt;/a&gt; let&amp;rsquo;s you reduce your import boilerplate and declare a base set of modules&lt;/li&gt;
&lt;li&gt;Working with thousands of Perl objects and need an efficient implementation? Take a look at &lt;a href=&#34;https://metacpan.org/pod/Monjon&#34;&gt;Monjon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you get frustrated waiting for perldoc to load, you may have issues. Also, see &lt;a href=&#34;https://metacpan.org/pod/Pod::Perldoc::Cache&#34;&gt;Pod::Perldoc::Cache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:a1e18cc475b25ae187356826556ddec3&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This is an incredible module; just use &lt;a href=&#34;https://metacpan.org/pod/Acme::Futuristic::Perl&#34;&gt;Acme::Futuristic::Perl&lt;/a&gt; to get Perl 7 running on your machine!&lt;/li&gt;
&lt;li&gt;If having Perl 7 isn&amp;rsquo;t enough, perhaps you&amp;rsquo;d like sigil-less scalars? Try &lt;a href=&#34;https://metacpan.org/pod/bare&#34;&gt;bare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;maths-science-language:a1e18cc475b25ae187356826556ddec3&#34;&gt;Maths, Science &amp;amp; Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Is today a holiday? It might be in the Slovak Republic. Find out with Perl and &lt;a href=&#34;https://metacpan.org/pod/Date::Holidays::SK&#34;&gt;Date::Holidays::SK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Path::Hilbert&#34;&gt;Path::Hilbert&lt;/a&gt; converts between 1 dimensional and 2 dimensional spaces using the Hilbert curve algoritm&lt;/li&gt;
&lt;li&gt;Capitalize Portuguese text with &lt;a href=&#34;https://metacpan.org/pod/Lingua::PT::Capitalizer&#34;&gt;Lingua::PT::Capitalizer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:a1e18cc475b25ae187356826556ddec3&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::ModCluster&#34;&gt;Catalyst::Plugin::ModCluster&lt;/a&gt; will register your Catalyst application with an apache mod_cluster&lt;/li&gt;
&lt;li&gt;Authenticate your users with Google&amp;rsquo;s OAuth on Dancer using &lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Auth::Google&#34;&gt;Dancer::Plugin::Auth::Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tired of Template::Toolkit on Dancer2? Check out &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Template::TextTemplate&#34;&gt;Dancer2::Template::TextTemplate&lt;/a&gt; for a more Perlish templating option&lt;/li&gt;
&lt;li&gt;Connect Mojo::UserAgent to the Cloudflare API with &lt;a href=&#34;https://metacpan.org/pod/Mojo::Cloudflare&#34;&gt;Mojo::Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::YR&#34;&gt;Mojo::YR&lt;/a&gt; is an API for the NR.YO weather API&lt;/li&gt;
&lt;li&gt;Enable plaintext route definitions in Mojo with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::PlainRoutes&#34;&gt;Mojolicious::Plugin::PlainRoutes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F86%2F2014%2F5%2F1%2FWhat-s-new-on-CPAN-April-2014&amp;amp;text=What%27s+new+on+CPAN+-+April+2014&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F86%2F2014%2F5%2F1%2FWhat-s-new-on-CPAN-April-2014&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - March 2014</title>
      <link>http://perltricks.com/article/82/2014/4/4/What-s-new-on-CPAN---March-2014/</link>
      <pubDate>Fri, 04 Apr 2014 03:20:11 +0000</pubDate>
      
      <guid>http://perltricks.com/article/82/2014/4/4/What-s-new-on-CPAN---March-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo; - a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. March was a bumper month for CPAN uploads - a veritable treasure trove of new modules for you to try out. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:b2c3405a2232e44b77dfa468d7950720&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Taco&#34;&gt;Alien::Taco&lt;/a&gt; let&amp;rsquo;s you connect and interact with a Taco server&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/CPAN::Testers::WWW::Reports::Query::Report&#34;&gt;CPAN::Testers::WWW::Reports::Query::Report&lt;/a&gt; will fetch CPAN Testers reports - very cool. Long module name though, if that bothers you,have a look at &lt;a href=&#34;https://metacpan.org/pod/Package::Abbreviate&#34;&gt;Package::Abbreviate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Interact with the Yahoo! Query API using &lt;a href=&#34;https://metacpan.org/pod/Business::YQL&#34;&gt;Business::YQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The curiously named &lt;a href=&#34;https://metacpan.org/pod/Devel::Chitin&#34;&gt;Devel::Chitin&lt;/a&gt; provides an API to the Perl debugger&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Graylog::Client&#34;&gt;Net::Graylog::Client&lt;/a&gt; is a Perl client for the open source graylog2 analysis and log server&lt;/li&gt;
&lt;li&gt;Retrieve Google autosuggestions with &lt;a href=&#34;https://metacpan.org/pod/WWW::Google::AutoSuggest&#34;&gt;WWW::Google::AutoSuggest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:b2c3405a2232e44b77dfa468d7950720&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Quickly create command line apps with &lt;a href=&#34;https://metacpan.org/pod/App::Basis&#34;&gt;App::Basis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Cleo&#34;&gt;App::Cleo&lt;/a&gt; let&amp;rsquo;s you playback command line commands for slick live demos&lt;/li&gt;
&lt;li&gt;Create your own self signed SSL certificates with &lt;a href=&#34;https://metacpan.org/pod/App::CreateSelfSignedSSL&#34;&gt;App::CreateSelfSignedSSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::RecordStream::Bio&#34;&gt;App::RecordStream::Bio&lt;/a&gt; enables easy processing of biology records&lt;/li&gt;
&lt;li&gt;Swiftly build Debian packages from templates with &lt;a href=&#34;https://metacpan.org/pod/App::makedpkg&#34;&gt;App::makedpkg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:b2c3405a2232e44b77dfa468d7950720&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Looking for a mediocre caching module? Check out &lt;a href=&#34;https://metacpan.org/pod/Cache::Meh&#34;&gt;Cache::Meh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Looking for an efficient, mutable shared memory module? Have a look at &lt;a href=&#34;https://metacpan.org/pod/Hash::SharedMem&#34;&gt;Hash::SharedMem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Raw&#34;&gt;DBIx::Raw&lt;/a&gt; aims to let you have an ORM-style interface with lower-level SQL querying - very interesting&lt;/li&gt;
&lt;li&gt;Detect binary and string data using &lt;a href=&#34;https://metacpan.org/pod/Data::Binary&#34;&gt;Data::Binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Censor&#34;&gt;Data::Censor&lt;/a&gt; can help you conveniently censor data&lt;/li&gt;
&lt;li&gt;Dynamically generate permutations from nested data using &lt;a href=&#34;https://metacpan.org/pod/Data::Tumbler&#34;&gt;Data::Tumbler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckStrictVersion&#34;&gt;Dist::Zilla::Plugin::CheckStrictVersion&lt;/a&gt; will validate your distribution version number on release&lt;/li&gt;
&lt;li&gt;Auto-generate a DOAP file for your Perl distribution using &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::DOAP&#34;&gt;Dist::Zilla::Plugin::DOAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MySQL::Partition&#34;&gt;MySQL::Partition&lt;/a&gt; will create partitions using MySQL tables - interesting idea but author has labelled alpha so buyer beware&lt;/li&gt;
&lt;li&gt;Easily parse XML/HTML with a simple markup language using &lt;a href=&#34;https://metacpan.org/pod/XML::Dataset&#34;&gt;XML::Dataset&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:b2c3405a2232e44b77dfa468d7950720&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a dashboard of information about CPAN distributions with &lt;a href=&#34;https://metacpan.org/pod/CPAN::Dashboard&#34;&gt;CPAN::Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Devel::OverloadInfo&#34;&gt;Devel::OverloadInfo&lt;/a&gt; lets you introspect overloaded operators&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dispatch::Profile&#34;&gt;Dispatch::Profile&lt;/a&gt; is a simple messaging framework&lt;/li&gt;
&lt;li&gt;Auto-increment your module version after every release with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::BumpVersionAfterRelease&#34;&gt;Dist::Zilla::Plugin::BumpVersionAfterRelease&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add a keywords entry to your module POD with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Keywords&#34;&gt;Dist::Zilla::Plugin::Keywords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Module::Spy&#34;&gt;Module::Spy&lt;/a&gt; monitors classes and objects method calls&lt;/li&gt;
&lt;li&gt;Ban use of specific modules with &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic::Policy::logicLAB::ModuleBlacklist&#34;&gt;Perl::Critic::Policy::logicLAB::ModuleBlacklist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;text-languages:b2c3405a2232e44b77dfa468d7950720&#34;&gt;Text &amp;amp; Languages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Detect if text is Japanese or not with &lt;a href=&#34;https://metacpan.org/pod/AI::Classifier::Japanese&#34;&gt;AI::Classifier::Japanese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Convert::Number::Armenian&#34;&gt;Convert::Number::Armenian&lt;/a&gt; will convert numerals between Armenian and Western representations&lt;/li&gt;
&lt;li&gt;Working with anagrams? uoy hsuold oklo ta &lt;a href=&#34;https://metacpan.org/pod/Lingua::Anagrams&#34;&gt;Lingua::Anagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re working with Brazilian phone numbers, check out &lt;a href=&#34;https://metacpan.org/pod/Number::Phone::BR&#34;&gt;Number::Phone::BR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;maths-science:b2c3405a2232e44b77dfa468d7950720&#34;&gt;Maths &amp;amp; Science&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Analyse MaxQuant protein group response differentials data with &lt;a href=&#34;https://metacpan.org/pod/Bio::MaxQuant::ProteinGroups::Response&#34;&gt;Bio::MaxQuant::ProteinGroups::Response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DSP::LinPred_XS&#34;&gt;DSP::LinPred_XS&lt;/a&gt; is a lightning-fast XS implementation of the Least Mean Squared Algorithm&lt;/li&gt;
&lt;li&gt;Simply Grammar::Graph objects using the aptly-named &lt;a href=&#34;https://metacpan.org/pod/Grammar::Graph::Simplify&#34;&gt;Grammar::Graph::Simplify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Geometry::IntersectionArea&#34;&gt;Math::Geometry::IntersectionArea&lt;/a&gt; will calculate the intersecting area of two geometric shapes&lt;/li&gt;
&lt;li&gt;Conveniently manage the nginx FastCGI cache with &lt;a href=&#34;https://metacpan.org/pod/Nginx::FastCGI::Cache&#34;&gt;Nginx::FastCGI::Cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Set::Similarity&#34;&gt;Set::Similarity&lt;/a&gt; provides several methods for measuring the similarity of 2 sets&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing:b2c3405a2232e44b77dfa468d7950720&#34;&gt;Testing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Merge multiple streams of TAP with &lt;a href=&#34;https://metacpan.org/pod/TAP::Stream&#34;&gt;TAP::Stream&lt;/a&gt; - amazing&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::RemoteServer&#34;&gt;Test::RemoteServer&lt;/a&gt; bundles some convenient server testing methods&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:b2c3405a2232e44b77dfa468d7950720&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Store your Dancer2 sessions in middleware with &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Session::PSGI&#34;&gt;Dancer2::Session::PSGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::ConfigHashMerge&#34;&gt;Mojolicious::Plugin::ConfigHashMerge&lt;/a&gt; enables deeply nested hash config files&lt;/li&gt;
&lt;li&gt;View your app in a variety of screen sizes using &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Responsinator&#34;&gt;Mojolicious::Plugin::Responsinator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get an Apache-like scoreboard of your Mojolicious server with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::ServerStatus&#34;&gt;Mojolicious::Plugin::ServerStatus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize::PhantomJS&#34;&gt;WWW::Mechanize::PhantomJS&lt;/a&gt; provides a Mechanize-style object of the PhantomJS headless browser &amp;hellip; JavaScript enabled!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F82%2F2014%2F4%2F3%2FWhat-s-new-on-CPAN-March-2014&amp;amp;text=What%27s+new+on+CPAN+-+March+2014&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F82%2F2014%2F4%2F3%2FWhat-s-new-on-CPAN-March-2014&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2014</title>
      <link>http://perltricks.com/article/74/2014/3/3/What-s-new-on-CPAN---February-2014/</link>
      <pubDate>Mon, 03 Mar 2014 04:10:36 +0000</pubDate>
      
      <guid>http://perltricks.com/article/74/2014/3/3/What-s-new-on-CPAN---February-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo; - a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Interact with AWS Simple Queue Services using: &lt;a href=&#34;https://metacpan.org/pod/AWS::SQS::Simple&#34;&gt;AWS::SQS::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dokuwiki::RPC::XML::Client&#34;&gt;Dokuwiki::RPC::XML::Client&lt;/a&gt; is a client for DokuWiki&lt;/li&gt;
&lt;li&gt;Access the CampBX bitcoin trading platform using &lt;a href=&#34;https://metacpan.org/pod/Finance::CampBX&#34;&gt;Finance::CampBX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;InfluxDB is a time series database, &lt;a href=&#34;https://metacpan.org/pod/InfluxDB&#34;&gt;InfluxDB&lt;/a&gt; provides a Perl API.&lt;/li&gt;
&lt;li&gt;Sync files between machines using using BitTorrent Sync and &lt;a href=&#34;https://metacpan.org/pod/Net::BitTorrentSync&#34;&gt;Net::BitTorrentSync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::ImKayac::Simple&#34;&gt;WebService::ImKayac::Simple&lt;/a&gt; is a message sender for im.kayac, the notification service&lt;/li&gt;
&lt;li&gt;Manage workflow jobs using &lt;a href=&#34;https://metacpan.org/pod/CA::WAAE&#34;&gt;CA::WAAE&lt;/a&gt; - an interface for CA&amp;rsquo;s Workflow Automation product&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Buid static web sites with &lt;a href=&#34;https://metacpan.org/pod/App::Dapper&#34;&gt;App::Dapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prettify JSON, YAML and Perl data and translate into other languages with &lt;a href=&#34;https://metacpan.org/pod/distribution/App-pretty/bin/pretty&#34;&gt;pretty&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bots:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Bots&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fly the Parrot AR.Drone using &lt;a href=&#34;https://metacpan.org/pod/UAV::Pilot::ARDrone&#34;&gt;UAV::Pilot::ARDrone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Gnuplot::Builder&#34;&gt;Gnuplot::Builder&lt;/a&gt; is an OO library for the gnuplot&lt;/li&gt;
&lt;li&gt;Share data efficiently between processes using &lt;a href=&#34;https://metacpan.org/pod/Hash::SharedMem&#34;&gt;Hash::SharedMem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Image::Quantize&#34;&gt;Image::Quantize&lt;/a&gt; will quantize image data into 256 or fewer colours&lt;/li&gt;
&lt;li&gt;Build JSON under memory constraints with &lt;a href=&#34;https://metacpan.org/pod/JSON::Builder&#34;&gt;JSON::Builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generate random Japanese names using &lt;a href=&#34;https://metacpan.org/pod/Mock::Person::JP&#34;&gt;Mock::Person::JP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;p&gt;Find all CPAN modules that reference a particular CPAN module with &lt;a href=&#34;https://metacpan.org/pod/CPAN::ReverseDependencies&#34;&gt;CPAN::ReverseDependencies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/warnings::MaybeFatal&#34;&gt;warnings::MaybeFatal&lt;/a&gt; will turn warnings FATAL at compile time only&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/IPC::PrettyPipe&#34;&gt;IPC::PrettyPipe&lt;/a&gt; facilitates debugging and execution piped commands.&lt;/p&gt;

&lt;p&gt;A whole host of new Dist::Zilla validation plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check for plugins performing actions outside of the appropriate phase with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::VerifyPhases&#34;&gt;Dist::Zilla::Plugin::VerifyPhases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::DiagINC&#34;&gt;Dist::Zilla::Plugin::Test::DiagINC&lt;/a&gt; helps you find the @INC dependencies for a specific test failure&lt;/li&gt;
&lt;li&gt;Check for clean namespaces: &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::CleanNamespaces&#34;&gt;Dist::Zilla::Plugin::Test::CleanNamespaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Breaks&#34;&gt;Dist::Zilla::Plugin::Breaks&lt;/a&gt; tracks breaking module versions as metadata and &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::CheckBreaks&#34;&gt;Dist::Zilla::Plugin::Test::CheckBreaks&lt;/a&gt; tests for breaks&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Obfuscate text in the style of the Zalgo meme: &lt;a href=&#34;https://metacpan.org/pod/Acme::Zalgo&#34;&gt;Acme::Zalgo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/SudokuTrainer&#34;&gt;SudokuTrainer&lt;/a&gt; helps detect successful Sudoku strategies&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;maths-science:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Maths &amp;amp; Science&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AI::FANN::Evolving&#34;&gt;AI::FANN::Evolving&lt;/a&gt; is an evolving artificial neural implementation class for the Fast Artificial Neural Network library.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;security:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Security&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Curve25519&#34;&gt;Crypt::Curve25519&lt;/a&gt; will generate a shared secret using an elliptic-curve Diffie-Hellman function, for message encryption.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Lucifer&#34;&gt;Crypt::Lucifer&lt;/a&gt; is an implementation of IBM&amp;rsquo;s Lucifer block cipher from the 1970s.&lt;/li&gt;
&lt;li&gt;Enable ScryptKDF in DBIx::Class with &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::EncodedColumn::Crypt::Scrypt&#34;&gt;DBIx::Class::EncodedColumn::Crypt::Scrypt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Testing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Cucumber::Tiny&#34;&gt;Test::Cucumber::Tiny&lt;/a&gt; is a lightweight, plaintext-driven testing framework&lt;/li&gt;
&lt;li&gt;Conveniently manage the state of DBIx::Class test data with &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::EasyFixture&#34;&gt;DBIx::Class::EasyFixture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::DiagINC&#34;&gt;Test::DiagINC&lt;/a&gt; will list all (deep) dependencies on test failure&lt;/li&gt;
&lt;li&gt;Create a temporary instance of MongoDb for testing with &lt;a href=&#34;https://metacpan.org/pod/Test::mongod&#34;&gt;Test::mongod&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Web&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/HTTP::Entity::Parser&#34;&gt;HTTP::Entity::Parser&lt;/a&gt; is a PSGI compliant HTTP entity parser&lt;/p&gt;

&lt;p&gt;Add a timeout and retry feature to HTTP::Tiny using &lt;a href=&#34;https://metacpan.org/pod/HTTP::Retry&#34;&gt;HTTP::Retry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make Catalyst user notification handling easier with &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::SimpleMessage&#34;&gt;Catalyst::Plugin::SimpleMessage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Session::Store::CHI&#34;&gt;Catalyst::Plugin::Session::Store::CHI&lt;/a&gt; let&amp;rsquo;s you use the &lt;a href=&#34;https://metacpan.org/pod/CHI&#34;&gt;CHI&lt;/a&gt; module as the session store.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::LightProfile&#34;&gt;Plack::Middleware::LightProfile&lt;/a&gt; is a simple profiler for Plack applications.&lt;/p&gt;

&lt;p&gt;Dump the Apache server scoreboard when full with &lt;a href=&#34;https://metacpan.org/pod/Apache2::ScoreboardDumper&#34;&gt;Apache2::ScoreboardDumper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New Mojolicious modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::FriendFeed&#34;&gt;Mojo::FriendFeed&lt;/a&gt; is a non blocking FriendFeed listener&lt;/li&gt;
&lt;li&gt;Run a generic TCP server with &lt;a href=&#34;https://metacpan.org/pod/Mojo::Server::TCP&#34;&gt;Mojo::Server::TCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Defer template rendering with &lt;a href=&#34;https://metacpan.org/pod/MojoX::Renderer::IncludeLater&#34;&gt;MojoX::Renderer::IncludeLater&lt;/a&gt; a template post-processor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::VHost&#34;&gt;Mojolicious::Plugin::VHost&lt;/a&gt; adds virtual hosts to Mojolicious&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F74%2F2014%2F3%2F3%2FWhat-s-new-on-CPAN-February-2014&amp;amp;text=What%27s+new+on+CPAN+-+February+2014&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F74%2F2014%2F3%2F3%2FWhat-s-new-on-CPAN-February-2014&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

