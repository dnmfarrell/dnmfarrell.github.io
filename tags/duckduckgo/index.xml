<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Duckduckgo on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/duckduckgo/</link>
    <description>Recent content in Duckduckgo on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Apr 2015 12:33:17 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/duckduckgo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Writing DuckDuckGo instant answers is easy</title>
      <link>https://dnmfarrell.github.io/article/169/2015/4/20/Writing-DuckDuckGo-instant-answers-is-easy/</link>
      <pubDate>Mon, 20 Apr 2015 12:33:17 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/169/2015/4/20/Writing-DuckDuckGo-instant-answers-is-easy/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Editor note:&lt;/strong&gt; some of the information in this article is out of date, see our new DuckDuckGo &lt;a href=&#34;http://perltricks.com/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier&#34;&gt;article&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;A few weeks ago, I attended NYC &lt;a href=&#34;http://duckduckgo.ticketleap.com/quackhacknyc/&#34;&gt;Quack &amp;amp; Hack&lt;/a&gt;, and learned how to write DuckDuckGo instant answers. Instant answers are really cool: they are micro apps that trigger when a user searches for specific terms. For example if you search for &lt;a href=&#34;https://duckduckgo.com/?q=help+tmux&amp;amp;ia=answer&#34;&gt;help tmux&lt;/a&gt;, you&amp;rsquo;ll see a tmux cheatsheet displayed. This is a awesome - you can commit code that will go live on DuckDuckGo.com and the good news is that you don&amp;rsquo;t have to wait until the next Quack &amp;amp; Hack to learn how to write one yourself; DuckDuckGo provide great tools that make it easy.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-the-development-environment:5671e5b11157d2de7fcf618736bb0dd9&#34;&gt;Setting up the development environment&lt;/h3&gt;

&lt;p&gt;DuckDuckGo support several different types of instant answers, but today I&amp;rsquo;m going to focus on creating a cheatsheet, which is displayed by the search engine whenever a user searches for a matching set of keywords.&lt;/p&gt;

&lt;p&gt;To get going you&amp;rsquo;ll need Perl 5.18 or higher and have installed &lt;a href=&#34;https://metacpan.org/pod/App::duckpan&#34;&gt;App::DuckPAN&lt;/a&gt;, which you can do with &lt;code&gt;cpan&lt;/code&gt; or &lt;code&gt;cpanminus&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan App::DuckPAN
# or
$ cpanm App::DuckPAN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll also need a local copy of DuckDuckGo&amp;rsquo;s goodies instant answers repo &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies&#34;&gt;repo&lt;/a&gt;, which you can clone with Git:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ git clone https://github.com/duckduckgo/zeroclickinfo-goodies.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With both App::DuckPAN and the goodies repo installed, change into the zeroclickinfo-goodies repo, and launch the duckpan server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cd zeroclickinfo-goodies
$ duckpan server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you run &lt;code&gt;duckpan server&lt;/code&gt;, there will probably be a lot of output, but you should see this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Checking asset cache...
Starting up webserver...
You can stop the webserver with Ctrl-C
HTTP::Server::PSGI: Accepting connections at http://0:5000/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you open your browser and navigate to &lt;code&gt;http://localhost:5000&lt;/code&gt;, you&amp;rsquo;ll be greeted with the DuckDuckGo search page (try &lt;code&gt;http://0:5000&lt;/code&gt; if localhost doesn&amp;rsquo;t work). Search for &amp;ldquo;help tmux&amp;rdquo; and you should see the same instant answer cheatsheet appear as on the live &lt;a href=&#34;https://duckduckgo.com/?q=help+tmux&amp;amp;ia=answer&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;creating-the-instant-answer:5671e5b11157d2de7fcf618736bb0dd9&#34;&gt;Creating the instant answer&lt;/h3&gt;

&lt;p&gt;So now you&amp;rsquo;ve got the development environment setup, you&amp;rsquo;re ready to create an instant answer. I&amp;rsquo;m going to create an instant answer for &lt;code&gt;perldoc&lt;/code&gt; (taken from my perldoc &lt;a href=&#34;#&#34;&gt;article&lt;/a&gt;). I can get a headstart on this by creating the skeleton instant answer code with &lt;code&gt;duckpan new&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ duckpan new PerldocCheatSheet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates the basic files required for the instant answer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Created file: lib/DDG/Goodie/PerldocCheatSheet.pm
Created file: t/PerldocCheatSheet.t
Successfully created Goodie: PerldocCheatSheet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the logic for the instant answer is in &lt;code&gt;PerldocCheatSheet.pm&lt;/code&gt;, and &lt;code&gt;duckpan&lt;/code&gt; has already created a good skeleton:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package DDG::Goodie::PerldocCheatSheet;
# ABSTRACT: Write an abstract here
# Start at https://duck.co/duckduckhack/goodie_overview if you are new
# to instant answer development

use DDG::Goodie;

zci answer_type =&amp;gt; &amp;quot;perldoc_cheat_sheeet&amp;quot;;
zci is_cached   =&amp;gt; 1;

# Metadata.  See https://duck.co/duckduckhack/metadata for help in filling out this section.
name &amp;quot;PerldocCheatSheeet&amp;quot;;
description &amp;quot;Succinct explanation of what this instant answer does&amp;quot;;
primary_example_queries &amp;quot;first example query&amp;quot;, &amp;quot;second example query&amp;quot;;
secondary_example_queries &amp;quot;optional -- demonstrate any additional triggers&amp;quot;;
# Uncomment and complete: https://duck.co/duckduckhack/metadata#category
# category &amp;quot;&amp;quot;;
# Uncomment and complete: https://duck.co/duckduckhack/metadata#topics
# topics &amp;quot;&amp;quot;;
code_url &amp;quot;https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/lib/DDG/Goodie/PerldocCheatSheet.pm&amp;quot;;
attribution github =&amp;gt; [&amp;quot;GitHubAccount&amp;quot;, &amp;quot;Friendly Name&amp;quot;],
            twitter =&amp;gt; &amp;quot;twitterhandle&amp;quot;;

# Triggers
triggers any =&amp;gt; &amp;quot;triggerWord&amp;quot;, &amp;quot;trigger phrase&amp;quot;;

# Handle statement
handle remainder =&amp;gt; sub {

    # optional - regex guard
    # return unless qr/^\w+/;

    return unless $_; # Guard against &amp;quot;no answer&amp;quot;

    return $_;
};

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ll fill in the answers for the abstract, &lt;a href=&#34;https://duck.co/duckduckhack/metadata&#34;&gt;metadata&lt;/a&gt; and &lt;a href=&#34;https://duck.co/duckduckhack/goodie_triggers&#34;&gt;triggers&lt;/a&gt;, and the &lt;code&gt;handle&lt;/code&gt; subroutine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package DDG::Goodie::PerldocCheatSheet;
# ABSTRACT: A cheat sheet for perldoc, the Perl documentation program

use DDG::Goodie;

zci answer_type =&amp;gt; &amp;quot;perldoc_cheat_sheet&amp;quot;;
zci is_cached   =&amp;gt; 1;

# Metadata
name &amp;quot;PerldocCheatSheet&amp;quot;;
source &amp;quot;http://perltricks.com/article/155/2015/2/26/Hello-perldoc--productivity-booster&amp;quot;;
description &amp;quot;A cheat sheet for perldoc, the Perl documentation program&amp;quot;;
primary_example_queries &amp;quot;help perldoc&amp;quot;, &amp;quot;perldoc cheatsheet&amp;quot;, &amp;quot;perldoc commands&amp;quot;, &amp;quot;perldoc ref&amp;quot;;
category &amp;quot;programming&amp;quot;;
topics qw/computing geek programming sysadmin/;
code_url
  &amp;quot;https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/lib/DDG/Goodie/PerldocCheatSheet.pm&amp;quot;;
attribution github  =&amp;gt; [&amp;quot;dnmfarrell&amp;quot;, &amp;quot;David Farrell&amp;quot;],
            twitter =&amp;gt; &amp;quot;perltricks&amp;quot;,
            web     =&amp;gt; &#39;http://perltricks.com&#39;;

# Triggers
triggers startend =&amp;gt; (
        &amp;quot;perldoc&amp;quot;,
        &amp;quot;perldoc help&amp;quot;,
        &amp;quot;help perldoc&amp;quot;,
        &amp;quot;perldoc cheat sheet&amp;quot;,
        &amp;quot;perldoc cheatsheet&amp;quot;,
        &amp;quot;perldoc commands&amp;quot;,
        &amp;quot;perldoc ref&amp;quot;);

# Handle statement
my $HTML = share(&amp;quot;perldoc_cheat_sheet.html&amp;quot;)-&amp;gt;slurp(iomode =&amp;gt; &#39;&amp;lt;:encoding(UTF-8)&#39;);
my $TEXT= share(&amp;quot;perldoc_cheat_sheet.txt&amp;quot;)-&amp;gt;slurp(iomode =&amp;gt; &#39;&amp;lt;:encoding(UTF-8)&#39;);

handle remainder =&amp;gt; sub {
    return
        heading =&amp;gt; &#39;Perldoc Cheat Sheet&#39;,
        html    =&amp;gt; $HTML,
        answer  =&amp;gt; $TEXT,
};

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The handle subroutine will return a plain text and an HTML version of the cheat sheet to the user. The &lt;code&gt;share&lt;/code&gt; function loads static files from the &lt;code&gt;share/goodie/&lt;/code&gt; directory. These files should be created in the &lt;code&gt;share/goodie/perldoc_cheat_sheet/&lt;/code&gt; directory, and it is &lt;strong&gt;essential&lt;/strong&gt; that the filenames are lowercased versions of the instant answer name, separated by underscores. So &amp;ldquo;PerldocCheatSheet&amp;rdquo; becomes &amp;ldquo;perldoc_cheat_sheet&amp;rdquo;. You can view the files on &lt;a href=&#34;https://github.com/dnmfarrell/zeroclickinfo-goodies/tree/perldoc/share/goodie/perldoc_cheat_sheet&#34;&gt;GitHub&lt;/a&gt;. Note that the CSS file is not referenced directly by any code: it is automagically loaded by DuckDuckGo (this is why the directory and filename must be correct). I copied the CSS from the tmux &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies/tree/master/share/goodie/tmux_cheat_sheet&#34;&gt;example&lt;/a&gt;, it provides two columns of text that will display side-by-side or wrap to a single column if the screen width is too narrow.&lt;/p&gt;

&lt;h3 id=&#34;testing-the-instant-answer:5671e5b11157d2de7fcf618736bb0dd9&#34;&gt;Testing the instant answer&lt;/h3&gt;

&lt;p&gt;The quickest way to test that the instant answer is working, is with the &lt;code&gt;duckpan query&lt;/code&gt; command. I can run it in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ duckpan query
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This launches an interactive command line program. I can enter one of the triggers for my perldoc instant answer, and see if the server responds as expected:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Query: perldoc ref
  You entered: perldoc ref
---
DDG::ZeroClickInfo  {
    Parents       WWW::DuckDuckGo::ZeroClickInfo
    public methods (4) : DOES, has_structured_answer, new, structured_answer
    private methods (0)
    internals: {
        answer        &amp;quot;perldoc [option]

Module Options
--------------
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking good! (I&amp;rsquo;ve cut the output as it&amp;rsquo;s verbose). The next thing I can try is a browser test using &lt;code&gt;duckpan server&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ duckpan server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I point my browser at &lt;code&gt;http://localhost:5000&lt;/code&gt;, and enter a trigger query for the instant answer. That works as well. Finally, I need to complete a unit test script for the instant answer. I&amp;rsquo;ve already got a skeleton test script which was created by &lt;code&gt;duckpan new&lt;/code&gt; at the start:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl

use strict;
use warnings;
use Test::More;
use DDG::Test::Goodie;

zci answer_type =&amp;gt; &amp;quot;perldoc_cheat_sheet&amp;quot;;
zci is_cached   =&amp;gt; 1;

ddg_goodie_test(
    [qw( DDG::Goodie::PerldocCheatSheeet )],
    # At a minimum, be sure to include tests for all:
    # - primary_example_queries
    # - secondary_example_queries
    &#39;example query&#39; =&amp;gt; test_zci(&#39;query&#39;),
    # Try to include some examples of queries on which it might
    # appear that your answer will trigger, but does not.
    &#39;bad example query&#39; =&amp;gt; undef,
);

done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ll update the test file, and add some comments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl

use strict;
use warnings;
use Test::More;
use DDG::Test::Goodie;

zci answer_type =&amp;gt; &amp;quot;perldoc_cheat_sheet&amp;quot;;
zci is_cached   =&amp;gt; 1;

# all responses for this goodie are the same
my @test_zci = (
  # regex for the plain text response
  qr/^perldoc \[option\].*Module Options.*Search Options.*Common Options.*Help.*$/s,
  # check the heading
  heading =&amp;gt; &#39;Perldoc Cheat Sheet&#39;,
  # check the html pattern
  html    =&amp;gt; qr#$#s,
);  

ddg_goodie_test(
    # name of goodie to test
    [&#39;DDG::Goodie::PerldocCheatSheet&#39;],

    # At a minimum, be sure to include tests for all:
    # - primary_example_queries
    # - secondary_example_queries
    &#39;help perldoc&#39;        =&amp;gt; test_zci(@test_zci),
    &#39;help perldoc&#39;        =&amp;gt; test_zci(@test_zci),
    &amp;quot;perldoc&amp;quot;             =&amp;gt; test_zci(@test_zci),
    &amp;quot;perldoc help&amp;quot;        =&amp;gt; test_zci(@test_zci),
    &amp;quot;help perldoc&amp;quot;        =&amp;gt; test_zci(@test_zci),
    &amp;quot;perldoc cheat sheet&amp;quot; =&amp;gt; test_zci(@test_zci),
    &amp;quot;perldoc cheatsheet&amp;quot;  =&amp;gt; test_zci(@test_zci),
    &amp;quot;perldoc commands&amp;quot;    =&amp;gt; test_zci(@test_zci),

    # Try to include some examples of queries on which it might
    # appear that your answer will trigger, but does not.
    &#39;perl doc help&#39;     =&amp;gt; undef,
    &#39;perl documentaton&#39; =&amp;gt; undef,
    &#39;perl faq&#39;          =&amp;gt; undef,
    &#39;perl help&#39;         =&amp;gt; undef,
);

done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of this is easy to follow; but there are a few gotchas; &lt;code&gt;@test_zci&lt;/code&gt; is a variable that stores the expected output from a successful trigger of the instant answer. It&amp;rsquo;s a bit of a hack: its passed to the &lt;code&gt;test_zci()&lt;/code&gt; function which expects a scalar which matches the plain text response, followed by 2 key/pairs, one for the heading and one for the HTML response (see the &lt;a href=&#34;https://duck.co/duckduckhack/test_files&#34;&gt;docs&lt;/a&gt; for more detail). I can run this script at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ prove -I t/PerldocCheatSheet.t
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;t/PerldocCheatSheet.t .. ok    
All tests successful.
Files=1, Tests=12,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.17 cusr  0.01 csys =  0.20 CPU)
Result: PASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the tests pass, so I&amp;rsquo;m ready to issue a pull request to the DuckDuckGo community!&lt;/p&gt;

&lt;h3 id=&#34;where-to-go-for-help:5671e5b11157d2de7fcf618736bb0dd9&#34;&gt;Where to go for help&lt;/h3&gt;

&lt;p&gt;Whilst the DuckDuckGo tools are great, there is also good &lt;a href=&#34;http://duckduckhack.com/&#34;&gt;documentation&lt;/a&gt; available and a friendly community supporting development when you need it. I spent some time on the Gitter &lt;a href=&#34;https://gitter.im/duckduckgo/zeroclickinfo-goodies?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;chatroom&lt;/a&gt; for the instant answers repo, and the people there were friendly and responsive (and more importantly, they have commit bits :).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3 Awesome Perl Events in NYC this Spring/Summer</title>
      <link>https://dnmfarrell.github.io/article/166/2015/3/31/3-Awesome-Perl-Events-in-NYC-this-Spring-Summer/</link>
      <pubDate>Tue, 31 Mar 2015 13:25:56 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/166/2015/3/31/3-Awesome-Perl-Events-in-NYC-this-Spring-Summer/</guid>
      <description>

&lt;p&gt;Something great is happening in NYC; there are 3 special Perl events happening in the next 3 months!&lt;/p&gt;

&lt;h3 id=&#34;quack-hack-nyc-april-4-sup-th-sup:cdae2c53f83b5213c5cd28d928e6c370&#34;&gt;Quack &amp;amp; Hack NYC, April 4&lt;sup&gt;th&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo&lt;/a&gt; are a privacy-focused search engine with a large Perl codebase and they&amp;rsquo;re hosting the first ever &lt;a href=&#34;http://duckduckgo.ticketleap.com/quackhacknyc/details&#34;&gt;NYC Quack &amp;amp; Hack&lt;/a&gt; at &lt;a href=&#34;https://www.google.com/maps/place/500+7th+Ave,+New+York,+NY+10018/@40.7531589,-73.9893598,17z/data=!3m1!4b1!4m2!3m1!1s0x89c259ac7b941903:0xcb0a4d6a0e42963e?hl=en&#34;&gt;AlleyNYC&lt;/a&gt;. The focus of the event is creating cheatsheets to support DuckDuckGo help, which seems like a great way to encourage first-time contributors. With free food, drinks and merchandise, and an opportunity to meet new people, this looks like a lot of fun.&lt;/p&gt;

&lt;h3 id=&#34;nyc-perl-hackathon-may-2-sup-nd-sup:cdae2c53f83b5213c5cd28d928e6c370&#34;&gt;NYC Perl Hackathon, May 2&lt;sup&gt;nd&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/nyperlmongers/nyperlhackathon2015/wiki&#34;&gt;NYC Perl Hackathon&lt;/a&gt; is back! It&amp;rsquo;s a day-long hackathon, hosted at &lt;a href=&#34;https://www.google.com/maps/search/Bloomberg+Tower+731+Lexington+Ave+New+York,+NY+10022/@40.7615894,-73.9676297,17z/data=!3m1!4b1?hl=en&#34;&gt;Bloomberg&lt;/a&gt;. The organizers have produced some useful guides on how to &lt;a href=&#34;https://github.com/nyperlmongers/nyperlhackathon2015/wiki/Getting-Ready-for-the-Hackathon&#34;&gt;prepare&lt;/a&gt; and what &lt;a href=&#34;https://github.com/nyperlmongers/nyperlhackathon2015/wiki/Projects&#34;&gt;projects&lt;/a&gt; are available to hack on. Details can also be found on the New York Perl Mongers&amp;rsquo; &lt;a href=&#34;http://www.meetup.com/The-New-York-Perl-Meetup-Group/events/221319780/&#34;&gt;meetup&lt;/a&gt; page. The hackathon also have several sponsorship &lt;a href=&#34;https://github.com/nyperlmongers/nyperlhackathon2015/wiki/Sponsorship-Opportunities&#34;&gt;options&lt;/a&gt; for organizations looking to support Perl and promote their brand.&lt;/p&gt;

&lt;h3 id=&#34;mojoconf-june-4-sup-th-sup-6-sup-th-sup:cdae2c53f83b5213c5cd28d928e6c370&#34;&gt;Mojoconf, June 4&lt;sup&gt;th&lt;/sup&gt;-6&lt;sup&gt;th&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.mojoconf.com/2015&#34;&gt;Mojoconf&lt;/a&gt; is a conference about &lt;a href=&#34;http://mojolicio.us/&#34;&gt;Mojolicious&lt;/a&gt;, the real-time web framework. Mojoconf consists of a day of training, a day of talks and a hackathon day. Almost the entire Mojo core dev &lt;a href=&#34;http://mojolicio.us/perldoc/Mojolicious#CORE-DEVELOPERS&#34;&gt;team&lt;/a&gt; will be there, including project founder Sebastian Riedel and Glen Hinkle, author of those wonderful &lt;a href=&#34;http://mojocasts.com/e1&#34;&gt;videos&lt;/a&gt;. You can still get an early-bird &lt;a href=&#34;https://www.mojoconf.com/2015/register&#34;&gt;discount&lt;/a&gt; for the talks and hackathon until April 10&lt;sup&gt;th&lt;/sup&gt;, so grab your ticket now!&lt;/p&gt;

&lt;h3 id=&#34;other-stuff:cdae2c53f83b5213c5cd28d928e6c370&#34;&gt;Other stuff&lt;/h3&gt;

&lt;p&gt;Not far from NYC, the &lt;a href=&#34;http://dcbpw.org/dcbpw2015/&#34;&gt;DC-Baltimore Perl workshop&lt;/a&gt; is running April 11&lt;sup&gt;th&lt;/sup&gt;-12&lt;sup&gt;th&lt;/sup&gt;, with a day of talks followed by a hackathon. For other events, a good list of global Perl events can be found on &lt;a href=&#34;http://perlweekly.com/events.html&#34;&gt;Perl Weekly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to all 3 New York events, and looking forward to seeing everyone there. So come over and say hi! if you see me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN July 2014</title>
      <link>https://dnmfarrell.github.io/article/106/2014/8/1/What-s-new-on-CPAN-July-2014/</link>
      <pubDate>Fri, 01 Aug 2014 12:38:59 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/106/2014/8/1/What-s-new-on-CPAN-July-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:9cb6897c30761fc646fee7a543d84699&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AntTweakBar&#34;&gt;AntTweakBar&lt;/a&gt; provides Perl bindings for the GUI library&lt;/li&gt;
&lt;li&gt;Use PayPoint&amp;rsquo;s merchant engine with &lt;a href=&#34;https://metacpan.org/pod/Business::PayPoint::MCPE&#34;&gt;Business::PayPoint::MCPE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::PCDuino&#34;&gt;Device::PCDuino&lt;/a&gt; is a hardware interface for the pcDuino, by Timm Murray author of UAV::Pilot&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HBase::JSONRest&#34;&gt;HBase::JSONRest&lt;/a&gt; is a RESTful interface to Apache HBase&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Amazon::Utils&#34;&gt;Net::Amazon::Utils&lt;/a&gt; provides helper utils for AWS&lt;/li&gt;
&lt;li&gt;Access Desk.com&amp;rsquo;s API with &lt;a href=&#34;https://metacpan.org/pod/WWW::Desk&#34;&gt;WWW::Desk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:9cb6897c30761fc646fee7a543d84699&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Test GnuPG email sign/encrypt with &lt;a href=&#34;https://metacpan.org/pod/App::Eduard&#34;&gt;App::Eduard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::plackbench&#34;&gt;App::plackbench&lt;/a&gt; is a benchmarking tool for Plack applications&lt;/li&gt;
&lt;li&gt;Ensure that you only run a command once with &lt;a href=&#34;https://metacpan.org/pod/App::single&#34;&gt;App::single&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:9cb6897c30761fc646fee7a543d84699&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::Lite&#34;&gt;Bio::Lite&lt;/a&gt; is a lightweight implementation of useful bio Perl functions&lt;/li&gt;
&lt;li&gt;Convert email addresses into the DNS rname format and vice versa using &lt;a href=&#34;https://metacpan.org/pod/DNS::RName::Converter&#34;&gt;DNS::RName::Converter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Hash::Ordered&#34;&gt;Hash::Ordered&lt;/a&gt; provides a simple implementation of an ordered hash with robust performance. Author David Golden &lt;a href=&#34;https://www.youtube.com/watch?v=p4U6FWyRBoQ&amp;amp;feature=youtu.be&#34;&gt;presented&lt;/a&gt; the module and comparison benchmarks recently at NY.pm (&lt;a href=&#34;http://www.dagolden.com/wp-content/uploads/2009/04/Adventures-in-Optimization-NYpm-July-2014.pdf&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Generate sets of English names with &lt;a href=&#34;https://metacpan.org/pod/Mock::Person::EN&#34;&gt;Mock::Person::EN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pod::Markdown::Github&#34;&gt;Pod::Markdown::Github&lt;/a&gt; converts POD to Github-sepcific markdown&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:9cb6897c30761fc646fee7a543d84699&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Benchmark::Report::GitHub&#34;&gt;Benchmark::Report::GitHub&lt;/a&gt; generates benchmark reports from Travis-CI and publishes them on GitHub wiki&lt;/li&gt;
&lt;li&gt;Augment your DBIx::Class schema objects with additional logic using &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Wrapper&#34;&gt;DBIx::Class::Wrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Git::Contributors&#34;&gt;Dist::Zilla::Plugin::Git::Contributors&lt;/a&gt; pulls all of the author names from your Git commit history and adds them to your module&amp;rsquo;s metadata&lt;/li&gt;
&lt;li&gt;Looking for a drop-in replacement for Getop::Long with tab completion? Check out &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long::Complete&#34;&gt;Getopt::Long::Complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JCONF is a JSON format optimized for configuration files. &lt;a href=&#34;https://metacpan.org/pod/JCONF::Writer&#34;&gt;JCONF::Writer&lt;/a&gt; produces JCONF files from Perl data structures&lt;/li&gt;
&lt;li&gt;Enable OAuth2 support in command line applications with &lt;a href=&#34;https://metacpan.org/pod/OAuth::Cmdline&#34;&gt;OAuth::Cmdline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pegex::Forth&#34;&gt;Pegex::Forth&lt;/a&gt; is a Forth parser and interpreter built on Pegex&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Refine&#34;&gt;Refine&lt;/a&gt; is a clever module that let&amp;rsquo;s you add methods to objects (not classes) at runtime&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://metacpan.org/pod/Type::Tiny::XS&#34;&gt;Type::Tiny::XS&lt;/a&gt; for an even faster Type::Tiny&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:9cb6897c30761fc646fee7a543d84699&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Map::Tube::London&#34;&gt;Map::Tube::London&lt;/a&gt; will tell you the shortest route between two stations on the London Underground&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Pangram&#34;&gt;Text::Pangram&lt;/a&gt; identifies strings which are pangrams&lt;/li&gt;
&lt;li&gt;Access your Zombies Run! stats using &lt;a href=&#34;https://metacpan.org/pod/WebService::ZombiesRun&#34;&gt;WebService::ZombiesRun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mojolicious:9cb6897c30761fc646fee7a543d84699&#34;&gt;Mojolicious&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::UserAgent::UnixSocket&#34;&gt;Mojo::UserAgent::UnixSocket&lt;/a&gt; enables Mojo::UserAgent to interact with sockets&lt;/li&gt;
&lt;li&gt;Use HTML::Template::Pro templates in your application with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::HTMLTemplateProRenderer&#34;&gt;Mojolicious::Plugin::HTMLTemplateProRenderer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support RESTful operations with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::REST&#34;&gt;Mojolicious::Plugin::REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Log webpage user events with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Surveil&#34;&gt;Mojolicious::Plugin::Surveil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing:9cb6897c30761fc646fee7a543d84699&#34;&gt;Testing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Subtests&#34;&gt;Test::Subtests&lt;/a&gt; is interesting: it wraps Test::More tests into subtests and can allow some of them to fail&lt;/li&gt;
&lt;li&gt;Write RSpec - like tests for Rex with &lt;a href=&#34;https://metacpan.org/pod/Rex::Test::Spec&#34;&gt;Rex::Test::Spec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Deep::DateTime::RFC3339&#34;&gt;Test::Deep::DateTime::RFC3339&lt;/a&gt; tests that RFC3339 timestamps are within a certain tolerance&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Docker::MySQL&#34;&gt;Test::Docker::MySQL&lt;/a&gt; launches MySQL docker containers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:9cb6897c30761fc646fee7a543d84699&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Reuse your Kelp routes with &lt;a href=&#34;https://metacpan.org/pod/KelpX::AppBuilder&#34;&gt;KelpX::AppBuilder&lt;/a&gt; (Kelp is a Plack based web micro-framework)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::App::CGIBin::Streaming&#34;&gt;Plack::App::CGIBin::Streaming&lt;/a&gt; enables CGI applcaitions to use the Palck streaming protocol&lt;/li&gt;
&lt;li&gt;Tie variables to DuckDuckGo search using &lt;a href=&#34;https://metacpan.org/pod/Tie::DuckDuckGo&#34;&gt;Tie::DuckDuckGo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

