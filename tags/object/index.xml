<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Object on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/object/</link>
    <description>Recent content in Object on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Oct 2014 13:16:03 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/object/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to test Perl roles without creating test classes</title>
      <link>https://dnmfarrell.github.io/article/120/2014/10/16/How-to-test-Perl-roles-without-creating-test-classes/</link>
      <pubDate>Thu, 16 Oct 2014 13:16:03 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/120/2014/10/16/How-to-test-Perl-roles-without-creating-test-classes/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve been working on a &lt;a href=&#34;https://github.com/sillymoose/March&#34;&gt;game engine&lt;/a&gt; which uses a composition pattern for its actors. I&amp;rsquo;m using &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;Role::Tiny&lt;/a&gt; to create the roles. Role::Tiny is really convenient as it lets you use roles with native OO Perl, without committing to a whole object system like Moose. A typical role looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package March::Attribute::Id;
use 5.020;
use Role::Tiny;
use feature &#39;signatures&#39;;
no warnings &#39;experimental&#39;;

sub id ($self)
{
    $self-&amp;gt;{id};
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All this role does is return the id attribute of the consuming class (yes I&amp;rsquo;m using &lt;a href=&#34;http://perltricks.com/article/72/2014/2/24/Perl-levels-up-with-native-subroutine-signatures&#34;&gt;signatures&lt;/a&gt; throughout). I wanted to write unit tests for this role, but I didn&amp;rsquo;t want to a create test class to test the role. So how do you construct an object from a package that has no constructor? The answer is by using &lt;code&gt;bless&lt;/code&gt; in your test file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use Test::More;

my $self = bless { id =&amp;gt; 5 }, &#39;March::Attribute::Id&#39;;

BEGIN { use_ok &#39;March::Attribute::Id&#39; }

is $self-&amp;gt;id, 5, &#39;id()&#39;;

done_testing();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code creates an object called &lt;code&gt;$self&lt;/code&gt; by blessing a hashref with the package name of the role that I want to test. It adds a key value pair for the id attribute, and then tests that the role&amp;rsquo;s id method returns the correct id value. I can execute the tests using &lt;code&gt;prove&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ prove -vl t/Attribute/Id.t 
t/Attribute/Id.t .. 
ok 1 - use March::Attribute::Id;
ok 2 - id()
1..2
ok
All tests successful.
Files=1, Tests=2,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.02 cusr  0.00 csys =  0.04 CPU)
Result: PASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is another role I want to test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package March::Attribute::Direction;
use 5.020;
use Role::Tiny;
use feature &#39;signatures&#39;;
no warnings &#39;experimental&#39;;
use March::Game;
use March::Msg;

requires &#39;id&#39;;

sub direction ($self, $new_direction = 0)
{
    if ($new_direction &amp;amp;&amp;amp; $new_direction-&amp;gt;isa(&#39;Math::Shape::Vector&#39;))
    {
        $self-&amp;gt;{direction} = $new_direction;

        # publish direction to game queue
        March::Game-&amp;gt;publish(
            March::Msg-&amp;gt;new(__PACKAGE__, $self-&amp;gt;id, $new_direction)
        );
    }
    $self-&amp;gt;{direction};
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This role gets and sets the direction vector for the consuming class. The challenge with testing this role is that it requires the consuming class to implement an &lt;code&gt;id&lt;/code&gt; method. Role::Tiny&amp;rsquo;s &lt;code&gt;requires&lt;/code&gt; function is a great way to ensure that the consuming class meets the requirements of the role. But how do we test it without creating a real class with an &lt;code&gt;id&lt;/code&gt; sub? What I do is declare the required sub in the test file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use Test::More;
use Math::Shape::Vector;

# create an object
my $self = bless { direction =&amp;gt; Math::Shape::Vector-&amp;gt;new(1, 2) 
                  }, &#39;March::Attribute::Direction&#39;;

# add required sub
sub March::Attribute::Direction::id { 107 };

BEGIN { use_ok &#39;March::Attribute::Direction&#39; }

is $self-&amp;gt;direction-&amp;gt;{x}, 1, &#39;Check direction x is 1&#39;;
is $self-&amp;gt;direction-&amp;gt;{y}, 2, &#39;Check direction y is 2&#39;;
ok $self-&amp;gt;direction( Math::Shape::Vector-&amp;gt;new(1, 0) ),
    &#39;Update direction to new vector&#39;;
is $self-&amp;gt;direction-&amp;gt;{x}, 1, &#39;Check direction x is still 1&#39;;
is $self-&amp;gt;direction-&amp;gt;{y}, 0, &#39;Check direction y is now 0&#39;;

done_testing();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The magic line is &lt;code&gt;sub March::Attribute::Direction::id { 107 };&lt;/code&gt; which adds the sub to the role I&amp;rsquo;m testing (it just returns the value 107). Now I can test the &lt;code&gt;direction&lt;/code&gt; method, again using &lt;code&gt;prove&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ prove -lv t/Attribute/Direction.t 
t/Attribute/Direction.t .. 
ok 1 - use March::Attribute::Direction;
ok 2 - Check direction
ok 3 - Check direction
ok 4 - Update direction to new vector
ok 5 - Check direction
ok 6 - Check direction
1..6
ok
All tests successful.
Files=1, Tests=6,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.08 cusr  0.00 csys =  0.10 CPU)
Result: PASS
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;it-s-not-all-gravy:b7f53836af028eb45de42bcacd025737&#34;&gt;It&amp;rsquo;s not all gravy&lt;/h3&gt;

&lt;p&gt;One drawback I&amp;rsquo;ve encountered with this approach can be seen with the following role and test file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Data::Inspector;
use Role::Tiny;

sub inspect_data
{
    my ($self, $data);
    Data::Dumper-&amp;gt;Dump([&#39;Inspecting:&#39;, $data]);
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This role has a method called &lt;code&gt;inspect_data&lt;/code&gt; which simply returns a dump of any data reference pass to it. This is the test file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Test::More;
use Data::Dumper;

my $self = bless {}, &#39;Data::Inspector&#39;;

BEGIN { use_ok &#39;Data::Inspector&#39; } 

ok $self-&amp;gt;inspect_data({ test =&amp;gt; &#39;data&#39; });

done_testing();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As before I bless the role in the test file and then proceed to test the &lt;code&gt;inspect_data&lt;/code&gt; method. This test file runs and all the tests pass. Can you spot this issue here? Notice that the Data::Inspector role uses &lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&amp;rsquo;s&lt;/a&gt; &lt;code&gt;Dump&lt;/code&gt; method, but it doesn&amp;rsquo;t load the Data::Dumper module, the test file does! This is a problem as when the Data::Inspector role is used elsewhere in real code, it will crash and burn when it doesn&amp;rsquo;t find Data::Dumper loaded in memory.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:b7f53836af028eb45de42bcacd025737&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;With this project I intend to create a lot of simple roles, so this approach provides a lightweight way for me to test roles within the test file without creating test classes for every role.&lt;/p&gt;

&lt;p&gt;I really like &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;Role::Tiny&lt;/a&gt;. It&amp;rsquo;s flexible: you can create minimalist trait-like behavior or go further and create mixins (roles which modify state). It has nice features like auto-enabling strict and warnings, method modifiers and good &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;documentation&lt;/a&gt;. &lt;a href=&#34;https://metacpan.org/pod/Role::Basic&#34;&gt;Role::Basic&lt;/a&gt; is another lightweight roles module that supports traits only (by &lt;a href=&#34;https://metacpan.org/pod/Role::Basic#DESIGN-GOALS-AND-LIMITATIONS&#34;&gt;design&lt;/a&gt;). I wonder if I&amp;rsquo;ll come to regret using a mixin approach as I get further into development of the game engine.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Implementing the singleton pattern in Perl</title>
      <link>https://dnmfarrell.github.io/article/52/2013/12/11/Implementing-the-singleton-pattern-in-Perl/</link>
      <pubDate>Wed, 11 Dec 2013 04:33:35 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/52/2013/12/11/Implementing-the-singleton-pattern-in-Perl/</guid>
      <description>

&lt;p&gt;&lt;em&gt;The Singleton is a well-known object oriented design pattern that allows only one object of a class to be created. It&amp;rsquo;s often cited as the most popular design pattern from the original &amp;ldquo;gang of four&amp;rdquo; book. But when should you use it in Perl and how?&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;when-to-use-it:0167b5bd23ddde1acd6ae736ea130c72&#34;&gt;When to use it&lt;/h3&gt;

&lt;p&gt;The Singleton is such a popular pattern it is sometimes called an anti-pattern as the legitimate cases to use it are relatively rare. Consider using the Singleton when one of the following needs arises:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have a single resource that needs to be reused across several different parts of a system. A logger is a good example of this (&lt;a href=&#34;https://metacpan.org/pod/Log::Log4perl&#34;&gt;Log::log4perl&lt;/a&gt; implements the Singleton pattern).&lt;/li&gt;
&lt;li&gt;You need to ensure only one instance exists as the class cannot perform correctly if there is more than one instance of it (e.g. a file system, a game loop).&lt;/li&gt;
&lt;li&gt;You need a singleton as a component of another design pattern (Abstract Factory, Builder, Prototype)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you do not have one of the above needs, you may not need to use the Singleton pattern. Using Singletons encourages the coupling of code, which can make unit testing, sub-classing and debugging harder.&lt;/p&gt;

&lt;h3 id=&#34;implementation-of-a-singleton-class:0167b5bd23ddde1acd6ae736ea130c72&#34;&gt;Implementation of a Singleton Class&lt;/h3&gt;

&lt;p&gt;Instead of implementing a &amp;ldquo;new&amp;rdquo; constructor, the Singleton class implements an &amp;ldquo;get_instance&amp;rdquo; method which will return a new object if it doesn&amp;rsquo;t already exist, else it returns the existing instance. The Singleton class is shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Singleton;

my $instance = undef;

sub get_instance {
    $instance = bless {}, shift unless $instance;
    return $instance;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test the Singleton get_instance method we can run the following script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use Singleton; 

my $singleton_1 = Singleton-&amp;gt;get_instance;
$singleton_1-&amp;gt;{favourite_animal} = &#39;llama&#39;; # of course!

my $singleton_2 = Singleton-&amp;gt;get_instance;

print $singleton_2-&amp;gt;{favourite_animal} . &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script constructs a new object using &amp;ldquo;get_instance&amp;rdquo; and assigns it to a variable called &amp;ldquo;$singleton_1&amp;rdquo;. It adds an attribute to the object (&amp;ldquo;favourite_animal&amp;rdquo;). The script then calls the &amp;ldquo;get_instance&amp;rdquo; method again and assigns the resulting object to a new variable called &amp;ldquo;$singleton_2&amp;rdquo;. Printing the &amp;ldquo;favourite_animal&amp;rdquo; key-value attribute of the object returns the same value that was set using &amp;ldquo;$singleton_1&amp;rdquo;, proving that we have one underlying instance and both variables (&amp;ldquo;$singleton_1&amp;rdquo; and &amp;ldquo;$singleton_2&amp;rdquo;) point to it.&lt;/p&gt;

&lt;h3 id=&#34;further-reading:0167b5bd23ddde1acd6ae736ea130c72&#34;&gt;Further reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;brian d foy&amp;rsquo;s &lt;a href=&#34;http://www.theperlreview.com/Articles/v0i1/singletons.pdf&#34;&gt;Perl Review article&lt;/a&gt; on the Singleton pattern is a more in-depth consideration of the Singleton pattern in Perl.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Singleton_pattern&#34;&gt;Wikpedia&amp;rsquo;s Singleton entry&lt;/a&gt; has useful background and discussion on the pattern.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/B000SEIBB8/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B000SEIBB8&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt; - The classic &amp;ldquo;gang of four&amp;rdquo; book that popularized the concept of Design Patterns, including the Singleton (affiliate link).&lt;/li&gt;
&lt;li&gt;The Perl Design Patterns site has a &lt;a href=&#34;http://perldesignpatterns.com/?SingletonPattern&#34;&gt;Singleton entry&lt;/a&gt;, with alternative implementations.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Add Moose-style attribute accessors to your Perl classes</title>
      <link>https://dnmfarrell.github.io/article/49/2013/11/25/Add-Moose-style-attribute-accessors-to-your-Perl-classes/</link>
      <pubDate>Mon, 25 Nov 2013 03:28:00 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/49/2013/11/25/Add-Moose-style-attribute-accessors-to-your-Perl-classes/</guid>
      <description>

&lt;p&gt;*Let&amp;rsquo;s face it, writing attribute accessors for out-of-the-box Perl classes is repetitive and not much fun. Of course you could use &lt;a href=&#34;https://metacpan.org/pod/Moose&#34;&gt;Moose&lt;/a&gt; or even &lt;a href=&#34;https://metacpan.org/pod/Class::Accessor&#34;&gt;Class::Accessor&lt;/a&gt; to ease the burden but sometimes you want to roll your own solution, &lt;em&gt;sans&lt;/em&gt; dependencies.*&lt;/p&gt;

&lt;h3 id=&#34;a-typical-class:cb4e7ecf133cb0c0eb41f1244b5516b6&#34;&gt;A typical class&lt;/h3&gt;

&lt;p&gt;The Point class below has two attributes (x, y) and get/set methods for each attribute written in the vanilla Perl object oriented style.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Point;

sub new {
    my ($class, $x, $y) = @_;
    my $self = {
        x =&amp;gt; $x,
        y =&amp;gt; $y,
    };
    return bless $self, $class;
}

sub get_x {
    return $_[0]-&amp;gt;{x};
}

sub set_x {
    return $_[0]-&amp;gt;{x} = $_[1];
}

sub get_y {
    return $_[0]-&amp;gt;{y};
}

sub set_y {
    return $_[0]-&amp;gt;{y} = $_[1];
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-alternative:cb4e7ecf133cb0c0eb41f1244b5516b6&#34;&gt;The alternative&lt;/h3&gt;

&lt;p&gt;Last week Rob Hoelz wrote a &lt;a href=&#34;http://hoelz.ro/blog/oh-my-glob&#34;&gt;fascinating post&lt;/a&gt; on Perl typeglobs, and we can use the a typeglob to help with our Point class attribute accessors. This is the updated class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Point;

my @attributes;
BEGIN {
    @attributes = qw/x y/;
    no strict &#39;refs&#39;;
    for my $accessor ( @attributes ) {
        *{$accessor} = sub {
            @_ &amp;gt; 1 ? $_[0]-&amp;gt;{$accessor} = $_[1] : $_[0]-&amp;gt;{$accessor} };
    }
}

sub new {
    my ($class, $args) = @_;
    my $self = bless {}, $class;
    for my $key ( @attributes ) {
        $self-&amp;gt;{$key} = $args-&amp;gt;{$key} if exists $args-&amp;gt;{$key}
    }
    return $self;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gone are the individual get/set accessors and in their place is a BEGIN block. The block turns off strict references (for the block only) and for every attribute creates a typeglob reference to an anonymous get/set subroutine. The constructor has been updated to take a hashref of arguments ($args) and sets the values of any attribute that is found in $args.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s nice about this approach is that adding additional attributes can be done simply by adding the attribute names to @attributes, whereas in the original Point class we would have needed to add two new methods and update the constructor method every time a new attribute was added. Additionally this approach supports the Moose-style syntax: when an argument is provided it sets the attribute value, else it gets it. E.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$point-&amp;gt;x; #get x
$point-&amp;gt;x(5); #set x to 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whilst this approach does offer faster extensibility and a nicer syntax than vanilla object oriented Perl, it&amp;rsquo;s also restrictive. For example it would be difficult to add attribute-specific behavior without adding some ugly if-else code. Therefore it probably works best for scenarios involving simple classes with many attributes.&lt;/p&gt;

&lt;h3 id=&#34;sources:cb4e7ecf133cb0c0eb41f1244b5516b6&#34;&gt;Sources&lt;/h3&gt;

&lt;p&gt;Thanks to David Golden whose awesome &lt;a href=&#34;https://metacpan.org/pod/HTTP::Tiny&#34;&gt;HTTP::Tiny&lt;/a&gt; source code inspired this article.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use roles in object oriented Perl with Role::Tiny</title>
      <link>https://dnmfarrell.github.io/article/47/2013/11/11/Use-roles-in-object-oriented-Perl-with-Role--Tiny/</link>
      <pubDate>Mon, 11 Nov 2013 04:48:50 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/47/2013/11/11/Use-roles-in-object-oriented-Perl-with-Role--Tiny/</guid>
      <description>

&lt;p&gt;Roles are a label for a set of methods that a class provides. Similar to traits in Smalltalk or an interface in Java, adding a Perl role to a class is like adding a guarantee that the class will implement that role&amp;rsquo;s API. Roles are an alternative to inheritance; instead of extending a class hierarchy through subclassing, a programmer composes a class using roles for what the class does. This article describes how by using the &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;Role::Tiny&lt;/a&gt; module you can imbue native Perl object oriented code with roles.&lt;/p&gt;

&lt;h3 id=&#34;install-role-tiny:7cfcfc217e7b77b8ee4fa1cc7fe4d090&#34;&gt;Install Role::Tiny&lt;/h3&gt;

&lt;p&gt;In order to use the code examples in this article you&amp;rsquo;ll need to install &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;Role::Tiny&lt;/a&gt;. You can install it via CPAN from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cpan Role::Tiny
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-a-role:7cfcfc217e7b77b8ee4fa1cc7fe4d090&#34;&gt;Creating a role&lt;/h3&gt;

&lt;p&gt;A role is a declared in a module file (*.pm). Let&amp;rsquo;s create a role called &amp;ldquo;Shape&amp;rdquo;, which we would expect all Shape classes to implement:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Shape;

use Role::Tiny;

requires &#39;getArea&#39;;

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code starts with the usual package declaration. By importing &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;Role::Tiny&lt;/a&gt; with the use statement, we can automatically treat this module as a role by using its package name. The &amp;ldquo;requires&amp;rdquo; function adds a requirement that any class using this role must implement a &amp;lsquo;getArea&amp;rsquo; method.&lt;/p&gt;

&lt;h3 id=&#34;using-a-role:7cfcfc217e7b77b8ee4fa1cc7fe4d090&#34;&gt;Using a role&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s develop a Point class that will implement the Shape role. A point is a simple 2d shape located using an x and y value for Cartesian coordinates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Point;

use Role::Tiny::With;

with &#39;Shape&#39;;

sub new {
    my ($class, $x, $y) = @_;
    return bless {  
                  x =&amp;gt; $x,
                  y =&amp;gt; $y,
                 }, $class;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As before the file begins with a package declaration. To be able to add roles to a class, we use &amp;ldquo;Role::Tiny::With&amp;rdquo;. This imports the &amp;ldquo;with&amp;rdquo; function which is use to import roles. We&amp;rsquo;ve also declared a constructor method that takes an x and y coordinate as parameters to store the point&amp;rsquo;s location. At this stage we have not added the &amp;ldquo;getArea&amp;rdquo; method required by the Shape role - so what would happen if we tried to create a Point object? We can test this at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl -MPoint -we &#39;my $p = Point-&amp;gt;new(5,5)&#39;
Can&#39;t apply Shape to Point - missing getArea at /home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/lib/site_perl/5.16.3/Role/Tiny.pm line 306.
Compilation failed in require.
BEGIN failed--compilation aborted.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As shown above, Perl will raise an exception if a class uses a role but doesn&amp;rsquo;t implement its required methods. Let&amp;rsquo;s add a &amp;ldquo;getArea&amp;rdquo; method to the Point class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Point;

use Role::Tiny::With;

with &#39;Shape&#39;;

sub new {
    my ($class, $x, $y) = @_;
    return bless {
                  x =&amp;gt; $x,
                  y =&amp;gt; $y,
                 }, $class;
}

sub getArea { return 1 }

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;getArea&amp;rdquo; sub returns the area of the point object (1). For other shapes such as a rectangle, &amp;ldquo;getArea&amp;rdquo; would have to calculate the area before returning it. Now that the Point class has the &amp;ldquo;getArea&amp;rdquo; method, we can create Point objects without Perl raising an exception.&lt;/p&gt;

&lt;h3 id=&#34;roles-can-define-methods:7cfcfc217e7b77b8ee4fa1cc7fe4d090&#34;&gt;Roles can define methods&lt;/h3&gt;

&lt;p&gt;A can be more than just a list of required methods - roles can define methods which the consuming class can use, just like a subclass inherits methods from its parent class. To see this in action let&amp;rsquo;s add get and set color methods to the Shape role.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Shape;

use Role::Tiny;

requires &#39;getArea&#39;;

sub getColor {
    my $self = shift;
    return $self-&amp;gt;{color} ? $self-&amp;gt;{color} : &#39;none&#39;;
}

sub setColor {
    my ($self, $color) = @_;
    $self-&amp;gt;{color} = $color;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can get and set the color of any Point object. We can test this at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl -MPoint -we &#39;my $p = Point-&amp;gt;new(5,5); $p-&amp;gt;setColor(&amp;quot;blue&amp;quot;); print $p-&amp;gt;getColor&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-check-if-an-object-does-a-role:7cfcfc217e7b77b8ee4fa1cc7fe4d090&#34;&gt;How to check if an object does a role&lt;/h3&gt;

&lt;p&gt;When a class uses a role, it also gets a boolean &amp;ldquo;does&amp;rdquo; method. This can be used to check if the class implements a specific role. For example we can quickly check for the presence of our &amp;ldquo;Shape&amp;rdquo; role in our Point class at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl -MPoint -we &#39;my $p = Point-&amp;gt;new(5,5); print $p-&amp;gt;does(&amp;quot;Shape&amp;quot;)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion:7cfcfc217e7b77b8ee4fa1cc7fe4d090&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Roles are a useful alternative to inheritance - they focus on what a class does rather than what it is. Using &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;Role::Tiny&lt;/a&gt; is a nimble way to add roles to the existing Perl object oriented syntax without using an entire object system such as Moose.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl destructor not being called? Here&#39;s why</title>
      <link>https://dnmfarrell.github.io/article/38/2013/8/27/Perl-destructor-not-being-called--Here-s-why/</link>
      <pubDate>Tue, 27 Aug 2013 02:57:30 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/38/2013/8/27/Perl-destructor-not-being-called--Here-s-why/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re using a Perl destructor method (&amp;lsquo;DESTROY&amp;rsquo;, &amp;lsquo;DEMOLISH&amp;rsquo;) it may not be called if the Perl process is terminated abruptly by a signal. To fix this, just add the sigtrap pragma to your program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use sigtrap qw/die normal-signals/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if the program receives a SIGINT or SIGTERM, the Perl process will die and call the destructor.&lt;/p&gt;

&lt;p&gt;To read more on signal handlers see our article: &lt;a href=&#34;http://perltricks.com/article/37/2013/8/18/Catch-and-Handle-Signals-in-Perl&#34;&gt;Catch and Handle Signals in Perl&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Call object methods without an object reference</title>
      <link>https://dnmfarrell.github.io/article/35/2013/8/3/Call-object-methods-without-an-object-reference/</link>
      <pubDate>Sat, 03 Aug 2013 17:56:03 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/35/2013/8/3/Call-object-methods-without-an-object-reference/</guid>
      <description>

&lt;p&gt;Perl&amp;rsquo;s flexible syntax accepts all kinds of shenanigans and hackery. This article describes one such trick to call object methods without including the referent object (sort of).&lt;/p&gt;

&lt;h3 id=&#34;preamble:ed4e14f05c50e361d000a8b1387fb53d&#34;&gt;Preamble&lt;/h3&gt;

&lt;p&gt;Imagine we have a class call Boomerang with a single method, throw. The code looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Boomerang;
use strict;
use warnings;
use feature qw/say/;

sub new {
    my $class = shift;
    return bless {}, $class;
}

sub throw {
    my ($self, $url) = @_;
    say &#39;I flew &#39; . int(rand(500)) . &#39; feet!&#39;;
    return $self;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use the Boomerang class and throw method, we have a script called throw.pl:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Boomerang;
use strict;
use warnings;

my $stick = Boomerang-&amp;gt;new;
$stick-&amp;gt;throw;
$stick-&amp;gt;throw; 
$stick-&amp;gt;throw;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code in throw.pl shown above creates a new Boomerang object called $stick. It then calls the throw method on $stick three times. All throw does is print a statement declaring how many feet (a random integer) the Boomerang was thrown. Running throw.pl gives us this output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl throw.pl
I flew 230 feet!
I flew 17 feet!
I flew 31 feet!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;removing-the-object-reference-sort-of:ed4e14f05c50e361d000a8b1387fb53d&#34;&gt;Removing the object reference (sort of)&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s update throw.pl to remove the object reference altogether:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Boomerang;
use strict;
use warnings;

Boomerang-&amp;gt;new
    -&amp;gt;throw
    -&amp;gt;throw
    -&amp;gt;throw;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running throw.pl gives the same output as previously:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl throw.pl
I flew 36 feet!
I flew 25 feet!
I flew 372 feet!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So &lt;strong&gt;why&lt;/strong&gt; does this code work? It works because of several conditions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Boomerang&amp;rsquo;s new and throw methods return the object $self - just like a Boomerang :).&lt;/li&gt;
&lt;li&gt;Perl allows multi-line statements.&lt;/li&gt;
&lt;li&gt;Perl&amp;rsquo;s precedence runs from left to right on method calls.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;rsquo;re still not clear why this code works, consider that another way to write the same code in throw.pl would be like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Boomerang;
use strict;
use warnings;

Boomerang-&amp;gt;new-&amp;gt;throw-&amp;gt;throw-&amp;gt;throw;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;what-is-this-good-for:ed4e14f05c50e361d000a8b1387fb53d&#34;&gt;What is this good for?&lt;/h3&gt;

&lt;p&gt;Admittedly this style of writing method calls can lead to reduced readability and will only work on method calls that return $self. However one use of this technique was shown by Eric Johnson at YAPC::EU 2012. He developed a Selenium test class which allowed non-Perl programmers to write test cases using this method. His talk is on &lt;a href=&#34;http://www.youtube.com/watch?v=9eQJnyocMuQ&#34;&gt;youtube&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Old School Object Oriented Perl</title>
      <link>https://dnmfarrell.github.io/article/25/2013/5/20/Old-School-Object-Oriented-Perl/</link>
      <pubDate>Mon, 20 May 2013 00:11:41 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/25/2013/5/20/Old-School-Object-Oriented-Perl/</guid>
      <description>

&lt;p&gt;If you need to write object oriented Perl code with no dependencies, then you need to use the old school Perl syntax. This article describes the main features of old school object oriented Perl including class declaration, constructors, destructors, methods, attributes, accessors and inheritance.&lt;/p&gt;

&lt;p&gt;If you want to write object oriented Perl code using modern Perl tools, consider using &lt;a href=&#34;https://metacpan.org/module/ETHER/Moose-2.0802/lib/Moose.pm&#34;&gt;Moose&lt;/a&gt; for a feature rich implementation including type checking, roles and accessor methods. An alternative is &lt;a href=&#34;https://metacpan.org/module/Moo&#34;&gt;Moo&lt;/a&gt; which provides a speedy, minimalist implementation of the Moose syntax, without the sugar (or the overhead) of Moose.&lt;/p&gt;

&lt;h3 id=&#34;classes:af479d87902de169a500160c53799bda&#34;&gt;Classes&lt;/h3&gt;

&lt;p&gt;A Perl class is defined in a Perl module file (*.pm) with a package declaration. At a minimum the class must contain a constructor method and optionally can contain additional class methods and attributes. As with all Perl packages, it must return a true value (normally 1, this is placed at the end of the file). A minimal example Perl class would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# This is the package declaration
package Shape;

# This is the constructor method
sub new {
    return bless {}, shift;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example Shape class must be saved in a file called &amp;lsquo;Shape.pm&amp;rsquo;.&lt;/p&gt;

&lt;h3 id=&#34;the-constructor-method:af479d87902de169a500160c53799bda&#34;&gt;The constructor method&lt;/h3&gt;

&lt;p&gt;The constructor method is a Perl subroutine that returns an object which is an instance of the class. It is convention to name the constructor method &amp;lsquo;new&amp;rsquo;, but it can be any valid subroutine name. The constructor method works by using the &lt;a href=&#34;http://perldoc.perl.org/functions/bless.html&#34;&gt;bless&lt;/a&gt; function on a hash reference and the class name (the package name). When new is called, the package name &amp;lsquo;Shape&amp;rsquo; is in the default array @_ and &lt;a href=&#34;http://perldoc.perl.org/functions/shift.html&#34;&gt;shift&lt;/a&gt; is used to take the package name from @_ and pass it to the bless function. Let&amp;rsquo;s modify the constructor method to convey this behaviour more clearly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Shape;

sub new {
    my $class = shift;
    my $self = {};
    return bless $self, $class;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This style of coding the constructor is a common pattern seen frequently in Perl code. Not only does it convey the behaviour of the code more clearly, it also allows for easy extension to $self, such as adding default attributes and / or accepting initialization arguments.&lt;/p&gt;

&lt;h3 id=&#34;attributes:af479d87902de169a500160c53799bda&#34;&gt;Attributes&lt;/h3&gt;

&lt;p&gt;Essentially a Perl object is a blessed reference to a hash reference. This hash reference stores the key value pairs of data which are the object&amp;rsquo;s attributes. Let&amp;rsquo;s add some useful attributes to our Shape class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Shape;

sub new {
    my $class = shift;
    my $self = {
        color  =&amp;gt; &#39;black&#39;,
        length =&amp;gt; 1,
        width  =&amp;gt; 1,
    };
    return bless $self, $class;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Shape class has been given color, length and width attributes. We can access these attributes by using our Shape class in a Perl program, let&amp;rsquo;s call it &amp;lsquo;Draw.pl&amp;rsquo; (it should be saved in the same directory as Shape.pm):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use feature qw/say/;
use Shape;

# create a new Shape object
my $shape = Shape-&amp;gt;new;

# print the shape object attributes
say $shape-&amp;gt;{color};
say $shape-&amp;gt;{length};
say $shape-&amp;gt;{width};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s review the key lines: &amp;lsquo;use feature qw/say/;&amp;rsquo; enables the say function which prints and appends a newline. &amp;lsquo;use Shape;&amp;rsquo; imports the Shape class and my $shape = Shape-&amp;gt;new; creates a new Shape object. Using $shape we can then access the attributes with a dereferencing arrow -&amp;gt; using the attribute name encased in curly brackets and print the attributes using the say function.&lt;/p&gt;

&lt;h3 id=&#34;setting-attribute-values-using-constructor-arguments:af479d87902de169a500160c53799bda&#34;&gt;Setting attribute values using constructor arguments&lt;/h3&gt;

&lt;p&gt;At the moment Shape.pm is quite rigid; every Shape object we use will have the same color, length and width values. We can increase the flexibility of the Shape class by accepting arguments that set the values of color, length and width attributes. Let&amp;rsquo;s modify the Shape.pm constructor accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Shape; 
 
sub new { 
    my ($class, $args) = @_; 
    my $self = { 
        color  =&amp;gt; $args-&amp;gt;{color}, 
        length =&amp;gt; $args-&amp;gt;{length}, 
        width  =&amp;gt; $args-&amp;gt;{width}, 
    }; 
    return bless $self, $class; 
}           
        
1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When calling any subroutine in Perl the arguments are contained in the default array variable @_. The Shape.pm constructor now expects a hash reference containing the attribute values in its arguments, and assigns this to $args. We can update Draw.pl to pass those arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use feature qw/say/;
use Shape;

# pass color, length and width arguments to the constructor
my $shape = Shape-&amp;gt;new({
                color =&amp;gt; &#39;red&#39;,
                length=&amp;gt; 2,
                width =&amp;gt; 2,
            });

# print the shape object attributes
say $shape-&amp;gt;{color};
say $shape-&amp;gt;{length};
say $shape-&amp;gt;{width};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-default-attribute-values:af479d87902de169a500160c53799bda&#34;&gt;Creating default attribute values&lt;/h3&gt;

&lt;p&gt;Now we can create Shape objects of different colors, lengths and widths. But what if we don&amp;rsquo;t pass all the arguments in our Perl program? In this case the object will initialize with those attributes as null. To avoid that, we can set default values that are overridden if the argument is present when the object is constructed. We can use the logical or operator || to achieve this effect in Shape.pm:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Shape;

sub new {
    my ($class, $args) = @_;
    my $self = {
        color  =&amp;gt; $args-&amp;gt;{color} || &#39;black&#39;,
        length =&amp;gt; $args-&amp;gt;{length} || 1,
        width  =&amp;gt; $args-&amp;gt;{width} || 1,
    };
    return bless $self, $class;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have the best of both worlds: when using Shape.pm you can optionally pass the attribute values or the Shape will be constructed with the default values. We can prove this by updating and running Draw.pl:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use feature qw/say/;
use Shape;

# pass color, length and width arguments to the constructor
my $red_shape = Shape-&amp;gt;new({
                    color =&amp;gt; &#39;red&#39;,
                });
# use the default attribute values
my $black_shape = Shape-&amp;gt;new;

say $red_shape-&amp;gt;{color};
say $black_shape-&amp;gt;{color};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Draw.pl we initialized $red_shape with an argument pair (color =&amp;gt; red), but for $black_shape we provided no arguments, so the color attribute defaults to black.&lt;/p&gt;

&lt;h3 id=&#34;dynamically-adding-attributes:af479d87902de169a500160c53799bda&#34;&gt;Dynamically adding attributes&lt;/h3&gt;

&lt;p&gt;It is possible to insert new attributes into an object&amp;rsquo;s hash reference, for example we could calculated the area of a shape using it&amp;rsquo;s length and width attributes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use feature qw/say/;
use Shape;

# pass color, length and width arguments to the constructor
my $red_shape = Shape-&amp;gt;new({
                    color =&amp;gt; &#39;red&#39;,
                    length=&amp;gt; 2,
                    width =&amp;gt; 2,
                });
# calculate the area of $red_shape
my $area = $red_shape-&amp;gt;{length} * $red_shape-&amp;gt;{width};

# insert the area attribute and value into $red_shape
$red_shape-&amp;gt;{area} = $area;

say $red_shape-&amp;gt;{area};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now $red_shape has the attributes: color, length, width and area.&lt;/p&gt;

&lt;h3 id=&#34;methods:af479d87902de169a500160c53799bda&#34;&gt;Methods&lt;/h3&gt;

&lt;p&gt;Methods are simply Perl subroutines that belong to a class. The Shape class already has one method, the constructor called new. Let&amp;rsquo;s add a new method to Shape.pm to calculate and return the area:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Shape;

sub new {
    my ($class, $args) = @_;
    my $self = {
        color  =&amp;gt; $args-&amp;gt;{color} || &#39;black&#39;,
        length =&amp;gt; $args-&amp;gt;{length} || 1,
        width  =&amp;gt; $args-&amp;gt;{width} || 1,
    };
    return bless $self, $class;
}

sub get_area {
    my $self = shift;
    my $area = $self-&amp;gt;{length} * $self-&amp;gt;{width};
    return $area;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ve added the get_area method (it&amp;rsquo;s good practice to be descriptive when naming your methods by using the verb-noun style). When an object method is called the first element of the default array @_ will contain the package name and a reference to the object. In the get_area method we store this argument in $self. We then dereference the length and width attributes to calculate and return $area. We can update Draw.pl to use the new area method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use feature qw/say/;
use Shape;
    
# pass color, length and width arguments to the constructor
my $red_shape = Shape-&amp;gt;new({
                color =&amp;gt; &#39;red&#39;,
                length=&amp;gt; 2,
                width =&amp;gt; 2,
            });
# call the area method and print the value
say $red_shape-&amp;gt;get_area;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;accessor-methods:af479d87902de169a500160c53799bda&#34;&gt;Accessor methods&lt;/h3&gt;

&lt;p&gt;Accessor methods are subroutines which access object attributes.This is better than directly dereferencing the attributes in the object&amp;rsquo;s hash reference, as it leads to more readable and maintainable code (particularly if you follow the verb-noun style of naming methods). We can update Shape.pm with get and set methods for its color attribute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Shape;

sub new {
    my ($class, $args) = @_;
    my $self = {
        color  =&amp;gt; $args-&amp;gt;{color} || &#39;black&#39;,
        length =&amp;gt; $args-&amp;gt;{length} || 1,
        width  =&amp;gt; $args-&amp;gt;{width} || 1,
    };
    return bless $self, $class;
}

sub get_area {
    my $self = shift;
    return $self-&amp;gt;{length} * $self-&amp;gt;{width};
}

sub get_color {
    my $self = shift;
    return $self-&amp;gt;{color};
}

sub set_color {
    my ($self, $color) = @_;
    $self-&amp;gt;{color} = $color;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s update Draw.pl to use the new methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use feature qw/say/;
use Shape;
    
# pass color argument to the constructor
my $shape = Shape-&amp;gt;new({
                color =&amp;gt; &#39;red&#39;,
            });
    
# print the shape color using get_color method
say $shape-&amp;gt;get_color;

# set the shape color to blue
$shape-&amp;gt;set_color(&#39;blue&#39;); 

# print the shape color using get_color method
say $shape-&amp;gt;get_color;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the example methods of get_color and set_color, it should be obvious how to write additional get and set methods for the length and width attributes.&lt;/p&gt;

&lt;h3 id=&#34;builder-methods:af479d87902de169a500160c53799bda&#34;&gt;Builder methods&lt;/h3&gt;

&lt;p&gt;A builder method is an internal subroutine that is used to set the value of an object attribute at construction. A convention used by Perl programmers is to denote internal methods by prepending an underscore to their name. Let&amp;rsquo;s add a builder method to Shape.pm that sets the creation datetime, using the &lt;a href=&#34;http://perldoc.perl.org/Time/Piece.html&#34;&gt;Time::Piece&lt;/a&gt; core module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Shape;
use Time::Piece;

sub new {
    my ($class, $args) = @_;
    my $self = {
        color    =&amp;gt; $args-&amp;gt;{color} || &#39;black&#39;,
        length   =&amp;gt; $args-&amp;gt;{length} || 1,
        width    =&amp;gt; $args-&amp;gt;{width} || 1,
    };
    my $object = bless $self, $class;
    $object-&amp;gt;_set_datetime;
    return $object;
}

sub get_area {
    my $self = shift;
    return $self-&amp;gt;{length} * $self-&amp;gt;{width};
}

sub get_color {
    my $self = shift;
    return $self-&amp;gt;{color}; 
}

sub set_color {
    my ($self, $color) = @_;
    $self-&amp;gt;{color} = $color; 
}

sub _set_datetime {
    my $self = shift;
    my $t = localtime;
    $self-&amp;gt;{datetime} = $t-&amp;gt;datetime; 
}

sub get_datetime {
    my $self = shift;
    return $self-&amp;gt;{datetime}; 
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The _set_datetime builder method is called at construction within the new method. A corresponding accessor to get the datetime has also been added. We can test this by updating Draw.pl to use it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use feature qw/say/;
use Shape;

my $shape = Shape-&amp;gt;new;

# get datetime
say $shape-&amp;gt;get_datetime;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-destructor-method:af479d87902de169a500160c53799bda&#34;&gt;The destructor method&lt;/h3&gt;

&lt;p&gt;A destructor method is automatically called by Perl when all references to an object go out of scope - it is never called directly. Destructor methods are useful if the class creates temporary files or threads that must be cleaned up if the object is destroyed. They can also be useful for event logging. Perl provides a special destructor method name, &amp;lsquo;DESTROY&amp;rsquo; that must be used when declaring a destructor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Shape;
use Time::Piece;

sub new {
    my ($class, $args) = @_;
    my $self = {
        color    =&amp;gt; $args-&amp;gt;{color} || &#39;black&#39;,
        length   =&amp;gt; $args-&amp;gt;{length} || 1,
        width    =&amp;gt; $args-&amp;gt;{width} || 1,
    };
    my $object = bless $self, $class;
    $object-&amp;gt;_set_datetime;
    return $object;
}

# The new destructor method, called automatically by Perl
sub DESTROY {
    my $self = shift;
    print &amp;quot;I have been garbage-collected!\n&amp;quot;;
}

sub get_area {
    my $self = shift;
    return $self-&amp;gt;{length} * $self-&amp;gt;{width};
}

sub get_color {
    my $self = shift;
    return $self-&amp;gt;{color}; 
}

sub set_color {
    my ($self, $color) = @_;
    $self-&amp;gt;{color} = $color; 
}

sub _set_datetime {
    my $self = shift;
    my $t = localtime;
    $self-&amp;gt;{datetime} = $t-&amp;gt;datetime; 
}

sub get_datetime {
    my $self = shift;
    return $self-&amp;gt;{datetime}; 
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;inheritance:af479d87902de169a500160c53799bda&#34;&gt;Inheritance&lt;/h3&gt;

&lt;p&gt;A key concept of object oriented programming is the ability to create sub-classes of existing classes. These sub-classes will inherit the methods and attributes of their parent class, which allows programmers to stay &lt;a href=&#34;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;DRY&lt;/a&gt; by separating re-usable generic code from specialist code.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say we wanted to implement circle shape. Currently Shape.pm has length and width attributes - these work for rectangular shapes but not for circles as they require radius, diameter and circumference attributes instead. We can subclass Shape.pm to create a new Circle class that inherits the methods of Shape and implements new circle-specific functionality:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Shape::Circle;
use parent Shape;

sub new {
    my ($class, $args) = @_;
    my $self = {
        color    =&amp;gt; $args-&amp;gt;{color} || &#39;black&#39;,
        diameter =&amp;gt; $args-&amp;gt;{diameter} || 1,
    };
    my $object = bless $self, $class;
    $object-&amp;gt;_set_datetime;
    return $object;
}

sub get_radius {
    my $self = shift;
    return $self-&amp;gt;{diameter} * 0.5;
}

sub get_circumference {
    my $self = shift;
    return $self-&amp;gt;{diameter} * 3.14;
}

sub get_area {
    my $self = shift;
    my $area = $self-&amp;gt;get_radius ** 2 * 3.14;
}
1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Circle.pm file should be saved in Shape/Circle.pm. The line &amp;lsquo;use parent Shape;&amp;rsquo; informs Perl that Circle.pm inherits from the Shape class. The Circle class has now inherited the datetime and color methods from Shape, but also provides new circle-specific methods. Note that Circle.pm also inherited the &amp;lsquo;new&amp;rsquo; and &amp;lsquo;get_area&amp;rsquo; methods from Shape.pm, however it has overridden them by re-defining them in Circle.pm. Let&amp;rsquo;s test Circle.pm out using Draw.pl:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use feature qw/say/;
use Shape::Circle;

my $circle = Shape::Circle-&amp;gt;new;

# get datetime - inherited method
say $circle-&amp;gt;get_datetime;

# try new Circle methods
say $circle-&amp;gt;get_radius;
say $circle-&amp;gt;get_circumference;
say $circle-&amp;gt;get_area;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wrap-up:af479d87902de169a500160c53799bda&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;This article has explored some of the core object oriented Perl functionality. For more information the official Perl documentation has a &lt;a href=&#34;http://perldoc.perl.org/perlootut.html&#34;&gt;tutorial&lt;/a&gt; and a &lt;a href=&#34;perldoc.perl.org/perlobj.html&#34;&gt;more detailed reference&lt;/a&gt;. The definitive text on old school object oriented Perl is Damian Conway&amp;rsquo;s &lt;a href=&#34;http://www.manning.com/conway/&#34;&gt;Object Oriented Perl&lt;/a&gt; (Manning, 1999).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

