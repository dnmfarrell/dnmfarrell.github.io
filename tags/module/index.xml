<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Module on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/module/</link>
    <description>Recent content in Module on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Mar 2016 10:04:57 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/module/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What is the Perl Core?</title>
      <link>http://perltricks.com/article/what-is-the-perl-core-/</link>
      <pubDate>Wed, 09 Mar 2016 10:04:57 +0000</pubDate>
      
      <guid>http://perltricks.com/article/what-is-the-perl-core-/</guid>
      <description>

&lt;p&gt;When I use the term &amp;ldquo;Perl Core&amp;rdquo; I mean the standard library of modules (distributions actually) that ship with the &lt;code&gt;perl&lt;/code&gt; interpreter, and I think that&amp;rsquo;s what most people mean when they use that term. Knowing which modules are in the Perl Core is useful; it enables developers to build programs without external dependencies over which the developer has little control. The perldoc site has a handy alphabetized &lt;a href=&#34;http://perldoc.perl.org/index-modules-A.html&#34;&gt;list&lt;/a&gt; of core modules and I generally check there first to browse which modules are in core. The problem though, is that it can be wrong.&lt;/p&gt;

&lt;h3 id=&#34;what-modules-are-included-in-the-perl-core:0d5c2e3cd089b0cf6cb0dbe47d066eb1&#34;&gt;What modules are included in the Perl Core?&lt;/h3&gt;

&lt;p&gt;Did you know that &lt;a href=&#34;http://metacpan.org/pod/HTTP::Tiny&#34;&gt;HTTP::Tiny&lt;/a&gt; has shipped with Perl since 2011 (version 5.14.0)? It&amp;rsquo;s not listed on &lt;a href=&#34;http://perldoc.perl.org&#34;&gt;perldoc&lt;/a&gt; (although that is on the list to be fixed at the next &lt;a href=&#34;http://act.qa-hackathon.org/qa2016/&#34;&gt;QA Hackathon&lt;/a&gt;). Luckily there is a better solution: the &lt;code&gt;corelist&lt;/code&gt; program. This is supplied with &lt;a href=&#34;https://metacpan.org/pod/Module::CoreList/&#34;&gt;Module::CoreList&lt;/a&gt;. Let&amp;rsquo;s see when Module::CoreList first shipped with Perl:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ corelist -a Module::CoreList

Data for 2015-06-01
Module::CoreList was first released with perl v5.8.9
  v5.8.9     2.17
  v5.9.2     1.99
  v5.9.3     2.02
  v5.9.4     2.08
  v5.9.5     2.12
  v5.10.0    2.13
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve truncated the output and kept the key details. It shows that Module::CoreList has been included since Perl version 5.8.9. At home I run Fedora 23, which comes with Perl version 5.22.1. Running the system Perl &lt;code&gt;corelist&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo corelist -a Module::CoreList
sudo: corelist: command not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The program doesn&amp;rsquo;t exist; the Fedora team didn&amp;rsquo;t include it for some reason. Not only that, but great core modules like &lt;a href=&#34;http://perltricks.com/article/59/2014/1/10/Solve-almost-any-datetime-need-with-Time--Piece/&#34;&gt;Time::Piece&lt;/a&gt; aren&amp;rsquo;t included either!&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t have &lt;code&gt;corelist&lt;/code&gt;, but want to view a list of distributions that &lt;em&gt;should&lt;/em&gt; have been bundled with your version of Perl, you can read &lt;code&gt;perldoc perlmodlib&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;which-modules-do-i-have:0d5c2e3cd089b0cf6cb0dbe47d066eb1&#34;&gt;Which modules do I have?&lt;/h3&gt;

&lt;p&gt;Sometimes instead of asking which modules are in the Perl Core what we really mean is: &amp;ldquo;which modules do I have installed?&amp;rdquo; For non-core modules, I use &lt;a href=&#34;http://perltricks.com/article/14/2013/4/7/List-all-Perl-modules-installed-via-CPAN/&#34;&gt;perldoc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perldoc&lt;/code&gt; won&amp;rsquo;t show us the core modules that we already have, and in the case of missing core modules, Module::CoreList can&amp;rsquo;t help either (its results are based on internal lists of modules that &lt;em&gt;should&lt;/em&gt; be there, not which files are actually present). A simple way I handle this is to use the following script to search the contents of &lt;code&gt;@INC&lt;/code&gt;; the directories which &lt;code&gt;perl&lt;/code&gt; searches for modules:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use 5.10.3;
use Path::Tiny &#39;path&#39;;
use Getopt::Long &#39;GetOptions&#39;;

GetOptions(
  &#39;dir=s&#39; =&amp;gt; \my $dirpath,
) or die &amp;quot;Unrecognized option\n&amp;quot;;
die &amp;quot;--dir is required\n&amp;quot; unless $dirpath &amp;amp;&amp;amp; -d $dirpath;

# append a slash if missing
$dirpath .= &#39;/&#39; unless substr($dirpath, -1) eq &#39;/&#39;;

my $iter = path($dirpath)-&amp;gt;iterator({recurse =&amp;gt; 1});
while (my $path = $iter-&amp;gt;()) {
  next unless &amp;quot;$path&amp;quot; =~ qr/.pm$/;
  # remove the parent dir and trailing .pm from filename
  my $module = substr(&amp;quot;$path&amp;quot;, length($dirpath), length(&amp;quot;$path&amp;quot;)-length($dirpath)-3);
  $module =~ s/\//::/g;
  say $module;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I run it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chmod 755 list_modules
$ /usr/bin/perl -e &#39;for(@INC){ system &amp;quot;./list_modules -d $_&amp;quot; }&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m using the absolute path &lt;code&gt;/usr/bin/perl&lt;/code&gt; to ensure I get my system&amp;rsquo;s &lt;code&gt;perl&lt;/code&gt; and not the local one I manage with &lt;a href=&#34;https://github.com/tokuhirom/plenv&#34;&gt;plenv&lt;/a&gt;. One downside of this approach is it lists every module (&lt;code&gt;.pm&lt;/code&gt; file) rather than every distribution, (see this &lt;a href=&#34;http://perltricks.com/article/96/2014/6/13/Perl-distributions--modules--packages-explained/&#34;&gt;explanation&lt;/a&gt; if you&amp;rsquo;re not familiar with the distinction). Another issue is it will list duplicate modules when the system uses symlinks. So the program output needs to be tidied up in a text editor.&lt;/p&gt;

&lt;p&gt;What about programs? To search for Perl programs I prepared a list of Perl programs from the source for Perl 5.22, called &lt;code&gt;perl522_programs&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c2ph
corelist
cpan
enc2xs
encguess
h2ph
h2xs
instmodsh
json_pp
libnetcfg
perl
perl5.22.1
perlbug
perldoc
perlivp
perlthanks
piconv
pl2pm
pod2html
pod2man
pod2text
pod2usage
podchecker
podselect
prove
pstruct
ptar
ptardiff
ptargrep
shasum
splain
xsubpp
zipdetails
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I used the following script, called &lt;code&gt;find_binary&lt;/code&gt; to check for the programs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/perl
my $bin = shift or die &amp;quot;You must provide a binary name to search for\n&amp;quot;;

for ( qw(/sbin /bin /usr/sbin /usr/bin) )
{
  my $path = &amp;quot;$_/$bin&amp;quot;;
  print &amp;quot;$path\n&amp;quot; if -e $path;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I run it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chmod 755 find_binary
$ perl -ne &#39;chomp;system &amp;quot;./find_binary $_&amp;quot;&#39; perl522_programs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line calls the &lt;code&gt;find_binary&lt;/code&gt; script on every program listed in the file &lt;code&gt;perl522_programs&lt;/code&gt;. I &lt;code&gt;chomp&lt;/code&gt; the line before searching for it to remove the trailing newline character. This method isn&amp;rsquo;t perfect though; sneaky Ubuntu ships with a program called &lt;code&gt;perldoc&lt;/code&gt; but if you run it the system prints:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;You need to install the perl-doc package to use this program.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;core-modules-and-programs-missing-from-system-perls:0d5c2e3cd089b0cf6cb0dbe47d066eb1&#34;&gt;Core modules and programs missing from system perls&lt;/h3&gt;

&lt;p&gt;Using the code above I did a comparison of the modules and programs shipped with Perl and those shipped with the following systems. Here&amp;rsquo;s what missing:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Fedora 23&lt;/th&gt;
&lt;th&gt;Ubuntu 14.04 LTS&lt;/th&gt;
&lt;th&gt;OSX Yosemite 10.10.5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;B::Debug&lt;/td&gt;
&lt;td&gt;CGI::Fast&lt;/td&gt;
&lt;td&gt;GDBM_File&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Config::Perl::V&lt;/td&gt;
&lt;td&gt;ODBM_File&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CPANPLUS&lt;/td&gt;
&lt;td&gt;perldoc&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DB_File&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Devel::PPPort&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ExtUtils::Embed&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ExtUtils::MakeMaker::Locale&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ExtUtils::Miniperl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;File::Fetch&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;File::Spec::VMS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Filter::Simple&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IO::Compress::Adapter::Bzip2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IO::Uncompress::Adapter::Bunzip2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Math::BigFloat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Math::BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Math::BigRat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Math::Complex&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Math::Trig&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Module::Loaded&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PerlIO&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Text::Balanced&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Time::Piece&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Time::Seconds&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Unicode::Collate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;autodie&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bigint&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bignum&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bigrat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;experimental&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;perlfaq&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;corelist&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;enc2xs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;libnetcfg&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Ubuntu and OSX ship with Perl 5.18 so I looked for missing programs and modules against the 5.18 source code. For Fedora I compared the system &lt;code&gt;perl&lt;/code&gt; against the 5.22 source. These results show that Fedora is missing quite a few modules and programs: experimental, corelist, autodie, the Math:: modules and Time::Piece strike me as significant omissions (they are supplied by the &lt;code&gt;perl-core&lt;/code&gt; package, which is must be installed separately). For Ubuntu, excluding &lt;code&gt;perldoc&lt;/code&gt; is a &lt;a href=&#34;http://perltricks.com/article/155/2015/2/26/Hello-perldoc--productivity-booster/&#34;&gt;real shame&lt;/a&gt;. OSX came away gleaming though: nearly all core modules and programs were present.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:0d5c2e3cd089b0cf6cb0dbe47d066eb1&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;When writing programs that use core Perl modules be careful, especially if you&amp;rsquo;re using any of the modules or programs found to be missing earlier. One way around this is the use &lt;a href=&#34;https://metacpan.org/pod/App::FatPacker&#34;&gt;App::FatPacker&lt;/a&gt; to compile all the modules used into a single file. Another way would be to use &lt;a href=&#34;https://metacpan.org/pod/pp&#34;&gt;pp&lt;/a&gt; to create a compiled binary. Finally for modules like Time::Piece, you could always consider wrapping Perl&amp;rsquo;s built-in functions like &lt;code&gt;gmtime&lt;/code&gt; and &lt;code&gt;localtime&lt;/code&gt; in subroutines that give the behavior you need, rather than using the module.&lt;/p&gt;

&lt;p&gt;Of course it&amp;rsquo;s always easier to work with a locally-installed &lt;code&gt;perl&lt;/code&gt; than the system version. The local Perls provided by &lt;a href=&#34;http://perlbrew.pl&#34;&gt;perlbrew&lt;/a&gt; and &lt;a href=&#34;https://github.com/tokuhirom/plenv&#34;&gt;plenv&lt;/a&gt; contain all the core modules and utilities. You can always &lt;a href=&#34;http://perlmaven.com/how-to-build-perl-from-source-code&#34;&gt;compile&lt;/a&gt; your own Perl too, it&amp;rsquo;s easy. &lt;a href=&#34;http://www.strawberryperl.com&#34;&gt;Strawberry Perl&lt;/a&gt; for Windows even comes with some useful extra modules and C libraries. If you do have to rely on the system Perl, you may find a core module isn&amp;rsquo;t there at all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updates&lt;/strong&gt; &lt;em&gt;Added reference to perl-core Fedora package, thanks to Grant McLean. 2016-03-21&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Save time with compile tests</title>
      <link>http://perltricks.com/article/208/2016/1/5/Save-time-with-compile-tests/</link>
      <pubDate>Tue, 05 Jan 2016 14:32:45 +0000</pubDate>
      
      <guid>http://perltricks.com/article/208/2016/1/5/Save-time-with-compile-tests/</guid>
      <description>

&lt;p&gt;Over the past year I&amp;rsquo;ve been working on several large Perl projects, sometimes as part of a team and sometimes alone. As the codebase grows, testing becomes increasingly important and one test in particular that pays dividends is the compile test. That is, before running any other tests, simply check if that every module in the codebase compiles.&lt;/p&gt;

&lt;h3 id=&#34;the-basics:cf491e3fd24f485540ea55cdf7d5e508&#34;&gt;The basics&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s look at a simple compile test, I&amp;rsquo;ve adapted this example from &lt;a href=&#34;https://github.com/dnmfarrell/Perly-Bot&#34;&gt;Perly-Bot&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use Test::More;
use lib &#39;lib&#39;;

my @modules = qw(
  Perly::Bot
  Perly::Bot::Feed
  Perly::Bot::Feed::Post
  Perly::Bot::Cache
  Perly::Bot::Media
  Perly::Bot::Media::Twitter
  Perly::Bot::Media::Reddit
);
for my $module ( @modules )
{
  BAIL_OUT( &amp;quot;$module does not compile&amp;quot; ) unless require_ok( $module );
}
done_testing();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is simple enough; it adds the local &lt;code&gt;lib&lt;/code&gt; directory to the list of directories for Perl to search for modules. Then it declares an array of module names called &lt;code&gt;@modules&lt;/code&gt;. Finally it loops through each module name and tries to import it, bailing out if any module fails to load. Because tests are usually run in alphabetical order, this file is called &lt;code&gt;00-compile.t&lt;/code&gt; so that it is run first. I can run this test at the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ ./t/00-compile.t
perl t/00-compile.t 
ok 1 - use Perly::Bot;
ok 2 - use Perly::Bot::Feed;
ok 3 - use Perly::Bot::Feed::Post;
ok 4 - use Perly::Bot::Cache;
ok 5 - use Perly::Bot::Media;
ok 6 - use Perly::Bot::Media::Twitter;
ok 7 - use Perly::Bot::Media::Reddit;
1..7
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;write-once-compile-tests:cf491e3fd24f485540ea55cdf7d5e508&#34;&gt;Write-once compile tests&lt;/h3&gt;

&lt;p&gt;The basic compile test example has an obvious flaw: it requires the programmer to list all the module names to be tested. This means that every time a new module is added to the codebase or a module is renamed, this test needs to be updated. This also introduces the risk of error - a failing module could exist in the codebase and never be tested. Instead of a static list of modules, I can tell Perl to search the &lt;code&gt;lib&lt;/code&gt; directory and try to import any module it finds:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use Test::More;
use lib &#39;lib&#39;;
use Path::Tiny;

# try to import every .pm file in /lib
my $dir = path(&#39;lib/&#39;);
my $iter = $dir-&amp;gt;iterator({
            recurse         =&amp;gt; 1,
            follow_symlinks =&amp;gt; 0,
           }); 
while (my $path = $iter-&amp;gt;())
{
  next if $path-&amp;gt;is_dir || $path !~ /\.pm$/;
  BAIL_OUT( &amp;quot;$path does not compile&amp;quot; ) unless require_ok( $path );
}
done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I use &lt;a href=&#34;https://metacpan.org/pod/Path::Tiny&#34;&gt;Path::Tiny&lt;/a&gt; to iterate through the files in &lt;code&gt;lib&lt;/code&gt;. Instead of passing module names, I pass the filepath to &lt;code&gt;require_ok&lt;/code&gt;. Now this compile test is dynamic, it will always pick up any new modules added or removed from the codebase. Nice!&lt;/p&gt;

&lt;h3 id=&#34;require-warnings:cf491e3fd24f485540ea55cdf7d5e508&#34;&gt;Require warnings&lt;/h3&gt;

&lt;p&gt;One problem with using &lt;a href=&#34;http://perldoc.perl.org/functions/require.html&#34;&gt;require&lt;/a&gt; to load filepaths instead of module names is that it can generate &amp;ldquo;subroutine redefined&amp;rdquo; warnings if the same module is loaded twice by different files. Imagine this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;require &#39;lib/Game.pm&#39;;
require &#39;lib/Game/Asset/Player.pm&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;Game.pm&lt;/code&gt; loads &lt;code&gt;Game::Asset::Player&lt;/code&gt;, Perl will emit the subroutine redefined warning when the second &lt;code&gt;require&lt;/code&gt; statement is executed. I can deal with this in a couple of ways: I could suppress the warning by adding &lt;code&gt;no warnings &#39;redefine&#39;;&lt;/code&gt; to my compile test file. But this would mask genuine warnings that could be helpful, like if I have circular dependencies in my codebase. Or I can convert the filepath into a module name, and then &lt;code&gt;require&lt;/code&gt; won&amp;rsquo;t complain, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;require &#39;Game&#39;;
require &#39;Game::Asset::Player&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the compile tests, I can use substitute regexes to convert the filepath into a module name. When the compile tests run they won&amp;rsquo;t generate spurious &amp;ldquo;subroutine redefined&amp;rdquo; warnings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use Test::More;
use lib &#39;lib&#39;;
use Path::Tiny;

# try to import every .pm file in /lib
my $dir = path(&#39;lib/&#39;);
my $iter = $dir-&amp;gt;iterator({
            recurse         =&amp;gt; 1,
            follow_symlinks =&amp;gt; 0,
           });
while (my $path = $iter-&amp;gt;())
{
  next if $path-&amp;gt;is_dir || $path !~ /\.pm$/;
  my $module = $path-&amp;gt;relative;
  $module =~ s/(?:^lib\/|\.pm$)//g;
  $module =~ s/\//::/g;
  BAIL_OUT( &amp;quot;$module does not compile&amp;quot; ) unless require_ok( $module );
}
done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;additional-thoughts:cf491e3fd24f485540ea55cdf7d5e508&#34;&gt;Additional thoughts&lt;/h3&gt;

&lt;p&gt;Another way to write compile tests is using &lt;a href=&#34;https://metacpan.org/pod/Class::Load&#34;&gt;Class::Load&lt;/a&gt; to do the module importing. It has a several useful functions for dynamically loading modules.&lt;/p&gt;

&lt;p&gt;Compile tests are an interesting class of test. They&amp;rsquo;re an implementation of the axiom: &amp;ldquo;the codebase should always compile&amp;rdquo;. Depending on the application, there are other axioms you can test for. For example with a web application, every admin URL should only be accessible to authenticated and authorized users. So you could write a dynamic test that enumerates every admin URL and attempts to fetch it unauthorized (the test fails if any request is successful). For testing Catalyst web applications, you might find my module &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::ActionPaths&#34;&gt;Catalyst::Plugin::ActionPaths&lt;/a&gt; useful. Testing axioms usually has a high reward for little or no maintenance cost. Seek them out!&lt;/p&gt;

&lt;p&gt;If you ever need to suppress a particular warning, in newer versions of Perl the warnings pragma &lt;a href=&#34;http://perldoc.perl.org/warnings.html&#34;&gt;documentation&lt;/a&gt; lists all of the types of warnings it recognizes. This is especially useful when using experimental features like &lt;a href=&#34;http://perltricks.com/article/72/2014/2/24/Perl-levels-up-with-native-subroutine-signatures&#34;&gt;subroutine signatures&lt;/a&gt;. You can read it for your version of Perl at the command line with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc warnings
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create GitHub files automatically with Dist::Zilla</title>
      <link>http://perltricks.com/article/203/2015/12/9/Create-GitHub-files-automatically-with-Dist--Zilla/</link>
      <pubDate>Wed, 09 Dec 2015 13:46:17 +0000</pubDate>
      
      <guid>http://perltricks.com/article/203/2015/12/9/Create-GitHub-files-automatically-with-Dist--Zilla/</guid>
      <description>

&lt;p&gt;I use &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt; to release my code to CPAN. I really like it as with a single command I can build, package and ship a distribution. But most of my code lives on GitHub. In fact, a quick check shows that I have 90 &lt;a href=&#34;https://github.com/dnmfarrell&#34;&gt;repos&lt;/a&gt;, but only 13 distributions on &lt;a href=&#34;https://metacpan.org/author/DFARRELL&#34;&gt;CPAN&lt;/a&gt;. So only 14% of my code makes it to CPAN.&lt;/p&gt;

&lt;p&gt;Traditionally Dist::Zilla makes a distinction between your code and the files needed for CPAN and PAUSE to work, (like package metadata, a readme etc). The basic use case goes like this: you write your class files, scripts and unit tests, and when you tell Dist::Zilla to release the distribution, it generates all of the extra files, creates a tarball and uploads it to &lt;a href=&#34;https://pause.perl.org/pause/query&#34;&gt;PAUSE&lt;/a&gt;. The problem is though, some of those additional files would be nice to have in my GitHub repos too. I don&amp;rsquo;t want to write another &lt;code&gt;readme.md&lt;/code&gt;, or spend time copying the license file into the repo if Dist::ZIlla can already generate one. To solve this issue I use two Dist::Zilla plugins from &lt;a href=&#34;https://metacpan.org/author/RTHOMPSON&#34;&gt;Ryan Thompson&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;setup:3e7badd427fe2f7b2dcf3dadf6e1d80b&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;To use the code in this article, you&amp;rsquo;ll need to install Dist::Zilla and the two plugin modules described below. You can do that with &lt;code&gt;cpan&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Dist::Zilla \
  Dist::Zilla::Plugin::ReadmeAnyFromPod  \
  Dist::Zilla::Plugin::CopyFilesFromBuild
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re installing Dist::Zilla consider using &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanminus&lt;/a&gt; instead, with no tests for a much faster install:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpanm --notest Dist::Zilla \ 
  Dist::Zilla::Plugin::ReadmeAnyFromPod \
  Dist::Zilla::Plugin::CopyFilesFromBuild
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-a-readme-automatically:3e7badd427fe2f7b2dcf3dadf6e1d80b&#34;&gt;Creating a readme automatically&lt;/h3&gt;

&lt;p&gt;Ryan&amp;rsquo;s module &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::ReadmeAnyFromPod&#34;&gt;Dist::Zilla::Plugin::ReadmeAnyFromPod&lt;/a&gt; can generate a readme automatically, in any common format. It uses the Pod text from the main modules in the distribution. I use it to create my GitHub readme files in Pod, by adding the following text to my &lt;code&gt;dist.ini&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ReadmeAnyFromPod]
type = pod 
filename = README.pod
location = root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I build the distribution with Dist::Zilla, it will generate a new readme for me, including the author, copyright and version information in addition to the documentation already in the main module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ dzil build &amp;amp;&amp;amp; dzil clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line instructs Dist::Zilla to build the distribution, which generates the new &lt;code&gt;README.pod&lt;/code&gt; and then clean up the build files that it generated, leaving a clean working directory.&lt;/p&gt;

&lt;h3 id=&#34;adding-a-license:3e7badd427fe2f7b2dcf3dadf6e1d80b&#34;&gt;Adding a license&lt;/h3&gt;

&lt;p&gt;I use another module from Ryan, &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::CopyFilesFromBuild&#34;&gt;Dist::Zilla::Plugin::CopyFilesFromBuild&lt;/a&gt; to copy the software license from the Dist::Zilla build into my project directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[CopyFilesFromBuild]
copy = LICENSE
[GatherDir]
exclude_filename = LICENSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will copy the license out of the build directory into the root project directory. The &lt;code&gt;exclude_filename&lt;/code&gt; clause is there so that during the &lt;em&gt;next&lt;/em&gt; build, Dist::Zilla does not include the generated license in the working directory of files. Running this in the same way as before, I can generate whatever license text I want for my distribution (the type of license is specified in the &lt;code&gt;dist.ini&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ dzil build &amp;amp;&amp;amp; dzil clean
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;helping-others:3e7badd427fe2f7b2dcf3dadf6e1d80b&#34;&gt;Helping others&lt;/h3&gt;

&lt;p&gt;Dist::Zilla is great, but if you don&amp;rsquo;t have it, installing a distribution from GitHub can really suck. Recently a friend was trying to deploy some code of mine to his Macbook with a vanilla Perl install. I didn&amp;rsquo;t want to upload the code to CPAN and wait for PAUSE to index it. Installing Dist::Zilla on the his machine was not a great option either: Dist::Zilla is a beast. According to Devel::Modlist, Dist::Zilla has &lt;strong&gt;178&lt;/strong&gt; non-core dependencies (including indirectly-used modules). That&amp;rsquo;s the price you pay for automation and modularity - Dist::Zilla is working hard so us module authors don&amp;rsquo;t have to. But for someone who barely knows Perl, installing Dist::Zilla in a virgin environment can be a nightmare.&lt;/p&gt;

&lt;p&gt;To get around this issue, I used &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::CopyFilesFromBuild&#34;&gt;Dist::Zilla::Plugin::CopyFilesFromBuild&lt;/a&gt; again to copy the Makefile.PL and cpanfile into the project directory. My friend then cloned the directory with Git and used &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanminus&lt;/a&gt; to install it. Easy! It worked so well, I&amp;rsquo;m going to include a Makefile and cpanfile in my GitHub repos from now on.&lt;/p&gt;

&lt;h3 id=&#34;a-sample-dist-zilla-config:3e7badd427fe2f7b2dcf3dadf6e1d80b&#34;&gt;A sample Dist::Zilla config&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s a &lt;code&gt;dist.ini&lt;/code&gt; from a &lt;a href=&#34;https://github.com/dnmfarrell/Settlers-Game&#34;&gt;repo&lt;/a&gt; of mine that uses the code in this article. As certain directives are required in order, it can be useful to see the entire context:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name    = Settlers-Game
author  = David Farrell 
license = FreeBSD
copyright_holder = David Farrell
copyright_year   = 2015
version = 0.06

[CPANFile]
[License]
[CopyFilesFromBuild]
copy = cpanfile
copy = LICENSE
copy = Makefile.PL
[GatherDir]
exclude_filename = cpanfile
exclude_filename = LICENSE
exclude_filename = Makefile.PL
[PkgVersion]
[AutoPrereqs]
[GithubMeta]
[ChangelogFromGit]
[MetaYAML]
[MetaJSON]
[MakeMaker]
[ModuleBuild]
[ManifestSkip]
[Manifest]
[PodWeaver]
[ReadmeAnyFromPod]
type = pod
filename = README.pod
location = root
[PodSyntaxTests]
[PodCoverageTests]
[TestRelease]
[Test::EOL]
[UploadToCPAN]
[ConfirmRelease]
[Clean]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use this config with Dist::Zilla you&amp;rsquo;ll need some additional plugins:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Dist::Zilla::Plugin::Clean \
  Dist::Zilla::Plugin::GithubMeta \
  Dist::Zilla::Plugin::ChangelogFromGit \
  Dist::Zilla::Plugin::PodWeaver
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion:3e7badd427fe2f7b2dcf3dadf6e1d80b&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Ok it&amp;rsquo;s not &lt;em&gt;all&lt;/em&gt; gravy. The copy file method has one downside: it overwrites the copied files every time they&amp;rsquo;re generated. This isn&amp;rsquo;t an issue for me; the commit diff only shows the changed lines, but some people may not like it.&lt;/p&gt;

&lt;p&gt;For more information on Dist::Zilla, check out the official &lt;a href=&#34;http://dzil.org/tutorial/contents.html&#34;&gt;documentation&lt;/a&gt;. For a completely different approach to releasing code to CPAN, you may like&lt;a href=&#34;https://metacpan.org/pod/%20Module::Release&#34;&gt;Module::Release&lt;/a&gt;. Oh and if you find yourself in a new development environment, needing to install dependencies for a local module, David Golden has a useful &lt;a href=&#34;http://www.dagolden.com/index.php/1528/five-ways-to-install-modules-prereqs-by-hand/&#34;&gt;post&lt;/a&gt; that includes five different ways to do it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Celebrate CPAN day on August 16th</title>
      <link>http://perltricks.com/article/109/2014/8/13/Celebrate-CPAN-day-on-August-16th/</link>
      <pubDate>Wed, 13 Aug 2014 12:43:17 +0000</pubDate>
      
      <guid>http://perltricks.com/article/109/2014/8/13/Celebrate-CPAN-day-on-August-16th/</guid>
      <description>

&lt;p&gt;Back in 1995 CPAN was a visionary concept that propelled Perl to the height of its popularity during the dotcom boom. For the first time there was a single, integrated online system for Perl programmers to distribute software. Today CPAN continues to go from &lt;a href=&#34;http://neilb.org/cpan-report/&#34;&gt;strength to strength&lt;/a&gt; as Perl&amp;rsquo;s &amp;ldquo;killer feature&amp;rdquo;. CPAN Day is August the 16th - the day of the first ever upload to CPAN, and a fantastic opportunity to celebrate our wonderful tool and give back to the Perl community.&lt;/p&gt;

&lt;h3 id=&#34;ways-to-celebrate:37fcf7f7809608d85d3fba77ced9a502&#34;&gt;Ways to celebrate&lt;/h3&gt;

&lt;p&gt;The idea of CPAN Day was conceived by Philippe Bruhat from an IRC conversation with Neil Bowers. Since then, Neil has blogged daily about different ways to celebrate CPAN Day. Most of these ideas are Neil&amp;rsquo;s:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Help make history by releasing a new &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/07/the-ghost-of-cpan-days-past.html&#34;&gt;distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Give your module good &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/07/give-your-modules-a-good-abstract.html&#34;&gt;extract&lt;/a&gt;, &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/craft-the-first-paragraph-of-your-description.html&#34;&gt;description&lt;/a&gt;, &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/07/give-your-modules-a-good-synopsis.html&#34;&gt;synopsis&lt;/a&gt; []() or &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/07/give-your-module-a-good-see-also-section.html&#34;&gt;see also&lt;/a&gt; section&lt;/li&gt;
&lt;li&gt;Thank a &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/thank-a-cpan-author-on-cpan-day.html&#34;&gt;CPAN author&lt;/a&gt; or acknowledge a &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/acknowledge-your-contributors-on-cpan-day.html&#34;&gt;contributor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Help keep Perl strong and donate to the &lt;a href=&#34;https://secure.donor.com/pf012/give&#34;&gt;Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Put your module on &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/put-your-cpan-distributions-on-github.html&#34;&gt;Github&lt;/a&gt; so other programmers can easily contribute&lt;/li&gt;
&lt;li&gt;Classify your &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/classify-your-rt-tickets-on-cpan-day.html&#34;&gt;RT tickets&lt;/a&gt; or fix a &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/fix-a-bug-on-cpan-day.html&#34;&gt;bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you have a stable module, let others know and update the distribution version to 1.0&lt;/li&gt;
&lt;li&gt;Check your &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/check-your-test-coverage-with-develcover.html&#34;&gt;test coverage&lt;/a&gt; with Devel::Cover&lt;/li&gt;
&lt;li&gt;Make your module more portable by fixing your CPAN Testers &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/fix-your-cpan-testers-failures.html&#34;&gt;failures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Increase your module&amp;rsquo;s &amp;ldquo;kwalitee&amp;rdquo; by improving your &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/get-cpants-clean-on-cpan-day.html&#34;&gt;CPANTS rating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maybe improve your module &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/dont-be-afraid-to-rename-your-module-dist.html&#34;&gt;name&lt;/a&gt; or remove the &lt;a href=&#34;http://blogs.perl.org/users/book/2014/08/curating-cpan-sometimes-mean-deleting-stuff.html&#34;&gt;module&lt;/a&gt; entirely&lt;/li&gt;
&lt;li&gt;Write an article about your favourite CPAN module&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So there are loads of different ways to contribute! Earlier today I caught up with Neil Bowers and asked him if he had to pick one, which was the most important contribution. Neil said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I would pick the see also section - it outlines other relevant modules, the pros and cons of each one and saves people time when first approaching a problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For you self-interested module authors out there, Neil also explained that a good SEE ALSO section can make your own module more popular. This is because &lt;a href=&#34;https://metacpan.org/&#34;&gt;metacpan&lt;/a&gt; is built on elastic search and by listing other modules in the SEE ALSO, you ensure that your modules appear in the search results for those other modules.&lt;/p&gt;

&lt;p&gt;So how will you celebrate CPAN Day? Even if you did just one of the above suggestions, you&amp;rsquo;d be supporting the community in some way. Apparently some of CPAN&amp;rsquo;s most prolific authors are planning large releases to CPAN. Diff records will be broken, commit history will be made. I&amp;rsquo;m planning to move my modules to GitHub and to thank an author. I can&amp;rsquo;t wait to see what everyone else does. The inaugural CPAN Day is August 16th 2014, let&amp;rsquo;s make it &lt;em&gt;our&lt;/em&gt; day!&lt;/p&gt;

&lt;h3 id=&#34;thanks:37fcf7f7809608d85d3fba77ced9a502&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;Thanks to Neil Bowers for contributing additional detail in support of this article.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rescue legacy code with modulinos</title>
      <link>http://perltricks.com/article/107/2014/8/7/Rescue-legacy-code-with-modulinos/</link>
      <pubDate>Thu, 07 Aug 2014 12:22:42 +0000</pubDate>
      
      <guid>http://perltricks.com/article/107/2014/8/7/Rescue-legacy-code-with-modulinos/</guid>
      <description>

&lt;p&gt;As businesses grow, they move into situations they didn&amp;rsquo;t anticipate and often have problems other businesses would love to have. Under rapid growth their codebase struggles to keep up. I&amp;rsquo;ve seen more bad code making money than I&amp;rsquo;ve seen good code making money, and it&amp;rsquo;s an exciting situation to fix. Modulinos have been a nice trick for me to move standalone programs toward a testable and manageable CPAN-like distribution.&lt;/p&gt;

&lt;p&gt;Modulinos isn&amp;rsquo;t an idea that I invented, but it&amp;rsquo;s something I popularized. I first got the idea from a talk by &lt;a href=&#34;http://blog.plover.com&#34;&gt;Mark Jason Dominus&lt;/a&gt; and the &lt;a href=&#34;https://github.com/Perl/perl5/blob/blead/lib/diagnostics.pm&#34;&gt;diagnostics&lt;/a&gt; module, written by Tom Christiansen way back in 1995. In this article I&amp;rsquo;ll talk a little about the trick, but more about why and how I&amp;rsquo;ve used it.&lt;/p&gt;

&lt;p&gt;The trick involves using &lt;a href=&#34;http://perldoc.perl.org/functions/caller.html&#34;&gt;caller&lt;/a&gt; to decide how a Perl file should act depending on how it&amp;rsquo;s loaded. When run from the command line, it acts like a program, but when loaded as a module, it doesn&amp;rsquo;t run anything while still making its subroutines and packages available. In the second edition of &lt;a href=&#34;http://www.masteringperl.org/&#34;&gt;Mastering Perl&lt;/a&gt;, I expanded this a bit to check for the presence of a test harness so it could run methods that start with &lt;code&gt;test_&lt;/code&gt;, a Python feature I&amp;rsquo;ve liked.&lt;/p&gt;

&lt;p&gt;You can see the basic structure in &lt;a href=&#34;https://metacpan.org/pod/Modulino::Test&#34;&gt;Modulino::Test&lt;/a&gt;, part of the &lt;a href=&#34;https://metacpan.org/release/Modulino-Demo&#34;&gt;Modulino::Demo&lt;/a&gt; distribution:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Modulino::Test;
use utf8;
use strict;
use warnings;

use v5.10;

our $VERSION = &#39;0.10_01&#39;;

sub _running_under_tester { !! $ENV{CPANTEST} }

sub _running_as_app { ! defined scalar caller(1) }

sub _loaded_as_module { defined scalar caller(1); }

my $method = do {
        if( _running_under_tester()   ) { &#39;test&#39; }
    elsif( _loaded_as_module()       ) { undef  }
    elsif( _running_as_app()            ) { &#39;run&#39;  }
    else                                { undef }
    };

__PACKAGE__-&amp;gt;$method(@ARGV) if defined $method;

sub test { ... }
sub run  { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I originally wrote about modulinos in &lt;a href=&#34;http://www.perlmonks.org/index.pl?node_id=396759&#34;&gt;How a script becomes a module&lt;/a&gt; on Perlmonks, and that&amp;rsquo;s where I first used the term. I might have even invented in while creating that post. I expanded it a little bit for &lt;a href=&#34;http://www.drdobbs.com/scripts-as-modules/184416165&#34;&gt;Scripts as Modules&lt;/a&gt; for &lt;em&gt;The Perl Journal&lt;/em&gt; (now swallowed as &lt;em&gt;Dr. Dobbs Journal&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;At the time, I was doing quite a bit of work to translate legacy codebases into something more manageable. Instead of rewriting everything, I created paths to better behavior with immediate results. Part of this path is testing the existing codebase so I could recreate it, bugs and rough edges included, in the next part. Moving standalone scripts to libraries or modules is a big part of that; I have to maintain the program behavior, but I want to unit test its innards.&lt;/p&gt;

&lt;p&gt;I have quite a bit of fun organizing a messy and (previously) unmanaged codebase. A little work makes a big difference and gives quick gains. From there it&amp;rsquo;s an easy path toward adding tests. It&amp;rsquo;s part of my motivation for &lt;a href=&#34;http://search.cpan.org/dist/scriptdist/&#34;&gt;scriptdist&lt;/a&gt;, which I wrote about in &lt;a href=&#34;http://www.drdobbs.com/web-development/automating-distributions-with-scriptdist/184416112&#34;&gt;Automating Distributions with scriptdist&lt;/a&gt;. Given a stand-alone program, I used that tool to build a distribution around it and include the test files. The program file stays the same, but once wrapped in the distribution goodness, I can start the transformation. Even if this code will never make it to CPAN, I can still use all the CPAN tools by making it look like a CPAN distribution.&lt;/p&gt;

&lt;h3 id=&#34;converting-a-script-to-a-modulino:f0a7da8ae6aa523fe204e85806c139f8&#34;&gt;Converting a script to a modulino&lt;/h3&gt;

&lt;p&gt;Suppose I start with a script. Here&amp;rsquo;s a short one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/perl

print &amp;quot;Hello World!\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even this simple program has problems (we never have trouble finding faults with programs; it&amp;rsquo;s almost bloodsport in some parts!). I can&amp;rsquo;t change where the output goes and it&amp;rsquo;s hard-coded to use English.&lt;/p&gt;

&lt;p&gt;My first step is to make this a program that behaves the same but has a different structure. Larry designed Perl to do away with the &lt;code&gt;main&lt;/code&gt; subroutine required by many other languages, but I bring it back:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/perl

__PACKAGE__-&amp;gt;run();

sub run {
    print &amp;quot;Hello World!\n&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;__PACKAGE__&lt;/code&gt; token is a compiler directive that refers to the current package. It calls the &lt;code&gt;run&lt;/code&gt; subroutine, which operates the same as it introduces a new scope. Some black magic and weird idioms might break, but, for the most part, this should (a dangerous word!) run the same. At this point, I&amp;rsquo;m probably also introducing this legacy codebase to source control, so a small change with no new behavior makes for a good first patch to a new branch.&lt;/p&gt;

&lt;p&gt;This program is now mostly a module and it has the distribution structure that allows me to test it. I can start to create acceptance tests (end-to-end, or some other label even) since I haven&amp;rsquo;t had a way to reach into the code itself. These form the basis of the regression tests I can use to check the new code against the original code.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m satisfied that the new code works, I can make more changes. This is where the modulino idea comes in. I want to test the code without automatically executing the code in &lt;code&gt;run&lt;/code&gt;. I can use the &lt;code&gt;caller&lt;/code&gt; trick; I don&amp;rsquo;t execute the code if there&amp;rsquo;s a higher level in the call stack (a program would be at the top):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/perl

__PACKAGE__-&amp;gt;run() unless caller;

sub run {
    print &amp;quot;Hello World!\n&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s another small change in the actual code, but a significant change in behavior. I can get to the code in a test program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Test::More;

subtest &#39;load program&#39; =&amp;gt; sub {
    require_ok( &#39;scripts/program.pl&#39; );
    };
    
subtest &#39;test innards&#39; =&amp;gt; sub {
    ok( defined &amp;amp;run, &#39;Run subroutine is defined&#39; );
    };

done_testing();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From there the path forward is more clear. I can add a package statement to the program and start to refactor the &lt;code&gt;run&lt;/code&gt;, using the test best practices I know. Soon the development morphs into module maintenance and its history as a standalone program doesn&amp;rsquo;t matter anymore. As I go through the process, I&amp;rsquo;ve also set the eventual maintainers on the right path.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/deia/321829326/in/photolist-ursDu-71wk9y-nYpsHQ-e3P2i9-e1TW4-32LHXt-e4bYT8-e4bYNV-e4hB2m-e4hB5Y-69pxDc-7YWXJX-cwAfvs-e1TUY-4zkBG7-dcyLpA-aj8HAk-ajbu5L-ajbuh7-94j7Df-94jsgo-d9QS9u-dcyJAE-dcyHcT-bavZfB-2nPfVE-52nPvi-RBuWd-4tpcsD-55P2hs-4WaC4T-7w6TC-9FUUPM-94jwv1-8ohTWP-94g9Ep-6ijaiB-94jpgQ-94jcQd-94gcw8-94jveU-94jy93-94g6v8-94j9nu-94jmud-dh1bAe-dcyJoM-dcyJNK-duC43R-dcyK6z&#34;&gt;Andréia Bohner&lt;/a&gt;, the image has been digitally altered.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - June 2014</title>
      <link>http://perltricks.com/article/100/2014/7/3/What-s-new-on-CPAN---June-2014/</link>
      <pubDate>Thu, 03 Jul 2014 14:00:46 +0000</pubDate>
      
      <guid>http://perltricks.com/article/100/2014/7/3/What-s-new-on-CPAN---June-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:abf366ff55bb196a64a3099d4c922c90&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a REST API for your database with &lt;a href=&#34;https://metacpan.org/pod/Cookieville&#34;&gt;Cookieville&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::SaleaeLogic&#34;&gt;Device::SaleaeLogic&lt;/a&gt; provides a Perl interface to Saleae Logic devices&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Etcd&#34;&gt;Etcd&lt;/a&gt; is a Perl API for etcd, a key value store&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::Coder::OpenCage&#34;&gt;Geo::Coder::OpenCage&lt;/a&gt; is a Perl API for OpenCage a geocoding service&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::OEIS&#34;&gt;Math::OEIS&lt;/a&gt; provides an interface to Online Encyclopaedia of Integer Sequences. Who knew there was such a thing!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::PMP&#34;&gt;Net::PMP&lt;/a&gt; is an interface for the Public Media Platform&lt;/li&gt;
&lt;li&gt;Manage GNU Screen windows easily with &lt;a href=&#34;https://metacpan.org/pod/Term::GnuScreen::WindowArrayLike&#34;&gt;Term::GnuScreen::WindowArrayLike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Spotify&#34;&gt;WWW::Spotify&lt;/a&gt; provide an interface to the Spotify API&lt;/li&gt;
&lt;li&gt;Interact with a RabbitMQ broker using &lt;a href=&#34;https://metacpan.org/pod/WWW::RabbitMQ::Broker&#34;&gt;WWW::RabbitMQ::Broker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::GoKGS&#34;&gt;WWW::GoKGS&lt;/a&gt; is a scraper for the KGS Go server&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Amazon::Route53::Caching&#34;&gt;WebService::Amazon::Route53::Caching&lt;/a&gt; implements a caching layer for the Amazon Route 53 DNS service&lt;/li&gt;
&lt;li&gt;Send error reports to raygun.io from your Plack middleware with &lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::Raygun&#34;&gt;Plack::Middleware::Raygun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:abf366ff55bb196a64a3099d4c922c90&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Run CPANTS Kwalitee tests on your distribution with &lt;a href=&#34;https://metacpan.org/pod/App::CPANTS::Lint&#34;&gt;App::CPANTS::Lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Goto::Amazon&#34;&gt;App::Goto::Amazon&lt;/a&gt; provides a shortcut command for connecting to Amazon EC2 instances&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::HPGL2Cadsoft&#34;&gt;App::HPGL2Cadsoft&lt;/a&gt; converts HPGL files to Cadsoft Eagle script (a circuit board design tool)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:abf366ff55bb196a64a3099d4c922c90&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Pg::Pool::Multiserver&#34;&gt;AnyEvent::Pg::Pool::Multiserver&lt;/a&gt; let&amp;rsquo;s you make asynchronous DB calls to multiple Postgres servers, using AnyEvent::Pg&lt;/li&gt;
&lt;li&gt;Convert CSS into a Regexp::Grammar parse tree with &lt;a href=&#34;https://metacpan.org/pod/CSS::Selector::Grammar&#34;&gt;CSS::Selector::Grammar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run massive numbers of insert and update statements on a MySQL database using &lt;a href=&#34;https://metacpan.org/pod/DBIx::TxnPool&#34;&gt;DBIx::TxnPool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Deeme&#34;&gt;Deeme&lt;/a&gt; is a &amp;ldquo;Database-agnostic driven Event Emitter&amp;rdquo; with support for multiple backends&lt;/li&gt;
&lt;li&gt;Auto-release your distributions to Stratopan with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::UploadToStratopan&#34;&gt;Dist::Zilla::Plugin::UploadToStratopan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lookup USA state names and capitals with &lt;a href=&#34;https://metacpan.org/pod/Geo::States&#34;&gt;Geo::States&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MySQL::Explain::Parser&#34;&gt;MySQL::Explain::Parser&lt;/a&gt; converts MySQL&amp;rsquo;s explain output into Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:abf366ff55bb196a64a3099d4c922c90&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBG&#34;&gt;DBG&lt;/a&gt; provides a collection of useful debugging functions for Perl code&lt;/li&gt;
&lt;li&gt;Another useful debugging too: get a stack trace for all system calls with &lt;a href=&#34;https://metacpan.org/pod/Devel::Trace::Syscall&#34;&gt;Devel::Trace::Syscall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Quickly generate Perl data structures using &lt;a href=&#34;https://metacpan.org/pod/Data::Random::Structure&#34;&gt;Data::Random::Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::AuthorizedMethodRoles&#34;&gt;MooseX::AuthorizedMethodRoles&lt;/a&gt; provides role checking through whitelist methods&lt;/li&gt;
&lt;li&gt;Get Pango constants without the heft of Glib and Gtk2 libraries with &lt;a href=&#34;https://metacpan.org/pod/PangoConst&#34;&gt;PangoConst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Sort::Key::Domain&#34;&gt;Sort::Key::Domain&lt;/a&gt; sorts domain names&lt;/li&gt;
&lt;li&gt;Get Jenkins compatible TAP test output with &lt;a href=&#34;https://metacpan.org/pod/TAP::Formatter::Jenkins&#34;&gt;TAP::Formatter::Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::RequiresInternet&#34;&gt;Test::RequiresInternet&lt;/a&gt; will check for Internet connectivity before running tests - very useful.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:abf366ff55bb196a64a3099d4c922c90&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Looking for the gramatically correct version of &amp;ldquo;Buffalo buffalo &amp;hellip;&amp;rdquo;? Look no further because &lt;a href=&#34;https://metacpan.org/pod/Acme::Buffalo::Buffalo&#34;&gt;Acme::Buffalo::Buffalo&lt;/a&gt; has got you covered&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::MilkyHolmes&#34;&gt;Acme::MilkyHolmes&lt;/a&gt; provides character information on the famous Japanese animated cartoon&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Games::Go::Referee&#34;&gt;Games::Go::Referee&lt;/a&gt; analyses sgf files for Go rule violations&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:abf366ff55bb196a64a3099d4c922c90&#34;&gt;Web&lt;/h3&gt;

&lt;p&gt;Conveniently run A/B testing on CGI applications with &lt;a href=&#34;https://metacpan.org/pod/CGI::Application::Plugin::AB&#34;&gt;CGI::Application::Plugin::AB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/CGI::Application::Plugin::Throttle&#34;&gt;CGI::Application::Plugin::Throttle&lt;/a&gt; implements a throttling function for users (identifies by IP address)&lt;/p&gt;

&lt;p&gt;Avoid connecting to blacklisted URLs with &lt;a href=&#34;https://metacpan.org/pod/HTTP::Tiny::Paranoid&#34;&gt;HTTP::Tiny::Paranoid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New Dancer modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::CORS&#34;&gt;Dancer::Plugin::CORS&lt;/a&gt; configures cross-origin sharing rules&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Negotiate&#34;&gt;Dancer::Plugin::Negotiate&lt;/a&gt; wraps HTTP::Negotiate&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Swig&#34;&gt;Dancer::Plugin::Swig&lt;/a&gt; implements a Swig wrapper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;New Mojolicious modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Logf&#34;&gt;Mojolicious::Plugin::Logf&lt;/a&gt; flattens and logs complex data structures using sprintf&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::MoreUtilHelpers&#34;&gt;Mojolicious::Plugin::MoreUtilHelpers&lt;/a&gt; implements some utility methods&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::NetsPayment&#34;&gt;Mojolicious::Plugin::NetsPayment&lt;/a&gt; is an experimental module for making payments using Nets&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::PayPal&#34;&gt;Mojolicious::Plugin::PayPal&lt;/a&gt; is an experimental module for making payments using PayPal&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MojoX::GlobalEvents&#34;&gt;MojoX::GlobalEvents&lt;/a&gt; is an event handler&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Perl distributions, modules, packages explained</title>
      <link>http://perltricks.com/article/96/2014/6/13/Perl-distributions--modules--packages-explained/</link>
      <pubDate>Fri, 13 Jun 2014 12:26:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/96/2014/6/13/Perl-distributions--modules--packages-explained/</guid>
      <description>

&lt;p&gt;&lt;em&gt;It can be confusing for new Perl programmers to understand the terminology used to describe Perl distributions and their accompanying files. This article explains the core concepts.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;package-module-distribution:17113ac399bf5596ee1d46e47a6ce58b&#34;&gt;Package, Module, Distribution&lt;/h3&gt;

&lt;p&gt;A Perl package is just a section of code defined in a .pm file, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Data::Connector;

sub connect {
    # do something
    ...
}
1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The start of the package begins with the &amp;ldquo;package&amp;rdquo; declaration. A package is a lot like a class, except that it can denote a collection of subroutines and variables, and not necessarily be instantiated as an object. Usually a .pm file will have one package declaration per file, but you can have multiple packages in a .pm file, similar to Java and C# where you can have multiple classes in a single file.&lt;/p&gt;

&lt;p&gt;A module is a .pm file (&amp;ldquo;pm&amp;rdquo; means Perl Module). When you import a module with &amp;ldquo;require&amp;rdquo; or &amp;ldquo;use&amp;rdquo;, you are literally referencing the file name and not the package(s) contained in the file. For example to import the &amp;ldquo;Data::Connector&amp;rdquo; package defined above, we could save it in a file called &amp;ldquo;Whatever.pm&amp;rdquo; and later reference it in a script like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Whatever;

# call connect subroutine declared in Data::Connector package
Data::Connector::connect();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All .pm files must end with a &amp;ldquo;true&amp;rdquo; value per Perl&amp;rsquo;s requirements, so most authors either place &amp;ldquo;1;&amp;rdquo; or &amp;ldquo;__PACKAGE__;&amp;rdquo; as the last line of the .pm file. In Perl a true value is any value that is not: null, zero or a zero-length string.&lt;/p&gt;

&lt;p&gt;A distribution is a collection of files that usually includes a Perl module and several other files. There is no strict standard as to which files must be included in a distribution, however for the distribution to be indexed on CPAN and install-able by the CPAN command line client, the distribution needs to include some core files. Distributions have versions - so a Perl module on CPAN will have one distribution for every version of the module. These are the main files and directories you&amp;rsquo;ll encounter in distributions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;README - a brief description of how to install the distribution, sometimes includes a license and examples of how to use the module(s).&lt;/li&gt;
&lt;li&gt;LICENSE - the license for the code - a non-commercial license like the GPL, artistic, BSD etc are common.&lt;/li&gt;
&lt;li&gt;META.yml/ META.json - files that contain the metadata describing the distribution: the author, license, version, pre-requisite modules for use etc. They are auto-generated as part of the distribution build process and can be ignored.&lt;/li&gt;
&lt;li&gt;Makefile.PL and or Build.PL - these are Perl files that are used to install the module(s) in the distribution. Worth looking at when you&amp;rsquo;re having installation issues.&lt;/li&gt;
&lt;li&gt;MANIFEST - a list of the files included in the distribution.&lt;/li&gt;
&lt;li&gt;lib - a directory containing Perl modules - usually the core code of the distribution.&lt;/li&gt;
&lt;li&gt;t - the test files directory. These are run when the module is installed. If you have failing tests on installation, it can be helpful to review the test files in the t/ directory to find out the specifics of the test.&lt;/li&gt;
&lt;li&gt;bin - if the distribution contains an app, (Perl script) it will be in here. Often the app uses modules contained in the lib directory.&lt;/li&gt;
&lt;li&gt;Changes - a list of changes from distribution version to version.&lt;/li&gt;
&lt;li&gt;xt - the extended test files directory, usually used for author tests that you don&amp;rsquo;t need to run.&lt;/li&gt;
&lt;li&gt;eg - a directory of example Perl scripts, using the module(s) contained in the distribution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the typical directories and files found in a Perl distribution but as there is no fixed standard, distribution authors are free to include and exclude the files they wish. For a good example, check out the files provided by David Golden in a distribution of the the popular &lt;a href=&#34;https://metacpan.org/source/DAGOLDEN/HTTP-Tiny-0.043&#34;&gt;HTTP::Tiny&lt;/a&gt; module.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:17113ac399bf5596ee1d46e47a6ce58b&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Once you get to grips with Perl packages, modules and distributions it&amp;rsquo;s far easier to start hacking on Perl modules that don&amp;rsquo;t work the way you want them to. For example, in the case of a module that won&amp;rsquo;t install, you can download the distribution from CPAN (at the command line &amp;ldquo;cpan -g Module::Name&amp;rdquo;), untar it, and patch the failing tests, or examine the source code in the lib directory and resolve a bug or two. Before long you&amp;rsquo;ll be releasing your own distributions to CPAN!&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F96%2F2014%2F6%2F13%2FPerl-distributions-modules-packages-explained&amp;amp;text=Perl+distributions%2C+modules%2C+packages+explained&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F96%2F2014%2F6%2F13%2FPerl-distributions-modules-packages-explained&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debunk Perl&#39;s magic with B::Deparse</title>
      <link>http://perltricks.com/article/89/2014/5/15/Debunk-Perl-s-magic-with-B--Deparse/</link>
      <pubDate>Thu, 15 May 2014 12:19:51 +0000</pubDate>
      
      <guid>http://perltricks.com/article/89/2014/5/15/Debunk-Perl-s-magic-with-B--Deparse/</guid>
      <description>

&lt;p&gt;&lt;em&gt;The &lt;a href=&#34;https://metacpan.org/pod/B::Deparse&#34;&gt;B::Deparse&lt;/a&gt; module compiles a Perl program and then deparses it, producing the internally generated source code. What&amp;rsquo;s the point of that you say? Well it let&amp;rsquo;s you look behind the curtain and inspect how Perl is structuring the program code which can help you debug it, among other things.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;example:c51e9e6cf0be3f9a1a44b085736f67c8&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Consider the slurpy parameter optimization from this week&amp;rsquo;s subroutine signatures &lt;a href=&#34;http://perltricks.com/article/88/2014/5/12/Benchmarking-subroutine-signatures&#34;&gt;article&lt;/a&gt;. We know from speed benchmarks that the signature becomes ~30% faster with a slurpy parameter, and we can reason about why that is the case, but B::Deparse can &lt;em&gt;show&lt;/em&gt; us why. Here is the code for two signatures, one normal and one using the slurpy parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature &#39;signatures&#39;;

sub normal_signature ($foo) {}

sub slurpy_signature ($foo, @) {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if we save the code as signatures.pl, we can use B::Deparse to inspect it at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl -MO=Deparse signatures.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This generates the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub normal_signature {
    use feature &#39;signatures&#39;;
    die &#39;Too many arguments for subroutine&#39; unless @_ &amp;lt;= 1;
    die &#39;Too few arguments for subroutine&#39; unless @_ &amp;gt;= 1;
    my $foo = $_[0];
    ();
}
sub slurpy_signature {
    use feature &#39;signatures&#39;;
    die &#39;Too few arguments for subroutine&#39; unless @_ &amp;gt;= 1;
    my $foo = $_[0];
    ();
}
signatures.pl syntax OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The generated code shows how Perl structured the signatures.pl code internally. You can see how &amp;ldquo;slurpy_signature&amp;rdquo; has one fewer die statement. This explains the improved performance as the subroutine has less to do. Magic debunked!&lt;/p&gt;

&lt;h3 id=&#34;more-on-b-deparse:c51e9e6cf0be3f9a1a44b085736f67c8&#34;&gt;More on B::Deparse&lt;/h3&gt;

&lt;p&gt;B::Deparse comes with extensive &lt;a href=&#34;https://metacpan.org/pod/B::Deparse&#34;&gt;documentation&lt;/a&gt; and has some useful options for altering the output.&lt;/p&gt;

&lt;p&gt;One of the many gems in brian d foy&amp;rsquo;s &lt;a href=&#34;http://www.amazon.com/gp/product/144939311X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=144939311X&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;Mastering Perl&lt;/a&gt; book is the B::Deparse entry in the &amp;ldquo;Cleaning up Perl&amp;rdquo; chapter (affiliate link). In the book brian shows several uses for B::Deparse including debugging one-liners and decoding obfuscated code. You can read a draft version of the chapter online &lt;a href=&#34;http://chimera.labs.oreilly.com/books/1234000001527/ch07.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;PerlMonks has an &lt;a href=&#34;http://www.perlmonks.org/?node_id=804232&#34;&gt;interesting&lt;/a&gt; entry for those curious as to why the command line use of B::Deparse is &amp;ldquo;-MO=Deparse&amp;rdquo; and not &amp;ldquo;-MB::Deparse&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;thanks:c51e9e6cf0be3f9a1a44b085736f67c8&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;Thanks again to Perl Pumpking and &lt;a href=&#34;http://www.youtube.com/watch?v=Sp102BECq8s&#34;&gt;teflon&lt;/a&gt; man Ricardo Signes who put me on to using B::Deparse on subroutine signatures.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/barkbud/4165385634&#34;&gt;bark&lt;/a&gt; image has been digitaly altered&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - April 2014</title>
      <link>http://perltricks.com/article/86/2014/5/1/What-s-new-on-CPAN---April-2014/</link>
      <pubDate>Thu, 01 May 2014 12:20:07 +0000</pubDate>
      
      <guid>http://perltricks.com/article/86/2014/5/1/What-s-new-on-CPAN---April-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. April was a mix but there were a few gems amongst the dust. Think &amp;ldquo;Atari landfill excavation&amp;rdquo; and enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:a1e18cc475b25ae187356826556ddec3&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Pinboard&#34;&gt;WWW::Pinboard&lt;/a&gt; is an API for pinboard.in&lt;/li&gt;
&lt;li&gt;Export your gmail rules into a procmail format with &lt;a href=&#34;https://metacpan.org/pod/Mail::Google::Procmailrc&#34;&gt;Mail::Google::Procmailrc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:a1e18cc475b25ae187356826556ddec3&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::pdf2json&#34;&gt;Alien::pdf2json&lt;/a&gt; installs pdf2json which can also convert PDFs to XML&lt;/li&gt;
&lt;li&gt;Keep two instances of Music Player Daemon in sync with &lt;a href=&#34;https://metacpan.org/pod/App::MPDSync&#34;&gt;App::MPDSync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Augment your code review process with &lt;a href=&#34;https://metacpan.org/pod/Git::Code::Review&#34;&gt;Git::Code::Review&lt;/a&gt; (tutorial &lt;a href=&#34;https://metacpan.org/pod/Git::Code::Review::Tutorial&#34;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Analyze the results of the du command with &lt;a href=&#34;https://metacpan.org/pod/distribution/App-Du-Analyze/bin/analyze-du&#34;&gt;App::Du::Analyze&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:a1e18cc475b25ae187356826556ddec3&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Generate fake data intended for a relational database with &lt;a href=&#34;https://metacpan.org/pod/Data::Generator::FromDDL&#34;&gt;Data::Generator::FromDDL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Automating your life with &lt;a href=&#34;https://metacpan.org/pod/Exobrain&#34;&gt;Exobrain&lt;/a&gt;? Now connect to more services with &lt;a href=&#34;https://metacpan.org/pod/Exobrain::Foursquare&#34;&gt;Exobrain::HabitRPG&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Exobrain::Foursquare&#34;&gt;Exobrain::Foursquare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Store your serealized Perl data structure with &lt;a href=&#34;https://metacpan.org/pod/SerealX::Store&#34;&gt;SerealX::Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Types::DateTime&#34;&gt;Types::DateTime&lt;/a&gt; provides a Moo/Moose compatible datetime type constraint&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:a1e18cc475b25ae187356826556ddec3&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create your own BackPAN index with the aptly named &lt;a href=&#34;https://metacpan.org/pod/BackPAN::Index::Create&#34;&gt;BackPAN::Index::Create&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckBin&#34;&gt;Dist::Zilla::Plugin::CheckBin&lt;/a&gt; will add a check to your distribution that a certain command is available&lt;/li&gt;
&lt;li&gt;Enfroce strict version numbers with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckStrictVersion&#34;&gt;Dist::Zilla::Plugin::CheckStrictVersion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::PAUSE::Permissions&#34;&gt;Dist::Zilla::Plugin::Test::PAUSE::Permissions&lt;/a&gt; will check your PAUSE permissions at dzil&amp;rsquo;s gather files stage&lt;/li&gt;
&lt;li&gt;Want dzil to add a date to your distro but not change the line numbers? &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::OurDate&#34;&gt;Dist::Zilla::Plugin::OurDate&lt;/a&gt; is your friend&lt;/li&gt;
&lt;li&gt;Export lexical variables in your packages with &lt;a href=&#34;https://metacpan.org/pod/Exporter::LexicalVars&#34;&gt;Exporter::LexicalVars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read and edit ELAN files with &lt;a href=&#34;https://metacpan.org/pod/File::ELAN&#34;&gt;File::ELAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Re-using the same modules over and over in your solution? &lt;a href=&#34;https://metacpan.org/pod/Import::Base&#34;&gt;Import::Base&lt;/a&gt; let&amp;rsquo;s you reduce your import boilerplate and declare a base set of modules&lt;/li&gt;
&lt;li&gt;Working with thousands of Perl objects and need an efficient implementation? Take a look at &lt;a href=&#34;https://metacpan.org/pod/Monjon&#34;&gt;Monjon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you get frustrated waiting for perldoc to load, you may have issues. Also, see &lt;a href=&#34;https://metacpan.org/pod/Pod::Perldoc::Cache&#34;&gt;Pod::Perldoc::Cache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:a1e18cc475b25ae187356826556ddec3&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This is an incredible module; just use &lt;a href=&#34;https://metacpan.org/pod/Acme::Futuristic::Perl&#34;&gt;Acme::Futuristic::Perl&lt;/a&gt; to get Perl 7 running on your machine!&lt;/li&gt;
&lt;li&gt;If having Perl 7 isn&amp;rsquo;t enough, perhaps you&amp;rsquo;d like sigil-less scalars? Try &lt;a href=&#34;https://metacpan.org/pod/bare&#34;&gt;bare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;maths-science-language:a1e18cc475b25ae187356826556ddec3&#34;&gt;Maths, Science &amp;amp; Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Is today a holiday? It might be in the Slovak Republic. Find out with Perl and &lt;a href=&#34;https://metacpan.org/pod/Date::Holidays::SK&#34;&gt;Date::Holidays::SK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Path::Hilbert&#34;&gt;Path::Hilbert&lt;/a&gt; converts between 1 dimensional and 2 dimensional spaces using the Hilbert curve algoritm&lt;/li&gt;
&lt;li&gt;Capitalize Portuguese text with &lt;a href=&#34;https://metacpan.org/pod/Lingua::PT::Capitalizer&#34;&gt;Lingua::PT::Capitalizer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:a1e18cc475b25ae187356826556ddec3&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::ModCluster&#34;&gt;Catalyst::Plugin::ModCluster&lt;/a&gt; will register your Catalyst application with an apache mod_cluster&lt;/li&gt;
&lt;li&gt;Authenticate your users with Google&amp;rsquo;s OAuth on Dancer using &lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Auth::Google&#34;&gt;Dancer::Plugin::Auth::Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tired of Template::Toolkit on Dancer2? Check out &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Template::TextTemplate&#34;&gt;Dancer2::Template::TextTemplate&lt;/a&gt; for a more Perlish templating option&lt;/li&gt;
&lt;li&gt;Connect Mojo::UserAgent to the Cloudflare API with &lt;a href=&#34;https://metacpan.org/pod/Mojo::Cloudflare&#34;&gt;Mojo::Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::YR&#34;&gt;Mojo::YR&lt;/a&gt; is an API for the NR.YO weather API&lt;/li&gt;
&lt;li&gt;Enable plaintext route definitions in Mojo with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::PlainRoutes&#34;&gt;Mojolicious::Plugin::PlainRoutes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F86%2F2014%2F5%2F1%2FWhat-s-new-on-CPAN-April-2014&amp;amp;text=What%27s+new+on+CPAN+-+April+2014&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F86%2F2014%2F5%2F1%2FWhat-s-new-on-CPAN-April-2014&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - March 2014</title>
      <link>http://perltricks.com/article/82/2014/4/4/What-s-new-on-CPAN---March-2014/</link>
      <pubDate>Fri, 04 Apr 2014 03:20:11 +0000</pubDate>
      
      <guid>http://perltricks.com/article/82/2014/4/4/What-s-new-on-CPAN---March-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo; - a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. March was a bumper month for CPAN uploads - a veritable treasure trove of new modules for you to try out. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:b2c3405a2232e44b77dfa468d7950720&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Taco&#34;&gt;Alien::Taco&lt;/a&gt; let&amp;rsquo;s you connect and interact with a Taco server&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/CPAN::Testers::WWW::Reports::Query::Report&#34;&gt;CPAN::Testers::WWW::Reports::Query::Report&lt;/a&gt; will fetch CPAN Testers reports - very cool. Long module name though, if that bothers you,have a look at &lt;a href=&#34;https://metacpan.org/pod/Package::Abbreviate&#34;&gt;Package::Abbreviate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Interact with the Yahoo! Query API using &lt;a href=&#34;https://metacpan.org/pod/Business::YQL&#34;&gt;Business::YQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The curiously named &lt;a href=&#34;https://metacpan.org/pod/Devel::Chitin&#34;&gt;Devel::Chitin&lt;/a&gt; provides an API to the Perl debugger&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Graylog::Client&#34;&gt;Net::Graylog::Client&lt;/a&gt; is a Perl client for the open source graylog2 analysis and log server&lt;/li&gt;
&lt;li&gt;Retrieve Google autosuggestions with &lt;a href=&#34;https://metacpan.org/pod/WWW::Google::AutoSuggest&#34;&gt;WWW::Google::AutoSuggest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:b2c3405a2232e44b77dfa468d7950720&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Quickly create command line apps with &lt;a href=&#34;https://metacpan.org/pod/App::Basis&#34;&gt;App::Basis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Cleo&#34;&gt;App::Cleo&lt;/a&gt; let&amp;rsquo;s you playback command line commands for slick live demos&lt;/li&gt;
&lt;li&gt;Create your own self signed SSL certificates with &lt;a href=&#34;https://metacpan.org/pod/App::CreateSelfSignedSSL&#34;&gt;App::CreateSelfSignedSSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::RecordStream::Bio&#34;&gt;App::RecordStream::Bio&lt;/a&gt; enables easy processing of biology records&lt;/li&gt;
&lt;li&gt;Swiftly build Debian packages from templates with &lt;a href=&#34;https://metacpan.org/pod/App::makedpkg&#34;&gt;App::makedpkg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:b2c3405a2232e44b77dfa468d7950720&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Looking for a mediocre caching module? Check out &lt;a href=&#34;https://metacpan.org/pod/Cache::Meh&#34;&gt;Cache::Meh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Looking for an efficient, mutable shared memory module? Have a look at &lt;a href=&#34;https://metacpan.org/pod/Hash::SharedMem&#34;&gt;Hash::SharedMem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Raw&#34;&gt;DBIx::Raw&lt;/a&gt; aims to let you have an ORM-style interface with lower-level SQL querying - very interesting&lt;/li&gt;
&lt;li&gt;Detect binary and string data using &lt;a href=&#34;https://metacpan.org/pod/Data::Binary&#34;&gt;Data::Binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Censor&#34;&gt;Data::Censor&lt;/a&gt; can help you conveniently censor data&lt;/li&gt;
&lt;li&gt;Dynamically generate permutations from nested data using &lt;a href=&#34;https://metacpan.org/pod/Data::Tumbler&#34;&gt;Data::Tumbler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckStrictVersion&#34;&gt;Dist::Zilla::Plugin::CheckStrictVersion&lt;/a&gt; will validate your distribution version number on release&lt;/li&gt;
&lt;li&gt;Auto-generate a DOAP file for your Perl distribution using &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::DOAP&#34;&gt;Dist::Zilla::Plugin::DOAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MySQL::Partition&#34;&gt;MySQL::Partition&lt;/a&gt; will create partitions using MySQL tables - interesting idea but author has labelled alpha so buyer beware&lt;/li&gt;
&lt;li&gt;Easily parse XML/HTML with a simple markup language using &lt;a href=&#34;https://metacpan.org/pod/XML::Dataset&#34;&gt;XML::Dataset&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:b2c3405a2232e44b77dfa468d7950720&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a dashboard of information about CPAN distributions with &lt;a href=&#34;https://metacpan.org/pod/CPAN::Dashboard&#34;&gt;CPAN::Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Devel::OverloadInfo&#34;&gt;Devel::OverloadInfo&lt;/a&gt; lets you introspect overloaded operators&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dispatch::Profile&#34;&gt;Dispatch::Profile&lt;/a&gt; is a simple messaging framework&lt;/li&gt;
&lt;li&gt;Auto-increment your module version after every release with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::BumpVersionAfterRelease&#34;&gt;Dist::Zilla::Plugin::BumpVersionAfterRelease&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add a keywords entry to your module POD with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Keywords&#34;&gt;Dist::Zilla::Plugin::Keywords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Module::Spy&#34;&gt;Module::Spy&lt;/a&gt; monitors classes and objects method calls&lt;/li&gt;
&lt;li&gt;Ban use of specific modules with &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic::Policy::logicLAB::ModuleBlacklist&#34;&gt;Perl::Critic::Policy::logicLAB::ModuleBlacklist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;text-languages:b2c3405a2232e44b77dfa468d7950720&#34;&gt;Text &amp;amp; Languages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Detect if text is Japanese or not with &lt;a href=&#34;https://metacpan.org/pod/AI::Classifier::Japanese&#34;&gt;AI::Classifier::Japanese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Convert::Number::Armenian&#34;&gt;Convert::Number::Armenian&lt;/a&gt; will convert numerals between Armenian and Western representations&lt;/li&gt;
&lt;li&gt;Working with anagrams? uoy hsuold oklo ta &lt;a href=&#34;https://metacpan.org/pod/Lingua::Anagrams&#34;&gt;Lingua::Anagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re working with Brazilian phone numbers, check out &lt;a href=&#34;https://metacpan.org/pod/Number::Phone::BR&#34;&gt;Number::Phone::BR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;maths-science:b2c3405a2232e44b77dfa468d7950720&#34;&gt;Maths &amp;amp; Science&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Analyse MaxQuant protein group response differentials data with &lt;a href=&#34;https://metacpan.org/pod/Bio::MaxQuant::ProteinGroups::Response&#34;&gt;Bio::MaxQuant::ProteinGroups::Response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DSP::LinPred_XS&#34;&gt;DSP::LinPred_XS&lt;/a&gt; is a lightning-fast XS implementation of the Least Mean Squared Algorithm&lt;/li&gt;
&lt;li&gt;Simply Grammar::Graph objects using the aptly-named &lt;a href=&#34;https://metacpan.org/pod/Grammar::Graph::Simplify&#34;&gt;Grammar::Graph::Simplify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Geometry::IntersectionArea&#34;&gt;Math::Geometry::IntersectionArea&lt;/a&gt; will calculate the intersecting area of two geometric shapes&lt;/li&gt;
&lt;li&gt;Conveniently manage the nginx FastCGI cache with &lt;a href=&#34;https://metacpan.org/pod/Nginx::FastCGI::Cache&#34;&gt;Nginx::FastCGI::Cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Set::Similarity&#34;&gt;Set::Similarity&lt;/a&gt; provides several methods for measuring the similarity of 2 sets&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing:b2c3405a2232e44b77dfa468d7950720&#34;&gt;Testing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Merge multiple streams of TAP with &lt;a href=&#34;https://metacpan.org/pod/TAP::Stream&#34;&gt;TAP::Stream&lt;/a&gt; - amazing&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::RemoteServer&#34;&gt;Test::RemoteServer&lt;/a&gt; bundles some convenient server testing methods&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:b2c3405a2232e44b77dfa468d7950720&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Store your Dancer2 sessions in middleware with &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Session::PSGI&#34;&gt;Dancer2::Session::PSGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::ConfigHashMerge&#34;&gt;Mojolicious::Plugin::ConfigHashMerge&lt;/a&gt; enables deeply nested hash config files&lt;/li&gt;
&lt;li&gt;View your app in a variety of screen sizes using &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Responsinator&#34;&gt;Mojolicious::Plugin::Responsinator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get an Apache-like scoreboard of your Mojolicious server with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::ServerStatus&#34;&gt;Mojolicious::Plugin::ServerStatus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize::PhantomJS&#34;&gt;WWW::Mechanize::PhantomJS&lt;/a&gt; provides a Mechanize-style object of the PhantomJS headless browser &amp;hellip; JavaScript enabled!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F82%2F2014%2F4%2F3%2FWhat-s-new-on-CPAN-March-2014&amp;amp;text=What%27s+new+on+CPAN+-+March+2014&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F82%2F2014%2F4%2F3%2FWhat-s-new-on-CPAN-March-2014&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Secure your passwords with KeePass and Perl</title>
      <link>http://perltricks.com/article/79/2014/3/24/Secure-your-passwords-with-KeePass-and-Perl/</link>
      <pubDate>Mon, 24 Mar 2014 13:00:38 +0000</pubDate>
      
      <guid>http://perltricks.com/article/79/2014/3/24/Secure-your-passwords-with-KeePass-and-Perl/</guid>
      <description>

&lt;p&gt;&lt;em&gt;These days password managers are an &lt;a href=&#34;http://arstechnica.com/information-technology/2013/06/the-secret-to-online-safety-lies-random-characters-and-a-password-manager/&#34;&gt;essential&lt;/a&gt; part of online security. The module File::KeePass provides an easy-to-use Perl API for the KeePass password manager and opens up a world-of-possibilities for programmatically creating, reading and updating passwords securely.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to install &lt;a href=&#34;https://metacpan.org/pod/File::KeePass&#34;&gt;File::KeePass&lt;/a&gt;. The CPAN testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=File-KeePass+2.03&#34;&gt;results&lt;/a&gt; show that it runs on all modern Perls and many platforms including Windows. To install the module with CPAN, fire up the terminal and enter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan File::KeePass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may want to install &lt;a href=&#34;https://www.keepassx.org/&#34;&gt;KeePassX&lt;/a&gt;, an open source implementation of KeePass to get a GUI. I&amp;rsquo;ve used it on both Windows and Linux and it works great.&lt;/p&gt;

&lt;h3 id=&#34;creating-keepass-databases:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Creating KeePass Databases&lt;/h3&gt;

&lt;p&gt;The KeePass password manager stores all passwords in an encrypted database file. All username/password entries are stored in collections of entries called &amp;ldquo;groups&amp;rdquo;. File::KeePass provides for methods creating all of these items:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::KeePass;

my $kp_db = File::KeePass-&amp;gt;new;

my $app_group = $kp_db-&amp;gt;add_group({ title =&amp;gt; &#39;Apps&#39; });

$kp_db-&amp;gt;add_entry({ title     =&amp;gt; &#39;email&#39;,
                    username  =&amp;gt; &#39;system&#39;,
                    password  =&amp;gt; &#39;mumstheword&#39;,
                    group     =&amp;gt; $app_group-&amp;gt;{gid},
                  });

$kp_db-&amp;gt;save_db(&#39;MyAppDetails.kdb&#39;, &#39;itsasecret&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above we start by instantiating a new File::KeePass object. The &amp;ldquo;add_group&amp;rdquo; method adds a new group called &amp;ldquo;Apps&amp;rdquo; to the object. We then add an entry to the &amp;ldquo;Apps&amp;rdquo; group. The entry contains the username/password credentials that we want to store securely. Finally the &amp;ldquo;save_db&amp;rdquo; method saves the KeePass database to &amp;ldquo;MyAppDetails.kdb&amp;rdquo; (the extension is important) with a master password of &amp;ldquo;itsasecret&amp;rdquo; - in reality you would want to use a stronger password than this.&lt;/p&gt;

&lt;p&gt;Save the code as &amp;ldquo;create_keepass_db.pl&amp;rdquo; and run it on the command line with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perl create_keepass_db.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have KeePassX or KeePass installed, you can open the newly-created &amp;ldquo;MyAppDetails.kdb&amp;rdquo; file. When you do, you&amp;rsquo;ll be asked for the master password that we set:&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/79/keepassx_login.png&#34; title=&#34;The KeePassX login window&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/79/keepassx_login.png&#34; alt=&#34;keepassx login&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve entered the master password, KeePassX will show the main window, which lists the groups and entries in the database file. You can see the &amp;ldquo;Apps&amp;rdquo; group on the left and the &amp;ldquo;email&amp;rdquo; entry that was created listed in the main window.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/static/images/79/keepassx_group_entry_added.png&#34; title=&#34;The KeePassX main window our Apps group and email entry are showing&#34;&gt;&lt;img src=&#34;http://perltricks.com/static/images/79/keepassx_group_entry_added_small.png&#34; alt=&#34;keepassx main screen&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;reading-keepass-databases:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Reading KeePass databases&lt;/h3&gt;

&lt;p&gt;Instead of using a GUI like KeePass or KeePassX, you can read the contents of the database file using File::KeePass:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::KeePass;

my $kp_db = File::KeePass-&amp;gt;new;
$kp_db-&amp;gt;load_db(&#39;MyAppDetails.kdb&#39;, &#39;itsasecret&#39;);
my $groups = $kp_db-&amp;gt;groups;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we opened our newly-created KeePass database file using the &amp;ldquo;load_db&amp;rdquo; method. The &amp;ldquo;groups&amp;rdquo; method returns an arrayref of groups. Each group is a hashref that also contains an arrayref of entries. Printing $groups with Data::Dumper, we can see this more clearly:&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$VAR1 = [
          {
            &#39;icon&#39; =&amp;gt; 0,
            &#39;created&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
            &#39;level&#39; =&amp;gt; 0,
            &#39;entries&#39; =&amp;gt; [
                           {
                             &#39;icon&#39; =&amp;gt; 0,
                             &#39;modified&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
                             &#39;username&#39; =&amp;gt; &#39;system&#39;,
                             &#39;created&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
                             &#39;comment&#39; =&amp;gt; &#39;&#39;,
                             &#39;url&#39; =&amp;gt; &#39;&#39;,
                             &#39;id&#39; =&amp;gt; &#39;E31rvRS5mqK37mak&#39;,
                             &#39;title&#39; =&amp;gt; &#39;email&#39;,
                             &#39;accessed&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
                             &#39;expires&#39; =&amp;gt; &#39;2999-12-31 23:23:59&#39;
                           }
                         ],
            &#39;title&#39; =&amp;gt; &#39;Apps&#39;,
            &#39;id&#39; =&amp;gt; 2450784255,
            &#39;accessed&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;,
            &#39;expires&#39; =&amp;gt; &#39;2999-12-31 23:23:59&#39;,
            &#39;modified&#39; =&amp;gt; &#39;2014-03-24 08:28:44&#39;
          }
        ];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;searching-and-updating-a-keepass-database:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Searching and updating a KeePass database&lt;/h3&gt;

&lt;p&gt;File::KeePass provides methods for searching for entries. In order to update an entry, we have to retrieve it, update it, and then save the database file. Because entries are just hashrefs, this is easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use File::KeePass;

my $kp_db = File::KeePass-&amp;gt;new;
$kp_db-&amp;gt;load_db(&#39;MyAppDetails.kdb&#39;, &#39;itsasecret&#39;);
$kp_db-&amp;gt;unlock; # enable changes

my $entry = $kp_db-&amp;gt;find_entry({ title =&amp;gt; &#39;email&#39; }); 
$entry-&amp;gt;{password} = &#39;mumsnottheword&#39;;

$kp_db-&amp;gt;save_db(&#39;MyAppDetails.kdb&#39;, &#39;itsasecret&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above we opened the database file, and used the &amp;ldquo;find_entry&amp;rdquo; method to search for our email entry. We then updated the password for the entry, and re-saved the database file. File::KeePass provides many additional methods for searching and updating groups and entries.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:152b5d328e86e86a891ac3405db8bd7d&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;File::KeePass has a simple API that works great and comes with comprehensive &lt;a href=&#34;https://metacpan.org/pod/File::KeePass&#34;&gt;documentation&lt;/a&gt;. I would recommend using the &amp;ldquo;.kdb&amp;rdquo; format as File::KeePass has &lt;a href=&#34;https://rt.cpan.org/Public/Dist/Display.html?Name=File-KeePass&#34;&gt;open issues&lt;/a&gt; for the &amp;ldquo;.kdbx&amp;rdquo; format.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F79%2F2014%2F3%2F24%2FSecure-your-passwords-with-KeePass-and-Perl&amp;amp;text=Secure+your+passwords+with+KeePass+and+Perl&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F79%2F2014%2F3%2F24%2FSecure-your-passwords-with-KeePass-and-Perl&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;Cover image © &lt;a href=&#34;http://www.flickr.com/photos/danielsphotography/466435567/sizes/o/&#34;&gt;DanielSTL&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple web framework FastCGI caching with nginx - part 2</title>
      <link>http://perltricks.com/article/77/2014/3/17/Simple-web-framework-FastCGI-caching-with-nginx---part-2/</link>
      <pubDate>Mon, 17 Mar 2014 01:54:09 +0000</pubDate>
      
      <guid>http://perltricks.com/article/77/2014/3/17/Simple-web-framework-FastCGI-caching-with-nginx---part-2/</guid>
      <description>

&lt;p&gt;&lt;em&gt;In &lt;a href=&#34;http://perltricks.com/article/76/2014/3/11/Simple-web-framework-FastCGI-caching-with-nginx-part-1&#34;&gt;part 1&lt;/a&gt; of this series, we covered how to cache FastCGI responses with nginx and how to purge the cache on demand. We saw how easy it is to setup caching with the main Perl web frameworks (Catalyst, Dancer and Mojolicious). In this article we&amp;rsquo;ll use Nginx::FastCGI::Cache to manage our cached responses and gain some useful benefits along the way.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need Perl v5.12.3 or greater to install &lt;a href=&#34;https://metacpan.org/pod/Nginx::FastCGI::Cache&#34;&gt;Nginx::FastCGI::Cache&lt;/a&gt;. The CPAN Testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=Nginx-FastCGI-Cache+0.008&#34;&gt;results&lt;/a&gt; show that it runs on most platforms including Windows. To install the module using CPAN, just open the terminal and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Nginx::FastCGI::Cache
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;nginx-fastcgi-caching-explained:fa5e57e16e5afa820891a6788e36f753&#34;&gt;nginx fastcgi caching explained&lt;/h3&gt;

&lt;p&gt;In an nginx virtual host file, the &amp;ldquo;fastcgi_cache_path&amp;rdquo; directive sets the root directory from where nginx will build the cache. nginx uses the variables of the &amp;ldquo;fastcgi_cache_key&amp;rdquo; directive to create an md5 hexadecimal hash key as the filename. The &amp;ldquo;levels&amp;rdquo; value determines the number of subdirectories and the subdirectories name length. For example, with this configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache_path  /var/cache/nginx levels=1:2
                    keys_zone=app_cache:50m
                    inactive=60m;
fastcgi_cache_key &amp;quot;$scheme$request_method$host$request_uri&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A GET request for &amp;ldquo;&lt;a href=&#34;http://perltricks.com/&amp;quot;&#34;&gt;http://perltricks.com/&amp;quot;&lt;/a&gt; would have a key of &amp;ldquo;httpGETperltricks.com/&amp;rdquo;, and be stored at: &amp;ldquo;/var/cache/nginx/4/85/200d51ef65b0a76de421f8f1ec047854&amp;rdquo;. Note that the name of the first subdirectory is the last letter of the md5 hash (&amp;ldquo;4&amp;rdquo;) and the second subdirectory name the previous two letters (&amp;ldquo;85&amp;rdquo;) - this is because of the levels value of &amp;ldquo;1:2&amp;rdquo; set in the nginx virtual host file. Deleting the file &amp;ldquo;/var/cache/nginx/4/85/200d51ef65b0a76de421f8f1ec047854 will purge it from nginx&amp;rsquo;s cache.&lt;/p&gt;

&lt;h3 id=&#34;introducing-nginx-fastcgi-cache:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Introducing Nginx::FastCGI::Cache&lt;/h3&gt;

&lt;p&gt;I wrote &lt;a href=&#34;https://metacpan.org/pod/Nginx::FastCGI::Cache&#34;&gt;Nginx::FastCGI::Cache&lt;/a&gt; to make it easy to purge individually cached fastcgi responses from the nginx cache. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Nginx::FastCGI::Cache;
 
my $nginx_cache = Nginx::FastCGI::Cache-&amp;gt;new({ location =&amp;gt; &#39;/var/cache/nginx&#39; });
$nginx_cache-&amp;gt;purge_file(&amp;quot;http://perltricks.com/&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will convert the URL into the md5 hashed cache key, and delete it from the nginx cache directory. By default &amp;ldquo;purge_file&amp;rdquo; assumes the HTTP request type is GET. If you want to purge a file for a different request type, simply include it as a parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$nginx_cache-&amp;gt;purge_file(&amp;quot;http://perltricks.com/&amp;quot;, &amp;quot;HEAD&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to blow away the whole cache, use the &amp;ldquo;purge_cache&amp;rdquo; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$nginx_cache-&amp;gt;purge_cache;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two methods should be all that&amp;rsquo;s required to conveniently manage the nginx cache from your favourite Perl web application.&lt;/p&gt;

&lt;h3 id=&#34;portability:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Portability&lt;/h3&gt;

&lt;p&gt;In part 1 our purge cache code used a system call to the GNU find program to delete all the files in the cache. Whilst this is fine as a quick hack, using an external program limits the portability of the code (it wouldn&amp;rsquo;t run on Windows for example). Nginx::FastCGI::Cache uses Perl&amp;rsquo;s opendir and unlink functions to read the cache directory and delete files, which should work on all platforms that Perl runs on.&lt;/p&gt;

&lt;h3 id=&#34;safety-first:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Safety First&lt;/h3&gt;

&lt;p&gt;Whenever you have a program that is going to recursively delete all files in a directory, you want to be sure that it&amp;rsquo;s looking at the correct directory. That&amp;rsquo;s why the &amp;ldquo;location&amp;rdquo; is a mandatory parameter for the Nginx::FastCGI::Cache constructor - no default location is assumed. Additionally, should the Perl process not have sufficient permissions to read the cache directory or delete a cached file, Nginx::FastCGI::Cache will &lt;a href=&#34;http://perldoc.perl.org/Carp.html#NAME&#34;&gt;croak&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;other-nginx-considerations:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Other nginx considerations&lt;/h3&gt;

&lt;p&gt;By default, nginx will not cache a fastcgi response that includes a &amp;ldquo;Set-Cookie&amp;rdquo; header. Depending on how you are using cookies, you may want to have nginx cache the response and ignore the &amp;ldquo;Set-Cookie&amp;rdquo; header. This can be done by adding this line to your virtual host file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_ignore_headers &amp;quot;Set-Cookie&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bear in mind that the &amp;ldquo;set-Cookie&amp;rdquo; header will be removed from the response altogether, so this is useful when serving uniform responses that do not distinguish between users with session cookies and those without.&lt;/p&gt;

&lt;p&gt;By default nginx will only cache GET and HEAD requests. This is a good default, but you may want to restrict the cache to just GET responses, or enable other kinds of HTTP requests such as POST. If so, add the fastcgi_cache_methods directive to your nginx virtual host file. For example to only cache GET requests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache_methods GET;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nginx &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&#34;&gt;documentation&lt;/a&gt; provides comprehensive detail on the fastcgi module.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Whether you are using Catalyst, Dancer or Mojolicious, setting the appropriate caching headers is easy (see &lt;a href=&#34;http://perltricks.com/article/76/2014/3/11/Simple-web-framework-FastCGI-caching-with-nginx-part-1&#34;&gt;part 1&lt;/a&gt;). Consider using &lt;a href=&#34;https://metacpan.org/pod/Nginx::FastCGI::Cache&#34;&gt;Nginx::FastCGI::Cache&lt;/a&gt; with nginx to conveniently purge the cache on demand.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F77%2F2014%2F3%2F16%2FSimple-web-framework-FastCGI-caching-with-nginx-part-2&amp;amp;text=Simple+web+framework+FastCGI+caching+with+nginx+-+part+2&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F77%2F2014%2F3%2F16%2FSimple-web-framework-FastCGI-caching-with-nginx-part-2&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2014</title>
      <link>http://perltricks.com/article/74/2014/3/3/What-s-new-on-CPAN---February-2014/</link>
      <pubDate>Mon, 03 Mar 2014 04:10:36 +0000</pubDate>
      
      <guid>http://perltricks.com/article/74/2014/3/3/What-s-new-on-CPAN---February-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo; - a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Interact with AWS Simple Queue Services using: &lt;a href=&#34;https://metacpan.org/pod/AWS::SQS::Simple&#34;&gt;AWS::SQS::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dokuwiki::RPC::XML::Client&#34;&gt;Dokuwiki::RPC::XML::Client&lt;/a&gt; is a client for DokuWiki&lt;/li&gt;
&lt;li&gt;Access the CampBX bitcoin trading platform using &lt;a href=&#34;https://metacpan.org/pod/Finance::CampBX&#34;&gt;Finance::CampBX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;InfluxDB is a time series database, &lt;a href=&#34;https://metacpan.org/pod/InfluxDB&#34;&gt;InfluxDB&lt;/a&gt; provides a Perl API.&lt;/li&gt;
&lt;li&gt;Sync files between machines using using BitTorrent Sync and &lt;a href=&#34;https://metacpan.org/pod/Net::BitTorrentSync&#34;&gt;Net::BitTorrentSync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::ImKayac::Simple&#34;&gt;WebService::ImKayac::Simple&lt;/a&gt; is a message sender for im.kayac, the notification service&lt;/li&gt;
&lt;li&gt;Manage workflow jobs using &lt;a href=&#34;https://metacpan.org/pod/CA::WAAE&#34;&gt;CA::WAAE&lt;/a&gt; - an interface for CA&amp;rsquo;s Workflow Automation product&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Buid static web sites with &lt;a href=&#34;https://metacpan.org/pod/App::Dapper&#34;&gt;App::Dapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prettify JSON, YAML and Perl data and translate into other languages with &lt;a href=&#34;https://metacpan.org/pod/distribution/App-pretty/bin/pretty&#34;&gt;pretty&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bots:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Bots&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fly the Parrot AR.Drone using &lt;a href=&#34;https://metacpan.org/pod/UAV::Pilot::ARDrone&#34;&gt;UAV::Pilot::ARDrone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Gnuplot::Builder&#34;&gt;Gnuplot::Builder&lt;/a&gt; is an OO library for the gnuplot&lt;/li&gt;
&lt;li&gt;Share data efficiently between processes using &lt;a href=&#34;https://metacpan.org/pod/Hash::SharedMem&#34;&gt;Hash::SharedMem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Image::Quantize&#34;&gt;Image::Quantize&lt;/a&gt; will quantize image data into 256 or fewer colours&lt;/li&gt;
&lt;li&gt;Build JSON under memory constraints with &lt;a href=&#34;https://metacpan.org/pod/JSON::Builder&#34;&gt;JSON::Builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generate random Japanese names using &lt;a href=&#34;https://metacpan.org/pod/Mock::Person::JP&#34;&gt;Mock::Person::JP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;p&gt;Find all CPAN modules that reference a particular CPAN module with &lt;a href=&#34;https://metacpan.org/pod/CPAN::ReverseDependencies&#34;&gt;CPAN::ReverseDependencies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/warnings::MaybeFatal&#34;&gt;warnings::MaybeFatal&lt;/a&gt; will turn warnings FATAL at compile time only&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/IPC::PrettyPipe&#34;&gt;IPC::PrettyPipe&lt;/a&gt; facilitates debugging and execution piped commands.&lt;/p&gt;

&lt;p&gt;A whole host of new Dist::Zilla validation plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check for plugins performing actions outside of the appropriate phase with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::VerifyPhases&#34;&gt;Dist::Zilla::Plugin::VerifyPhases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::DiagINC&#34;&gt;Dist::Zilla::Plugin::Test::DiagINC&lt;/a&gt; helps you find the @INC dependencies for a specific test failure&lt;/li&gt;
&lt;li&gt;Check for clean namespaces: &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::CleanNamespaces&#34;&gt;Dist::Zilla::Plugin::Test::CleanNamespaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Breaks&#34;&gt;Dist::Zilla::Plugin::Breaks&lt;/a&gt; tracks breaking module versions as metadata and &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::CheckBreaks&#34;&gt;Dist::Zilla::Plugin::Test::CheckBreaks&lt;/a&gt; tests for breaks&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Obfuscate text in the style of the Zalgo meme: &lt;a href=&#34;https://metacpan.org/pod/Acme::Zalgo&#34;&gt;Acme::Zalgo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/SudokuTrainer&#34;&gt;SudokuTrainer&lt;/a&gt; helps detect successful Sudoku strategies&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;maths-science:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Maths &amp;amp; Science&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AI::FANN::Evolving&#34;&gt;AI::FANN::Evolving&lt;/a&gt; is an evolving artificial neural implementation class for the Fast Artificial Neural Network library.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;security:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Security&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Curve25519&#34;&gt;Crypt::Curve25519&lt;/a&gt; will generate a shared secret using an elliptic-curve Diffie-Hellman function, for message encryption.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Lucifer&#34;&gt;Crypt::Lucifer&lt;/a&gt; is an implementation of IBM&amp;rsquo;s Lucifer block cipher from the 1970s.&lt;/li&gt;
&lt;li&gt;Enable ScryptKDF in DBIx::Class with &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::EncodedColumn::Crypt::Scrypt&#34;&gt;DBIx::Class::EncodedColumn::Crypt::Scrypt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Testing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Cucumber::Tiny&#34;&gt;Test::Cucumber::Tiny&lt;/a&gt; is a lightweight, plaintext-driven testing framework&lt;/li&gt;
&lt;li&gt;Conveniently manage the state of DBIx::Class test data with &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::EasyFixture&#34;&gt;DBIx::Class::EasyFixture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::DiagINC&#34;&gt;Test::DiagINC&lt;/a&gt; will list all (deep) dependencies on test failure&lt;/li&gt;
&lt;li&gt;Create a temporary instance of MongoDb for testing with &lt;a href=&#34;https://metacpan.org/pod/Test::mongod&#34;&gt;Test::mongod&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:2d8272e93c3da5df9d7ac03a7c059dd0&#34;&gt;Web&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/HTTP::Entity::Parser&#34;&gt;HTTP::Entity::Parser&lt;/a&gt; is a PSGI compliant HTTP entity parser&lt;/p&gt;

&lt;p&gt;Add a timeout and retry feature to HTTP::Tiny using &lt;a href=&#34;https://metacpan.org/pod/HTTP::Retry&#34;&gt;HTTP::Retry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make Catalyst user notification handling easier with &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::SimpleMessage&#34;&gt;Catalyst::Plugin::SimpleMessage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Session::Store::CHI&#34;&gt;Catalyst::Plugin::Session::Store::CHI&lt;/a&gt; let&amp;rsquo;s you use the &lt;a href=&#34;https://metacpan.org/pod/CHI&#34;&gt;CHI&lt;/a&gt; module as the session store.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::LightProfile&#34;&gt;Plack::Middleware::LightProfile&lt;/a&gt; is a simple profiler for Plack applications.&lt;/p&gt;

&lt;p&gt;Dump the Apache server scoreboard when full with &lt;a href=&#34;https://metacpan.org/pod/Apache2::ScoreboardDumper&#34;&gt;Apache2::ScoreboardDumper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New Mojolicious modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::FriendFeed&#34;&gt;Mojo::FriendFeed&lt;/a&gt; is a non blocking FriendFeed listener&lt;/li&gt;
&lt;li&gt;Run a generic TCP server with &lt;a href=&#34;https://metacpan.org/pod/Mojo::Server::TCP&#34;&gt;Mojo::Server::TCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Defer template rendering with &lt;a href=&#34;https://metacpan.org/pod/MojoX::Renderer::IncludeLater&#34;&gt;MojoX::Renderer::IncludeLater&lt;/a&gt; a template post-processor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::VHost&#34;&gt;Mojolicious::Plugin::VHost&lt;/a&gt; adds virtual hosts to Mojolicious&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F74%2F2014%2F3%2F3%2FWhat-s-new-on-CPAN-February-2014&amp;amp;text=What%27s+new+on+CPAN+-+February+2014&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F74%2F2014%2F3%2F3%2FWhat-s-new-on-CPAN-February-2014&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3 ways to include data with your Perl distribution</title>
      <link>http://perltricks.com/article/66/2014/2/7/3-ways-to-include-data-with-your-Perl-distribution/</link>
      <pubDate>Fri, 07 Feb 2014 04:05:13 +0000</pubDate>
      
      <guid>http://perltricks.com/article/66/2014/2/7/3-ways-to-include-data-with-your-Perl-distribution/</guid>
      <description>

&lt;p&gt;&lt;em&gt;As a module author, being able to include data in your Perl distribution is super-useful. Data can be used for things like configuration and writing data-driven tests. Here are three ways to include data in a Perl distribution.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;EDIT: &lt;em&gt;Article updated on 9th February 2014 to include ExtUtils::MakeMaker solution option 3.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;use-data:6eeab3451604b74e59681fcd51f63947&#34;&gt;Use __DATA__&lt;/h3&gt;

&lt;p&gt;The &amp;ldquo;__DATA__&amp;rdquo; token is a Perl keyword that signifies the end of the code in the file. Any text that appears after the token is automatically read into the DATA filehandle at runtime. For example, let&amp;rsquo;s include the Perl TIOBE statistics for the past decade as YAML data in a Perl test file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use YAML::XS;
use Test::More;

my $yaml = do { local $/; &amp;lt;main::DATA&amp;gt; };
my $data = Load $yaml;

do { ... };

done_testing();

__DATA__
---
2014: 0.917
2013: 2.264
2012: 2.768
2011: 2.857
2010: 3.562
2009: 4.303
2008: 5.247
2007: 6.237
2006: 7.045
2005: 8.861
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we use a do block to slurp the main::DATA filehandle into $yaml. We then use the YAML::XS &amp;ldquo;Load&amp;rdquo; function to decode $yaml into a Perl data structure stored in $data. From here we&amp;rsquo;re free to use the data in our tests.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s nice about the __DATA__ approach is that it is simple, fast to code, cross platform functional and you should never have trouble locating the data (unlike with an external file). The downside with __DATA__ is that it forces you to include the data in the same file as the code. What if you have a large volume of data? Every time the module is used, the data would increase the burden of using that module, whether or not the data is actually used. Additionally the content of __DATA__ is largely fixed - only the developer can overwrite it.&lt;/p&gt;

&lt;h3 id=&#34;use-findbin-to-locate-the-data-file:6eeab3451604b74e59681fcd51f63947&#34;&gt;Use FindBin to locate the data file&lt;/h3&gt;

&lt;p&gt;FindBin is a fabulous little module that comes with core Perl and provides the &amp;ldquo;Bin&amp;rdquo; function which returns the absolute path of the current file&amp;rsquo;s directory. So the pattern here is to include a data file in the same directory as the Perl file and reference the data file using FindBin&amp;rsquo;s Bin function. Let&amp;rsquo;s look at an example:&lt;/p&gt;

&lt;p&gt;First we have our Tiobe Perl YAML data, saved in the file perl_tiobe.yaml:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;---
2014: 0.917
2013: 2.264
2012: 2.768
2011: 2.857
2010: 3.562
2009: 4.303
2008: 5.247
2007: 6.237
2006: 7.045
2005: 8.861
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we reference the file in our modified test script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use YAML::XS;
use Test::More;
use FindBin;

open (my $DATA, &#39;&amp;lt;&#39;, &amp;quot;$FindBin::Bin/perl_tiobe.yaml&amp;quot;) or die $!;
my $yaml = do { local $/; &amp;lt;$DATA&amp;gt; };
my $data = Load $yaml;

do { ... };

done_testing();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s review what&amp;rsquo;s changed in this script from the previous version. First of all we&amp;rsquo;re importing Findbin. We&amp;rsquo;re then opening a filehandle called $DATA that points to the current directory returned by FindBin::Bin plus the name of the data file.&lt;/p&gt;

&lt;p&gt;The FindBin pattern works well if you can guarantee the data file will be in the same place as the code file. This makes it great for test files, as (by convention) they are always in the t directory and are not copied elsewhere as part of the module installation. You can use this pattern when distributing data files with Perl application (e.g. in the Makefile include both the binary and the data file in the EXE_FILES directive). However this does mean that the data file will be copied to the target bin directory, which is the kind of file pollution that attracts ire quickly.&lt;/p&gt;

&lt;h3 id=&#34;update-makefile-pl-build-pl-and-use-file-share:6eeab3451604b74e59681fcd51f63947&#34;&gt;Update Makefile.PL / Build.PL and use File::Share&lt;/h3&gt;

&lt;p&gt;Another way to include data files with a Perl distribution is to place them in a &amp;lsquo;share&amp;rsquo; directory within the distribution root directory, update the Makefile.PL / Build.PL to copy the data files during install and then use File::Share to access the files.&lt;/p&gt;

&lt;p&gt;If your distribution uses ExtUtils::MakeMaker, you can use &lt;a href=&#34;https://metacpan.org/pod/File::ShareDir::Install&#34;&gt;File::ShareDir::Install&lt;/a&gt; in your Makefile.PL to copy the data files. Here is a vanilla Makefile.PL for a fictional module &amp;ldquo; Data::File&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use 5.006;
use strict;
use warnings FATAL =&amp;gt; &#39;all&#39;;
use ExtUtils::MakeMaker;
use File::ShareDir::Install;

install_share dist =&amp;gt; &#39;share&#39;;

WriteMakefile(
    NAME             =&amp;gt; &#39;Data::Dir&#39;,
    AUTHOR           =&amp;gt; q{David Farrell },
    VERSION_FROM     =&amp;gt; &#39;lib/Data/Dir.pm&#39;,
    ABSTRACT_FROM    =&amp;gt; &#39;lib/Data/Dir.pm&#39;,
    LICENSE          =&amp;gt; &#39;Artistic_2_0&#39;,
    PL_FILES         =&amp;gt; {}, 
    MIN_PERL_VERSION =&amp;gt; 5.006,
    CONFIGURE_REQUIRES =&amp;gt; {
        &#39;ExtUtils::MakeMaker&#39; =&amp;gt; 0,
    },  
    BUILD_REQUIRES =&amp;gt; {
        &#39;Test::More&#39; =&amp;gt; 0,
    },  
    PREREQ_PM =&amp;gt; {
        #&#39;ABC&#39;              =&amp;gt; 1.6,
        #&#39;Foo::Bar::Module&#39; =&amp;gt; 5.0401,
    },  
    dist  =&amp;gt; { COMPRESS =&amp;gt; &#39;gzip -9f&#39;, SUFFIX =&amp;gt; &#39;gz&#39;, },
    clean =&amp;gt; { FILES =&amp;gt; &#39;Data-Dir-*&#39; },
);

package MY;
use File::ShareDir::Install &#39;postamble&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the Makefile we import File::ShareDir:Install, and pass our &amp;ldquo;share&amp;rdquo; directory as an argument to the &amp;ldquo;install_share&amp;rdquo; function. The strange last two lines of the Makefile include a package declaration for MY and an import of File::ShareDir::Install&amp;rsquo;s &amp;ldquo;postamble&amp;rdquo; method. Be sure to include those two lines else the data files will not be copied.&lt;/p&gt;

&lt;p&gt;If you are using &lt;a href=&#34;https://metacpan.org/pod/Module::Build::API&#34;&gt;Module::Build&lt;/a&gt;, update Build.PL file with the &lt;a href=&#34;https://metacpan.org/pod/https://metacpan.org/pod/Module::Build::API#share_dir&#34;&gt;share_dir&lt;/a&gt; directive. Here&amp;rsquo;s a vanilla Build.PL for a fictional module &amp;ldquo;Data::File&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use 5.006;
use strict;
use warnings FATAL =&amp;gt; &#39;all&#39;;
use Module::Build;

my $builder = Module::Build-&amp;gt;new(
    module_name         =&amp;gt; &#39;Data::File&#39;,
    license             =&amp;gt; &#39;Artistic_2_0&#39;,
    dist_author         =&amp;gt; q{David Farrell },
    dist_version_from   =&amp;gt; &#39;lib/Data/File.pm&#39;,
    release_status      =&amp;gt; &#39;stable&#39;,
    configure_requires =&amp;gt; {
        &#39;Module::Build&#39; =&amp;gt; 0,
    },
    build_requires =&amp;gt; {
        &#39;Test::More&#39; =&amp;gt; 0,
    },  
    requires =&amp;gt; {
        #&#39;ABC&#39;              =&amp;gt; 1.6,
        #&#39;Foo::Bar::Module&#39; =&amp;gt; 5.0401,
    },  
    add_to_cleanup     =&amp;gt; [ &#39;Data-File-*&#39; ],
    create_makefile_pl =&amp;gt; &#39;traditional&#39;,
    share_dir =&amp;gt; &#39;share&#39;,
);

$builder-&amp;gt;create_build_script();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;share_dir&amp;rdquo; directive in the example Build.PL above instructs Module::Build to copy any files in the distributions share directory to the distribution&amp;rsquo;s auto directory at install time.&lt;/p&gt;

&lt;p&gt;Whether your distribution uses a Makefile.PL or a Build.PL, accessing the data file is now a matter of code. Here is a stripped-own File.pm file from our fictional module &amp;ldquo;Data::File&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Data::File;
use strict;
use warnings;
use YAML::XS;
use File::Share &#39;:all&#39;; 
    
sub read_data {         
    my $data_location = dist_file(&#39;Data-File&#39;, &#39;perl_tiobe.yaml&#39;);
    open (my $DATA, &#39;&amp;lt;&#39;, $data_location) or die $!;
    my $yaml = do { local $/; &amp;lt;$DATA&amp;gt; };
    my $data = Load $yaml; 
    
    do { ... };
}   
        
1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much of this code should look familiar. In the &amp;ldquo;read_data&amp;rdquo; subroutine we use the &amp;ldquo;dist_file&amp;rdquo; function of &lt;a href=&#34;https://metacpan.org/pod/File::Share&#34;&gt;File::Share&lt;/a&gt; to get the absolute filepath for the data file. The &amp;ldquo;dist_file&amp;rdquo; function is great: it will find the data file during testing and once the module is installed. After that line we open a filehandle to the file and process it as normal.&lt;/p&gt;

&lt;p&gt;This method requires more work than the first two, but also offers a lot in return: we are able to include data with the distribution and access it at install and runtime. Our code files are not clogged with additional data that we may not need and we are not restricted to including the data files in the same directory as the consuming code file. It&amp;rsquo;s even possible to share data from distribution with another (using &amp;ldquo;dist_file&amp;rdquo;).&lt;/p&gt;

&lt;h3 id=&#34;conclusion:6eeab3451604b74e59681fcd51f63947&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The examples have focused on including YAML data, but the solutions would work for most data types. Including data with Perl distributions is not as easy as it should be. However with the three solutions described here, you should be equipped to tackle the typical scenarios.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F66%2F2014%2F2%2F7%2F3-ways-to-include-data-with-your-Perl-distribution&amp;amp;text=3%20ways%20to%20include%20data%20with%20your%20Perl%20distribution&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F66%2F2014%2F2%2F7%2F3-ways-to-include-data-with-your-Perl-distribution&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - January 2014</title>
      <link>http://perltricks.com/article/65/2014/2/3/What-s-new-on-CPAN---January-2014/</link>
      <pubDate>Mon, 03 Feb 2014 13:29:44 +0000</pubDate>
      
      <guid>http://perltricks.com/article/65/2014/2/3/What-s-new-on-CPAN---January-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to the first edition of &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;. Every month we aim to bring you a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis:8c4b7f8b3bec75e6e0930a6b572cc518&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Games::EveOnline::EveCentral&#34;&gt;Games::EveOnline::EveCentral&lt;/a&gt; is an interface to the ever-popular game EVE Online.&lt;/li&gt;
&lt;li&gt;Want to manage corporate HR data via an online service? &lt;a href=&#34;https://metacpan.org/pod/WebService::BambooHR&#34;&gt;WebService::BambooHR.&lt;/a&gt; provides an API for BambooHR.com.&lt;/li&gt;
&lt;li&gt;Add setlock functionality to Redis with &lt;a href=&#34;https://metacpan.org/pod/Redis::Setlock&#34;&gt;Redis::Setlock&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Need to translate addresses into map coordinates (geocoding)? &lt;a href=&#34;https://metacpan.org/pod/WebService::Geocodio&#34;&gt;WebService::Geocodio&lt;/a&gt; is a wrapper for geocod.io that does just that.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re interested in Bitcoin trading, &lt;a href=&#34;https://metacpan.org/pod/Finance::Bank::Kraken&#34;&gt;Finance::Bank::Kraken&lt;/a&gt; is an API for the Kraken bitcoin market.&lt;/li&gt;
&lt;li&gt;Want to scrape websites intelligently ? &lt;a href=&#34;https://metacpan.org/pod/WebService::Diffbot&#34;&gt;WebService::Diffbot&lt;/a&gt; is an unoffical Perl API for the Diffbot service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps:8c4b7f8b3bec75e6e0930a6b572cc518&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/proxyhunter&#34;&gt;proxyhunter&lt;/a&gt; is a proxy server search and checking tool. It supports Postgres, MySQL and SQLite as backend models.&lt;/li&gt;
&lt;li&gt;Pipe application output to a websocket with &lt;a href=&#34;https://metacpan.org/pod/App::screenorama&#34;&gt;App::screenorama&lt;/a&gt; it can capture stdout / stderr.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::YTDL&#34;&gt;App::YTDL&lt;/a&gt; is another YouTube downloader. Time will tell if it surpasses current king WWW::YouTube::Download.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bots:8c4b7f8b3bec75e6e0930a6b572cc518&#34;&gt;Bots&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Now you can control you&amp;rsquo;re own remote control car with &lt;a href=&#34;https://metacpan.org/pod/UAV::Pilot::WumpusRover::Server&#34;&gt;UAV::Pilot::WumpusRover::Server&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:8c4b7f8b3bec75e6e0930a6b572cc518&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Work with JSON in Perl? Consider &lt;a href=&#34;https://metacpan.org/pod/IO::Async::JSONStream&#34;&gt;IO::Async::JSONStream&lt;/a&gt; it asynchronously decodes JSON into Perl data structures.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/EBook::EPUB::Check&#34;&gt;EBook::EPUB::Check&lt;/a&gt; validates .epub files.&lt;/li&gt;
&lt;li&gt;Need to create realistic but fake data? &lt;a href=&#34;https://metacpan.org/pod/Faker&#34;&gt;Faker&lt;/a&gt; is a re-implementation of the classic Data::Faker module.&lt;/li&gt;
&lt;li&gt;Give &lt;a href=&#34;https://metacpan.org/pod/Image::JPEG::EstimateQuality&#34;&gt;Image::JPEG::EstimateQuality&lt;/a&gt; a JPEG and it will estimate the photo quality.&lt;/li&gt;
&lt;li&gt;Convert markdown to phpBB / BBCode using &lt;a href=&#34;https://metacpan.org/pod/Markdown::phpBB&#34;&gt;Markdown::phpBB&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Biblio::SICI&#34;&gt;Biblio::SICI&lt;/a&gt; provides methods for working with Serial Item and Contribution Identifiers an ANSI/NISO standard for periodicals.&lt;/li&gt;
&lt;li&gt;If you work with TBX data, &lt;a href=&#34;https://metacpan.org/pod/Convert::TBX::Min&#34;&gt;Convert::TBX::Min&lt;/a&gt; will convert TBX-Min to TBX-Basic.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration:8c4b7f8b3bec75e6e0930a6b572cc518&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;a href=&#34;https://metacpan.org/pod/Sub::Trigger::Lock&#34;&gt;Sub::Trigger::Lock&lt;/a&gt; to prevent direct access of Moose attributes, and force users to only use the implemented interface.&lt;/li&gt;
&lt;li&gt;Monitor process memory usage with &lt;a href=&#34;https://metacpan.org/pod/Memory::Stats&#34;&gt;Memory::Stats&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Writing a Perl XS module? &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::TemplateXS&#34;&gt;Dist::Zilla::Plugin::TemplateXS&lt;/a&gt; is a template driven plugin for minting new XS files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun:8c4b7f8b3bec75e6e0930a6b572cc518&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Chess::960&#34;&gt;Chess::960&lt;/a&gt; is a random starting position generator for Chess960.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::SyoboiCalendar&#34;&gt;WebService::SyoboiCalendar&lt;/a&gt; provides an interface to an online Japanese TV schedule for Anime shows.&lt;/li&gt;
&lt;li&gt;Check out &lt;a href=&#34;https://metacpan.org/pod/Acme::Ehoh&#34;&gt;Acme::Ehoh&lt;/a&gt;, it will return your lucky direction, based on ancient Japanese traditions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;maths-science:8c4b7f8b3bec75e6e0930a6b572cc518&#34;&gt;Maths &amp;amp; Science&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Calculate moving averages of data with &lt;a href=&#34;https://metacpan.org/pod/PDL::Finance::TA&#34;&gt;PDL::Finance::TA&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Graph::RandomPath&#34;&gt;Graph::RandomPath&lt;/a&gt; will generate a random path between to vertices in a Graph object.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Graph::SomeUtils&#34;&gt;Graph::SomeUtils&lt;/a&gt; provides utility methods for Graph objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;networking:8c4b7f8b3bec75e6e0930a6b572cc518&#34;&gt;Networking&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forward TCP / UDP packets to another host with &lt;a href=&#34;https://metacpan.org/pod/Net::Forward&#34;&gt;Net::Forward&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing:8c4b7f8b3bec75e6e0930a6b572cc518&#34;&gt;Testing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lembas&#34;&gt;Lembas&lt;/a&gt; is a new framework for testing command line applications. It has a simple markup that follows shell commands almost verbatim.&lt;/li&gt;
&lt;li&gt;Want to use database data in your testing? Take a look at &lt;a href=&#34;https://metacpan.org/pod/Test::FixtureBuilder&#34;&gt;Test::FixtureBuilder&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:8c4b7f8b3bec75e6e0930a6b572cc518&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Render React JavaScript components in TT templates using &lt;a href=&#34;https://metacpan.org/pod/Template::Plugin::React&#34;&gt;Template::Plugin::React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Display beautiful Perl code in webpages without JavaScript using &lt;a href=&#34;https://metacpan.org/pod/PPI::Prettify&#34;&gt;PPI::Prettify&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Authenticate a user against multiple realms with &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Authentication::Credential::Fallback&#34;&gt;Catalyst::Authentication::Credential::Fallback&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Legacy::Routing&#34;&gt;Dancer::Plugin::Legacy::Routing&lt;/a&gt; helps you safely refactor your Dancer application routes.&lt;/li&gt;
&lt;li&gt;Speed up Mojolicious&amp;rsquo; JSON handling with &lt;a href=&#34;https://metacpan.org/pod/MojoX::JSON::XS&#34;&gt;MojoX::JSON::XS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Render POD in your Mojolicious app with &lt;a href=&#34;https://metacpan.org/pod/MojoX::Plugin::PODRenderer&#34;&gt;MojoX::Plugin::PODRenderer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Command::nopaste&#34;&gt;Mojolicious::Command::nopaste&lt;/a&gt; to build a pastebin (nopaste) site with Mojolicious.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F65%2F2014%2F2%2F3%2FWhat-s-new-on-CPAN-January-2014&amp;amp;text=What&#39;s%20new%20on%20CPAN%20-%20January%202014&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F65%2F2014%2F2%2F3%2FWhat-s-new-on-CPAN-January-2014&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; us!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

