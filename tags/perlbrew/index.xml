<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perlbrew on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/perlbrew/</link>
    <description>Recent content in Perlbrew on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Oct 2014 12:39:52 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/perlbrew/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hello berrybrew, the Strawberry Perl version manager</title>
      <link>https://dnmfarrell.github.io/article/119/2014/10/10/Hello-berrybrew--the-Strawberry-Perl-version-manager/</link>
      <pubDate>Fri, 10 Oct 2014 12:39:52 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/119/2014/10/10/Hello-berrybrew--the-Strawberry-Perl-version-manager/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://perlbrew.pl/&#34;&gt;Perlbrew&lt;/a&gt; and [plenv]() are tools for managing local Perl installations. They&amp;rsquo;re useful as they let you install and use multiple versions of Perl without administrator privileges. I have a special appreciation for them as I once tried to upgrade my mac system Perl and instead wrecked it and had to reinstall OSX.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m on Windows I use Strawberry Perl, so I wrote &lt;a href=&#34;https://github.com/sillymoose/berrybrew&#34;&gt;berrybrew&lt;/a&gt; to help manage Perl on Windows. It&amp;rsquo;s similar to Perlbrew and plenv; it will download, install and manage multiple versions of Strawberry Perl for you, no administrator privileges required.&lt;/p&gt;

&lt;h3 id=&#34;installation:d5167bc4d58ffc1d5402991419a8e81b&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;berrybrew is written in C#. If you have git you can install berrybrew by cloning the GitHub &lt;a href=&#34;https://github.com/sillymoose/berrybrew&#34;&gt;repo&lt;/a&gt; and either using the pre-compiled binary, or minting your own with Mono. The pre-compiled binary is &lt;code&gt;bin/berrybrew.exe&lt;/code&gt; and should work out of the box on Windows 7 and 8 (it might work on Windows XP if you have .Net framework 2 or higher installed).&lt;/p&gt;

&lt;p&gt;To download the project with git and compile it with &lt;a href=&#34;http://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; type the following commands at the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; git clone https://github.com/sillymoose/berrybrew
&amp;gt; mcs src/berrybrew.cs -lib:lib -r:ICSharpCode.SharpZipLib.dll -out:bin/berrybrew.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will output a fresh binary in the &lt;code&gt;bin&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&#34;features:d5167bc4d58ffc1d5402991419a8e81b&#34;&gt;Features&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;available&lt;/code&gt; command lists available Strawberry Perls and whether they&amp;rsquo;re installed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; berrybrew available

The following Strawberry Perls are available:

            5.20.1_64 [installed]
            5.20.1_32 [installed]
            5.18.4_64
            5.18.4_32
            5.16.3_64
            5.16.3_32
            5.14.4_64
            5.14.4_32
            5.12.3_32
            5.10.1_32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output shows that I have both versions of Perl 5.20.1 installed. I can install another version using the &lt;code&gt;install&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; berrybrew install 5.10.1_32
Downloading http://strawberryperl.com/download/5.10.1.2/strawberry-perl-5.10.1.2-portable.zip to C:\Users\dfarrell\AppData\Local\Temp\gp5d33yg.qjo/strawberry-pe
rl-5.10.1.2-portable.zip
Confirming checksum ...
Extracting C:\Users\dfarrell\AppData\Local\Temp\gp5d33yg.qjo/strawberry-perl-5.10.1.2-portable.zip

The following Strawberry Perls are available:

            5.20.1_64 [installed]
            5.20.1_32 [installed]
            5.18.4_64
            5.18.4_32
            5.16.3_64
            5.16.3_32
            5.14.4_64
            5.14.4_32
            5.12.3_32
            5.10.1_32 [installed]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;berrybrew will download a temporary zip archive, confirm the checksums match, and extract the files to &lt;code&gt;C:\berrybrew&lt;/code&gt;. Finally I can use the newly installed Perl with the &lt;code&gt;switch&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; berrybrew switch 5.10.1_32
Switched to 5.10.1_32, start a new terminal to use it.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This updates my user &lt;code&gt;%PATH%&lt;/code&gt; environment variable to point at the new Perl binary. berrybrew will also warn if it finds another Perl binary in the system or user path (such as an ActiveState or vanilla Strawberry Perl). The system path can be problematic as Windows appends the user path to the system path which means it will search the system path first for any matching Perl binary and if it finds one, it will ignore the berrybrew binary. The system path also requires administrator privileges to update, which kind of goes against the spirit of berrybrew. One way to handle these would be to ask the user if they want to remove the other path, if they say yes, then berrybrew could prompt for administrator credentials, fire up another berrybrew process and remove them. For now it just warns the user and leaves the path variables untouched.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:d5167bc4d58ffc1d5402991419a8e81b&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I plan to add a few more commands to berrybrew: &lt;code&gt;exec&lt;/code&gt; to run a Perl program against every installed Perl, &lt;code&gt;uninstall&lt;/code&gt; to remove a Perl and &lt;code&gt;config&lt;/code&gt; to manage berrybrew&amp;rsquo;s settings. Under the hood a feature I&amp;rsquo;d love to add but am not sure how, is to refresh the current shell&amp;rsquo;s environment variable block, so the user doesn&amp;rsquo;t have to start a new cmd.exe when switching to a new Perl version.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s early days but if you have any suggestions for new features or feedback drop me an email or fork the project on &lt;a href=&#34;https://github.com/sillymoose/berrybrew&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shazam! Use Image::Magick with Perlbrew in minutes</title>
      <link>https://dnmfarrell.github.io/article/57/2014/1/1/Shazam--Use-Image--Magick-with-Perlbrew-in-minutes/</link>
      <pubDate>Wed, 01 Jan 2014 23:43:09 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/57/2014/1/1/Shazam--Use-Image--Magick-with-Perlbrew-in-minutes/</guid>
      <description>

&lt;p&gt;&lt;em&gt;The open source ImageMagick software provides amazing tools for creating and manipulating images in over 100 formats. Unfortunately, installing ImageMagick&amp;rsquo;s Perl module under Perlbrew can be a frustrating and time-consuming task. However it doesn&amp;rsquo;t have to be this way - with the method described below you can have the module installed in minutes, no root access required!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;update-07-01-2014:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;&lt;em&gt;Update 07-01-2014&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Zaki (&lt;a href=&#34;https://twitter.com/zmughal&#34;&gt;@zhmughal&lt;/a&gt;) has worked up a sweet &lt;a href=&#34;https://gist.github.com/zmughal/8264712/raw/8831e421393143c5b48f22dcfa12eeda51c5cfbf/install-imagemagick-perl&#34;&gt;shell script&lt;/a&gt; to automate the installation process for you, so you can save the finger work for using ImageMagick with your next Perl program:)&lt;/p&gt;

&lt;h3 id=&#34;requirements:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to have Perlbrew and a local Perl installation via Perlbrew on Unix-based platform. This has been tested on Perl 5.16.3 but should work on any modern Perl version.&lt;/p&gt;

&lt;h3 id=&#34;preparation:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Preparation&lt;/h3&gt;

&lt;p&gt;Create a local directory: we will install ImageMagick here. Open up the terminal and enter the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;mkdir ~/local
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-image-magick-don-t-use-cpan:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Installing Image::Magick - don&amp;rsquo;t use CPAN&lt;/h3&gt;

&lt;p&gt;Although the &lt;a href=&#34;https://metacpan.org/pod/Image::Magick&#34;&gt;Image::Magick&lt;/a&gt; module is available on CPAN, installing it via CPAN is usually a fruitless task as the process croaks on make. Instead download the whole &lt;a href=&#34;http://www.imagemagick.org/download/ImageMagick.tar.gz&#34;&gt;ImageMagick tarball&lt;/a&gt;. Once downloaded, navigate to the tarball&amp;rsquo;s parent directory using the terminal and un-tar the archive with the following command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;tar xvfz ImageMagick.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now change into the new directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;cd ImageMagick-6.8.8-0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enter the following command, replacing [username], [path to CORE] and [path to Perl bin] with your system&amp;rsquo;s details. Remove the &amp;ldquo;&amp;ndash;without-threads&amp;rdquo; text if your Perl was compiled with threads (here is how to check).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;LDFLAGS=-L/home/[username]/perl5/perlbrew/perls/[path to CORE] \
    ./configure --prefix /home/[username]/local \
    --with-perl=/home/[username]/perl5/perlbrew/perls/[path to Perl bin] \
    --enable-shared --without-threads
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a completed example for my system:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;LDFLAGS=-L/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/lib/5.16.3/x86_64-linux/CORE \
    ./configure --prefix /home/sillymoose/local \
    --with-perl=/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin/perl \
    --enable-shared --without-threads
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this command should cause ImageMagick to run a series of configuration checks, at the end of which it will print a configuration summary, which should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;ImageMagick is configured as follows. Please verify that this configuration
matches your expectations.

Host system type: x86_64-unknown-linux-gnu
Build system type: x86_64-unknown-linux-gnu

                  Option                        Value
-------------------------------------------------------------------------------
Shared libraries  --enable-shared=yes       yes
Static libraries  --enable-static=yes       yes
Module support    --with-modules=no     no
GNU ld            --with-gnu-ld=yes     yes
Quantum depth     --with-quantum-depth=16   16
High Dynamic Range Imagery
                  --enable-hdri=no      no

Delegate Configuration:
BZLIB             --with-bzlib=yes      yes
Autotrace         --with-autotrace=no       no
Dejavu fonts      --with-dejavu-font-dir=default    /usr/share/fonts/dejavu/
DJVU              --with-djvu=yes       no
DPS               --with-dps=yes        no
FFTW              --with-fftw=yes       no
FlashPIX          --with-fpx=yes        no
FontConfig        --with-fontconfig=yes     no
FreeType          --with-freetype=yes       yes
GhostPCL          None              pcl6 (unknown)
GhostXPS          None              gxps (unknown)
Ghostscript       None              gs (9.10)
Ghostscript fonts --with-gs-font-dir=default    /usr/share/fonts/default/Type1/
Ghostscript lib   --with-gslib=no       no
Graphviz          --with-gvc=no     
JBIG              --with-jbig=yes       no
JPEG v1           --with-jpeg=yes       yes
JPEG-2000         --with-jp2=yes        yes
LCMS v1           --with-lcms=yes       yes
LCMS v2           --with-lcms2=yes      no
LQR               --with-lqr=yes        no
LTDL              --with-ltdl=yes       no
LZMA              --with-lzma=yes       yes
Magick++          --with-magick-plus-plus=yes   no (failed tests)
MUPDF             --with-mupdf=no       no
OpenEXR           --with-openexr=yes        no
PANGO             --with-pango=yes      no
PERL              --with-perl=/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin/perl        /home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin/perl
PNG               --with-png=yes        yes
RSVG              --with-rsvg=no        no
TIFF              --with-tiff=yes       yes
WEBP              --with-webp=yes       no
Windows fonts     --with-windows-font-dir=  none
WMF               --with-wmf=no     no
X11               --with-x=         yes
XML               --with-xml=yes        yes
ZLIB              --with-zlib=yes       yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check that the image file formats you expect to be working with are showing as &amp;ldquo;yes&amp;rdquo;. If any are showing as &amp;ldquo;no&amp;rdquo; that you require, you&amp;rsquo;ll need to install the appropriate C library (e.g. libpng for PNG files) and re-run the previous command.&lt;/p&gt;

&lt;p&gt;To install ImageMagick and the Image::Magick Perl module, run this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;confirm-installation:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Confirm Installation&lt;/h3&gt;

&lt;p&gt;Confirming that the Image::Magick module has installed is not quite straightforward either. With version Image Magick 6.8.8, the $VERSION variable is stored in the super class Image::Magick::Q16. Hence you&amp;rsquo;ll need to type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl -MImage::Magick::Q16\ 999
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which should yield:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;Image::Magick::Q16 version 999 required--this is only version 6.88.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sources:5eaf94c7ee71c974c0676a2e0c0a2bea&#34;&gt;Sources&lt;/h3&gt;

&lt;p&gt;Thanks to Jason Galea - his invaluable &lt;a href=&#34;https://github.com/lecstor/DevNotes/wiki/Image-Magick-with-Perlbrew&#34;&gt;GitHub notes&lt;/a&gt; formed the basis of this solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run local Perl as root</title>
      <link>https://dnmfarrell.github.io/article/36/2013/8/10/Run-local-Perl-as-root/</link>
      <pubDate>Sat, 10 Aug 2013 14:33:18 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/36/2013/8/10/Run-local-Perl-as-root/</guid>
      <description>&lt;p&gt;This is a simple trick for conveniently running local Perl as a root user on UNIX-based systems.&lt;/p&gt;

&lt;p&gt;Occasionally it&amp;rsquo;s necessary to run locally-installed Perl as root. However at the command line if you type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sudo perl program.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default the Perl that is executed is the system Perl binary. This can be problematic as the System Perl may not have the modules required, or even be the correct version of Perl that you need to run. An easy fix for this is to use the which command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sudo $(which perl) program.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By nesting which between a dollar sign parentheses, the terminal will resolve the command first, which returns a string to the local Perl binary. Sudo then operates on this binary instead of the system Perl binary. You can prove this with the following terminal commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;which perl
/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin/perl

sudo which perl
/bin/perl

sudo echo $(which perl)
/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin/perl
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>

