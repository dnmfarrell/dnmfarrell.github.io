<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Datetime on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/datetime/</link>
    <description>Recent content in Datetime on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Feb 2015 14:04:40 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/datetime/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Time::Moment can save time</title>
      <link>https://dnmfarrell.github.io/article/148/2015/2/2/Time--Moment-can-save-time/</link>
      <pubDate>Mon, 02 Feb 2015 14:04:40 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/148/2015/2/2/Time--Moment-can-save-time/</guid>
      <description>&lt;p&gt;A long time ago in a galaxy far, far away, the rebel alliance ran into a slight problem when the starship carrying the princess left two hours late because its software was in the wrong time zone, running into an imperial cruiser that was patrolling an hour early for a similar reason. The bad guys unwittingly solved the rebels&amp;rsquo; problem by removing the wrong time zone when they removed that special case—a solution familiar to programmers. The rebels exploited an imperial bug when a literal hole in their defense was left open an hour late.&lt;/p&gt;

&lt;p&gt;You might think that we are in the computer revolution (&lt;a href=&#34;https://www.youtube.com/watch?v=oKg1hTOQXoY&#34;&gt;Alan Kay says we aren&amp;rsquo;t&lt;/a&gt;), but for all of our fancy hardware, the cheap or free platforms and services, and the amazing programming tools we have, the way we handle and times is often a mess. Y2K has nothing on this.&lt;/p&gt;

&lt;p&gt;When Dave Rolsky came out with &lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt;, everyone rejoiced. It&amp;rsquo;s a masterful piece of software that strives to be pedantically correct down to the nanosecond and leap seconds. Before then, I used a hodge-podge of modules to deal with dates and avoided date math.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; can represent dates and tell me various things about them, such as the day of the quarter, give me locale-specific names, format them in interesting ways, and also give me the difference between dates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Date::Time;

my $dt = DateTime-&amp;gt;new(
    year       =&amp;gt; 2014,
    month      =&amp;gt; 12,
    day        =&amp;gt; 18,
    hour       =&amp;gt; 12,
    minute     =&amp;gt; 37,
    second     =&amp;gt; 57,
    nanosecond =&amp;gt; 0,
    time_zone  =&amp;gt; &#39;UTC&#39;,
);

my $quarter = $dt-&amp;gt;quarter;
my $day_of_quarter = $dt-&amp;gt;day_of_quarter;

my $month_name = $dt-&amp;gt;month_name;  # can be locale specific

my $ymd = $dt-&amp;gt;ymd(&#39;/&#39;); # 2015/02/06

my $now = DateTime-&amp;gt;now;

my $duration = $now - $dt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; doesn&amp;rsquo;t parse dates. Separate modules in the same namespace can do that while returning a &lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; object. For instance, the &lt;a href=&#34;http://www.metacpan.org/module/DateTime::Format::W3CDTF&#34;&gt;DateTime::Format::W3CDTF&lt;/a&gt; module parses dates and turn them into objects:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use DateTime::Format::W3CDTF;

my $w3c = DateTime::Format::W3CDTF-&amp;gt;new;
my $dt = $w3c-&amp;gt;parse_datetime( &#39;2003-02-15T13:50:05-05:00&#39; );

# 2003-02-15T13:50:05-05:00
$w3c-&amp;gt;format_datetime($dt);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Brilliant. &lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; is the standard answer to any date question. It works with almost no thought on my side.&lt;/p&gt;

&lt;p&gt;But &lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; has a problem. It creates big objects and in the excitement to use something that works (slow and correct is better than fast and wrong), I might end up with hundreds of those objects, not leaving much space for other things. Try dumping one of these objects to see its extent. I won&amp;rsquo;t waste space with that in this article.&lt;/p&gt;

&lt;p&gt;Although &lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; is exactingly correct, sometimes I&amp;rsquo;d like to be a little less exact and quite a bit faster. That&amp;rsquo;s where Christian Hansen&amp;rsquo;s &lt;a href=&#34;http://www.metacpan.org/module/Time::Moment&#34;&gt;Time::Moment&lt;/a&gt; comes in (see his &lt;a href=&#34;http://blogs.perl.org/users/chansen/2014/08/timemoment-vs-datetime.html&#34;&gt;Time::Moment vs DateTime&lt;/a&gt;). It works in UTC, ignores leap seconds, and limits its dates to the years 1 to 9999. It&amp;rsquo;s objects are immutable, so it can be a bit faster. To get a new datetime, you get a new object. And, it has many of the common features and an interface close to &lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.metacpan.org/module/Time::Moment&#34;&gt;Time::Moment&lt;/a&gt; distribution comes with a program, &lt;em&gt;dev/bench.pl&lt;/em&gt;, that allows me to compare the performance. Here&amp;rsquo;s some of the output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl dev/bench.pl
Benchmarking constructor: -&amp;gt;new()
                  Rate     DateTime Time::Moment
DateTime       14436/s           --         -99%
Time::Moment 1064751/s        7276%           --
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s make a more interesting benchmark that constructs an object from a string, add a day to it, and check if it&amp;rsquo;s before today. As with every benchmark, you have to check it against your particular use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Benchmark;
use DateTime;
use Time::Moment;
use DateTime::Format::W3CDTF;

my $dtf_string =&#39;2014-02-01T13:01:37-05:00&#39;;

my $time_moment = sub {
    my $tm = Time::Moment-&amp;gt;from_string( $dtf_string );
    my $tm2 = $tm-&amp;gt;plus_days( 1 );
    
    my $now = Time::Moment-&amp;gt;now;
    
    my $comparison = $now &amp;gt; $tm2;
    };
        
my $datetime = sub {
    my $w3c = DateTime::Format::W3CDTF-&amp;gt;new;
    my $dt = $w3c-&amp;gt;parse_datetime( $dtf_string );
    $dt-&amp;gt;add( days =&amp;gt; 1 );

    my $now = DateTime-&amp;gt;now;

    my $comparison = $now &amp;gt; $dt;
    };

Benchmark::cmpthese( -10, {
    &#39;Time::Moment&#39; =&amp;gt; $time_moment,
    &#39;DateTime&#39;     =&amp;gt; $datetime,
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.metacpan.org/module/Time::Moment&#34;&gt;Time::Moment&lt;/a&gt; is still really fast. Amazingly fast:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl dtf_bench.pl
                 Rate     DateTime Time::Moment
DateTime       1889/s           --         -99%
Time::Moment 273557/s       14384%           --
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If my problem is within the limits of &lt;a href=&#34;http://www.metacpan.org/module/Time::Moment&#34;&gt;Time::Moment&lt;/a&gt; (and, who ever needs more than 640k?), I can get big wins. When that no longer applies, with a little work I can switch to &lt;a href=&#34;http://www.metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt;. Either way, you might want to wipe the memory of your droids.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;http://creativecommons.org/licenses/by-nc/2.5/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;http://xkcd.com/1179/&#34;&gt;XKCD&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solve almost any datetime need with Time::Piece</title>
      <link>https://dnmfarrell.github.io/article/59/2014/1/10/Solve-almost-any-datetime-need-with-Time--Piece/</link>
      <pubDate>Fri, 10 Jan 2014 04:24:25 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/59/2014/1/10/Solve-almost-any-datetime-need-with-Time--Piece/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Datetimes come up all the time in programming, so being fluent in handling them is an essential skill. There are &lt;a href=&#34;https://metacpan.org/search?q=date+time&#34;&gt;many modules&lt;/a&gt; on CPAN for dealing with datetimes, but for most tasks you only need one: &lt;a href=&#34;https://metacpan.org/pod/Time::Piece&#34;&gt;Time::Piece&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:15c12906ca779ac02701e8af216e915b&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;Time::Piece has been in Perl core since version 5.8, so you should already have it installed. If you don&amp;rsquo;t have it, you can install it via cpan at the terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Time::Piece
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-time-piece-object:15c12906ca779ac02701e8af216e915b&#34;&gt;Create a Time::Piece object&lt;/h3&gt;

&lt;p&gt;To create a new Time::Piece object with the current system time, use new:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;

my $time = Time::Piece-&amp;gt;new;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;get-a-datetime-string-in-any-format:15c12906ca779ac02701e8af216e915b&#34;&gt;Get a datetime string in any format&lt;/h3&gt;

&lt;p&gt;Time::Piece provides many methods for printing the datetime in common formats. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$time;           # Thu Jan  9 21:21:36 2014
$time-&amp;gt;datetime; # 2014-01-09T21:21:36
$time-&amp;gt;date;     # 2014-01-09
$time-&amp;gt;mdy;      # 01-09-2014
$time-&amp;gt;fullday;  # Thursday
$time-&amp;gt;hms;      # 21:21:36
$time-&amp;gt;epoch;    # 1389320496 (Unix time)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to get the datetime in a custom format, Time::Piece provides a &amp;ldquo;strftime&amp;rdquo; method which takes a custom string format. A complete list of formatting codes is on the &lt;a href=&#34;http://man7.org/linux/man-pages/man3/strftime.3.html&#34;&gt;man page&lt;/a&gt;. Here are some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;

my $time = Time::Piece-&amp;gt;new;
$time-&amp;gt;strftime(&#39;%y/%m/%d %H:%M&#39;); # 14/01/09 21:21
$time-&amp;gt;strftime(&#39;%y_%m_%d&#39;);       # 14_01_09
$time-&amp;gt;strftime(&#39;%s&#39;);             # 1389320496 (Unix time)
$time-&amp;gt;strftime(&#39;%Y %y %G %g&#39;);    # 2014 14 2014 14 (4 different years,really)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;read-a-datetime-string-in-any-format:15c12906ca779ac02701e8af216e915b&#34;&gt;Read a datetime string in any format&lt;/h3&gt;

&lt;p&gt;Time::Piece also provides a strptime method which takes a string, and a string format and initializes a new Time::Piece object with that datetime. If either the date or time component is missing, Time::Piece assumes the current date or time. Here are some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;

my $yesterday    = Time::Piece-&amp;gt;strptime(&#39;01-08-2014&#39;, &#39;%m-%d-%Y&#39;);
my $yesterdayDMY = Time::Piece-&amp;gt;strptime(&#39;08-01-14&#39;, &#39;%d-%m-%y&#39;);
my $lunchhour24  = Time::Piece-&amp;gt;strptime(&#39;12:30&#39;, &#39;%H:%M&#39;);
my $bedtime      = Time::Piece-&amp;gt;strptime(&#39;12:30 AM&#39;, &#39;%l:%M %p&#39;);

# timezones are easy too
my $utc_datetime = Time::Piece-&amp;gt;strptime(&#39;Mon, 19 Jan 2015 14:56:20 +0000&#39;,&#39;%a, %d %b %Y %H:%M:%S %z&#39;);
my $eastern_datetime = Time::Piece-&amp;gt;strptime(&#39;2015-10-05T09:34:19 -0400&#39;,&#39;%Y-%m-%dT%T %z&#39;);
my $pacific_datetime = Time::Piece-&amp;gt;strptime(&#39;2015-10-05T09:34:19 -0700&#39;,&#39;%Y-%m-%dT%T %z&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;strptime uses the same formatting codes as strftime, you can get the full list &lt;a href=&#34;http://man7.org/linux/man-pages/man3/strftime.3.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;compare-datetimes:15c12906ca779ac02701e8af216e915b&#34;&gt;Compare datetimes&lt;/h3&gt;

&lt;p&gt;This is easy. Just initialize two Time::Piece objects and compare them with an operator (&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt; and &amp;lt;=&amp;gt;). For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;

my $today = Time::Piece-&amp;gt;new;
my $yesterday = Time::Piece-&amp;gt;strptime(&#39;01/08/2014&#39;, &#39;%m/%d/%Y&#39;);

if ($today &amp;gt; $yesterday) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;datetime-math:15c12906ca779ac02701e8af216e915b&#34;&gt;Datetime math&lt;/h3&gt;

&lt;p&gt;The first thing to know is that Time::Piece objects are &lt;strong&gt;immutable&lt;/strong&gt; so any operation performed on them will return a new object.&lt;/p&gt;

&lt;p&gt;Time::Piece provides a couple of methods for adding months and years (&amp;ldquo;add_months&amp;rdquo;, &amp;ldquo;add_years&amp;rdquo;) from Time::Piece objects. Simply use a negative integer to subtract. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;

my $datetime = Time::Piece-&amp;gt;new;
my $nextMonth   = $datetime-&amp;gt;add_months(1);   # plus one month
my $lastQuarter = $datetime-&amp;gt;add_months(-3);  # minus three months
my $nextDecade  = $datetime-&amp;gt;add_years(10);   # plus 10 years
my $lastYear    = $datetime-&amp;gt;add_years(-1);   # minus 1 year
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll often need more granular control over the datetime, and that&amp;rsquo;s where the &lt;a href=&#34;https://metacpan.org/pod/Time::Seconds&#34;&gt;Time::Seconds&lt;/a&gt; module comes in. Just include it in your program, and it will export several constants which can be used to adjust the datetime. The constants are: ONE_MINUTE, ONE_HOUR, ONE_DAY, ONE_WEEK, ONE_MONTH, ONE_YEAR, ONE_FINANCIAL_MONTH, LEAP_YEAR, NON_LEAP_YEAR.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how to use the constants:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;
use Time::Seconds;

my $time = Time::Piece-&amp;gt;new;
my $tomorrow  = $time + ONE_DAY;
my $lastWeek  = $time - ONE_WEEK;
my $lastMonth = $time - ONE_MONTH;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to change the datetime by seconds, with you can simply use integer arithmetic.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Time::Piece;

my $now = Time::Piece-&amp;gt;new;
my $30SecondsAgo = $now - 30; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;documentation:15c12906ca779ac02701e8af216e915b&#34;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Time::Piece&#34;&gt;Time::Piece&lt;/a&gt; has excellent documentation, you can read it on the command line with perldoc:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc Time::Piece
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; &lt;em&gt;Added timezone strptime example 2015-01-28&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

