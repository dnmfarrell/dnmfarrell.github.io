<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Foreach on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/foreach/</link>
    <description>Recent content in Foreach on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Apr 2013 10:03:44 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/foreach/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Perl for loops</title>
      <link>https://dnmfarrell.github.io/article/17/2013/4/12/Perl-for-loops/</link>
      <pubDate>Fri, 12 Apr 2013 10:03:44 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/17/2013/4/12/Perl-for-loops/</guid>
      <description>

&lt;p&gt;Perl&amp;rsquo;s for loops are a powerful feature that, like the rest of Perl can be as concise, flexible and versatile required. This article covers the core features for Perl&amp;rsquo;s for loops.&lt;/p&gt;

&lt;h3 id=&#34;c-style-for-loops:cec02722abe304de2cce1d85500b5003&#34;&gt;C-style for loops&lt;/h3&gt;

&lt;p&gt;The C-style for loop follows programming tradition and requires three parameters (count; logical test; count modifier). It looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
# print numbers 0 to 9
for (my $i = 0; $i &amp;lt; 10; $i++) {
    say $i;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s review the code above. First of all we import the feature &amp;lsquo;say&amp;rsquo; which works like the print command except that it appends a newline to the printed string. Before the loop begins, Perl initialises the scalar variable $i as zero. Perl will then check the logical condition ($i &amp;lt; 10). If the condition is true, Perl will execute all the code between the braces { } once. Perl will also increment $i by 1 because the count modifier condition is set to $i++. Having finished one iteration, Perl will then check the logical condition again. After one iteration, $i is equal to 1, so Perl will loop through the code again. This will continue until $i is equal to 10 and the logical condition returns false, at which point Perl will then move on to process any code below the loop. The loop above used an increment modifier ($i++), however it can decrement as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
# print numbers 10 to 1
for (my $i = 10; $i &amp;gt; 0; $i--) {
    say $i;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact we can use any modifier we choose, for example to print only odd numbers, we can use Perl&amp;rsquo;s add-to operator $i += 2 which is a shortcut for ($i = $i + 2).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
# print only odd numbers 1 - 9
for (my $i = 1; $i &amp;lt; 10; $i += 2) {
    say $i;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The C-style for loop can be used to access elements of an array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
my @weather_elements = (&#39;wind&#39;, &#39;rain&#39;, &#39;snow&#39;, &#39;cloud&#39;, &#39;sunshine&#39;);
for (my $i = 0; $i &amp;lt; @weather_elements; $i++) {
    say $weather_elements[$i];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the count is started at zero because Perl array indexes are zero-based, and the array is used as one-side of the logical condition ($i &amp;lt; @weather_elements) because in this context Perl will helpfully return the length of the array (5).&lt;/p&gt;

&lt;h3 id=&#34;for-loops-with-arrays:cec02722abe304de2cce1d85500b5003&#34;&gt;for loops with arrays&lt;/h3&gt;

&lt;p&gt;There are simpler ways than using the C-style for loop to iterate through every element of an array in Perl. If an array is passed to a for loop, it will iterate through every element of the array until it reaches the end. For example this is the same loop as above, written using the array technique:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
my @weather_elements = (&#39;wind&#39;, &#39;rain&#39;, &#39;snow&#39;, &#39;cloud&#39;, &#39;sunshine&#39;);
for my $weather_element (@weather_elements) {
    say $weather_element;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above Perl iterates through the array, assigning the value of the current element to $weather_element. Once the loop finishes $weather_element goes out of scope and will be garbage collected.&lt;/p&gt;

&lt;p&gt;We can simplify this code further. If no scalar variable is included in the argument, Perl will use $_ as the temporary variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
my @weather_elements = (&#39;wind&#39;, &#39;rain&#39;, &#39;snow&#39;, &#39;cloud&#39;, &#39;sunshine&#39;);
for (@weather_elements) {
    say $_;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of using &amp;lsquo;for&amp;rsquo;, some Perl programmers use a &amp;lsquo;foreach&amp;rsquo; loop, although in Perl &amp;lsquo;for&amp;rsquo; and &amp;lsquo;foreach&amp;rsquo; are synonyms and can be used interchangeably. I like &amp;lsquo;foreach&amp;rsquo; because it clarifies the programmer&amp;rsquo;s intentions. For example this code will do the same thing as the previous code example above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
my @weather_elements = (&#39;wind&#39;, &#39;rain&#39;, &#39;snow&#39;, &#39;cloud&#39;, &#39;sunshine&#39;);
foreach (@weather_elements) {
    say $_;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The for / foreach loop also accepts a list instead of an array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
foreach (&#39;wind&#39;, &#39;rain&#39;, &#39;snow&#39;, &#39;cloud&#39;, &#39;sunshine&#39;) {
    say $_;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;for-loops-with-ranges:cec02722abe304de2cce1d85500b5003&#34;&gt;for loops with ranges&lt;/h3&gt;

&lt;p&gt;Sometimes you just need Perl to &amp;lsquo;do something n number of times&amp;rsquo;. A quick way to do this is using a range i..n. For example, if we wanted to print 6 random lottery numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
for (1..6) {
    say int(rand(58)) + 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;for-loop-functions-redo-next-and-last:cec02722abe304de2cce1d85500b5003&#34;&gt;for loop functions: redo, next and last&lt;/h3&gt;

&lt;p&gt;Perl provides several functions which can be used to control the for loop iterations. &lt;strong&gt;redo&lt;/strong&gt; instructs Perl to re-run the current iteration. Let&amp;rsquo;s modify the lottery numbers example above to redo the loop if we generate an unlucky number 13.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;for (1..6) {
    my $number = int(rand(58)) + 1;
    redo if $number == 13;
    say $number;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above, if a number 13 is generated, the redo function will restart the iteration and the code will never reach the say $number statement.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;next&lt;/strong&gt; function stops the current iteration and moves to the next iteration. This can be useful when we have additional processing that we want to be done only for certain elements. For example if we were surveying a group of people about their education, it only makes sense to ask what school the person attended, if they have a degree:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
for (1..5){
        print &amp;quot;Please type your name and press enter: &amp;quot;;
        my $name = &amp;lt;&amp;gt;;
        say $name;
        print &amp;quot;Do you have a bachelors degree? (y/n) &amp;quot;;
        my $degree_flag = &amp;lt;&amp;gt;;
        say $degree_flag;
        chomp $degree_flag;
        next if $degree_flag eq &#39;n&#39;;
        print &amp;quot;Which school did you get the degree from?&amp;quot;;
        my $school = &amp;lt;&amp;gt;;
        say $school;
        # continues ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;last&lt;/strong&gt; function allows the current iteration to finish and then exits loop entirely. This is often used when doing pattern matching as once a match has been found, there is no need to check other possibilities:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $variable_type = &#39;$scalar&#39;;
my @perlvariable_regexes = (&#39;^\$&#39;, &#39;^@&#39;, &#39;^%&#39;);
foreach (@perlvariable_regexes ){
    if ($variable_type =~ m/$_/) {
        say &amp;quot;match found with $_&amp;quot;;
        last;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For further detail on Perl&amp;rsquo;s for loops, check out the &lt;a href=&#34;http://perldoc.perl.org/perlsyn.html#For-Loops&#34;&gt;official Perl documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl arrays 101 - create, loop and manipulate</title>
      <link>https://dnmfarrell.github.io/article/11/2013/4/4/Perl-arrays-101---create--loop-and-manipulate/</link>
      <pubDate>Thu, 04 Apr 2013 20:22:51 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/11/2013/4/4/Perl-arrays-101---create--loop-and-manipulate/</guid>
      <description>

&lt;p&gt;Arrays in Perl contain an ordered list of values that can be accessed using built-in functions. They are one of the most useful data structures and frequently used in Perl programming.&lt;/p&gt;

&lt;h3 id=&#34;creating-an-array:0fc1cff51f8e8b6779283bd677e343f0&#34;&gt;Creating an array&lt;/h3&gt;

&lt;p&gt;In Perl variables are identified using sigils. Arrays use @ (as in &amp;lsquo;a&amp;rsquo; for array), so the format is: @any_name_you_choose_here. Arrays are initialised by assigning a list of values (comma separated values between parentheses). Unlike more formal languages, Perl arrays can contain a mix of numbers, strings, objects and references.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @empty_array;

my @another_empty_array = ();

my @numbers = (1, 2, 3, 4, 5);

my @names_start_with_j = (&#39;John&#39;, &#39;Judy&#39;, &#39;Julia&#39;, &#39;James&#39;, &#39;Jennifer&#39;);

my @random_collection = (2013, &#39;keyboard&#39;, &#39;perltricks.com&#39;, 30);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;finding-the-array-length-size:0fc1cff51f8e8b6779283bd677e343f0&#34;&gt;Finding the array length / size&lt;/h3&gt;

&lt;p&gt;The length of an array (aka the &amp;lsquo;size&amp;rsquo;) is the count of the number of elements in the array. To find the array length, use the array in a scalar context:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @numbers = (1, 2, 3, 4, 5);
my $array_length = @numbers; 
print $array_length;
# 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;accessing-array-elements-directly:0fc1cff51f8e8b6779283bd677e343f0&#34;&gt;Accessing array elements directly&lt;/h3&gt;

&lt;p&gt;Arrays can be accessed in a variety of ways: by directly accessing an element, slicing a group of elements or looping through the entire array, accessing one element at a time.&lt;/p&gt;

&lt;p&gt;When directly accessing an array element, use the array name prefaced with the scalar sigil ($) instead of (@) and the index number of the element enclosed in square brackets. Arrays are zero-based, which means that the first element&amp;rsquo;s index number is 0 (not 1!).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @names_start_with_j = (&#39;John&#39;, &#39;Judy&#39;, &#39;Julia&#39;, &#39;James&#39;, &#39;Jennifer&#39;);
$names_start_with_j[0]; # John
$names_start_with_j[4]; # Jennifer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The implication of zero-based indexing is that the index number of the last element in an array is equal to the length of the array minus one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @numbers = (11, 64, 29, 22, 100);
my $numbers_array_length = @numbers;
my $last_element_index = numbers_array_length - 1;
# therefore ...
print $numbers[$last_element_index]; 
# 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For simpler ways to access the last element of an array - see our &lt;a href=&#34;http://perltricks.com/article/6/2013/3/28/Find-the-index-of-the-last-element-in-an-array&#34;&gt;recent article&lt;/a&gt; for examples.&lt;/p&gt;

&lt;h3 id=&#34;loop-through-an-array-with-foreach:0fc1cff51f8e8b6779283bd677e343f0&#34;&gt;Loop through an array with foreach&lt;/h3&gt;

&lt;p&gt;Arrays elements can be accessed sequentially using a foreach loop to iterate through the array one element at a time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @names_start_with_j = (&#39;John&#39;, &#39;Judy&#39;, &#39;Julia&#39;, &#39;James&#39;, &#39;Jennifer&#39;);
foreach my $element (@names_start_with_j) {
    print &amp;quot;$element\n&amp;quot;;
}
# John
# Judy
# Julia
# James
# Jennifer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other common functions for looping through arrays are &lt;a href=&#34;http://perldoc.perl.org/functions/grep.html&#34;&gt;grep&lt;/a&gt; and &lt;a href=&#34;http://perldoc.perl.org/functions/map.html&#34;&gt;map&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;shift-unshift-push-and-pop:0fc1cff51f8e8b6779283bd677e343f0&#34;&gt;shift, unshift, push and pop&lt;/h3&gt;

&lt;p&gt;Perl arrays are dynamic in length, which means that elements can be added to and removed from the array as required. Perl provides four functions for this: shift, unshift, push and pop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;shift&lt;/strong&gt; removes and returns the first element from the array, reducing the array length by 1.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @compass_points = (&#39;north&#39;, &#39;east&#39;, &#39;south&#39;, &#39;west&#39;);
my $direction = shift @compass_points;
print $direction; 
# north
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If no array is passed to shift, it will operate on @_. This makes it useful in subroutines and methods where by default @_ contains the arguments from the subroutine / method call. E.G.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;print_caller(&amp;quot;perltricks&amp;quot;);
sub print_caller {
    my $caller_name = shift;
    print $caller_name;
}
# perltricks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other three array functions work similarly to shift. &lt;strong&gt;unshift&lt;/strong&gt; receives and inserts a new element into the front of the array increasing the array length by 1.&lt;strong&gt;push&lt;/strong&gt; receives and inserts a new element to the end of the array, increasing the array length by 1. &lt;strong&gt;pop&lt;/strong&gt; removes and returns the last element in the array, reducing the array length by 1.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @compass_points = (&#39;north&#39;, &#39;east&#39;, &#39;south&#39;, &#39;west&#39;);
my $direction = &#39;north-east&#39;;
unshift @compass_points, $direction;
# @compass_points contains: north-east, north, east, south and west

my $west = pop @compass; 
push @compass, $new_direction; # put $west back
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;check-an-array-is-null-or-undefined:0fc1cff51f8e8b6779283bd677e343f0&#34;&gt;Check an array is null or undefined&lt;/h3&gt;

&lt;p&gt;A simple way to check if an array is null or defined is to examine it in a scalar context to obtain the number of elements in the array. If the array is empty, it will return 0, which Perl will also evaluate as boolean false. Bear in mind that this is not quite the same thing as undefined, as it is possible to have an empty array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @empty_array;
if (@empty_array) {
    # do something - will not be reached if the array has 0 elements
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>

