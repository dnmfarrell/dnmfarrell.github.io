<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Open_source on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/open_source/</link>
    <description>Recent content in Open_source on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 May 2015 12:26:37 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/open_source/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Miniconf NYC - a free Perl conference</title>
      <link>https://dnmfarrell.github.io/article/175/2015/5/14/Miniconf-NYC---a-free-Perl-conference/</link>
      <pubDate>Thu, 14 May 2015 12:26:37 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/175/2015/5/14/Miniconf-NYC---a-free-Perl-conference/</guid>
      <description>

&lt;p&gt;Just when you thought there couldn&amp;rsquo;t be more NYC based Perl events, another comes along! I&amp;rsquo;m one of the organizers for &lt;a href=&#34;http://mini-conf.com&#34;&gt;Miniconf&lt;/a&gt; a free Perl conference that&amp;rsquo;s running here in New York on Saturday June 6th, two days day before YAPC::NA. There&amp;rsquo;s also a pre-conference social event, and you can sign up for both events on &lt;a href=&#34;http://www.meetup.com/The-New-York-Perl-Meetup-Group/http://www.meetup.com/The-New-York-Perl-Meetup-Group/&#34;&gt;meetup&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;what-to-expect:415b3af018660e6f37a6b2438056b75d&#34;&gt;What to expect&lt;/h3&gt;

&lt;p&gt;We have two large rooms for the day, one for training and the other for the hackathon. Taking our cue from the recent NYC Perl hackathon, for our hackathon we&amp;rsquo;re going to cluster attendees around projects they&amp;rsquo;re interested in working on, and each project team will have a leader responsible for helping attendees get up to speed. I like this approach because it&amp;rsquo;s newbie friendly, and encourages a productive use of the time. We&amp;rsquo;ve got a few teams already:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you know Perl 5 and are interested in Perl 6? Then you might be interested joining my team which is converting Perl 5 modules to Perl 6.&lt;/li&gt;
&lt;li&gt;Want to contribute to core Perl 5 development? Join the &amp;ldquo;Show core modules some love&amp;rdquo; team led by Richard Elberger and help close a few tickets.&lt;/li&gt;
&lt;li&gt;Interested in Mojolicious web development? Help Curtis Brandt hack on &lt;a href=&#34;https://github.com/aggrolite/Mojo-Snoo&#34;&gt;Mojo::Snoo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have a hackathon project you&amp;rsquo;d like to work on, &lt;a href=&#34;mailto:admin@mini-conf.com&#34;&gt;email us&lt;/a&gt; and we&amp;rsquo;ll add it to the &lt;a href=&#34;http://mini-conf.com&#34;&gt;website&lt;/a&gt;. Of course, solo hackers are welcome too :)&lt;/p&gt;

&lt;p&gt;For training, in the morning we have brian d foy delivering his popular &amp;ldquo;Become a CPAN author in three hours&amp;rdquo; course. This is a great introductory course for aspiring CPAN contributors - learn how to create a Perl distribution, package it up and upload it to CPAN. Contributing to CPAN is one of the most fun and rewarding things a Perl developer can learn - once your distribution is on CPAN, &lt;strong&gt;anyone&lt;/strong&gt; can use it and benefit from it - how cool is that? It&amp;rsquo;s also interesting to get to know the Perl toolchain, and how systems like CPAN and PAUSE work. We currently have an afternoon training slot available.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to see the day out with lightning talks - always a fun affair. At the moment we&amp;rsquo;re thinking the project teams can give a lightning talk to describe their progress for the day, but it might make sense to just have a more general lightning talk slot - if you want to give a lightning talk, &lt;a href=&#34;mailto:admin@mini-conf.com&#34;&gt;email us&lt;/a&gt;. I&amp;rsquo;ll probably give a talk on one of my dumber &lt;a href=&#34;https://metacpan.org/pod/Cache::Reddit&#34;&gt;modules&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;how-to-help:415b3af018660e6f37a6b2438056b75d&#34;&gt;How to help&lt;/h3&gt;

&lt;p&gt;Spread the word! We&amp;rsquo;re promoting the event through social media and other outlets (like this website, see the banner ad). Follow the Miniconf Twitter [feed]() - we&amp;rsquo;ll use it to communicate conference updates.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re also looking for sponsors, if you work for a company interested in reaching New York based programmers, give them our email address, or even better send them introductory email cc&amp;rsquo;ing &lt;code&gt;admin@mini-conf.com&lt;/code&gt;. With sponsors we&amp;rsquo;re trying something a little bit different, we have sponsorship slots for particular aspects of the conference. So an organization can be the &amp;ldquo;pizza and soda sponsor&amp;rdquo; to make a more visible link between a sponsor&amp;rsquo;s contribution and the benefits of the conference. Every sponsor gets their logo on the conference website, on the big screens during the conference, and promotion through social media. We&amp;rsquo;re also running a &amp;ldquo;swag&amp;rdquo; table for sponsors to contribute merchandise, an obvious win-win, as the sponsor gets brand promotion and the attendees get free stuff!&lt;/p&gt;

&lt;p&gt;As a programmer and tech conference regular myself, I&amp;rsquo;m trying to create the kind of conference that I&amp;rsquo;d want to go to. If you have any questions or suggestions, &lt;a href=&#34;mailto:admin@mini-conf.com&#34;&gt;email us&lt;/a&gt;. I&amp;rsquo;m looking forward to seeing everyone there!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get to grips with GNU Screen</title>
      <link>https://dnmfarrell.github.io/article/153/2015/2/16/Get-to-grips-with-GNU-Screen/</link>
      <pubDate>Mon, 16 Feb 2015 14:15:50 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/153/2015/2/16/Get-to-grips-with-GNU-Screen/</guid>
      <description>

&lt;p&gt;GNU Screen is a terminal multiplexer, a program that manages terminal windows. It&amp;rsquo;s been around for 28 years, which makes it older than Perl 5. So if you thought Perl had some archaic conventions, you ain&amp;rsquo;t seen nothing yet. But despite it&amp;rsquo;s age Screen is a powerful tool for managing terminals; if you often find yourself using more than one terminal, you owe it to yourself to start using a multiplexer for major productivity gains. Screen is the most widely used multiplexer, another popular option is &lt;a href=&#34;http://tmux.sourceforge.net/&#34;&gt;tmux&lt;/a&gt;, but this article is about Screen.&lt;/p&gt;

&lt;h3 id=&#34;getting-started:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Getting started&lt;/h3&gt;

&lt;p&gt;Start Screen by simply typing &lt;code&gt;screen&lt;/code&gt; at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All commands in Screen start with the prefix &lt;code&gt;Control + a&lt;/code&gt;. The first command to learn is the most important; how to display the commands menu! To do this type &lt;code&gt;Control + a, ?&lt;/code&gt; (that is, press Control and the &amp;ldquo;A&amp;rdquo; key, release the keys and then type question mark). If you remember this one command, you can always get yourself out of trouble, even if you forget some of the other commands.&lt;/p&gt;

&lt;h3 id=&#34;managing-windows:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Managing windows&lt;/h3&gt;

&lt;p&gt;To open a new terminal window, type &lt;code&gt;Control + a, c&lt;/code&gt;. Screen will create a new window - this is a new terminal process. To see a list of open windows, type &lt;code&gt;Control + a, &amp;quot;&lt;/code&gt;. You can press up and down to highlight the window you want to use, and press enter to open it.&lt;/p&gt;

&lt;p&gt;You can also cycle through windows, by pressing &lt;code&gt;Control + a, n&lt;/code&gt; to move to the next window and &lt;code&gt;Control + a, p&lt;/code&gt; to move to the previous one. Every window is assigned a number, and you can jump straight to a window with: &lt;code&gt;Control + a, #&lt;/code&gt; where the pound key is the number window to jump to.&lt;/p&gt;

&lt;p&gt;Finally if you want to kill a window type &lt;code&gt;Control + a, k&lt;/code&gt;. To kill all windows and exit screen the combination is: &lt;code&gt;Control + a, \&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;split-screen:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Split Screen&lt;/h3&gt;

&lt;p&gt;Screen can split the terminal window into multiple windows. This is really helpful if you need to look at multiple terminals simultaneously. Any window can be split vertically or horizontally and multiple times, leading to all kinds of &lt;a href=&#34;https://encrypted.google.com/search?tbm=isch&amp;amp;q=gnu%20screen&amp;amp;tbs=imgo:1&#34;&gt;combinations&lt;/a&gt;. To vertically split the screen type: &lt;code&gt;Control + a, |&lt;/code&gt; and to horizontally split type: &lt;code&gt;Control + a, S&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To highlight the next split window, type &lt;code&gt;Control + a, tab&lt;/code&gt; (there&amp;rsquo;s also a config option to select by mouse click, more on that later). The combination &lt;code&gt;Control + a, Q&lt;/code&gt;. will quit split screen mode.&lt;/p&gt;

&lt;h3 id=&#34;copy-and-paste:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Copy and paste&lt;/h3&gt;

&lt;p&gt;Copying and pasting with Screen isn&amp;rsquo;t super easy. So much so that I often found myself using the terminal copy and paste instead (highlight with mouse, then &lt;code&gt;Control + C&lt;/code&gt;, &lt;code&gt;Control + V&lt;/code&gt;). However it&amp;rsquo;s useful to know Screen&amp;rsquo;s copy and paste because terminal copy and paste just crumbles on split screen mode, and you may want to use the mouse select for something more useful anyway.&lt;/p&gt;

&lt;p&gt;Copy and paste is modal, so you first have to enter &amp;ldquo;copy mode&amp;rdquo;. To do that type &lt;code&gt;Control + a, [&lt;/code&gt;. Now move the cursor to the beginning of the text you want to copy. Press &lt;code&gt;space&lt;/code&gt; to mark it and use the arrow keys (or h, j, k, l) to move the cursor to the end of the text you want to copy. Pressing &lt;code&gt;space&lt;/code&gt; again will copy the highlighted text. To paste, type &lt;code&gt;Control + a, ]&lt;/code&gt;. Ew.&lt;/p&gt;

&lt;h3 id=&#34;scrolling:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Scrolling&lt;/h3&gt;

&lt;p&gt;By default Screen prevents scrolling using the X-Window scrollbar (it also doesn&amp;rsquo;t keep much history). This can be get very annoying, so you&amp;rsquo;ll want to know how to scroll. To do so, you need to enter copy mode with &lt;code&gt;Control + a, [&lt;/code&gt;. and then press &lt;code&gt;Control + u&lt;/code&gt; to scroll up and &lt;code&gt;Control + d&lt;/code&gt; to go down. Press &lt;code&gt;escape&lt;/code&gt; to exit copy mode. And until you can remember the combinations for scrolling, you&amp;rsquo;ll find yourself piping output to &lt;code&gt;less&lt;/code&gt; more than you ever imagined.&lt;/p&gt;

&lt;h3 id=&#34;detaching-screen-sessions:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Detaching Screen Sessions&lt;/h3&gt;

&lt;p&gt;Screen sessions can be put into the background just like any other terminal process. Screen will keep open any terminal processes (like ssh sessions). This is very useful - if you find yourself working with more than 5 or 6 windows, it might be easier to detach and start a new screen session than adding more windows. To detach screen, the combination is &lt;code&gt;Control + a, d&lt;/code&gt;. When you detach, screen will print the session name and return to the terminal prompt. To re-attach to a detached session just use &lt;code&gt;screen -r&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have more than one screen session, you can display all detached sessions with &lt;code&gt;-ls&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -ls
There are screens on:
    30549.pts-1.localhost   (Detached)
    30498.pts-1.localhost   (Detached)
    29207.pts-1.localhost   (Detached)
3 Sockets in /var/run/screen/S-sillymoose.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then just re-attach to the session you want by providing the session name as an option to &lt;code&gt;-r&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -r 29207
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if you&amp;rsquo;ve really got multiple Screen sessions going, it can be hard to remember what they&amp;rsquo;re all doing. So when you start Screen, use the &lt;code&gt;-S&lt;/code&gt; option to give the session a name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -S aws_ec2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you name all your sessions, it&amp;rsquo;s much easier to know which one to re-attach to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ screen -ls
There are screens on:
    31155.aws_ec2   (Detached)
    30866.email_servers (Detached)
    30815.ecommerce_app (Detached)
3 Sockets in /var/run/screen/S-sillymoose.

$ screen -r email_servers
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;customizing-screen:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Customizing Screen&lt;/h3&gt;

&lt;p&gt;Screen is highly configurable which is good because you&amp;rsquo;ll probably want to change a few of the default options. The first option you should consider isn&amp;rsquo;t a Screen option at all however.&lt;/p&gt;

&lt;p&gt;To stop your ssh sessions from timing out, add the following to your &lt;code&gt;~/.ssh/config&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# dont timeout connections
ServerAliveInternal 600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the &lt;code&gt;~/.ssh/config&lt;/code&gt; file didn&amp;rsquo;t already exist, you may have to change the permissions on the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ chmod 644 ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This option will have ssh send a byte every 10 minutes to the remote server to keep the session alive. You may want to change the frequency depending on your needs. Now you can have multiple ssh windows within screen, detach them for hours and return and you&amp;rsquo;ll still be logged in.&lt;/p&gt;

&lt;p&gt;Like many other terminal programs, screen will look for a runcom config file (&lt;code&gt;~/.screenrc&lt;/code&gt;). I like the following options:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# no welcome message
startup_message off

# keep running processes on detach
autodetach on

# start windows at 1 instead of 0
bind c screen 1
bind ^c screen 1
bind 0 select 10
screen 1

# large scrollback buffer
defscrollback 5000

# on split screen, switch window focus by clicking
mousetrack on

# refresh screen after closing a program
altscreen on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are loads more options to choose from. Screen has a huge online &lt;a href=&#34;https://www.gnu.org/software/screen/manual/screen.html&#34;&gt;manual&lt;/a&gt; and it&amp;rsquo;s terminal man page is comprehensive too. Any typed command listed in the manual can be run from within screen, or added to the &lt;code&gt;~/.screenrc&lt;/code&gt; file. For instance if you don&amp;rsquo;t like Screen&amp;rsquo;s default key bindings, checkout the &lt;code&gt;bindkey&lt;/code&gt; command for overriding them, as you don&amp;rsquo;t want to be typing them for another 28 years.&lt;/p&gt;

&lt;h3 id=&#34;screen-cheatsheet:b3b4c08bbb2a80fadc5ed53bc347292f&#34;&gt;Screen Cheatsheet&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# Type before other commands
Prefix: Control + a

Shortcuts menu: ?

New window:    c      Split Vertical:   |       Copy mode:     [
Close window:  k      Split Horizontal: S       Start copy:    space
Next window:   n      Focus next region: tab    Scroll up:     u
Prior window:  p      Quit split screem: Q      Scroll down:   d
Jump window #: 0-9                              End copy:      space
List windows:  &amp;quot;                                Paste:         ]
                                                End copy mode: escape

Detach: d
Quit:   \

# Terminal commands
Launch Screen:     screen
Named session:     screen -S &amp;lt;name&amp;gt;
List sessions:     screen -ls
Re-attach session: screen -r [name]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to contribute to the exercism.io Perl 5 repo</title>
      <link>https://dnmfarrell.github.io/article/91/2014/5/22/How-to-contribute-to-the-exercism-io-Perl-5-repo/</link>
      <pubDate>Thu, 22 May 2014 15:09:13 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/91/2014/5/22/How-to-contribute-to-the-exercism-io-Perl-5-repo/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Earlier this week I rounded off our exercism.io article with a call to action to help port exercises into the Perl 5 repo. Today I&amp;rsquo;m going to walk through the porting process step-by-step and show you how easy it is to contribute.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:96c520196f6519b815b433280ae5ea10&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need a GitHub account and Perl installed. That&amp;rsquo;s it!&lt;/p&gt;

&lt;h3 id=&#34;fork-the-repo:96c520196f6519b815b433280ae5ea10&#34;&gt;Fork the repo&lt;/h3&gt;

&lt;p&gt;To contribute to a project on GitHub, we&amp;rsquo;ll use the &amp;ldquo;fork and pull&amp;rdquo; approach. First we&amp;rsquo;ll login to GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/91/github_1.png&#34; title=&#34;Login to GitHub&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/91/github_1_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, search for the exercism/xperl5 repo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/91/github_2.png&#34; title=&#34;Search for exercism/xperl5&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/91/github_2_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/91/github_3.png&#34; title=&#34;Click the fork button&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/91/github_3_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the &amp;ldquo;Fork&amp;rdquo; button to copy the repo into our own perltricks/xperl5 repo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/91/github_4.png&#34; title=&#34;Our own forked repo&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/91/github_4_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;get-the-exercises:96c520196f6519b815b433280ae5ea10&#34;&gt;Get the exercises&lt;/h3&gt;

&lt;p&gt;Now we&amp;rsquo;ve forked the repo, we can commit changes to our forked version. To start we&amp;rsquo;ll need to download the Perl exercises from our forked repo. We can do this from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ git clone https://github.com/sillymoose/xperl5.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will download the xperl5 repo into a directory called &amp;ldquo;xperl5&amp;rdquo;. Next download the list of common exercises:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ git clone https://github.com/exercism/x-common.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will download the latest list of available exercises to the &amp;ldquo;x-common&amp;rdquo; directory, which contains a collection of readme files for the exercises. Any exercise that has a readme file in x-common that is missing from the xperl5 directory needs to be ported.&lt;/p&gt;

&lt;h3 id=&#34;find-the-exercise-in-another-language:96c520196f6519b815b433280ae5ea10&#34;&gt;Find the exercise in another language&lt;/h3&gt;

&lt;p&gt;Once you&amp;rsquo;ve found an exercise that needs to be ported, you&amp;rsquo;ll want to find that exercise in one of the other languages repos. It&amp;rsquo;s far easier to translate an exercise than to write it from scratch yourself! The Ruby, Python and JavaScript repos have most of the exercises, so we&amp;rsquo;ll start with one of those. For example to download the Ruby exercises repo, just type this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ git clone https://github.com/exercism/xruby.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the xruby directory doesn&amp;rsquo;t have the exercise you&amp;rsquo;re looking to port, try cloning xpython or xjavascript instead.&lt;/p&gt;

&lt;h3 id=&#34;porting-the-exercise:96c520196f6519b815b433280ae5ea10&#34;&gt;Porting the exercise&lt;/h3&gt;

&lt;p&gt;To port an exercise you need to provide the exercise test file and an Example.pm module which passes the tests. Earlier this week I ported the &amp;ldquo;leap&amp;rdquo; exercise from Ruby to Perl. This involved three steps. First I created the new exercise subdirectory in the xperl5 directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ mkdir xperl5/leap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, I translated the Ruby test file &amp;ldquo;xruby/leap/leap_test.rb&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;require &#39;date&#39;
require &#39;minitest/autorun&#39;
require_relative &#39;year&#39;

class Date
  def leap?
    throw &amp;quot;Try to implement this yourself instead of using Ruby&#39;s implementation.&amp;quot;
  end
  
  alias :gregorian_leap? :leap?
  alias :julian_leap? :leap?
end

class YearTest &amp;lt; MiniTest::Unit::TestCase
  def test_leap_year
    assert Year.leap?(1996)
  end

  def test_non_leap_year
    skip
    refute Year.leap?(1997)
  end
  
  def test_non_leap_even_year
    skip
    refute Year.leap?(1998)
  end

  def test_century
    skip
    refute Year.leap?(1900)
  end

  def test_fourth_century
    skip
    assert Year.leap?(2400)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to &amp;ldquo;xperl5/leap/leap.t&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use warnings;
use strict;
use Test::More tests =&amp;gt; 7;

my $module = $ENV{EXERCISM} ? &#39;Example&#39; : &#39;Leap&#39;;
my $sub = $module . &#39;::is_leap&#39;;

use_ok($module) or BAIL_OUT (&amp;quot;You need to create a module called $module.pm.&amp;quot;);
can_ok($module, &#39;is_leap&#39;) or BAIL_OUT(&amp;quot;Missing package $module with sub is_leap().&amp;quot;);

do {
    no strict &#39;refs&#39;;
    is 1, $sub-&amp;gt;(1996), &#39;1996 is a leap year&#39;;
    is 0, $sub-&amp;gt;(1997), &#39;1997 is not a leap year&#39;;
    is 0, $sub-&amp;gt;(1998), &#39;1998 is not a leap year&#39;;
    is 0, $sub-&amp;gt;(1900), &#39;1900 is not a leap year&#39;;
    is 1, $sub-&amp;gt;(2400), &#39;2400 is a leap year&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally I ported the example answer &amp;ldquo;xruby/leap/example.rb&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;require &#39;delegate&#39;

class Year &amp;lt; SimpleDelegator

  def self.leap?(number)
    Year.new(number).leap?
  end 

  def leap?
    divisible_by?(400) || divisible_by?(4) &amp;amp;&amp;amp; !divisible_by?(100)
  end

  private

  def divisible_by?(i)
    (self % i) == 0
  end 
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the Perl version, &amp;ldquo;xperl5/leap/Example.pm&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Example;
use warnings;
use strict;

sub is_leap {
    my $year = shift;
    divisible_by($year, 400)
        or divisible_by($year, 4) and !divisible_by($year, 100)
        ? 1 : 0;
}

sub divisible_by {
    $_[0] % $_[1] == 0 ? 1 : 0;
}

__PACKAGE__;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the test file at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ EXERCISM=1 prove leap.t
leap.t .. ok   
All tests successful.
Files=1, Tests=7,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.02 cusr  0.00 csys =  0.04 CPU)
Result: PASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of our tests passed, so we can commit these files. I also &lt;a href=&#34;https://github.com/sillymoose/xperl6/tree/master/leap&#34;&gt;ported&lt;/a&gt; a Perl 6 version.&lt;/p&gt;

&lt;h3 id=&#34;add-the-new-exercise-to-the-forked-repo:96c520196f6519b815b433280ae5ea10&#34;&gt;Add the new exercise to the forked repo&lt;/h3&gt;

&lt;p&gt;Now that we&amp;rsquo;ve ported the files, we need to add them to the forked xperl5 repository and commit the change. Here&amp;rsquo;s are the commands to do that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cd xperl5
$ git add leap/Example.pm leap/leap.t
$ git commit -am &#39;Added the leap exercise&#39;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the forked repo is out of sync with exercism/xperl5 you&amp;rsquo;ll need to &lt;a href=&#34;http://stackoverflow.com/questions/7244321/how-to-update-github-forked-repository&#34;&gt;rebase&lt;/a&gt; it.&lt;/p&gt;

&lt;h3 id=&#34;create-a-pull-request:96c520196f6519b815b433280ae5ea10&#34;&gt;Create a pull request&lt;/h3&gt;

&lt;p&gt;Returning to GitHub, all we have to do is initiate a pull request from our forked repo at perltricks/xperl5. Clicking the &amp;ldquo;pull requests&amp;rdquo; link on the right of the screen brings us to the pull requests screen:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/91/github_5.png&#34; title=&#34;The pull requests screen&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/91/github_5_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking the &amp;ldquo;new pull request&amp;rdquo; button will create the pull request form, GitHub automatically knows that the pull request should go back to exercism/xperl5.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dnmfarrell.github.io/static/images/91/github_6.png&#34; title=&#34;The new pull request. Send the pull request!&#34;&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/91/github_6_small.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking the &amp;ldquo;Send pull request&amp;rdquo; button submits the pull request and we&amp;rsquo;re done! The exercism repo committers usually respond within a couple of hours. So now you&amp;rsquo;ve seen how easy it is to port an exercise, be warned it can be addictive &amp;hellip;&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F91%2F2014%2F5%2F21%2FHow-to-contribute-to-the-exercism-io-Perl-5-repo&amp;amp;text=How+to+contribute+to+the+exercism.io+Perl+5+repo&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F91%2F2014%2F5%2F21%2FHow-to-contribute-to-the-exercism-io-Perl-5-repo&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Become a better programmer with exercism.io</title>
      <link>https://dnmfarrell.github.io/article/90/2014/5/19/Become-a-better-programmer-with-exercism-io/</link>
      <pubDate>Mon, 19 May 2014 01:15:07 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/90/2014/5/19/Become-a-better-programmer-with-exercism-io/</guid>
      <description>

&lt;p&gt;&lt;em&gt;For the past week I&amp;rsquo;ve been trying out &lt;a href=&#34;http://exercism.io/&#34;&gt;exercism.io&lt;/a&gt; the programming exercises app. I heard about it back in December when Gabor &lt;a href=&#34;http://blogs.perl.org/users/gabor_szabo/2013/12/perl-exercism.html&#34;&gt;blogged&lt;/a&gt; about it, but didn&amp;rsquo;t try it until now. I wish I hadn&amp;rsquo;t waited so long, as exercism is a lot of fun.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-exercism-works:b8fc90b81a72b2595146025a61f1ef5d&#34;&gt;How exercism works&lt;/h3&gt;

&lt;p&gt;exercism comes with a command line app that downloads programming exercises and submits your coded answers to the exercism website. Every programming exercise comes with a readme and a test file. To complete the exercise you need to write a Perl module that passes all of the tests.&lt;/p&gt;

&lt;p&gt;When you are done and have submitted your Perl module via the command line app, you and other programmers can &amp;ldquo;nitpick&amp;rdquo; your code and comment on it. Once you feel you have gotten enough comments, you can finalize your submission and view other programmer&amp;rsquo;s solutions for the same exercise. The kicker is that you only receive one programming exercise at a time, and cannot access another exercise until you complete the current one.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s TIMTOWTDI nature means that there are several correct solutions for the exercises and you can often learn something from viewing other programmers&amp;rsquo; solutions. For example in one exercise I used a regular expression only to find that the simpler &lt;a href=&#34;http://perldoc.perl.org/perlop.html#Quote-and-Quote-like-Operators&#34;&gt;transliteration&lt;/a&gt; operator worked just as well. The exercise difficulty varies from easy to hard, but the real challenge is finding a clean, generalized solution for the spec.&lt;/p&gt;

&lt;h3 id=&#34;try-it-out:b8fc90b81a72b2595146025a61f1ef5d&#34;&gt;Try it out&lt;/h3&gt;

&lt;p&gt;Grab the &lt;a href=&#34;https://github.com/exercism/cli/releases/latest&#34;&gt;latest binary&lt;/a&gt; for your platform and extract it. Fire up the command line and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ exercism demo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will fetch the first exercise (&amp;ldquo;Bob&amp;rdquo; at the time of writing). You can find the test file and readme at &amp;ldquo;perl5/bob/&amp;rdquo;. Opening the readme you&amp;rsquo;ll see:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# Bob

Bob is a lackadaisical teenager. In conversation, his responses are very limited.

Bob answers &#39;Sure.&#39; if you ask him a question.

He answers &#39;Woah, chill out!&#39; if you yell at him.

He says &#39;Fine. Be that way!&#39; if you address him without actually saying anything.

He answers &#39;Whatever.&#39; to anything else.

## Instructions

Run the test file, and fix each of the errors in turn. When you get the first test to pass, go to the first pending or skipped test, and make that pass as well. When all of the tests are passing, feel free to submit. 

Remember that passing code is just the first step. The goal is to work towards a solution that is as readable and expressive as you can make it. 

Please make your solution as general as possible. Good code doesn&#39;t just pass the test suite, it works with any input that fits the specification.

Have fun!

## Source

Inspired by the &#39;Deaf Grandma&#39; exercise in Chris Pine&#39;s Learn to Program tutorial. [view source](http://pine.fm/LearnToProgram/?Chapter=06)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run the test file change into the exercise directory and use prove:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cd perl5/bob
$ prove bob.t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That will get this output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;bob.t .. 1/22 Bailout called.  Further testing stopped:  You need to create a module called Bob.pm with a function called hey() that gets one parameter: The text Bob hears.

#   Failed test &#39;missing Bob.pm&#39;
#   at bob.t line 37.
FAILED--Further testing stopped: You need to create a module called Bob.pm with a function called hey() that gets one parameter: The text Bob hears.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s create a basic Bob.pm module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Bob;
use warnings;
use strict;

sub hey {
    my $input = shift;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a shell of the solution. Our &amp;ldquo;hey&amp;rdquo; subroutine returns the first input it receives. Re-running prove, we get this output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ prove bob.t
bob.t .. 1/22 
#   Failed test &#39;stating something: Tom-ay-to, tom-aaaah-to.&#39;
#   at bob.t line 52.
#          got: &#39;Tom-ay-to, tom-aaaah-to.&#39;
#     expected: &#39;Whatever.&#39;

...

# Looks like you failed 19 tests of 22.
bob.t .. Dubious, test returned 19 (wstat 4864, 0x1300)
Failed 19/22 subtests 

Test Summary Report
-------------------
bob.t (Wstat: 4864 Tests: 22 Failed: 19)
  Failed tests:  4-22
  Non-zero exit status: 19
Files=1, Tests=22,  1 wallclock secs ( 0.02 usr  0.00 sys +  0.04 cusr  0.00 csys =  0.06 CPU)
Result: FAIL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that Bailout is no longer being called, so our basic module passed the first few tests, but failed 19 of 22. I&amp;rsquo;ve abbreviated the output to show only the first failing test. The output tells us everything we need to know: our &amp;ldquo;hey&amp;rdquo; subroutine did not return the content required by the spec. I&amp;rsquo;ll leave the exercise here - if you&amp;rsquo;re feeling suitably inspired see if you can complete it.&lt;/p&gt;

&lt;h3 id=&#34;help-represent-perl:b8fc90b81a72b2595146025a61f1ef5d&#34;&gt;Help represent Perl&lt;/h3&gt;

&lt;p&gt;One of the exercism&amp;rsquo;s strengths is it has the same programming exercises in different programming languages, so you can develop your polyglot skills. Looking at the &lt;a href=&#34;https://github.com/exercism&#34;&gt;source&lt;/a&gt;, it appears that JavaScript, Python, Ruby and Haskell are leading the pack with about 55 exercises available each. Perl is well-represented with 36 exercises and the other languages have about 20 or fewer.&lt;/p&gt;

&lt;p&gt;This week I ported a couple of the missing exercises to the Perl &lt;a href=&#34;https://github.com/exercism/xperl5&#34;&gt;repo&lt;/a&gt;. To port a missing exercise you have to provide the test file and module solution. This is easier than it sounds as you can just translate the exercise code from another language into Perl. Across all the languages there are about 80 different exercises. I&amp;rsquo;ve created a &lt;a href=&#34;https://questhub.io/realm/perl/quest/53795a10bbd0be180400014f&#34;&gt;quest&lt;/a&gt; which lists the missing exercises.&lt;/p&gt;

&lt;p&gt;It only take about 30 minutes to port one exercise: if 2% of the readers of this article port one exercise each today, Perl will immediately have more exercises than any other language. There is also an empty Perl 6 &lt;a href=&#34;https://github.com/exercism/xperl6&#34;&gt;repo&lt;/a&gt;; porting the Perl 5 exercises to Perl 6 could make for a juicy hackathon target.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:b8fc90b81a72b2595146025a61f1ef5d&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Playing with exercism has been loads of fun and I&amp;rsquo;ve learned a few Perl tricks (hah!) along the way. The source is MIT licensed and the committers are friendly. It would be great to see more Perlers participating or porting an exercise or too. Feel free to clone or or stencil the &lt;a href=&#34;https://questhub.io/realm/perl/quest/53795a10bbd0be180400014f&#34;&gt;quest&lt;/a&gt;. Let&amp;rsquo;s show people what our language can do!&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F90%2F2014%2F5%2F18%2FBecome-a-better-programmer-with-exercism-io&amp;amp;text=Become+a+better+programmer+with+exercism.io&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F90%2F2014%2F5%2F18%2FBecome-a-better-programmer-with-exercism-io&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is PearlBee Perl&#39;s next great blogging platform?</title>
      <link>https://dnmfarrell.github.io/article/69/2014/2/17/Is-PearlBee-Perl-s-next-great-blogging-platform-/</link>
      <pubDate>Mon, 17 Feb 2014 04:09:21 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/69/2014/2/17/Is-PearlBee-Perl-s-next-great-blogging-platform-/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Last year the Perl-based Movable Type blogging platform turned closed-source and left Perl without a major open source blogging platform. The wait is over; PearlBee is a new open source blogging platform written in Perl and developed by Evozon. But is it any good? We took it for a spin to find out.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;setup:49c8291c3f206ef8d30e95bbf67657c3&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;I tested the PearlBee on a machine running Fedora 19, MariaDB v5.5.34 and Perl 5.16.3. Installation was simple, I followed the readme instructions from the project&amp;rsquo;s GitHub &lt;a href=&#34;https://github.com/perl-evozon/pearlbee&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;writing-a-blog-post:49c8291c3f206ef8d30e95bbf67657c3&#34;&gt;Writing a blog post&lt;/h3&gt;

&lt;p&gt;PearlBee comes with an administration portal from where you can write new blog posts. It&amp;rsquo;s accessed via a login page at /admin. The default login credentials are &amp;ldquo;admin&amp;rdquo; and &amp;ldquo;password&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/69/admin_login.png&#34; alt=&#34;PearlBee login page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once logged in, by default the new post form will display:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/69/new_post.png&#34; alt=&#34;PearlBee new post page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The form is well put together: it has title, slug and cover image file upload controls and a WYSIWYG editor for the main blog text. To the right of the main form is a details form, for setting the blog post category and adding tags. PearlBee creates a tag object for every tag text entered, allowing the tags to be searched against and reused in later posts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/69/completed_post.png&#34; alt=&#34;PearlBee new post page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Having completed the form, press &amp;ldquo;Publish&amp;rdquo; to save the post and make it live. PearlBee will display a helpful success message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/69/saved_post.png&#34; alt=&#34;PearlBee saved post page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the post will now be live on the main blog page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/69/post_on_frontpage.png&#34; alt=&#34;PearlBee page frontpage screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how PearlBee has updated the categories and tags on the right side of the screen for convenient filtering.&lt;/p&gt;

&lt;p&gt;One thing that could be better is the image handling. I found that a square image was unevenly flattened into landscape proportions (but it displays correctly on the blog front page).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/69/flat_onion_image.png&#34; alt=&#34;PearlBee saved post flat image page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I tested PearlBee&amp;rsquo;s image upload with both jpeg and png files and both worked fine.&lt;/p&gt;

&lt;h3 id=&#34;basic-administration:49c8291c3f206ef8d30e95bbf67657c3&#34;&gt;Basic Administration&lt;/h3&gt;

&lt;p&gt;PearlBee&amp;rsquo;s admin portal has a slick and clean interface. Menu drop-down lists expand and contract smoothly and forms are provided to manage the site&amp;rsquo;s data. We&amp;rsquo;ve encountered some of the database model objects already: posts, categories and tags. Here is the post management page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/69/post_management.png&#34; alt=&#34;PearlBee post management page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The page lists all posts and provides there high level attributes such as author, title and categories. It also provides switches to quickly change a post&amp;rsquo;s status. This is useful if a post needs to be taken-down and edited, or re-posted. At the time of review the page contained a couple of typos and unfortunately the link to view the article did not work (neither the link on the title or the eye icon). These can be worked around though.&lt;/p&gt;

&lt;p&gt;One other opportunity for improvement here: PearlBee should create the appropriate META tags for blog posts, using the post&amp;rsquo;s attributes. This would help with SEO.&lt;/p&gt;

&lt;p&gt;There is also a site-wide settings page for the blog. From here you can set the blog&amp;rsquo;s timezone and enable / disable use of social media buttons.&lt;/p&gt;

&lt;h3 id=&#34;comments:49c8291c3f206ef8d30e95bbf67657c3&#34;&gt;Comments&lt;/h3&gt;

&lt;p&gt;PearlBee comes with a comments system built-in. The comments form appears beneath a blog post, with existing comments showing there as well:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/69/comment_posted.png&#34; alt=&#34;PearlBee comment management page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I thought the styling on the comments form looks professional and reminded me of the &amp;ldquo;Disqus&amp;rdquo; comments system design. PearlBee provides a CAPTCHA on the form out-of-the-box, which is a useful spam filter.&lt;/p&gt;

&lt;p&gt;All comments are moderated, and require approval before going live. I tested the comment submission and moderation process and it worked first time. This is the comments management page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dnmfarrell.github.io/static/images/69/comment_management.png&#34; alt=&#34;PearlBee comment management page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once approved, comments appear beneath the blog post.&lt;/p&gt;

&lt;p&gt;Comments can be security risk as they allow users to upload text which is then displayed on the site. For example if a user uploads malicious JavaScript, they can carry out a XSS attack whenever a visitor loads the page with the comment (or an administrator reviews it). PearlBee does not yet implement comment content filtering which can prevent this type of attack by removing code characters from the comment text. This would need to be in place before a PearlBee site was used in a production environment.&lt;/p&gt;

&lt;h3 id=&#34;user-management:49c8291c3f206ef8d30e95bbf67657c3&#34;&gt;User Management&lt;/h3&gt;

&lt;p&gt;PearlBee recognizes two types of users: &amp;ldquo;administrators&amp;rdquo; who can manage the site&amp;rsquo;s data, and &amp;ldquo;authors&amp;rdquo; who can write blog posts but not do much else. As with the other database objects, PearlBee provides a form-driven interface for managing the site&amp;rsquo;s users. During testing I was able to create a new author, login with that author and write blog posts. It worked well. PearlBee created a default, random, encrypted password for the account and sent the new user an email with instructions on how to login (the email actually wasn&amp;rsquo;t sent, more on this later). PearlBee uses &lt;a href=&#34;https://metacpan.org/pod/Crypt::RandPasswd&#34;&gt;Crypt::RandPasswd&lt;/a&gt; to generate the initial password, and &lt;a href=&#34;https://metacpan.org/pod/Digest::SHA1&#34;&gt;Digest::SHA1&lt;/a&gt; to encrypt it. This should be set to a stronger encryption method, as Digest::SHA1 contains &lt;a href=&#34;https://www.schneier.com/blog/archives/2005/02/cryptanalysis_o.html&#34;&gt;security weaknesses&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Additional roles might be useful here: an editor role that can edit and publish posts, but not change the site&amp;rsquo;s settings or create new users would bridge the gap between the current admin and author roles. I would probably remove the author role&amp;rsquo;s permission to publish articles.&lt;/p&gt;

&lt;h3 id=&#34;customization:49c8291c3f206ef8d30e95bbf67657c3&#34;&gt;Customization&lt;/h3&gt;

&lt;p&gt;PearlBee is built in a responsive design with the Twitter Bootstrap framework. The design is clever and works well at many different screen resolutions and form factors. At this time of writing there are no publicly available alternative themes, so you&amp;rsquo;re stuck with the existing theme unless you want to code an alternative one yourself. I did find an example alternative theme online: the &amp;ldquo;Built in Perl&amp;rdquo; &lt;a href=&#34;http://blog.builtinperl.com/&#34;&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apart from the design, you&amp;rsquo;ll want to edit the PearlBee templates to use your blog&amp;rsquo;s name, and update the default footer information. It would be awesome if PearlBee were able to read this from the config.yml file, rather than requiring code edits to the template toolkit view files.&lt;/p&gt;

&lt;p&gt;PearlBee requires a local SMTP server to send emails (such as the new user welcome email). I found the email settings were hard-coded to use the default and not configurable, which meant I wasn&amp;rsquo;t able to test the email functionality. Contrary to the Makefile, PearlBee uses &lt;a href=&#34;https://metacpan.org/pod/Email::Template&#34;&gt;Email::Template&lt;/a&gt; and not MIME::Email or Email::Sender::Simple to handle email. PearlBee does come with some pre-configured email templates which look useful.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:49c8291c3f206ef8d30e95bbf67657c3&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;PearlBee is a promising platform that is still in development. It looks good, has a solid data model and runs fast on the Dancer2 framework with DBIx::Class. In my interactions with the development team they were responsive and helpful. It feels about 80% complete - the core functionality is in place but there are some rough edges. PearlBee needs better security, SEO integration and to be more configurable. If the development team can resolve these issues in time for the first major release of PearlBee, it could be a milestone Perl development for what has been a barren couple of years in blogging technology.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F69%2F2014%2F2%2F17%2FIs-PearlBee-Perl-s-next-great-blogging-platform-&amp;amp;text=Is+PearlBee+Perl%27s+next+great+blogging+platform%3F&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F69%2F2014%2F2%2F17%2FIs-PearlBee-Perl-s-next-great-blogging-platform-&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

