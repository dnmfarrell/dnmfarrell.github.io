<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scalar on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/scalar/</link>
    <description>Recent content in Scalar on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Feb 2016 09:50:00 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/scalar/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Magical tied scalars</title>
      <link>http://perltricks.com/article/magical-tied-scalars/</link>
      <pubDate>Tue, 16 Feb 2016 09:50:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/magical-tied-scalars/</guid>
      <description>&lt;p&gt;Perl&amp;rsquo;s &lt;code&gt;tie&lt;/code&gt; mechanism allows me to create something that looks like a scalar but does anything I want it to do. I can change how the familiar scalar interface of simple access and assignment actually work. I&amp;rsquo;ve found this so useful at times that I devoted an entire chapter of &lt;a href=&#34;http://www.masteringperl.org/&#34;&gt;Mastering Perl&lt;/a&gt; to it.&lt;/p&gt;

&lt;p&gt;I think I fell in love with this technique when it allowed me to solve a seemly intractable problem creating some HTML by hand (so you know this must have been a long time ago). Someone had created a library to create an HTML table that allowed me to set the color of the table rows by passing in a scalar value for &lt;code&gt;tr&lt;/code&gt;&amp;rsquo;s &lt;code&gt;bgcolor&lt;/code&gt; attribute. Fortunately I&amp;rsquo;ve forgotten who that was or what the code looked like, but it was something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub print_table_and_stuff {
    my( $color, @lots_of_other_arguments ) = @_;

    ... lots of code ...
    print &amp;quot;&amp;lt;table&amp;gt;&amp;quot;;

    foreach my $item ( @items ) {
            print qq(&amp;lt;tr bgcolor=&amp;quot;$color&amp;quot;&amp;gt;);
            ... fill in the cells ...
            print &amp;quot;&amp;lt;/tr&amp;gt;&amp;quot;;
            }

    ... lots of code ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besides all the goofy things going on with the code, such as printing directly and not using templates, whoever wrote it wasn&amp;rsquo;t thinking that anyone would want to have tables with alternating (or even rotating) row colors. There was a time before that was a thing and the code pre-dated even that. My task was to get alternating row colors with as little disturbance as possible.&lt;/p&gt;

&lt;p&gt;I could have replaced the subroutine using one of the techniques I showed in &lt;a href=&#34;http://www.masteringperl.org/&#34;&gt;Mastering Perl&lt;/a&gt;, but there was something simpler. If I could get &lt;code&gt;$color&lt;/code&gt; to change on its own, I wouldn&amp;rsquo;t have to mess with the code.&lt;/p&gt;

&lt;p&gt;Thus, I invented &lt;a href=&#34;https://metacpan.org/pod/Tie::Cycle&#34;&gt;Tie::Cycle&lt;/a&gt;. The &lt;code&gt;tie&lt;/code&gt; interface allows me to decide what a scalar should do when I access it or store it. I supply code behind both of those operations by defining special subroutines. Here&amp;rsquo;s an extract of the code that shows those special methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Tie::Cycle;
use strict;

sub TIESCALAR {
        my( $class, $list_ref ) = @_;
        my $self = bless [], $class;

        unless( $self-&amp;gt;STORE( $list_ref ) ) {
                carp &amp;quot;Argument must be an array reference&amp;quot;;
                return;
                }

        return $self;
        }

sub FETCH {
        my( $self ) = @_;

        my $index = $self-&amp;gt;[CURSOR_COL]++;
        $self-&amp;gt;[CURSOR_COL] %= $self-&amp;gt;_count;

        return $self-&amp;gt;_item( $index );
        }

sub STORE {
        my( $self, $list_ref ) = @_;
        return unless ref $list_ref eq ref [];
        my @shallow_copy = map { $_ } @$list_ref;

        $self-&amp;gt;[CURSOR_COL] = 0;
        $self-&amp;gt;[COUNT_COL]  = scalar @shallow_copy;
        $self-&amp;gt;[ITEM_COL]   = \@shallow_copy;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;tie&lt;/code&gt; interface includes the &lt;code&gt;TIESCALAR&lt;/code&gt; method that creates the &lt;code&gt;tied&lt;/code&gt; object, the &lt;code&gt;FETCH&lt;/code&gt; method that decides how to return a value, and the &lt;code&gt;STORE&lt;/code&gt; method that decides how to store a value. In this case, I want to store an array of values and cycle through them. Each time I access the scalar, Perl calls &lt;code&gt;FETCH&lt;/code&gt;. Each time it calls &lt;code&gt;FETCH&lt;/code&gt; I increment a counter so I&amp;rsquo;ll get the next value. When I get to the end, I wrap around to the beginning of the array.&lt;/p&gt;

&lt;p&gt;In this short bit of code, I create the tied scalar by calling &lt;code&gt;tie&lt;/code&gt; with the target scalar, the module name that defines the interface, and the arguments to pass to &lt;code&gt;TIESCALAR&lt;/code&gt;. After that, I use &lt;code&gt;$scalar&lt;/code&gt; as a normal scalar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use Tie::Cycle;

tie my $scalar, &#39;Tie::Cycle&#39;, [ qw(red green blue) ];

my $count;
while( $count++ &amp;lt; 10 ) {
        say $scalar;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each time through the &lt;code&gt;while&lt;/code&gt;, I output the value of &lt;code&gt;$scalar&lt;/code&gt;. It doesn&amp;rsquo;t look like I&amp;rsquo;m doing anything fancy, but I&amp;rsquo;m implicitly calling &lt;code&gt;Tie::Cycle::FETCH&lt;/code&gt; each time. Now the colors rotate.&lt;/p&gt;

&lt;p&gt;This is a bit more fun when I cycle through colored boxes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use open qw(:std :utf8);

use Tie::Cycle;
use Term::ANSIColor;

tie my $scalar, &#39;Tie::Cycle&#39;, [
        map { colored( [ $_ ], &amp;quot;\x{25AE}&amp;quot; ) }
                qw(red green blue)
        ];

my $count;
while( $count++ &amp;lt; 10 ) {
        print $scalar;
        }
print &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With an appropriate terminal, I see a series of Christmas lights.&lt;/p&gt;

&lt;p&gt;Recently, David Farrell had a similar problem. He could pass a value to a method that gave it a delay time to retry if it failed. That&amp;rsquo;s a nice feature, but he could only pass in a scalar. He didn&amp;rsquo;t want to pass in a value for two seconds and have it retry every two seconds. Instead, he wanted to back off. Wait two seconds the first time, then 4 seconds the next time, and eight seconds the next time. If something is falling over because you&amp;rsquo;re hitting it too frequently, you want to back off the pressure.&lt;/p&gt;

&lt;p&gt;However, using the same trick I used for HTML row colors, he was able to create what looks like a simple scalar variable but was really a method call that increased the value each time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
package Tie::Scalar::Ratio;

use parent &#39;Tie::Scalar&#39;;

sub TIESCALAR {
  my ($class, $ratio, $value) = @_;

  die &#39;Must provide ratio argument, a number to multiply the scalar value by&#39;
        unless $ratio &amp;amp;&amp;amp; $ratio =~ /^[\d.]+$/;

  bless {
        ratio =&amp;gt; $ratio,
        value =&amp;gt; $value,
  }, $class;
}

sub STORE {
  my ($self, $value) = @_;
  $self-&amp;gt;{value} = $value;
}

sub FETCH {
  my ($self) = @_;
  my $old_value = $self-&amp;gt;{value};
  $self-&amp;gt;{value} *= $self-&amp;gt;{ratio} if $self-&amp;gt;{value};
  return $old_value;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My program to demonstrate this is almost the same as my prior one. The part where I use &lt;code&gt;$scalar&lt;/code&gt; is the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use Tie::Scalar::Ratio;

tie my $scalar, &#39;Tie::Scalar::Ratio&#39;, 2, 37;

my $count;
while( $count++ &amp;lt; 10 ) {
        say $scalar;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each time I access the scalar, I get back the previous value multiplied by the ratio. In this case, I multiply the previous value by &lt;code&gt;2&lt;/code&gt; each time.&lt;/p&gt;

&lt;p&gt;This is a tidy solution because it fits into the code that&amp;rsquo;s already there. The existing code that expected a single value gets a scalar that changes its value each time.&lt;/p&gt;

&lt;p&gt;Instead of giving Tie::Scalar::Ratio, I&amp;rsquo;d like to give it a callback. David also created &lt;a href=&#34;https://metacpan.org/pod/Tie::Scalar::Callback&#34;&gt;Tie::Scalar::Callback&lt;/a&gt;. Each time I access the scalar, this module calls the subroutine I passed to it and give me back the result. The code looks similar to the others:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
package Tie::Scalar::Callback;

use parent &#39;Tie::Scalar&#39;;
use Carp qw(carp);

sub TIESCALAR {
  my ($class, $sub ) = @_;

  die &#39;Must provide subroutine reference argument&#39;
        unless $sub &amp;amp;&amp;amp; ref $sub eq ref sub {};

  bless $sub, $class;
}

sub STORE {
  carp &amp;quot;You can&#39;t assign to this tied scalar&amp;quot;;
}

sub FETCH {
  my ($self) = @_;
  return $self-&amp;gt;();
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a subroutine that does the same thing as the previous example by stores the state in the subroutine rather than in the tied object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $coderef = sub {
        state $value  = 1/2;
        state $factor = 2;
        $value *= $factor;
        }

tie my $scalar, &#39;Tie::Scalar::Callback&#39;, $sub;

my $count;
while( $count++ &amp;lt; 10 ) {
        say $scalar;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a simple callback, but I can make something a little more exotic. How about a sine-based function?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use Tie::Scalar::Callback;

my $coderef = sub {
        state $pi     = 3.14152926;
        state $eighth = $pi / 8;
        state $value  = 0;

        sprintf &#39;%.3f&#39;, abs sin( $value += $eighth );
        };

tie my $scalar, &#39;Tie::Scalar::Callback&#39;, $coderef;

my $count;
while( $count++ &amp;lt; 10 ) {
        say $scalar;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the output backs off and speeds up. There&amp;rsquo;s something that might be more useful. Perhaps I want to use the load average to decide the number:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Sys::LoadAvg qw(loadavg);
use Tie::Scalar::Callback;

my $coderef = sub {
        state $factor  = 5;

        my @loads = loadavg();

        $factor * $loads[-1];
        };

tie my $scalar, &#39;Tie::Scalar::Callback&#39;, $coderef;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, just for fun, here&amp;rsquo;s a tied scalar that creates the Fibonacci series using the inline &lt;code&gt;package NAMESPACE BLOCK&lt;/code&gt; syntax introduced in v5.14:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.14;

package Tie::Scalar::Fibonacci {
        use parent &#39;Tie::Scalar&#39;;
        use Carp qw(croak);
        use List::Util qw(sum);

        sub TIESCALAR {
                my( $class, $count ) = @_;
                $count = 2 unless defined $count;
                die &amp;quot;count must be a counting number&amp;quot; if $count =~ /[^0-9]/;
                die &amp;quot;count must be greater than 1&amp;quot;    if $count &amp;lt;= 1;

                my $array = [ ( 1 ) x ( $count ) ];
                bless $array, $class
                }
        sub STORE     { croak &amp;quot;You can&#39;t assign to this scalar!&amp;quot; }

        sub FETCH {
                my ($self) = @_;
                push @$self, sum( @$self );
                shift @$self;
                }
        }

tie my $scalar, &#39;Tie::Scalar::Fibonacci&#39;;

my $count;
while( $count++ &amp;lt; 10 ) {
        print $scalar, &#39; &#39;;
        }
print &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time I access it I get the next number in the Fibonacci series. Curiously, doing it this way, I&amp;rsquo;m computing a number that I&amp;rsquo;ll use in the future by pushing it onto the end and returning the oldest value by shifting it off the front. There&amp;rsquo;s no recursion here like in almost every example on the interwebs.&lt;/p&gt;

&lt;p&gt;But, it can generate other series too. Instead of looking at the previous two values, I can give &lt;code&gt;TIESCALAR&lt;/code&gt; a different number to specify how many previous numbers to sum:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;tie my $scalar, &#39;Tie::Scalar::Fibonacci&#39;, 5;

my $count;
while( $count++ &amp;lt; 10 ) {
        print $scalar, &#39; &#39;;
        }
print &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The idea is the same, but the sums are different. If you&amp;rsquo;ve used a tied variable in an interesting way, let us know about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl references: create, dereference and debug with confidence</title>
      <link>http://perltricks.com/article/80/2014/3/27/Perl-references--create--dereference-and-debug-with-confidence/</link>
      <pubDate>Thu, 27 Mar 2014 18:03:49 +0000</pubDate>
      
      <guid>http://perltricks.com/article/80/2014/3/27/Perl-references--create--dereference-and-debug-with-confidence/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Learning Perl&amp;rsquo;s references is a rite-of-passage for Perl programmers. Until you &amp;ldquo;get&amp;rdquo; references, large parts of the language will remain alien to you. References have their own special syntax and rules, which can make them seem strange and hard to understand. The good news is that the core features of references are easy to learn and use. This article describes the main ways to use references and some handy tools to get you out of trouble if you run into it. So even if you&amp;rsquo;re not completely comfortable with references, you&amp;rsquo;ll be able to write code that works.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-are-references:6a29add5aea08a862cc77cb68480c39b&#34;&gt;What are references?&lt;/h3&gt;

&lt;p&gt;A reference is a scalar variable whose value is a pointer to another Perl variable. If you were to print out a reference, you would see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;SCALAR(0x509ea0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value looks like a memory address, bu it&amp;rsquo;s actually an internal key for Perl, which points to another variable. A reference can refer to any of Perl&amp;rsquo;s variable types: scalars, arrays, hashes, filehandles, subroutines and globs. References are useful because they:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;save memory - why create two copies of the same variable when you only need one?&lt;/li&gt;
&lt;li&gt;enable subroutines to return values that are not in a scalar or list format. (the reference is a scalar pointer to values that can be in any kind of format).&lt;/li&gt;
&lt;li&gt;can encapsulate complex data structures comprising of nested arrays, hashes, scalars and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Accessing the value that a reference points to is called &amp;ldquo;dereferencing&amp;rdquo;. When you dereference a reference, instead of returning the value of it&amp;rsquo;s pointer, Perl will fetch the actual variable that the reference is pointing to. The need to dereference a reference variable in order to use it&amp;rsquo;s underlying value is the main disadvantage of references; direct variable access will always be faster.&lt;/p&gt;

&lt;h3 id=&#34;declaring-and-accessing-references:6a29add5aea08a862cc77cb68480c39b&#34;&gt;Declaring and accessing references&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re going to focus on array and hash references as those are the most commonly encountered reference types. Working them is easy. For arrays, use square brackets instead of parentheses to declare, and the arrow operator (&amp;ldquo;-&amp;gt;&amp;rdquo;) to dereference:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @array       = (&#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39;);
my $array_ref   = [&#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39;];

print $array[1];       #banana
print $array_ref-&amp;gt;[1]; #banana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For hashes, use curly braces instead of parentheses to declare, and the same arrow operator to dereference:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %hash        = (one =&amp;gt; 1, two =&amp;gt; 2, three =&amp;gt; 3);
my $hash_ref    = {one =&amp;gt; 1, two =&amp;gt; 2, three =&amp;gt; 3};

print $hash{three};       #3
print $hash_ref-&amp;gt;{three}; #3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the coolest things about references is the ability to create complex data structures to hold any kind of data you need. Let&amp;rsquo;s look at a more realistic data structure for a fictional customer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $customer = { name   =&amp;gt; &#39;Mr Smith&#39;,
                 dob    =&amp;gt; &#39;01/18/1987&#39;,
                 phones =&amp;gt; { home   =&amp;gt; &#39;212-608-5787&#39;,
                             work   =&amp;gt; &#39;347-558-0352&#39;},
                 last_3_purchase_values =&amp;gt; [ 78.92, 98.36, 131.00 ],
                 addresses =&amp;gt; [ {   street =&amp;gt; &#39;37 Allright Ave&#39;,
                                    zip    =&amp;gt; &#39;11025&#39;,
                                    city   =&amp;gt; &#39;New York&#39;,
                                    state  =&amp;gt; &#39;NY&#39;,
                                }, 
                                {   street =&amp;gt; &#39;23 Broadway&#39;,
                                    zip    =&amp;gt; &#39;10125&#39;,
                                    city   =&amp;gt; &#39;New York&#39;,
                                    state  =&amp;gt; &#39;NY&#39;,
                                },
                               ],
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$customer is a hash ref with 5 keys. Two of the keys (&amp;ldquo;name&amp;rdquo; and &amp;ldquo;dob&amp;rdquo;) have the usual scalar values. The other key values though are nested references: &amp;ldquo;phones&amp;rdquo; is a nested hashref, and &amp;ldquo;last_3_purchase_values&amp;rdquo; and &amp;ldquo;addresses&amp;rdquo; are arrayrefs. So how would you access any of the values in $customer data structure? Check this out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;print $customer-&amp;gt;{name}; # Mr Smith
print $customer-&amp;gt;{phones}{home}; # 212-608-5787
print $customer-&amp;gt;{last_3_purchase_values}[0]; # 78.92
print $customer-&amp;gt;{addresses}[1]{street}; # 23 Broadway
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To dereference a value in $customer, we start by using the arrow operator. From there, we add the required key or index to access the next level of data. The main challenge when working with references is to understand the datatype you are dereferencing: if it is an array, you&amp;rsquo;ll need to use the array accessor syntax &amp;ldquo;[#]&amp;ldquo;, whereas if it&amp;rsquo;s a hash, you need to pass the key in curly braces &amp;ldquo;{key_value}&amp;ldquo;.&lt;/p&gt;

&lt;h3 id=&#34;working-with-arrayrefs:6a29add5aea08a862cc77cb68480c39b&#34;&gt;Working with arrayrefs&lt;/h3&gt;

&lt;p&gt;Sometimes you&amp;rsquo;ll need to loop through an arrayref. The syntax for this is the same as an ordinary array, except that you need to dereference the entire array, rather than a single element of it. This is done by enclosing the arrayref in with a dereferencing array block: &amp;ldquo;@{ $array_ref }&amp;ldquo;. Let look at some examples using $customer&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature &#39;say&#39;;

#iterate through a nested array
foreach my $purchase_value (@{ $customer-&amp;gt;{last_3_purchase_values} }) {
    say $purchase_value;
}

#iterate through a nested array and dereference and print the street
foreach my $address (@{ $customer-&amp;gt;{addresses} }) {
    say $address-&amp;gt;{street};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arrays support other operations like push and shift. In these cases you will need a dereferencing array block too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;push @{$customer-&amp;gt;{addresses}}, { street =&amp;gt; &#39;157 Van Cordant Street&#39;,
                                  zip    =&amp;gt; &#39;10008&#39;,
                                  city   =&amp;gt; &#39;New York&#39;,
                          state  =&amp;gt; &#39;NY&#39;,
                                 };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have pushed a new address on to the &amp;ldquo;addresses&amp;rdquo; arrayref. We used a dereferencing array block to dereference &amp;ldquo;addresses&amp;rdquo; so that we could perform a push on it.&lt;/p&gt;

&lt;h3 id=&#34;working-with-hashrefs:6a29add5aea08a862cc77cb68480c39b&#34;&gt;Working with hashrefs&lt;/h3&gt;

&lt;p&gt;Dereferencing blocks can be used for hash operations too. Probably the most common operation is looping through the keys of the hash, using the &amp;ldquo;keys&amp;rdquo; function. In this case, you&amp;rsquo;ll need to use a dereferencing hash block &amp;ldquo;%{ $hash_ref }&amp;ldquo;. Let&amp;rsquo;s look at an example using $customer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature &#39;say&#39;;

# iterate through a nested hash
foreach my $key (keys %{ $customer-&amp;gt;{phones} }) {
    say $customer-&amp;gt;{phones}{$key};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;troubleshooting-references:6a29add5aea08a862cc77cb68480c39b&#34;&gt;Troubleshooting References&lt;/h3&gt;

&lt;p&gt;References can be harder to debug than normal variables as you need to dereference the reference in order to see what variable it is pointing to. Imagine you wanted to print out the contents of $customer. This doesn&amp;rsquo;t work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;print $customer; # HASH(0x2683b30)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fortunately you can use Data::Dumper&amp;rsquo;s &amp;ldquo;Dumper&amp;rdquo; function to dereference and pretty-print a reference for you:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Data::Dumper;

print Dumper($customer);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Would print:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$VAR1 = {
          &#39;last_3_purchase_values&#39; =&amp;gt; [
                                        &#39;78.92&#39;,
                                        &#39;98.36&#39;,
                                        &#39;131&#39;
                                      ],
          &#39;dob&#39; =&amp;gt; &#39;01/18/1987&#39;,
          &#39;addresses&#39; =&amp;gt; [
                           {
                             &#39;city&#39; =&amp;gt; &#39;New York&#39;,
                             &#39;zip&#39; =&amp;gt; &#39;11025&#39;,
                             &#39;street&#39; =&amp;gt; &#39;37 Allright Ave&#39;,
                             &#39;state&#39; =&amp;gt; &#39;NY&#39;
                           },
                           {
                             &#39;city&#39; =&amp;gt; &#39;New York&#39;,
                             &#39;zip&#39; =&amp;gt; &#39;10125&#39;,
                             &#39;street&#39; =&amp;gt; &#39;23 Broadway&#39;,
                             &#39;state&#39; =&amp;gt; &#39;NY&#39;
                           },
                           {
                             &#39;city&#39; =&amp;gt; &#39;New York&#39;,
                             &#39;zip&#39; =&amp;gt; &#39;10008&#39;,
                             &#39;street&#39; =&amp;gt; &#39;157 Van Cordant Street&#39;,
                             &#39;state&#39; =&amp;gt; &#39;NY&#39;
                           }
                         ],
          &#39;name&#39; =&amp;gt; &#39;Mr Smith&#39;,
          &#39;phones&#39; =&amp;gt; {
                        &#39;work&#39; =&amp;gt; &#39;347-558-0352&#39;,
                        &#39;home&#39; =&amp;gt; &#39;212-608-5787&#39;
                      }
        };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another useful tool is the Perl&amp;rsquo;s &lt;a href=&#34;http://perldoc.perl.org/functions/ref.html&#34;&gt;ref&lt;/a&gt; function. Just pass the reference variable into ref, and it will return which variable type the reference points to.&lt;/p&gt;

&lt;h3 id=&#34;creating-references-from-variables:6a29add5aea08a862cc77cb68480c39b&#34;&gt;Creating references from variables&lt;/h3&gt;

&lt;p&gt;To create a reference to an existing variable, use the backslash operator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $array_ref   = \@array;
my $hash_ref    = \%hash;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The backslash operator often comes into play when working within a subroutine. For instance consider these three subs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# example 1 - processor &amp;amp; memory inefficient
sub return_array {
    my @array = (1, 2, 3);
    foreach my $element (@array) {
        calculate($element);
    }
    return @array;
}

# example 2 - processor inefficient
sub return_array {
    my $array = [1, 2, 3];
    foreach my $element (@$array) {
        calculate($element);
    }
    return $array;
}

# example 3 - best option
sub return_array {
    my @array = (1, 2, 3);
    foreach my $element (@array) {
        calculate($element);
    }
    return \@array;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of these subs are trying to do the same thing - declare an array, loop through it and then return it. Example 1 will return a list of the the array&amp;rsquo;s elements. This is inefficient as the list comprises of scalar copies of the original array&amp;rsquo;s elements, which means: Perl makes the copies, returns them and then throws away the original array when it goes out of scope.&lt;/p&gt;

&lt;p&gt;Example 2&amp;rsquo;s main drawback is that by starting with a reference, Perl has to dereference the array in order to loop though it, which is a waste of processing. Example 3 has none of these disadvantages, as it begins with an array, loops through it and then returns a reference to the array. This is a popular Perl programming pattern.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:6a29add5aea08a862cc77cb68480c39b&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If references were a mystery to you before, hopefully this article helps to kickstart you into using them with confidence. Are you thirsty for more references? There&amp;rsquo;s a lot more to them than described here. Check out Perl&amp;rsquo;s official documentation, perldoc which has a &lt;a href=&#34;http://perldoc.perl.org/perlreftut.html&#34;&gt;tutorial&lt;/a&gt; and more &lt;a href=&#34;http://perldoc.perl.org/perlref.html&#34;&gt;detailed guide&lt;/a&gt;. &lt;a href=&#34;http://www.amazon.com/gp/product/1449393098/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1449393098&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;Intermediate Perl&lt;/a&gt; is fantastic book that has over 100 pages on references (affiliate link).&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F80%2F2014%2F3%2F27%2FPerl-references-create-dereference-and-debug-with-confidence&amp;amp;text=Perl+references%3A+create%2C+dereference+and+debug+with+confidence&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F80%2F2014%2F3%2F27%2FPerl-references-create-dereference-and-debug-with-confidence&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade your list printing using field separator variables</title>
      <link>http://perltricks.com/article/12/2013/4/3/Upgrade-your-list-printing-using-field-separator-variables/</link>
      <pubDate>Wed, 03 Apr 2013 22:24:28 +0000</pubDate>
      
      <guid>http://perltricks.com/article/12/2013/4/3/Upgrade-your-list-printing-using-field-separator-variables/</guid>
      <description>&lt;p&gt;A typical way to print every element of an array in Perl is using a foreach loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @sportscar_brands = qw/Ferrari Aston_Martin Lambourgini/;
foreach my $brand (@sportscar_brands){
    print &amp;quot;$brand\n&amp;quot;;
}
# Ferrari
# Aston_Martin
# Lambourgini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An alternative method is to set value of the the output field separator variable ($,). When printing a list or array Perl injects this variable between elements. Hence, if you set the output field separator to a newline (\n) you will achieve the same affect as the previous example, without the foreach loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$, = &amp;quot;\n&amp;quot;; # set the output field separator to newline
my @sportscar_brands = qw/Ferrari Aston_Martin Lambourgini/;
print @sportscar_brands;
# Ferrari
# Aston_Martin
# Lambourgini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output field separator also works on lists:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$, = &amp;quot;\n&amp;quot;;
print qw/Ferrari Aston_Martin Lambourgini/;
# Ferrari
# Aston_Martin
# Lambourgini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is another variable called the list separator ($&amp;ldquo;). Perl injects the value of $&amp;rdquo; between the elements of an array in an interpolated string. The subtle difference here is that the output field separator will apply when using print, however the list separator applies to all arrays in an interpolated string context. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$&amp;quot; = &amp;quot;\n&amp;quot;; # set the list separator to newline
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @normalcar_brands = qw/Ford Honda Toyota Fiat/;
print @normalcar_brands; # not inside an interpolated string
# FordHondaToyotaFiat

print &amp;quot;@normalcar_brands&amp;quot; # works in interpolated string
# Ford
# Honda
# Toyota
# Fiat

my $separated_list_string = &amp;quot;@normalcar_brands&amp;quot;; # injects the separator
print $separated_list_string;
# Ford
# Honda
# Toyota
# Fiat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One additional difference: despite its name, the list separator variable ($&amp;ldquo;) does not work on lists whilst the output field separator ($,) does (in Perl 5.16.3).&lt;/p&gt;

&lt;p&gt;Finally if you have set both $, and $&amp;rdquo; and print an interpolated array, $&amp;rdquo; will be injected and $, will be ignored.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

