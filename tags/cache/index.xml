<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cache on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/cache/</link>
    <description>Recent content in Cache on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 May 2015 12:28:31 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/cache/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cache::Reddit or: how to use social media as a temporary data store</title>
      <link>http://perltricks.com/article/171/2015/5/4/Cache--Reddit-or--how-to-use-social-media-as-a-temporary-data-store/</link>
      <pubDate>Mon, 04 May 2015 12:28:31 +0000</pubDate>
      
      <guid>http://perltricks.com/article/171/2015/5/4/Cache--Reddit-or--how-to-use-social-media-as-a-temporary-data-store/</guid>
      <description>

&lt;p&gt;Sometimes crazy ideas are brilliant, but most of the time they are just crazy. I recently uploaded a new module to CPAN: &lt;a href=&#34;https://metacpan.org/pod/Cache::Reddit&#34;&gt;Cache::Reddit&lt;/a&gt;. It&amp;rsquo;s a caching module with a twist: it saves cached data as text posts on Reddit. Is that a good idea? Probably not, it&amp;rsquo;s definitely crazy.&lt;/p&gt;

&lt;h3 id=&#34;setup:915623acbd42e6947b356ad2ec9d95c4&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;You probably don&amp;rsquo;t want to do this, but if you were considering using the module, here&amp;rsquo;s how. First you&amp;rsquo;ll need a Reddit account with enough karma to use the API (usually handful of upvoted links and comments is enough). Second you should create your own &lt;a href=&#34;http://www.reddit.com/subreddits/create/&#34;&gt;subreddit&lt;/a&gt; to post to. Install &lt;a href=&#34;https://metacpan.org/pod/Cache::Reddit&#34;&gt;Cache::Reddit&lt;/a&gt; using the command line clients cpan or cpanm&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Cache::Reddit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpanm Cache::Reddit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally set the environment variables: &lt;code&gt;reddit_username&lt;/code&gt;, &lt;code&gt;reddit_password&lt;/code&gt;, and &lt;code&gt;reddit_subreddit&lt;/code&gt; (the name of the subreddit that data will be posted to). On Linux / OSX you can do this at the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ export reddit_username=somename
$ export reddit_password=itsasecret
$ export reddit_subreddit=mycache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To set environment variables on Windows 8, these &lt;a href=&#34;http://winaero.com/blog/how-to-edit-environment-variables-quickly-in-windows-8-1-and-windows-8/&#34;&gt;steps&lt;/a&gt; might work.&lt;/p&gt;

&lt;h3 id=&#34;using-cache-reddit:915623acbd42e6947b356ad2ec9d95c4&#34;&gt;Using Cache::Reddit&lt;/h3&gt;

&lt;p&gt;The module exports the typical caching functions you&amp;rsquo;d expect: &lt;code&gt;set&lt;/code&gt; for saving data, &lt;code&gt;get&lt;/code&gt; for retrieval and &lt;code&gt;remove&lt;/code&gt; for removal. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Cache::Reddit; #exports get, set, remove

my $monthly_revenues = { jan =&amp;gt; 25000, feb =&amp;gt; 23500, mar =&amp;gt; 31000, apr =&amp;gt; 15000 };
my $key = set($monthly_revenues); # serialize and save on reddit
...
my $revenue_data = get($key);
remove($key);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;limitations:915623acbd42e6947b356ad2ec9d95c4&#34;&gt;Limitations&lt;/h3&gt;

&lt;p&gt;Although the data is stored in a failsafe, redundant, backed-up environment in the cloud, frequent users of Reddit will appreciate that the service is likely to unavailable for a few seconds multiple times a day.&lt;/p&gt;

&lt;p&gt;Retrieval from the cache using &lt;code&gt;get&lt;/code&gt; doesn&amp;rsquo;t use a hash lookup; instead Cache::Reddit iterates through all available posts on the subreddit until it finds a match. This yields 0(n) performance, which means that the &lt;code&gt;get&lt;/code&gt; function will get slower the more items are cached. This is not likely to be a performance bottleneck though, as typically a subreddit only holds 1,000 links before they are lost to the ether.&lt;/p&gt;

&lt;p&gt;The data is serialized and deserialized using &lt;a href=&#34;https://metacpan.org/pod/Storable&#34;&gt;Storable&lt;/a&gt;, which may open pose a security risk if the cached data is edited by a mod. Up to 40,000 characters of data can be stored at one time. Unless the subreddit permits both links and text posts, in which case the limit is 10,000 characters. But Cache::Reddit does boast 100% test coverage.&lt;/p&gt;

&lt;h3 id=&#34;looking-forwards:915623acbd42e6947b356ad2ec9d95c4&#34;&gt;Looking forwards&lt;/h3&gt;

&lt;p&gt;In the future I&amp;rsquo;d like to take advantage of Reddit&amp;rsquo;s voting system to implement a crude &lt;a href=&#34;https://en.wikipedia.org/wiki/Least_Recently_Used#LRU&#34;&gt;LRU&lt;/a&gt; cache. Comments could prove to be a powerful version control system. Patches welcome, the source code is on Instagram.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple web framework FastCGI caching with nginx - part 2</title>
      <link>http://perltricks.com/article/77/2014/3/17/Simple-web-framework-FastCGI-caching-with-nginx---part-2/</link>
      <pubDate>Mon, 17 Mar 2014 01:54:09 +0000</pubDate>
      
      <guid>http://perltricks.com/article/77/2014/3/17/Simple-web-framework-FastCGI-caching-with-nginx---part-2/</guid>
      <description>

&lt;p&gt;&lt;em&gt;In &lt;a href=&#34;http://perltricks.com/article/76/2014/3/11/Simple-web-framework-FastCGI-caching-with-nginx-part-1&#34;&gt;part 1&lt;/a&gt; of this series, we covered how to cache FastCGI responses with nginx and how to purge the cache on demand. We saw how easy it is to setup caching with the main Perl web frameworks (Catalyst, Dancer and Mojolicious). In this article we&amp;rsquo;ll use Nginx::FastCGI::Cache to manage our cached responses and gain some useful benefits along the way.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need Perl v5.12.3 or greater to install &lt;a href=&#34;https://metacpan.org/pod/Nginx::FastCGI::Cache&#34;&gt;Nginx::FastCGI::Cache&lt;/a&gt;. The CPAN Testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=Nginx-FastCGI-Cache+0.008&#34;&gt;results&lt;/a&gt; show that it runs on most platforms including Windows. To install the module using CPAN, just open the terminal and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ cpan Nginx::FastCGI::Cache
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;nginx-fastcgi-caching-explained:fa5e57e16e5afa820891a6788e36f753&#34;&gt;nginx fastcgi caching explained&lt;/h3&gt;

&lt;p&gt;In an nginx virtual host file, the &amp;ldquo;fastcgi_cache_path&amp;rdquo; directive sets the root directory from where nginx will build the cache. nginx uses the variables of the &amp;ldquo;fastcgi_cache_key&amp;rdquo; directive to create an md5 hexadecimal hash key as the filename. The &amp;ldquo;levels&amp;rdquo; value determines the number of subdirectories and the subdirectories name length. For example, with this configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache_path  /var/cache/nginx levels=1:2
                    keys_zone=app_cache:50m
                    inactive=60m;
fastcgi_cache_key &amp;quot;$scheme$request_method$host$request_uri&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A GET request for &amp;ldquo;&lt;a href=&#34;http://perltricks.com/&amp;quot;&#34;&gt;http://perltricks.com/&amp;quot;&lt;/a&gt; would have a key of &amp;ldquo;httpGETperltricks.com/&amp;rdquo;, and be stored at: &amp;ldquo;/var/cache/nginx/4/85/200d51ef65b0a76de421f8f1ec047854&amp;rdquo;. Note that the name of the first subdirectory is the last letter of the md5 hash (&amp;ldquo;4&amp;rdquo;) and the second subdirectory name the previous two letters (&amp;ldquo;85&amp;rdquo;) - this is because of the levels value of &amp;ldquo;1:2&amp;rdquo; set in the nginx virtual host file. Deleting the file &amp;ldquo;/var/cache/nginx/4/85/200d51ef65b0a76de421f8f1ec047854 will purge it from nginx&amp;rsquo;s cache.&lt;/p&gt;

&lt;h3 id=&#34;introducing-nginx-fastcgi-cache:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Introducing Nginx::FastCGI::Cache&lt;/h3&gt;

&lt;p&gt;I wrote &lt;a href=&#34;https://metacpan.org/pod/Nginx::FastCGI::Cache&#34;&gt;Nginx::FastCGI::Cache&lt;/a&gt; to make it easy to purge individually cached fastcgi responses from the nginx cache. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Nginx::FastCGI::Cache;
 
my $nginx_cache = Nginx::FastCGI::Cache-&amp;gt;new({ location =&amp;gt; &#39;/var/cache/nginx&#39; });
$nginx_cache-&amp;gt;purge_file(&amp;quot;http://perltricks.com/&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will convert the URL into the md5 hashed cache key, and delete it from the nginx cache directory. By default &amp;ldquo;purge_file&amp;rdquo; assumes the HTTP request type is GET. If you want to purge a file for a different request type, simply include it as a parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$nginx_cache-&amp;gt;purge_file(&amp;quot;http://perltricks.com/&amp;quot;, &amp;quot;HEAD&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to blow away the whole cache, use the &amp;ldquo;purge_cache&amp;rdquo; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$nginx_cache-&amp;gt;purge_cache;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two methods should be all that&amp;rsquo;s required to conveniently manage the nginx cache from your favourite Perl web application.&lt;/p&gt;

&lt;h3 id=&#34;portability:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Portability&lt;/h3&gt;

&lt;p&gt;In part 1 our purge cache code used a system call to the GNU find program to delete all the files in the cache. Whilst this is fine as a quick hack, using an external program limits the portability of the code (it wouldn&amp;rsquo;t run on Windows for example). Nginx::FastCGI::Cache uses Perl&amp;rsquo;s opendir and unlink functions to read the cache directory and delete files, which should work on all platforms that Perl runs on.&lt;/p&gt;

&lt;h3 id=&#34;safety-first:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Safety First&lt;/h3&gt;

&lt;p&gt;Whenever you have a program that is going to recursively delete all files in a directory, you want to be sure that it&amp;rsquo;s looking at the correct directory. That&amp;rsquo;s why the &amp;ldquo;location&amp;rdquo; is a mandatory parameter for the Nginx::FastCGI::Cache constructor - no default location is assumed. Additionally, should the Perl process not have sufficient permissions to read the cache directory or delete a cached file, Nginx::FastCGI::Cache will &lt;a href=&#34;http://perldoc.perl.org/Carp.html#NAME&#34;&gt;croak&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;other-nginx-considerations:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Other nginx considerations&lt;/h3&gt;

&lt;p&gt;By default, nginx will not cache a fastcgi response that includes a &amp;ldquo;Set-Cookie&amp;rdquo; header. Depending on how you are using cookies, you may want to have nginx cache the response and ignore the &amp;ldquo;Set-Cookie&amp;rdquo; header. This can be done by adding this line to your virtual host file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_ignore_headers &amp;quot;Set-Cookie&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bear in mind that the &amp;ldquo;set-Cookie&amp;rdquo; header will be removed from the response altogether, so this is useful when serving uniform responses that do not distinguish between users with session cookies and those without.&lt;/p&gt;

&lt;p&gt;By default nginx will only cache GET and HEAD requests. This is a good default, but you may want to restrict the cache to just GET responses, or enable other kinds of HTTP requests such as POST. If so, add the fastcgi_cache_methods directive to your nginx virtual host file. For example to only cache GET requests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache_methods GET;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nginx &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&#34;&gt;documentation&lt;/a&gt; provides comprehensive detail on the fastcgi module.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:fa5e57e16e5afa820891a6788e36f753&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Whether you are using Catalyst, Dancer or Mojolicious, setting the appropriate caching headers is easy (see &lt;a href=&#34;http://perltricks.com/article/76/2014/3/11/Simple-web-framework-FastCGI-caching-with-nginx-part-1&#34;&gt;part 1&lt;/a&gt;). Consider using &lt;a href=&#34;https://metacpan.org/pod/Nginx::FastCGI::Cache&#34;&gt;Nginx::FastCGI::Cache&lt;/a&gt; with nginx to conveniently purge the cache on demand.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F77%2F2014%2F3%2F16%2FSimple-web-framework-FastCGI-caching-with-nginx-part-2&amp;amp;text=Simple+web+framework+FastCGI+caching+with+nginx+-+part+2&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F77%2F2014%2F3%2F16%2FSimple-web-framework-FastCGI-caching-with-nginx-part-2&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple web framework FastCGI caching with nginx - part 1</title>
      <link>http://perltricks.com/article/76/2014/3/11/Simple-web-framework-FastCGI-caching-with-nginx---part-1/</link>
      <pubDate>Tue, 11 Mar 2014 03:18:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/76/2014/3/11/Simple-web-framework-FastCGI-caching-with-nginx---part-1/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Fastcgi server caching is a wonderful technique for improving response times and reducing load on a web application. In part 1 of this series we look at how to cache responses with Catalyst, Dancer and Mojolocious and how to clear the cache on-demand when using the nginx web server. Before you know it, your web application will be faster than a racing llama!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;fastcgi-server-caching-explained:8c253a4acb451f68f821b231698a79ac&#34;&gt;FastCGI server caching explained&lt;/h3&gt;

&lt;p&gt;FastCGI server caching is when the FastCGI application sets a caching header in its response to an upstream server. The &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.3&#34;&gt;max-age header&lt;/a&gt; defines in seconds from the time of the request how long to cache the response message for. If it&amp;rsquo;s correctly configured, the upstream server will cache the response, and for the duration of the max-age value, return the cached response to all requests to the same URL. As a bonus the max-age header can be passed back to the requester, and it will be cached in their browser as well.&lt;/p&gt;

&lt;p&gt;FastCGI server caching brings the following benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cut response times by as much as 95%.&lt;/li&gt;
&lt;li&gt;Reduce load on the the FastCGI application (imagine 1 request per hour per URL).&lt;/li&gt;
&lt;li&gt;Reduce load on the the web server with browser caching.&lt;/li&gt;
&lt;li&gt;Avoid corrupt memory risks of simultaneous read/write when caching responses in the FastCGI application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;how-to-cache-your-catalyst-mojolicious-dancer-response:8c253a4acb451f68f821b231698a79ac&#34;&gt;How to cache your Catalyst / Mojolicious / Dancer response&lt;/h3&gt;

&lt;p&gt;All of the major Perl frameworks support server caching and the good news is it&amp;rsquo;s easy to implement. For example, if $seconds is number of seconds to cache the response for, in Catalyst add this line to a controller method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$c-&amp;gt;response-&amp;gt;header(&#39;Cache-Control&#39; =&amp;gt; &amp;quot;max-age=$seconds&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Mojolicious, add this code to your controller action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$self-&amp;gt;res-&amp;gt;headers-&amp;gt;cache_control(&#39;max-age=$seconds&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for Dancer, update a route with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;header &#39;max-age&#39; =&amp;gt; &#39;$seconds&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-setup-nginx-fastcgi-caching:8c253a4acb451f68f821b231698a79ac&#34;&gt;How to setup nginx FastCGI caching&lt;/h3&gt;

&lt;p&gt;To enable nginx caching, add the fastcgi cache directives to to your virtual host config file. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache_path  /var/nginx/cache levels=1:2
                    keys_zone=fcgi_cache:50m
                    inactive=60m;
fastcgi_cache_key &amp;quot;$scheme$request_method$host$request_uri&amp;quot;;
fastcgi_buffers 256 4k; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code specifies the cache directory, zone name, cache key and buffers (see the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&#34;&gt;manual&lt;/a&gt; for details). The code should be outside your server declaration. Within your server declaration, add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache fcgi_cache;
fastcgi_cache_valid 200 1s;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code defines the cache zone to use (&amp;ldquo;fcgi_cache&amp;rdquo;), sets the cache size to 200mb and by default caches a response for 1 second. The max-age header will override the default cache time, but you may want to choose a value other than 1 second, depending on your application&amp;rsquo;s needs. Here is a complete example virtual host file with fastcgi caching:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;fastcgi_cache_path  /var/nginx/cache levels=1:2
                    keys_zone=PerlTricks:50m
                    inactive=60m;
fastcgi_cache_key &amp;quot;$scheme$request_method$host$request_uri&amp;quot;;
fastcgi_buffers 256 4k;

server {
    listen 80 default;
    server_name perltricks.com;
    try_files $uri @fcgi;
    location @fcgi {
        fastcgi_cache PerlTricks;
        fastcgi_cache_valid 200 5m;
        fastcgi_pass unix:/tmp/perltricks.socket;
        include /etc/nginx/fastcgi.conf;
        fastcgi_param SCRIPT_NAME /;
    }   
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For an in-depth look at the configuring the nginx fastcgi cache, check out this &lt;a href=&#34;https://www.digitalocean.com/community/articles/how-to-setup-fastcgi-caching-with-nginx-on-your-vps&#34;&gt;useful article&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;clearing-the-cache:8c253a4acb451f68f821b231698a79ac&#34;&gt;Clearing the cache&lt;/h3&gt;

&lt;p&gt;Whilst caching responses can deliver huge benefits, it would be nice to be able to clear the cache on-demand, in case the application state changes. Fortunately with nginx this is super-easy with Perl - all you have to do is delete all files in the fastcgi_cache_path declared in the virtual host config file. For example, on Unix-based systems this works:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub clear_cache {
    if (-e &#39;/var/nginx/cache&#39;) {
        system(&#39;find /var/nginx/cache -type f -exec rm -f {} \;&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion:8c253a4acb451f68f821b231698a79ac&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;All of the major Perl web frameworks support FastCGI server caching. It&amp;rsquo;s easy to set up and with nginx, easy to manage. However there is more that can be done: in part 2 of this series we&amp;rsquo;ll make our cache management more precise by adding the ability to clear specific URL responses from the cache, rather than obliterating the whole cache in one go. We&amp;rsquo;ll also look at how to make the &amp;ldquo;clear_cache&amp;rdquo; subroutine safer and Windows compatible.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F76%2F2014%2F3%2F11%2FSimple-web-framework-FastCGI-caching-with-nginx-part-1&amp;amp;text=Simple+web+framework+FastCGI+caching+with+nginx+-+part+1&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F76%2F2014%2F3%2F11%2FSimple-web-framework-FastCGI-caching-with-nginx-part-1&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover picture © David Hoshor licensed via &lt;a href=&#34;http://creativecommons.org/licenses/by/2.0/&#34;&gt;Creative Commons&lt;/a&gt;. The picture has been digitally enhanced.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

