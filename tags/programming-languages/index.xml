<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming-languages on Code Matters - a tech blog</title>
    <link>https://blog.dnmfarrell.com/tags/programming-languages/</link>
    <description>Recent content in programming-languages on Code Matters - a tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Jun 2021 20:19:32 -0400</lastBuildDate><atom:link href="https://blog.dnmfarrell.com/tags/programming-languages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bash Function Names Can Be Almost Anything</title>
      <link>https://blog.dnmfarrell.com/post/bash-function-names-can-be-almost-anything/</link>
      <pubDate>Sun, 20 Jun 2021 20:19:32 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/bash-function-names-can-be-almost-anything/</guid>
      <description>A common misconception about Bash is that function names must follow the same rules that variables do. The Bash manual even suggests this:
 A word consisting solely of letters, numbers, and underscores, and beginning with a letter or underscore. Names are used as shell variable and function names. Also referred to as an identifier.
 In fact Bash function names can be almost any printable character. For instance I can define my own pre-increment unary function:</description>
    </item>
    
    <item>
      <title>Perl Closures As Objects</title>
      <link>https://blog.dnmfarrell.com/post/closures-as-objects/</link>
      <pubDate>Sun, 13 Dec 2020 12:57:03 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/closures-as-objects/</guid>
      <description>Perl&amp;rsquo;s object system is not one of its most admired qualities. Included in the 1993 Perl 5.0 release, objects were a bolt-on. A big improvement at the time, in today&amp;rsquo;s context the Perl 5 object system requires too much boilerplate and is under-powered compared to other language offerings (no private state, no type checking, no traits, no multimethods). Perl programmers have been trying to upgrade it for years (Cor is a recent example).</description>
    </item>
    
    <item>
      <title>On Sigils</title>
      <link>https://blog.dnmfarrell.com/post/on-sigils/</link>
      <pubDate>Sun, 14 May 2017 15:45:24 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/on-sigils/</guid>
      <description>One thing that distinguishes Perl from other languages is its use of sigils; the funny looking symbols placed in front of variable names. As experienced Perl programmers, we assume sigils are an essential part of Perl, but when I dream about my ideal version of Perl, I go back-and-forth as to how sigils would work, and even whether they&amp;rsquo;re required at all.
Background First though, some background. In Perl there are 5 kinds of sigils:</description>
    </item>
    
  </channel>
</rss>
