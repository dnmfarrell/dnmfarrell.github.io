<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Log on Perl programming news, code and culture</title>
    <link>https://dnmfarrell.github.io/tags/log/</link>
    <description>Recent content in Log on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Oct 2013 17:48:34 +0000</lastBuildDate>
    <atom:link href="https://dnmfarrell.github.io/tags/log/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to redirect and restore STDOUT</title>
      <link>https://dnmfarrell.github.io/article/45/2013/10/27/How-to-redirect-and-restore-STDOUT/</link>
      <pubDate>Sun, 27 Oct 2013 17:48:34 +0000</pubDate>
      
      <guid>https://dnmfarrell.github.io/article/45/2013/10/27/How-to-redirect-and-restore-STDOUT/</guid>
      <description>

&lt;p&gt;STDOUT is the Perl filehandle for printing standard output. Unless a filehandle is specified, all standard printed output in Perl will go to the terminal. Because STDOUT is just a global variable, it can be redirected and restored. Want to implement logging on a program without changing every print statement in the source code? Want to capture the standard output of a perl CRON job? Read on.&lt;/p&gt;

&lt;h3 id=&#34;terminal-redirects:9e03003b05f671fa59d2fc87f91ddfba&#34;&gt;Terminal redirects&lt;/h3&gt;

&lt;p&gt;Before you launch your favourite text editor and start hacking Perl code, you may just need to redirect the program output in the terminal. On UNIX-based systems you can write to a file using &amp;ldquo;&amp;gt;&amp;rdquo; and append to a file using &amp;ldquo;&amp;gt;&amp;gt;&amp;rdquo;. Both write and append will create the file if it doesn&amp;rsquo;t exist.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl program.pl &amp;gt; /path/to/log.txt
perl program.pl &amp;gt;&amp;gt; /path/to/log.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On Windows a similar effect can be achieved using PowerShell using a pipe operator (&amp;ldquo;|&amp;rdquo;) and &amp;ldquo;set-content&amp;rdquo; to write, or &amp;ldquo;add-content&amp;rdquo; to append (the pipe will not redirect STDERR).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;perl program.pl | set-content /path/to/log.txt
perl program.pl | add-content /path/to/log.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;perl-solutions:9e03003b05f671fa59d2fc87f91ddfba&#34;&gt;Perl solutions&lt;/h3&gt;

&lt;p&gt;If a terminal redirect is not specific enough for your needs, you can use one of the following Perl solutions. All of the following solutions use &lt;a href=&#34;https://metacpan.org/pod/autodie&#34;&gt;autodie&lt;/a&gt; which removes the need for the classic &amp;ldquo;|| or die $!&amp;rdquo; syntax to be appended to every open statement in the code.&lt;/p&gt;

&lt;h3 id=&#34;redirect-stdout-using-select:9e03003b05f671fa59d2fc87f91ddfba&#34;&gt;Redirect STDOUT using select&lt;/h3&gt;

&lt;p&gt;Perl&amp;rsquo;s built-in function &lt;a href=&#34;http://perldoc.perl.org/functions/select.html&#34;&gt;select&lt;/a&gt; changes the standard output filehandle to the filehandle provided as an argument. This makes it easy to globally redirect and restore standard output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
use autodie;

# open filehandle log.txt
open (my $LOG, &#39;&amp;gt;&amp;gt;&#39;, &#39;log.txt&#39;);

# select new filehandle
select $LOG;

say &#39;This should be logged.&#39;;

# restore STDOUT
select STDOUT;

say &#39;This should show in the terminal&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;redirect-stdout-using-local:9e03003b05f671fa59d2fc87f91ddfba&#34;&gt;Redirect STDOUT using local&lt;/h3&gt;

&lt;p&gt;Perl&amp;rsquo;s &lt;a href=&#34;http://perldoc.perl.org/functions/local.html&#34;&gt;local&lt;/a&gt; built-in function is another option for redirecting STDOUT. The local function creates a lexically-scoped copy of any variable passed to it. By enclosing local in a do block, the code below limits the STDOUT redirect to the block scope and STDOUT is automatically restored after the closing block brace (&amp;ldquo;}&amp;rdquo;). By definition this is not a global solution for redirecting STDOUT.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
use autodie;

do {
    local *STDOUT;

    # redirect STDOUT to log.txt
    open (STDOUT, &#39;&amp;gt;&amp;gt;&#39;, &#39;log.txt&#39;);

    say &#39;This should be logged.&#39;;
};
say &#39;This should show in the terminal&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;redirect-stdout-using-a-filehandle:9e03003b05f671fa59d2fc87f91ddfba&#34;&gt;Redirect STDOUT using a filehandle&lt;/h3&gt;

&lt;p&gt;A third way to redirect and restore STDOUT is to copy the STDOUT filehandle before replacing it. This copy can then be restored when required. As with select, this will have a global affect on the Perl program.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use feature qw/say/;
use autodie;

# copy STDOUT to another filehandle
open (my $STDOLD, &#39;&amp;gt;&amp;amp;&#39;, STDOUT);

# redirect STDOUT to log.txt
open (STDOUT, &#39;&amp;gt;&amp;gt;&#39;, &#39;log.txt&#39;);

say &#39;This should be logged.&#39;;

# restore STDOUT
open (STDOUT, &#39;&amp;gt;&amp;amp;&#39;, $STDOLD);

say &#39;This should show in the terminal&#39;;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>

