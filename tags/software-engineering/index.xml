<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software-engineering on Code - a programming blog</title>
    <link>https://blog.dnmfarrell.com/tags/software-engineering/</link>
    <description>Recent content in software-engineering on Code - a programming blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Dec 2024 14:42:01 -0500</lastBuildDate><atom:link href="https://blog.dnmfarrell.com/tags/software-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>User Stories As Tools For Thought</title>
      <link>https://blog.dnmfarrell.com/post/stories/</link>
      <pubDate>Fri, 20 Dec 2024 14:42:01 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/stories/</guid>
      <description>Last week I wrote about novelty in software engineering, and its relation to complexity. Now most of us are familiar with thinking tools for managing complexity such as documenting requirements, diagramming, statistics and so on. But novelty requires us to be creative, to invent new solutions.
So this week I want to share one of the most helpful tools I&amp;rsquo;ve found for creative thought in software: user stories. And I don&amp;rsquo;t mean &amp;ldquo;tickets in Jira&amp;rdquo; - in fact I think user stories make for a poor planning tool, which I&amp;rsquo;ll explain later.</description>
    </item>
    
    <item>
      <title>Novelty In Software Engineering</title>
      <link>https://blog.dnmfarrell.com/post/novelty/</link>
      <pubDate>Mon, 16 Dec 2024 12:41:35 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/novelty/</guid>
      <description>In the 1940s Bell Aircraft used an experimental approach to build the first commercial helicopter:ยน
 At Gardenville, we built things, tested them, modified them until they worked, and then made the drawings. &amp;mdash;&amp;nbsp;The Bell Notes, Arthur M. Young, 
 The project manager contrasted this with how they built airplanes:
 The main engineering group made drawings, sent them to the plant, and only the project manager ever saw the product fly.</description>
    </item>
    
    <item>
      <title>Microservices Reify Compute</title>
      <link>https://blog.dnmfarrell.com/post/microservices-reify-compute/</link>
      <pubDate>Tue, 10 Dec 2024 10:59:33 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/microservices-reify-compute/</guid>
      <description>Twenty five years ago the most popular solution for web apps was known as &amp;ldquo;LAMP&amp;rdquo; (Linux, Apache, MySQL, PHP). A typical web app today, deployed with Kubernetes might comprise of 5x as many technologies. That we don&amp;rsquo;t use such acronyms anymore tells us something about how software engineering has changed.
This has mostly been a journey from implicit to explicit state. For example, Kubernetes manifests declare how much memory an application will need.</description>
    </item>
    
  </channel>
</rss>
