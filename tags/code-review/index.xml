<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code-review on Code - a programming blog</title>
    <link>https://blog.dnmfarrell.com/tags/code-review/</link>
    <description>Recent content in code-review on Code - a programming blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Nov 2023 10:04:55 -0500</lastBuildDate><atom:link href="https://blog.dnmfarrell.com/tags/code-review/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Your Code Review Policy Doesnt Matter</title>
      <link>https://blog.dnmfarrell.com/post/your-code-review-policy-doesnt-matter/</link>
      <pubDate>Wed, 15 Nov 2023 10:04:55 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/your-code-review-policy-doesnt-matter/</guid>
      <description>Recently at work we&amp;rsquo;ve instituted a change to require code review by default. The merge request owner can disable the review requirement in GitLab but the intention is to always review. Some co-workers think this change is great, others worry about the additional overhead and loss of velocity.
I used to think stuff like this matters - I don&amp;rsquo;t anymore. Moreover I don&amp;rsquo;t think you believe it either.
Try this thought experiment: think of a time you were part of a high performing software project.</description>
    </item>
    
    <item>
      <title>The Inconvenient Convenience of Dynamic Languages</title>
      <link>https://blog.dnmfarrell.com/post/the-inconvenient-convenience-of-dynamic-languages/</link>
      <pubDate>Wed, 03 Nov 2021 06:08:38 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/the-inconvenient-convenience-of-dynamic-languages/</guid>
      <description>Truthiness is the behavior of interpreting non-boolean values as true or false in a conditional context. E.g. in this loop: while 1 { ... }, the 1 is interpreted as true. Dynamic programming languages provide this behavior as a convenience to save the programmer from typing more than they need to. However, this week I wasted a bunch of time tracking down a bug that had a several root causes:</description>
    </item>
    
    <item>
      <title>Is Code Review Always A Good Thing?</title>
      <link>https://blog.dnmfarrell.com/post/is-code-review-always-a-good-thing/</link>
      <pubDate>Sun, 05 Sep 2021 14:28:43 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/is-code-review-always-a-good-thing/</guid>
      <description>Code review is one of those hygienic things most developers believe they ought to do, like kitchen workers washing their hands, but don&amp;rsquo;t always do. Yet tech articles tend to be unanimously in favor of code review, extolling its benefits (&amp;ldquo;catch bugs&amp;rdquo;, &amp;ldquo;maintain code consistency&amp;rdquo;, &amp;ldquo;transfer knowledge&amp;rdquo;). So if restaurants can require workers to wash their hands, maybe organizations can require their developers to review every code change?
Broadly speaking I think we can lump all of code review&amp;rsquo;s benefits under the category of &amp;ldquo;improve code quality&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>
