<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oreilly on Perl programming news, code and culture</title>
    <link>http://perltricks.com/tags/oreilly/</link>
    <description>Recent content in Oreilly on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Sep 2016 08:12:54 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/tags/oreilly/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>5 things I learned from Learning Perl 7th Edition</title>
      <link>http://perltricks.com/article/5-things-i-learned-from-learning-perl-7th-edition/</link>
      <pubDate>Fri, 23 Sep 2016 08:12:54 +0000</pubDate>
      
      <guid>http://perltricks.com/article/5-things-i-learned-from-learning-perl-7th-edition/</guid>
      <description>

&lt;p&gt;The 7th edition of &lt;a href=&#34;https://www.learning-perl.com/&#34;&gt;Learning Perl&lt;/a&gt; is due to be released later this month. I was one of the technical reviewers of the book - I hadn&amp;rsquo;t read it since the 3rd edition where it was a course text at my University (and Perl was described as a &amp;ldquo;text processing language&amp;rdquo;!). Reviewing the book, I was struck by how much detail it contained. If you&amp;rsquo;re looking for a thorough introduction to Perl, it&amp;rsquo;s a great place to start. I picked up (or re-learned) a few tricks along the way, that I thought were worth sharing.&lt;/p&gt;

&lt;h3 id=&#34;1-stacked-file-test-operators:20798fba47491e24e703587c4db3eaa3&#34;&gt;1. Stacked file test operators&lt;/h3&gt;

&lt;p&gt;You probably know that Perl supports a bunch of &lt;a href=&#34;http://perldoc.perl.org/functions/-X.html&#34;&gt;file test operators&lt;/a&gt; that do useful things like check if a file exists, if it&amp;rsquo;s readable and so on:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  if (-e $filepath &amp;amp;&amp;amp; -r $filepath) {
    ... 
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But did you know that since version 5.10, you can stack file test operators?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  if (-e -r $filepath) {
    ...
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way is cleaner and shorter. Oh and bonus! file test operators work on filehandles too. Stacked file operators are not part of the &lt;a href=&#34;http://perldoc.perl.org/feature.html&#34;&gt;feature&lt;/a&gt; pragma, so an explicit &lt;code&gt;use 5.10.0;&lt;/code&gt; is not required, although if your code is going to be shared, you should probably include it.&lt;/p&gt;

&lt;h3 id=&#34;2-glob-s-checkered-past:20798fba47491e24e703587c4db3eaa3&#34;&gt;2. Glob&amp;rsquo;s checkered past&lt;/h3&gt;

&lt;p&gt;Learning Perl has a lot of anecdotes about Perl history in it. You might have used the &lt;code&gt;glob&lt;/code&gt; function before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my @json_files = glob &#39;*.json&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This returns all file names ending in &lt;code&gt;.json&lt;/code&gt; in the current working directory. Glob takes a string of patterns separated by whitespace, so you can provide multiple patterns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  my @config_files = glob &#39;*.json *.toml *.ini&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of using the word &lt;code&gt;glob&lt;/code&gt; you can use angle brackets:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  my @json_files = &amp;lt;*.json&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These angle brackets treat the text between them like a double-quoted string. One thing I learned was that ancient versions of Perl (pre 5.6) simply called &lt;code&gt;/bin/csh&lt;/code&gt; every time they encountered &lt;code&gt;glob&lt;/code&gt;! This made globbing slow, and directory handles were preferred over &lt;code&gt;glob&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;3-perl-supports-inline-binary-notation:20798fba47491e24e703587c4db3eaa3&#34;&gt;3. Perl supports inline binary notation&lt;/h3&gt;

&lt;p&gt;In many C-based languages you can write numbers in hexadecimal and octal notation, and you can in Perl too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  my $byte_max = 0xff;
  my $permissions = 0755;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Perl though, you can also write binary numbers inline, with the prefix &lt;code&gt;0b&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  my $bits = 0b10111000;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can make it easier to work with binary data; instead of using hexadecimal notation and doing the mental arithmetic to calculate values, you can write binary data inline. For example, let&amp;rsquo;s say you are reviewing some code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  if ($bit_array &amp;amp; 0x40) {
    ...
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To understand this example in hexadecimal, you have to calculate that 4 * 16 = 64, and then either just know, or convert that number to binary to find out that the 7th bit is flipped, and understand that this is testing whether &lt;code&gt;$bit_array&lt;/code&gt; has that bit flipped too. Here&amp;rsquo;s the same code with inline binary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;  if ($bit_array &amp;amp; 0b1000000) {
    ...
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, you can just see that the 7th bit is flipped, and the intent of the if statement becomes obvious. If you&amp;rsquo;re interested in understanding bit arrays and bitwise operators, I recently wrote an &lt;a href=&#34;http://perltricks.com/article/save-space-with-bit-arrays/&#34;&gt;introduction&lt;/a&gt; to them.&lt;/p&gt;

&lt;h3 id=&#34;4-check-an-installed-module-is-up-to-date:20798fba47491e24e703587c4db3eaa3&#34;&gt;4. Check an installed module is up to date&lt;/h3&gt;

&lt;p&gt;These days we have so many advanced Perl package installers like &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanm&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/distribution/App-cpm/script/cpm&#34;&gt;cpm&lt;/a&gt; it&amp;rsquo;s easy to forget that the basic CPAN client can do a lot too. For instance, the &lt;code&gt;-D&lt;/code&gt; option checks the installed version of a module and compares it to the latest version on CPAN. So to check if the &lt;code&gt;Test::More&lt;/code&gt; module is up to date, at the terminal I can enter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpan -D Test::More

CPAN: Storable loaded ok (v2.53)
Reading &#39;/home/dfarrell/.local/share/.cpan/Metadata&#39;
  Database was generated on Thu, 22 Sep 2016 21:53:30 GMT
Test::More
-------------------------------------------------------------------------
      (no description)
      E/EX/EXODIST/Test-Simple-1.302056.tar.gz
      /home/dfarrell/.plenv/versions/5.22.0/lib/perl5/5.22.0/Test/More.pm
      Installed: 1.001014
      CPAN:      1.302056  Not up to date
      Chad Granum (EXODIST)
      exodist7@gmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Woah, mine is pretty out of date. I should upgrade &amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;5-avoiding-the-shell-for-system-commands:20798fba47491e24e703587c4db3eaa3&#34;&gt;5. Avoiding the shell for system commands&lt;/h3&gt;

&lt;p&gt;The Perl built-in functions &lt;a href=&#34;http://perldoc.perl.org/functions/exec.html&#34;&gt;exec&lt;/a&gt; and &lt;a href=&#34;http://perldoc.perl.org/functions/system.html&#34;&gt;system&lt;/a&gt; &lt;em&gt;may&lt;/em&gt; invoke the shell when running a system command. Generally you want to avoid this as invoking the shell is slower than executing the command directly. Perl looks at the first argument passed to &lt;code&gt;exec&lt;/code&gt; or &lt;code&gt;system&lt;/code&gt; and if it contains shell &lt;a href=&#34;http://faculty.salina.k-state.edu/tim/unix_sg/shell/metachar.html&#34;&gt;metacharacters&lt;/a&gt; invokes the shell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $command = join &amp;quot; &amp;quot;, $program, $arg1, $arg2;
system $command; # may invoke shell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let&amp;rsquo;s say you need to invoke a system command, and you&amp;rsquo;re not sure whether the command arguments will contain metacharacters or not. If they do, the shell will be invoked and any metacharacters will be interpolated. One way to avoid the shell interpolating metacharacters is to escape them. But shell escape sequences are rarely simple (e.g. &lt;a href=&#34;https://stackoverflow.com/questions/1250079/how-to-escape-single-quotes-within-single-quoted-strings#1250279&#34;&gt;escaping a single quote&lt;/a&gt;). Learning Perl shows a better way: passing a list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;system $program, $arg1, $arg2; # never invokes the shell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will never invoke the shell, and avoid metacharacter interpolation.&lt;/p&gt;

&lt;h3 id=&#34;pre-order-learning-perl-now:20798fba47491e24e703587c4db3eaa3&#34;&gt;Pre-order Learning Perl now&lt;/h3&gt;

&lt;p&gt;Learning Perl 7th Edition has nearly 400 pages describing the Perl syntax, and how to accomplish important tasks like file IO, process management and module installations. It&amp;rsquo;s available for pre-order now on &lt;a href=&#34;https://goo.gl/DvCB14&#34;&gt;Amazon&lt;/a&gt; (that&amp;rsquo;s an affiliate link for brian d foy, the author of this edition). You can also get it from the publisher, &lt;a href=&#34;http://shop.oreilly.com/product/0636920049517.do&#34;&gt;O&amp;rsquo;Reilly&lt;/a&gt;. Check out the book&amp;rsquo;s offical &lt;a href=&#34;https://www.learning-perl.com/&#34;&gt;website&lt;/a&gt; where brian has been blogging about the new edition.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Understanding Haskell types</title>
      <link>http://perltricks.com/article/198/2015/10/14/Understanding-Haskell-types/</link>
      <pubDate>Wed, 14 Oct 2015 12:47:18 +0000</pubDate>
      
      <guid>http://perltricks.com/article/198/2015/10/14/Understanding-Haskell-types/</guid>
      <description>

&lt;p&gt;I recently took a break from Perl work to study at the &lt;a href=&#34;http://recurse.com&#34;&gt;Recurse Center&lt;/a&gt;. I&amp;rsquo;m learning Haskell, and it&amp;rsquo;s been an interesting adventure so far. I&amp;rsquo;d heard good things about Haskell&amp;rsquo;s type system and started with an introductory book &lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;Learn You a Haskell for Great Good!&lt;/a&gt;. The book is filled with cartoonish humor - &amp;ldquo;how hard can this be?&amp;rdquo; I asked myself. The answer was &amp;ldquo;hard&amp;rdquo;. I found Haskell&amp;rsquo;s type system to be counter-intuitive, so this article lays out my understanding of Haskell types. If you&amp;rsquo;re a programmer with an imperative programming background, you might find this useful.&lt;/p&gt;

&lt;h3 id=&#34;your-intuition-is-wrong:5be15c15f4a045cfb2cf059143ee7b55&#34;&gt;Your intuition is wrong&lt;/h3&gt;

&lt;p&gt;For imperative-language programmers, Haskell keywords are likely to mislead. Take the &lt;code&gt;type&lt;/code&gt; keyword for instance. It&amp;rsquo;s not for creating new types per se, but &lt;em&gt;type synonyms&lt;/em&gt;, which are like aliases for existing types. I might use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;type FirstName = String
type LastName = String
type Age = Int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One way to declare new types is with the &lt;code&gt;data&lt;/code&gt; keyword (naturally!). If I wanted to create a person type, I could use &lt;code&gt;data&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;data Person = Person String String Int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This declares a new type called &lt;code&gt;Person&lt;/code&gt; with 2 strings and 1 integer as attributes. But I could also use our type synonyms from the earlier example, and clarify my intentions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;data Person = Person FirstName LastName Age
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;functions-and-types:5be15c15f4a045cfb2cf059143ee7b55&#34;&gt;Functions and types&lt;/h3&gt;

&lt;p&gt;In Haskell function signatures can be restricted by types. I can create a function to tell which of two people is older:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;eldest :: Person -&amp;gt; Person -&amp;gt; String
eldest (Person x1 y1 z1) (Person x2 y2 z2)
  | z1 &amp;gt; z2   = x1 ++ &amp;quot; &amp;quot; ++ y1 ++ &amp;quot; is older&amp;quot;
  | z1 &amp;lt; z2   = x2 ++ &amp;quot; &amp;quot; ++ y2 ++ &amp;quot; is older&amp;quot;
  | otherwise = &amp;quot;They&#39;re the same age!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a lot of new syntax, so bear with me. The first line declares a function called &lt;code&gt;eldest&lt;/code&gt; which takes two persons and returns a string. The second line assigns the attributes of each person to variables. The rest of the function tests which person is older and returns an appropriate message. I&amp;rsquo;ll save all of this code into a file called &amp;ldquo;person.hs&amp;rdquo;, so I can test the function in the Haskell REPL, &lt;code&gt;ghci&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;ghci&amp;gt; :l person.hs
[1 of 1] Compiling Main             ( person.hs, interpreted )
Ok, modules loaded: Main.
ghci&amp;gt; let a = Person &amp;quot;Bart&amp;quot; &amp;quot;Simpson&amp;quot; 10
ghci&amp;gt; let b = Person &amp;quot;Lisa&amp;quot; &amp;quot;Simpson&amp;quot; 7
ghci&amp;gt; eldest a b
&amp;quot;Bart Simpson is older&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes we don&amp;rsquo;t need to access all of the attributes of a type in a function. In these cases Haskell let&amp;rsquo;s you use &lt;code&gt;_&lt;/code&gt; as a placeholder, that won&amp;rsquo;t be assigned to a variable. For example to print the initials of a person, I only need to know their first and last names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;initials :: Person -&amp;gt; String
initials (Person x y _) = [head x,&#39;.&#39;,head y, &#39;.&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second line of code assigns a person&amp;rsquo;s firstname to &lt;code&gt;x&lt;/code&gt; and lastname to &lt;code&gt;y&lt;/code&gt;. It then takes the first char of each using &lt;code&gt;head&lt;/code&gt; and returns a new list of chars with a dot after each char. I can test the function by reloading &amp;ldquo;person.hs&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;ghci&amp;gt; :l person.hs
[1 of 1] Compiling Main             ( person.hs, interpreted )
Ok, modules loaded: Main.
ghci&amp;gt; let a = Person &amp;quot;Maggie&amp;quot; &amp;quot;Simpson&amp;quot; 1
ghci&amp;gt; initials a
&amp;quot;M.S.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;typeclasses:5be15c15f4a045cfb2cf059143ee7b55&#34;&gt;Typeclasses&lt;/h3&gt;

&lt;p&gt;Typeclasses are similar to traits (roles in Perl-speak) for types. For example, integers are instances of typeclasses like &lt;code&gt;Ord&lt;/code&gt; as they are orderable, &lt;code&gt;Num&lt;/code&gt; as they are numbers, and so on. Each typeclass defines functions for handling types in specific contexts. The &lt;code&gt;Eq&lt;/code&gt; typeclass adds the ability to compare types for equality using operators like &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By generalizing the properties of types with typeclasses, Haskell can support generic functions which operate on typeclasses, instead of being restricted to one type. The signature of the &lt;code&gt;quicksort&lt;/code&gt; function from &lt;a href=&#34;http://learnyouahaskell.com/recursion&#34;&gt;Learn You a Haskell&lt;/a&gt; is a great example of this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;quicksort :: (Ord a) =&amp;gt; [a] -&amp;gt; [a]
quicksort [] = []
quicksort (x:xs) =·
    let smallerSorted = quicksort [a | a &amp;lt;- xs, a &amp;lt;= x]
        biggerSorted = quicksort [a | a &amp;lt;- xs, a &amp;gt; x]
    in  smallerSorted ++ [x] ++ biggerSorted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This declares a new function called quicksort which is restricted to lists of orderable types. Ignore the body and just focus on the first line of code, the function signature. The code &lt;code&gt;(Ord a)&lt;/code&gt; defines the typeclass constraint for the function. This function can be used to sort anything orderable, like lists of numbers. Aren&amp;rsquo;t strings just lists of chars? I guess we can sort them with &lt;code&gt;quicksort&lt;/code&gt; too then.&lt;/p&gt;

&lt;h3 id=&#34;instance-and-class:5be15c15f4a045cfb2cf059143ee7b55&#34;&gt;Instance and Class&lt;/h3&gt;

&lt;p&gt;If you saw the &lt;code&gt;instance&lt;/code&gt; keyword in some Haskell code, you might think &amp;ldquo;aha, a singleton constructor!&amp;rdquo; but actually &lt;code&gt;instance&lt;/code&gt; is used to make types instances of typeclasses. This makes sense when you consider that every type is an &lt;strong&gt;instance&lt;/strong&gt; of a typeclass. Revisiting my &lt;code&gt;Person&lt;/code&gt; type from earlier, what if I wanted to make it orderable? Typically in the English-speaking parts of the world, people are sorted by their last name, so I&amp;rsquo;m going to implement it that way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;data Person = Person FirstName LastName Age deriving (Eq, Show)

instance Ord Person where
  compare (Person _ a _) (Person _ b _) = compare a b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I start by updating the type declaration of Person with &lt;code&gt;deriving (Eq, Show)&lt;/code&gt;. These operate on the whole type (all of its attributes together). &lt;code&gt;Eq&lt;/code&gt; will let Haskell compare Persons for equality and &lt;code&gt;Show&lt;/code&gt; just let&amp;rsquo;s Haskell serialize the type as a string. The second line of code uses &lt;code&gt;instance&lt;/code&gt; to make persons orderable. The final line implements a comparison function using the lastname attribute of the Person. I can test the code using the &lt;code&gt;quicksort&lt;/code&gt; function declared above.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;ghci&amp;gt; :l person.hs
[1 of 1] Compiling Main             ( person.hs, interpreted )
Ok, modules loaded: Main.
ghci&amp;gt; let a = Person &amp;quot;Jason&amp;quot; &amp;quot;Bourne&amp;quot; 37
ghci&amp;gt; let b = Person &amp;quot;James&amp;quot; &amp;quot;Bond&amp;quot; 42
ghci&amp;gt; quicksort [a,b]
[Person &amp;quot;James&amp;quot; &amp;quot;Bond&amp;quot; 43,Person &amp;quot;Jason&amp;quot; &amp;quot;Bourne&amp;quot; 37]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sorted our list of people by their lastname, and because &lt;code&gt;Person&lt;/code&gt; is an instance of &lt;code&gt;Show&lt;/code&gt;, Haskell was able to print out the detail to the command line. Not bad!&lt;/p&gt;

&lt;p&gt;The final keyword to be aware of is &lt;code&gt;class&lt;/code&gt;. By now it shouldn&amp;rsquo;t surprise you to find out that &lt;code&gt;class&lt;/code&gt; is not for declaring classes like in imperative programming, but for creating new typeclasses. You probably won&amp;rsquo;t use this much when starting out with Haskell, but it&amp;rsquo;s useful to keep in mind for reducing repetitive code. If you have multiple sets of code doing very similar things for different types, consider creating a new typeclass and merging the functions to operate on the new type class, to keep things &lt;a href=&#34;https://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&#34;&gt;DRY&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;code-complete:5be15c15f4a045cfb2cf059143ee7b55&#34;&gt;Code complete&lt;/h3&gt;

&lt;p&gt;This is the finished code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;--person.hs
type FirstName = String
type LastName  = String
type Age = Int 

data Person = Person FirstName LastName Age deriving (Eq, Show)

eldest :: Person -&amp;gt; Person -&amp;gt; String
eldest (Person x1 y1 z1) (Person x2 y2 z2)
  | z1 &amp;gt; z2   = x1 ++ &amp;quot; &amp;quot; ++ y1 ++ &amp;quot; is older&amp;quot;
  | z1 &amp;lt; z2   = x2 ++ &amp;quot; &amp;quot; ++ y2 ++ &amp;quot; is older&amp;quot;
  | otherwise = &amp;quot;They&#39;re the same age!&amp;quot;

initials :: Person -&amp;gt; String
initials (Person x y _) = [head x,&#39;.&#39;,head y, &#39;.&#39;]

quicksort [] = []
quicksort (x:xs) =·
    let smallerSorted = quicksort [a | a &amp;lt;- xs, a &amp;lt;= x]
        biggerSorted = quicksort [a | a &amp;lt;- xs, a &amp;gt; x]
    in  smallerSorted ++ [x] ++ biggerSorted

instance Ord Person where
  compare (Person _ a _) (Person _ b _) = compare a b
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;learn-haskell-the-hard-way:5be15c15f4a045cfb2cf059143ee7b55&#34;&gt;Learn Haskell the Hard Way&lt;/h3&gt;

&lt;p&gt;Despite its childish demeanor, &lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;Learn You a Haskell&lt;/a&gt; goes deep into the Haskell type system and can be a bit long-winded at times. My current learning method involves reading the book, and typing out every code example, and studying Penn State&amp;rsquo;s &lt;a href=&#34;https://www.cis.upenn.edu/~cis194/spring13/lectures.html&#34;&gt;cis194 course&lt;/a&gt;. Both are free. O&amp;rsquo;Reilly&amp;rsquo;s &lt;a href=&#34;http://book.realworldhaskell.org/read/&#34;&gt;Real World Haskell&lt;/a&gt; is also available for free online, and emphasizes more immediate practical uses of Haskell. It&amp;rsquo;s good for when you&amp;rsquo;re tired of coding binary search trees and sorting algorithms. If you find yourself needing to lookup a Haskell term, DuckDuckGo has the &lt;code&gt;!h&lt;/code&gt; bang, which searches &lt;a href=&#34;https://www.haskell.org/hoogle/&#34;&gt;Hoogle&lt;/a&gt; automatically.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

