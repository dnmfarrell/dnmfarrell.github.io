<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Parser on Code - a programming blog</title>
    <link>https://blog.dnmfarrell.com/tags/parser/</link>
    <description>Recent content in Parser on Code - a programming blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Feb 2022 22:09:53 -0500</lastBuildDate>
    <atom:link href="https://blog.dnmfarrell.com/tags/parser/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Is Golang&#39;s Grammar Context Free?</title>
      <link>https://blog.dnmfarrell.com/post/is-golangs-grammar-context-free/</link>
      <pubDate>Sun, 27 Feb 2022 22:09:53 -0500</pubDate>
      <guid>https://blog.dnmfarrell.com/post/is-golangs-grammar-context-free/</guid>
      <description>&lt;p&gt;Most programming language grammars are not context-free. That means the parser has to maintain state in order to process a snippet of the language.&lt;/p&gt;&#xA;&lt;p&gt;Often when discussing context somebody will point out the parsing strings, parentheses and so on also require a kind of state in order to match their terminators. That is not the same thing. The question here is given valid input, can a parser using the language grammar alone, assemble it into an unambiguous parse tree or not.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
