<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on Code Matters - a tech blog</title>
    <link>https://blog.dnmfarrell.com/tags/shell/</link>
    <description>Recent content in shell on Code Matters - a tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.dnmfarrell.com/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Modulinos In Bash</title>
      <link>https://blog.dnmfarrell.com/post/modulinos-in-bash/</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/modulinos-in-bash/</guid>
      <description>A modulino is a file which behaves like a library when it is imported, and like a script when executed. I first read about them in Mastering Perl, but you can create them in other languages too. Here&amp;rsquo;s how to do it in Bash.
Let&amp;rsquo;s say you have a simple script:
#!/bin/bash  echo &amp;#34;Hello, World!&amp;#34; A common refactor with scripts is to encapsulate all the code behavior in functions. As this script only does one thing, it&amp;rsquo;s a small change:</description>
    </item>
    
  </channel>
</rss>
