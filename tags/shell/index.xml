<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on Code - a programming blog</title>
    <link>https://blog.dnmfarrell.com/tags/shell/</link>
    <description>Recent content in shell on Code - a programming blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Oct 2023 19:45:32 -0400</lastBuildDate><atom:link href="https://blog.dnmfarrell.com/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A ChatGPT Shell Script</title>
      <link>https://blog.dnmfarrell.com/post/chatgpt-at-the-terminal/</link>
      <pubDate>Tue, 24 Oct 2023 19:45:32 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/chatgpt-at-the-terminal/</guid>
      <description>I wrote a shell script called ch which lets you use ChatGPT from the command line. I&amp;rsquo;ve been using it for the past few months on my laptop and mobile phone.
This video has more background on the rationale for ch and some examples.
  </description>
    </item>
    
    <item>
      <title>Parallel Processing with POSIX Shell</title>
      <link>https://blog.dnmfarrell.com/post/parallel-processing-with-bash/</link>
      <pubDate>Sun, 12 Feb 2023 17:28:37 -0500</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/parallel-processing-with-bash/</guid>
      <description>N.B. The main example in this post has been updated to use POSIX shell instead of bash.
Last week at work I had to whip up a script to process several thousand ids for product analysis on a new feature we&amp;rsquo;re launching. The processing included making HTTP requests to a service, and I was on a deadline, so the script had to be concurrent. Here&amp;rsquo;s what I came up with:</description>
    </item>
    
    <item>
      <title>Unit Testing Shell Scripts</title>
      <link>https://blog.dnmfarrell.com/post/unit-testing-shell-scripts/</link>
      <pubDate>Fri, 16 Jul 2021 09:32:50 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/unit-testing-shell-scripts/</guid>
      <description>Unit testing is great way to build confidence that your code works. Usually you&amp;rsquo;d write unit tests for libraries; but if you have a particularly long or complicated shell script, it might be worth converting it to a modulino just so you can write tests for it. And if you are writing a library in shell code, you need all the help you can get anyway.
So let&amp;rsquo;s assume you have some shell code to test, now what?</description>
    </item>
    
    <item>
      <title>Bash Function Names Can Be Almost Anything</title>
      <link>https://blog.dnmfarrell.com/post/bash-function-names-can-be-almost-anything/</link>
      <pubDate>Sun, 20 Jun 2021 20:19:32 -0400</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/bash-function-names-can-be-almost-anything/</guid>
      <description>A common misconception about Bash is that function names must follow the same rules that variables do. The Bash manual even suggests this:
 A word consisting solely of letters, numbers, and underscores, and beginning with a letter or underscore. Names are used as shell variable and function names. Also referred to as an identifier.
 In fact Bash function names can be almost any printable character. For instance I can define my own pre-increment unary function:</description>
    </item>
    
    <item>
      <title>Modulinos In Bash</title>
      <link>https://blog.dnmfarrell.com/post/modulinos-in-bash/</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dnmfarrell.com/post/modulinos-in-bash/</guid>
      <description>A modulino is a file which behaves like a library when it is imported, and like a script when executed. I first read about them in Mastering Perl, but you can create them in other languages too. Here&amp;rsquo;s how to do it in Bash.
Let&amp;rsquo;s say you have a simple script:
#!/bin/bash echo &amp;quot;Hello, World!&amp;quot;  A common refactor with scripts is to encapsulate all the code behavior in functions. As this script only does one thing, it&amp;rsquo;s a small change:</description>
    </item>
    
  </channel>
</rss>
