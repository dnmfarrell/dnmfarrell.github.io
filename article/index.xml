<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Perl programming news, code and culture</title>
    <link>http://perltricks.com/article/</link>
    <description>Recent content in Articles on Perl programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Apr 2016 09:12:09 +0000</lastBuildDate>
    <atom:link href="http://perltricks.com/article/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - March 2016</title>
      <link>http://perltricks.com/article/what-s-new-on-cpan---march-2016/</link>
      <pubDate>Wed, 06 Apr 2016 09:12:09 +0000</pubDate>
      
      <guid>http://perltricks.com/article/what-s-new-on-cpan---march-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Everything old was new again in March. Apart from smatterings of cool new toys, CPAN got several new loggers, plugin loaders, templates, and configuration management tools.&lt;/p&gt;

&lt;h3 id=&#34;apis-apps:c9b5ea5fe97fc4a604c5139fcd9ab84e&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Pushover&#34;&gt;Net::Pushover&lt;/a&gt; provides a Perly interface to Pushover, the message delivery service&lt;/li&gt;
&lt;li&gt;Get a client for the TeamCity, the CI service with &lt;a href=&#34;https://metacpan.org/pod/WebService::TeamCity&#34;&gt;WebService::TeamCity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Finance::Robinhood&#34;&gt;Finance::Robinhood&lt;/a&gt; allows you to trade stocks and ETFs with RobinHood, the free brokerage startup&lt;/li&gt;
&lt;li&gt;Use the Let&amp;rsquo;s Encrypt certificate service with &lt;a href=&#34;https://metacpan.org/pod/WWW::LetsEncrypt&#34;&gt;WWW::LetsEncrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::PubNub&#34;&gt;WWW::PubNub&lt;/a&gt; provides an interface to PubNub, the streaming network service&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:c9b5ea5fe97fc4a604c5139fcd9ab84e&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Footprintless&#34;&gt;Footprintless&lt;/a&gt; is a configuration management program with minimal installations&lt;/li&gt;
&lt;li&gt;Log to date/time-stamped files with &lt;a href=&#34;https://metacpan.org/pod/Log::File::Rolling&#34;&gt;Log::File::Rolling&lt;/a&gt;, a fork of Log::Dispatch::File::Rolling&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Logging::Simple&#34;&gt;Logging::Simple&lt;/a&gt; aims to be a minimalist but useful logging system&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Task::Viral&#34;&gt;Task::Viral&lt;/a&gt; is a Perl configuration and installation system, like Pinto, CPAN::Mini et al.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:c9b5ea5fe97fc4a604c5139fcd9ab84e&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AtteanX::Endpoint&#34;&gt;AtteanX::Endpoint&lt;/a&gt; is a SPARQL 1.1 endpoint for &lt;a href=&#34;https://metacpan.org/pod/Attean&#34;&gt;Attean&lt;/a&gt;, the semantic web framework&lt;/li&gt;
&lt;li&gt;Print nice calendars at the terminal using &lt;a href=&#34;https://metacpan.org/pod/Calendar::Gregorian&#34;&gt;Calendar::Gregorian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Tubes&#34;&gt;Data::Tubes&lt;/a&gt; is a cute data transformation module; needs iterators!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Typist&#34;&gt;JSON::Typist&lt;/a&gt; aims to &amp;ldquo;replace mushy strings and numbers&amp;rdquo; with proper typed classes. Useful&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Template::Pure&#34;&gt;Template::Pure&lt;/a&gt; is a port of &lt;a href=&#34;http://beebole.com/pure/&#34;&gt;pure.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control:c9b5ea5fe97fc4a604c5139fcd9ab84e&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract a stack trace from an exception object with &lt;a href=&#34;https://metacpan.org/pod/Devel::StackTrace::Extract&#34;&gt;Devel::StackTrace::Extract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::SmokeTests&#34;&gt;Dist::Zilla::Plugin::SmokeTests&lt;/a&gt; makes it easy to run smoke tests run automated environments only&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MCE::Shared&#34;&gt;MCE::Shared&lt;/a&gt; is an extension for sharing threads and processes, also &lt;a href=&#34;https://metacpan.org/pod/MCE&#34;&gt;MCE&lt;/a&gt; is great&lt;/li&gt;
&lt;li&gt;Load plugins from files or modules with &lt;a href=&#34;https://metacpan.org/pod/Plugin::Simple&#34;&gt;Plugin::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Doctest&#34;&gt;Test::Doctest&lt;/a&gt; can extract and evaluate tests from pod fragments - curious&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware:c9b5ea5fe97fc4a604c5139fcd9ab84e&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Linux::IRPulses&#34;&gt;Linux::IRPulses&lt;/a&gt; Parse infra-red pulse data - also see Timm&amp;rsquo;s recent &lt;a href=&#34;http://localhost:1313/article/controlling-insanity-by-parsing-ir-codes-with-linux--irpulses/&#34;&gt;article&lt;/a&gt; on the subject&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international:c9b5ea5fe97fc4a604c5139fcd9ab84e&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Guess language from text using a word list with &lt;a href=&#34;https://metacpan.org/pod/Text::Guess::Language&#34;&gt;Text::Guess::Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check if text is UTF8 compatible with &lt;a href=&#34;https://metacpan.org/pod/Unicode::CheckUTF8::PP&#34;&gt;Unicode::CheckUTF8::PP&lt;/a&gt; a pure Perl module&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/ecl&#34;&gt;ecl&lt;/a&gt; executes Embedded Common Lisp code within Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics:c9b5ea5fe97fc4a604c5139fcd9ab84e&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/EMDIS::ECS&#34;&gt;EMDIS::ECS&lt;/a&gt; provides useful subroutines for the European Marrow Donor Information System standard&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:c9b5ea5fe97fc4a604c5139fcd9ab84e&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a simple local search engine for your Dancer app with &lt;a href=&#34;https://metacpan.org/pod/Dancer::SearchApp&#34;&gt;Dancer::SearchApp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::ACME&#34;&gt;Mojo::ACME&lt;/a&gt; use the Let&amp;rsquo;s Encrypt ACME API with your Mojo app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::Pod&#34;&gt;Plack::Middleware::Pod&lt;/a&gt; can render POD files as HTML&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Perl Jam VI: The Return of the Camel</title>
      <link>http://perltricks.com/article/perl-jam-iv-return-of-the-camel/</link>
      <pubDate>Fri, 01 Apr 2016 08:32:57 +0000</pubDate>
      
      <guid>http://perltricks.com/article/perl-jam-iv-return-of-the-camel/</guid>
      <description>

&lt;p&gt;A couple of recent presentations about Perl&amp;rsquo;s security have focused on the &lt;a href=&#34;http://www.metacpan.org/module/CGI&#34;&gt;CGI module&lt;/a&gt; and &lt;a href=&#34;https://www.bugzilla.org&#34;&gt;Bugzilla&lt;/a&gt;. David Farrell responded to these in &lt;a href=&#34;http://perltricks.com/article/netanel-rubins-perljam-circus/&#34;&gt;Netanel Rubin&amp;rsquo;s Perl Jam circus&lt;/a&gt;. There are much worse problems with Perl that we should think about.&lt;/p&gt;

&lt;h3 id=&#34;perl-s-rounding-problem:895dfc94e45590b36c5dd569303f6b79&#34;&gt;Perl&amp;rsquo;s rounding problem&lt;/h3&gt;

&lt;p&gt;Perl&amp;rsquo;s approved way of rounding numbers goes through &lt;code&gt;(s)printf&lt;/code&gt;, but there&amp;rsquo;s a problem. In short, it does the wrong thing.&lt;/p&gt;

&lt;p&gt;Most people were taught the rule that 1, 2, 3, 4 round down to 0, and that 5, 6, 7, 8, and 9 round up to the next 0. That means that more digits round up than round down, introducing a systematic bias into any computations where you might round. You shouldn&amp;rsquo;t have to watch &lt;a href=&#34;http://www.imdb.com/title/tt0086393/&#34;&gt;Superman III&lt;/a&gt; to realize the disasterous global consequences this has.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s more than one way to round a number. Most want to get to the nearest number, but if you are half way between, there are options. There are more than two ways. There are more than three. There are, well, a lot of ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Round half up&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half down&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half toward zero&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half away from zero&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half to even&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half to odd&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half alternately up and down&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half stochastically&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the GNU C compiler (or something based on it), you round half to even as the default. Perl relies on this behavior.&lt;/p&gt;

&lt;p&gt;$ perl -e &amp;lsquo;printf &amp;ldquo;%.0f\n&amp;rdquo;, shift&amp;rsquo; 1.5
  2&lt;/p&gt;

&lt;p&gt;$ perl -e &amp;lsquo;printf &amp;ldquo;%.0f\n&amp;rdquo;, shift&amp;rsquo; 2.5
  2&lt;/p&gt;

&lt;p&gt;Every time you try this you get the same answer (so, no stochastic or alternate rounding). The GNU C compiler can also use floor, ceiling, or truncate, but those have similar problems.&lt;/p&gt;

&lt;p&gt;As you are rounding, you are going to get more even numbers than odd numbers. If you are writing banking software, &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.91.8055&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;assymetric currency rounding&lt;/a&gt; could destabilize a currency. The Risks Digest has several entries for &lt;a href=&#34;http://catless.ncl.ac.uk/php/risks/search.php?query=rounding&#34;&gt;security problems in rounding&lt;/a&gt;. These issues are much worse than some lame &amp;ldquo;attack&amp;rdquo; on CGI.pm because a programmer can&amp;rsquo;t read.&lt;/p&gt;

&lt;h3 id=&#34;the-modulus-of-negative-numbers:895dfc94e45590b36c5dd569303f6b79&#34;&gt;The modulus of negative numbers&lt;/h3&gt;

&lt;p&gt;Among the heated technical debates, such as vi or emacs, tabs or spaces, or Star Wars or Star Trek (the first answer in each is the right one), the ones that matter, such as the correct value of modulo addition with negative numbers, are overlooked.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Binary &amp;ldquo;%&amp;rdquo; is the modulo operator, which computes the division remainder of its first argument with respect to its second argument. Given integer operands $m and $n : If $n is positive, then $m % $n is $m minus the largest multiple of $n less than or equal to $m. If $n is negative, then $m % $n is $m minus the smallest multiple of $n that is not less than $m (that is, the result will be less than or equal to zero).&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;The perldoc documentation for the % operators&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The modulo operators take two numbers and does something to them. For &lt;code&gt;$m % $n&lt;/code&gt;, you have:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;$m&lt;/th&gt;
&lt;th&gt;$n&lt;/th&gt;
&lt;th&gt;%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;$m - $n * $i ∈ $n * $i &amp;lt;= $m and ($m - $n * $i) &amp;lt; $n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;$m - $n * $i ∈ $n * $i &amp;gt;= $m and ($m - $n * $i) &amp;lt; $n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my( $m, $n ) = @ARGV;

$m //= 137;
$n //= 13;

my $template = &amp;lt;&amp;lt;&#39;HERE&#39;;
m = %d  n = %d

   $m %  $n = %d
  -$m %  $n = %d
   $m % -$n = %d
  -$m % -$n = %d
HERE

printf $template,
   $m, $n,
   $m %  $n,
  -$m %  $n,
   $m % -$n,
  -$m % -$n;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this give different results depending on the location of the unary minus operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl modulo.pl 137 12
m = 137  n = 12

   $m %  $n = 5
  -$m %  $n = 7
   $m % -$n = -7
  -$m % -$n = -5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That unary minus operator is two precedence levels above the modulo operator. That Perl makes one operator better than another is a whole other issue, but that&amp;rsquo;s the way it is and we can&amp;rsquo;t fix it now. Try it again. Use the parentheses (a feature Perl stole from LISP, which had some extra to spare) to separate the operators:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my( $m, $n ) = @ARGV;

$m //= 137;
$n //= 13;

my $template = &amp;lt;&amp;lt;&#39;HERE&#39;;
m = %d  n = %d

    $m %  $n  = %d
  -($m %  $n) = %d
    $m % -$n  = %d
  -($m % -$n) = %d
HERE

printf $template,
    $m, $n,
    $m %  $n,
  -($m %  $n),
    $m % -$n,
  -($m % -$n);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You get different numbers this time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;m = 137  n = 12

    $m %  $n  = 5
  -($m %  $n) = -5
    $m % -$n  = -7
  -($m % -$n) = 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it&amp;rsquo;s even worse, because those numbers aren&amp;rsquo;t what the documentation says they should be. &amp;ldquo;If &lt;code&gt;$n&lt;/code&gt; is positive, then &lt;code&gt;$m % $n&lt;/code&gt; is &lt;code&gt;$m&lt;/code&gt; minus the largest multiple of &lt;code&gt;$n&lt;/code&gt; less than or equal to &lt;code&gt;$m&lt;/code&gt;&amp;rdquo;. Let&amp;rsquo;s take the case of -137 and 12. There are a couple of ways to look at this. If a &amp;ldquo;multiple&amp;rdquo; we call &lt;code&gt;$i&lt;/code&gt; must be positive, there is no value such that &lt;code&gt;$n * $i&lt;/code&gt; will be less than or equal to any negative value. If that &lt;code&gt;$i&lt;/code&gt; can be negative, the word &amp;ldquo;largest&amp;rdquo;  is a bit troublesome. Wikipedia says &lt;a href=&#34;https://en.wikipedia.org/wiki/Large_numbers&#34;&gt;large numbers are positive&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;fake-random-numbers:895dfc94e45590b36c5dd569303f6b79&#34;&gt;Fake random numbers&lt;/h3&gt;

&lt;p&gt;Perl has a &lt;a href=&#34;http://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt; function. It claims to return &amp;ldquo;a random fractional number greater than or equal to 0&amp;rdquo;, but it doesn&amp;rsquo;t. It&amp;rsquo;s not random. It&amp;rsquo;s fake random in a way that might work if you only want to use one of them to complete a homework assignment in a beginning programming course in middle school. Although the documentation includes a footnote saying &amp;ldquo;You should not rely on it in security-sensitive situations&amp;rdquo;, it does not say &amp;ldquo;Don&amp;rsquo;t ever use this.&amp;rdquo; like it should. Try this program:&lt;/p&gt;

&lt;p&gt;$ perl -le &amp;lsquo;srand(137); print rand for 1 .. 10&amp;rsquo;&lt;/p&gt;

&lt;p&gt;It outputs some numbers, which might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.470744323291914
0.278795581867115
0.263413724062172
0.646815254210146
0.958771364426031
0.3733677954733
0.561358958619476
0.537256242282716
0.967152799238111
0.846555037715689
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run it again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.470744323291914
0.278795581867115
0.263413724062172
0.646815254210146
0.958771364426031
0.3733677954733
0.561358958619476
0.537256242282716
0.967152799238111
0.846555037715689
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not only do you get the same numbers, but you get them in the same order. Perl tries to hide this from you by automatically calling &lt;code&gt;srand&lt;/code&gt; and giving it a &amp;ldquo;random&amp;rdquo; number to start the completely repeatable sequence.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s not the only problem with these fake random numbers (which, again, Perl&amp;rsquo;s documentation never calls &amp;ldquo;fake&amp;rdquo;). They can only represent certain discrete values. See, for instance, the thread that &lt;a href=&#34;https://www.quora.com/Why-does-perl-rand-on-Win32-never-generate-a-value-between-0-890655528357032-and-0-890685315537721&#34;&gt;Why does perl rand() on Win32 never generate a value between 0.890655528357032 and 0.890685315537721?&lt;/a&gt;. On Windows, Perl uses 15 bits to represent the range of the fake random numbers instead of the 53 bits Perl could use.&lt;/p&gt;

&lt;p&gt;There are a variety of ways this can screw up if you use it in an application that keeps going and going. Eventually you come back to the beginning of the sequence, perhaps colliding with existing customer data.&lt;/p&gt;

&lt;h3 id=&#34;perl-s-lets-anyone-program:895dfc94e45590b36c5dd569303f6b79&#34;&gt;Perl&amp;rsquo;s lets anyone program&lt;/h3&gt;

&lt;p&gt;Perhaps the biggest problem with Perl is that anyone with a text editor can write a program and upload it to the internet. It&amp;rsquo;s a feature that Perl allows someone to get their work done, but the problem shows up when someone tries to generalize that to other people&amp;rsquo;s work. Projects such as &lt;a href=&#34;http://nms-cgi.sourceforge.net/&#34;&gt;Not Matt&amp;rsquo;s Scripts&lt;/a&gt; try to mitigate this by fixing the problem one script at a time. There are simply too many scripts to get to in the lifetime of the Universe.&lt;/p&gt;

&lt;h3 id=&#34;in-conclusion:895dfc94e45590b36c5dd569303f6b79&#34;&gt;In conclusion&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;ve made it this far without complaining on Twitter, Reddit, or Hacker News, congratulations. You know what day of the year it is.&lt;/p&gt;

&lt;p&gt;These are real issues, though, and if your application is senstive to small differences in numbers (such as calculating fundamental constants of the universe or pension fund allocations), you&amp;rsquo;re probably using sophisticated number libraries and have various levels of audits to verify the results.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prevent harmful Linux updates with versionlock</title>
      <link>http://perltricks.com/article/prevent-harmful-updates-with-versionlock/</link>
      <pubDate>Mon, 21 Mar 2016 20:46:17 +0000</pubDate>
      
      <guid>http://perltricks.com/article/prevent-harmful-updates-with-versionlock/</guid>
      <description>

&lt;p&gt;On my home machine I run Fedora, a Linux distro famous for being at the cutting-edge of Linux development. My laptop is the &lt;a href=&#34;http://perltricks.com/article/187/2015/8/18/Laptop-review--Dell-XPS-13-2015/&#34;&gt;Dell XPS 13&lt;/a&gt; which uses some fairly advanced hardware. In Open Source this can be dangerous combination: older Linux kernels can&amp;rsquo;t handle my machine&amp;rsquo;s hardware, and brand new kernels often break it too. Every time I do a software update, I&amp;rsquo;m walking a tightrope.&lt;/p&gt;

&lt;p&gt;The way I handle this is with a package manager plugin called &lt;a href=&#34;https://github.com/rpm-software-management/dnf-plugins-extras&#34;&gt;versionlock&lt;/a&gt;. It lets me tell the package manager to lock certain packages at their current version and voilà! I can blindly apply all software updates and know that those troublesome packages will not be upgraded.&lt;/p&gt;

&lt;h3 id=&#34;installation:cc50447c6adbe416d99715fce2b83d16&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;The versionlock plugin is available for both dnf and yum, so pick which package manager your system is using. For dnf:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dnf install python-dnf-plugins-extras-versionlock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for yum:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install yum-plugin-versionlock
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lock-a-package:cc50447c6adbe416d99715fce2b83d16&#34;&gt;Lock a package&lt;/h3&gt;

&lt;p&gt;To add a package to the locked list, simply run the package manager program with the &lt;code&gt;versionlock&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dnf versionlock add my-package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The yum version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum versionlock add my-package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the commands for dnf and yum are the same. You can lock multiple packages in one command. Here&amp;rsquo;s how I prevent my system from upgrading the kernel packages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dnf versionlock add kernel-0:4.3.5-300.fc23 kernel-modules-0:4.3.5-300.fc23 kernel-core-0:4.3.5-300.fc23 kernel-devel-0:4.3.5-300.fc23
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-locked-packages:cc50447c6adbe416d99715fce2b83d16&#34;&gt;List locked packages&lt;/h3&gt;

&lt;p&gt;To see which packages are locked, use the &lt;code&gt;list&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dnf versionlock list
Last metadata expiration check: 0:00:00 ago on Mon Mar 21 20:58:57 2016.
kernel-0:4.3.5-300.fc23.*
kernel-modules-0:4.3.5-300.fc23.*
kernel-core-0:4.3.5-300.fc23.*
kernel-devel-0:4.3.5-300.fc23.*
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unlock-a-package:cc50447c6adbe416d99715fce2b83d16&#34;&gt;Unlock a package&lt;/h3&gt;

&lt;p&gt;To remove one package from the lock list, use &lt;code&gt;delete&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dnf versionlock delete my-package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To remove all packages from the lock list, use &lt;code&gt;clear&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum versionlock clear
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;help:cc50447c6adbe416d99715fce2b83d16&#34;&gt;Help&lt;/h3&gt;

&lt;p&gt;If you ever forget these commands, you can list the available commands with &lt;code&gt;help&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dnf help versionlock
versionlock [add|exclude|list|delete|clear] [&amp;lt;package-nevr-spec&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-many-installers-do-you-need:cc50447c6adbe416d99715fce2b83d16&#34;&gt;How many installers do you need?&lt;/h3&gt;

&lt;p&gt;On Fedora I also remove the &lt;a href=&#34;https://wiki.gnome.org/Apps/Software&#34;&gt;Gnome Software&lt;/a&gt; program (&lt;code&gt;gnome-software&lt;/code&gt; package). Whilst it&amp;rsquo;s useful to be reminded of pending updates via the GUI, any package installed via Gnome Software is not part of the dnf history. That makes it harder when it&amp;rsquo;s necessary to downgrade or remove a troublesome package.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:cc50447c6adbe416d99715fce2b83d16&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Managing packages can be a pain, but versionlock makes life easier. If you use Debian or Ubuntu you can use &lt;code&gt;apt-mark hold my-package&lt;/code&gt; and &lt;code&gt;apt-mark unhold my-package&lt;/code&gt; to similar effect.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What is the Perl Core?</title>
      <link>http://perltricks.com/article/what-is-the-perl-core-/</link>
      <pubDate>Wed, 09 Mar 2016 10:04:57 +0000</pubDate>
      
      <guid>http://perltricks.com/article/what-is-the-perl-core-/</guid>
      <description>

&lt;p&gt;When I use the term &amp;ldquo;Perl Core&amp;rdquo; I mean the standard library of modules (distributions actually) that ship with the &lt;code&gt;perl&lt;/code&gt; interpreter, and I think that&amp;rsquo;s what most people mean when they use that term. Knowing which modules are in the Perl Core is useful; it enables developers to build programs without external dependencies over which the developer has little control. The perldoc site has a handy alphabetized &lt;a href=&#34;http://perldoc.perl.org/index-modules-A.html&#34;&gt;list&lt;/a&gt; of core modules and I generally check there first to browse which modules are in core. The problem though, is that it can be wrong.&lt;/p&gt;

&lt;h3 id=&#34;what-modules-are-included-in-the-perl-core:0d5c2e3cd089b0cf6cb0dbe47d066eb1&#34;&gt;What modules are included in the Perl Core?&lt;/h3&gt;

&lt;p&gt;Did you know that &lt;a href=&#34;http://metacpan.org/pod/HTTP::Tiny&#34;&gt;HTTP::Tiny&lt;/a&gt; has shipped with Perl since 2011 (version 5.14.0)? It&amp;rsquo;s not listed on &lt;a href=&#34;http://perldoc.perl.org&#34;&gt;perldoc&lt;/a&gt; (although that is on the list to be fixed at the next &lt;a href=&#34;http://act.qa-hackathon.org/qa2016/&#34;&gt;QA Hackathon&lt;/a&gt;). Luckily there is a better solution: the &lt;code&gt;corelist&lt;/code&gt; program. This is supplied with &lt;a href=&#34;https://metacpan.org/pod/Module::CoreList/&#34;&gt;Module::CoreList&lt;/a&gt;. Let&amp;rsquo;s see when Module::CoreList first shipped with Perl:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ corelist -a Module::CoreList

Data for 2015-06-01
Module::CoreList was first released with perl v5.8.9
  v5.8.9     2.17
  v5.9.2     1.99
  v5.9.3     2.02
  v5.9.4     2.08
  v5.9.5     2.12
  v5.10.0    2.13
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve truncated the output and kept the key details. It shows that Module::CoreList has been included since Perl version 5.8.9. At home I run Fedora 23, which comes with Perl version 5.22.1. Running the system Perl &lt;code&gt;corelist&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo corelist -a Module::CoreList
sudo: corelist: command not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The program doesn&amp;rsquo;t exist; the Fedora team didn&amp;rsquo;t include it for some reason. Not only that, but great core modules like &lt;a href=&#34;http://perltricks.com/article/59/2014/1/10/Solve-almost-any-datetime-need-with-Time--Piece/&#34;&gt;Time::Piece&lt;/a&gt; aren&amp;rsquo;t included either!&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t have &lt;code&gt;corelist&lt;/code&gt;, but want to view a list of distributions that &lt;em&gt;should&lt;/em&gt; have been bundled with your version of Perl, you can read &lt;code&gt;perldoc perlmodlib&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;which-modules-do-i-have:0d5c2e3cd089b0cf6cb0dbe47d066eb1&#34;&gt;Which modules do I have?&lt;/h3&gt;

&lt;p&gt;Sometimes instead of asking which modules are in the Perl Core what we really mean is: &amp;ldquo;which modules do I have installed?&amp;rdquo; For non-core modules, I use &lt;a href=&#34;http://perltricks.com/article/14/2013/4/7/List-all-Perl-modules-installed-via-CPAN/&#34;&gt;perldoc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perldoc&lt;/code&gt; won&amp;rsquo;t show us the core modules that we already have, and in the case of missing core modules, Module::CoreList can&amp;rsquo;t help either (its results are based on internal lists of modules that &lt;em&gt;should&lt;/em&gt; be there, not which files are actually present). A simple way I handle this is to use the following script to search the contents of &lt;code&gt;@INC&lt;/code&gt;; the directories which &lt;code&gt;perl&lt;/code&gt; searches for modules:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use 5.10.3;
use Path::Tiny &#39;path&#39;;
use Getopt::Long &#39;GetOptions&#39;;

GetOptions(
  &#39;dir=s&#39; =&amp;gt; \my $dirpath,
) or die &amp;quot;Unrecognized option\n&amp;quot;;
die &amp;quot;--dir is required\n&amp;quot; unless $dirpath &amp;amp;&amp;amp; -d $dirpath;

# append a slash if missing
$dirpath .= &#39;/&#39; unless substr($dirpath, -1) eq &#39;/&#39;;

my $iter = path($dirpath)-&amp;gt;iterator({recurse =&amp;gt; 1});
while (my $path = $iter-&amp;gt;()) {
  next unless &amp;quot;$path&amp;quot; =~ qr/.pm$/;
  # remove the parent dir and trailing .pm from filename
  my $module = substr(&amp;quot;$path&amp;quot;, length($dirpath), length(&amp;quot;$path&amp;quot;)-length($dirpath)-3);
  $module =~ s/\//::/g;
  say $module;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I run it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chmod 755 list_modules
$ /usr/bin/perl -e &#39;for(@INC){ system &amp;quot;./list_modules -d $_&amp;quot; }&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m using the absolute path &lt;code&gt;/usr/bin/perl&lt;/code&gt; to ensure I get my system&amp;rsquo;s &lt;code&gt;perl&lt;/code&gt; and not the local one I manage with &lt;a href=&#34;https://github.com/tokuhirom/plenv&#34;&gt;plenv&lt;/a&gt;. One downside of this approach is it lists every module (&lt;code&gt;.pm&lt;/code&gt; file) rather than every distribution, (see this &lt;a href=&#34;http://perltricks.com/article/96/2014/6/13/Perl-distributions--modules--packages-explained/&#34;&gt;explanation&lt;/a&gt; if you&amp;rsquo;re not familiar with the distinction). Another issue is it will list duplicate modules when the system uses symlinks. So the program output needs to be tidied up in a text editor.&lt;/p&gt;

&lt;p&gt;What about programs? To search for Perl programs I prepared a list of Perl programs from the source for Perl 5.22, called &lt;code&gt;perl522_programs&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c2ph
corelist
cpan
enc2xs
encguess
h2ph
h2xs
instmodsh
json_pp
libnetcfg
perl
perl5.22.1
perlbug
perldoc
perlivp
perlthanks
piconv
pl2pm
pod2html
pod2man
pod2text
pod2usage
podchecker
podselect
prove
pstruct
ptar
ptardiff
ptargrep
shasum
splain
xsubpp
zipdetails
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I used the following script, called &lt;code&gt;find_binary&lt;/code&gt; to check for the programs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/perl
my $bin = shift or die &amp;quot;You must provide a binary name to search for\n&amp;quot;;

for ( qw(/sbin /bin /usr/sbin /usr/bin) )
{
  my $path = &amp;quot;$_/$bin&amp;quot;;
  print &amp;quot;$path\n&amp;quot; if -e $path;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I run it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chmod 755 find_binary
$ perl -ne &#39;chomp;system &amp;quot;./find_binary $_&amp;quot;&#39; perl522_programs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line calls the &lt;code&gt;find_binary&lt;/code&gt; script on every program listed in the file &lt;code&gt;perl522_programs&lt;/code&gt;. I &lt;code&gt;chomp&lt;/code&gt; the line before searching for it to remove the trailing newline character. This method isn&amp;rsquo;t perfect though; sneaky Ubuntu ships with a program called &lt;code&gt;perldoc&lt;/code&gt; but if you run it the system prints:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;You need to install the perl-doc package to use this program.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;core-modules-and-programs-missing-from-system-perls:0d5c2e3cd089b0cf6cb0dbe47d066eb1&#34;&gt;Core modules and programs missing from system perls&lt;/h3&gt;

&lt;p&gt;Using the code above I did a comparison of the modules and programs shipped with Perl and those shipped with the following systems. Here&amp;rsquo;s what missing:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Fedora 23&lt;/th&gt;
&lt;th&gt;Ubuntu 14.04 LTS&lt;/th&gt;
&lt;th&gt;OSX Yosemite 10.10.5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;B::Debug&lt;/td&gt;
&lt;td&gt;CGI::Fast&lt;/td&gt;
&lt;td&gt;GDBM_File&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Config::Perl::V&lt;/td&gt;
&lt;td&gt;ODBM_File&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CPANPLUS&lt;/td&gt;
&lt;td&gt;perldoc&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DB_File&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Devel::PPPort&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ExtUtils::Embed&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ExtUtils::MakeMaker::Locale&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ExtUtils::Miniperl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;File::Fetch&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;File::Spec::VMS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Filter::Simple&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IO::Compress::Adapter::Bzip2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IO::Uncompress::Adapter::Bunzip2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Math::BigFloat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Math::BigInt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Math::BigRat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Math::Complex&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Math::Trig&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Module::Loaded&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PerlIO&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Text::Balanced&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Time::Piece&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Time::Seconds&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Unicode::Collate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;autodie&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bigint&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bignum&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bigrat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;experimental&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;perlfaq&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;corelist&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;enc2xs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;libnetcfg&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Ubuntu and OSX ship with Perl 5.18 so I looked for missing programs and modules against the 5.18 source code. For Fedora I compared the system &lt;code&gt;perl&lt;/code&gt; against the 5.22 source. These results show that Fedora is missing quite a few modules and programs: experimental, corelist, autodie, the Math:: modules and Time::Piece strike me as significant omissions (they are supplied by the &lt;code&gt;perl-core&lt;/code&gt; package, which is must be installed separately). For Ubuntu, excluding &lt;code&gt;perldoc&lt;/code&gt; is a &lt;a href=&#34;http://perltricks.com/article/155/2015/2/26/Hello-perldoc--productivity-booster/&#34;&gt;real shame&lt;/a&gt;. OSX came away gleaming though: nearly all core modules and programs were present.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:0d5c2e3cd089b0cf6cb0dbe47d066eb1&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;When writing programs that use core Perl modules be careful, especially if you&amp;rsquo;re using any of the modules or programs found to be missing earlier. One way around this is the use &lt;a href=&#34;https://metacpan.org/pod/App::FatPacker&#34;&gt;App::FatPacker&lt;/a&gt; to compile all the modules used into a single file. Another way would be to use &lt;a href=&#34;https://metacpan.org/pod/pp&#34;&gt;pp&lt;/a&gt; to create a compiled binary. Finally for modules like Time::Piece, you could always consider wrapping Perl&amp;rsquo;s built-in functions like &lt;code&gt;gmtime&lt;/code&gt; and &lt;code&gt;localtime&lt;/code&gt; in subroutines that give the behavior you need, rather than using the module.&lt;/p&gt;

&lt;p&gt;Of course it&amp;rsquo;s always easier to work with a locally-installed &lt;code&gt;perl&lt;/code&gt; than the system version. The local Perls provided by &lt;a href=&#34;http://perlbrew.pl&#34;&gt;perlbrew&lt;/a&gt; and &lt;a href=&#34;https://github.com/tokuhirom/plenv&#34;&gt;plenv&lt;/a&gt; contain all the core modules and utilities. You can always &lt;a href=&#34;http://perlmaven.com/how-to-build-perl-from-source-code&#34;&gt;compile&lt;/a&gt; your own Perl too, it&amp;rsquo;s easy. &lt;a href=&#34;http://www.strawberryperl.com&#34;&gt;Strawberry Perl&lt;/a&gt; for Windows even comes with some useful extra modules and C libraries. If you do have to rely on the system Perl, you may find a core module isn&amp;rsquo;t there at all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updates&lt;/strong&gt; &lt;em&gt;Added reference to perl-core Fedora package, thanks to Grant McLean. 2016-03-21&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Controlling insanity by parsing IR codes with Linux::IRPulses</title>
      <link>http://perltricks.com/article/controlling-insanity-by-parsing-ir-codes-with-linux--irpulses/</link>
      <pubDate>Tue, 08 Mar 2016 08:37:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/controlling-insanity-by-parsing-ir-codes-with-linux--irpulses/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Sending information with pulsing invisible light can be surprisingly complex.
Disentangle the problem with LIRC and Linux::IRPulses.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Infrared remotes are one of those things where every manufacturer thinks they have the
One True Way&amp;trade; of doing it. You would think that there&amp;rsquo;s only one or two straightforward
ways to pulse a little IR light. Clearly, we&amp;rsquo;re all wrong, because the home entertainment
industry invents new ones all the time. That&amp;rsquo;s not even counting the other sectors and
hobbyist projects that come up with entirely different methods.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.lirc.org&#34;&gt;Linux Infrared Remote Control&lt;/a&gt; (LIRC) project has
produced mappings for a lot of remotes out there. That doesn&amp;rsquo;t help
with some of the more fringe devices. Also, some of the components at the top of the stack
are geared towards executing a program after detecting a valid series of pulses.&lt;/p&gt;

&lt;p&gt;If we would rather take the pulses and handle them within our own program, then
we need to ignore the top layers of LIRC and parse the pulse data directly. That is
what &lt;a href=&#34;https://metacpan.org/pod/Linux::IRPulses&#34;&gt;Linux::IRPulses&lt;/a&gt; does.&lt;/p&gt;

&lt;p&gt;We first need the hardware to detect the pulses. On a regular computer, there are many
modules available which can be plugged in to a USB port. On a single board
computer like the Raspberry Pi, we have General Purpose Input/Output (GPIO) pins,
which can read the timing of the pulses.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-the-raspberry-pi:db41cc74731e5142d1f6a80629cf4a97&#34;&gt;Setting up the Raspberry Pi&lt;/h3&gt;

&lt;p&gt;Skip this section if you&amp;rsquo;re using a regular IR device. If you want to set up a
module on the Raspberry Pi&amp;rsquo;s GPIO pins, then read on.&lt;/p&gt;

&lt;p&gt;First, you need a module of the right frequency for the IR data you&amp;rsquo;re trying to
receive. If you&amp;rsquo;re using a remote from an old TV, then searching around for
&amp;ldquo;&lt;manufacturer&gt; IR protocol&amp;rdquo; should get you the right answer. 38 KHz is a common
frequency, but this is just the first thing that manufacturers all did differently.&lt;/p&gt;

&lt;p&gt;The TSOP38138 is an IR remote receiver that runs at 38KHz. It&amp;rsquo;s part of a family of
devices that run at different frequencies, any of which are likely adequate.&lt;/p&gt;

&lt;p&gt;IR receivers for picking up remote data have three pins: power, ground, and data.
Connect power to a +3.3V pin on the Raspberry Pi, ground to ground, and data to
GPIO 23. See &lt;a href=&#34;https://www.raspberrypi.org/documentation/usage/gpio-plus-and-raspi2/&#34;&gt;the Raspberry Pi GPIO documentation&lt;/a&gt; for the location of the pins.&lt;/p&gt;

&lt;p&gt;Now we need to configure LIRC. Start with a simple installation of the package with
&lt;code&gt;apt-get install lirc&lt;/code&gt;. Next, we need to load the kernel module,
tell LIRC where to find the pin, and also configure some Raspberry Pi boot options.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;/etc/modules-load.d/modules.conf&lt;/code&gt;, put:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;lirc_dev
lirc_rpi gpio_in_pin=23 gpio_out_pin=22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That will make GPIO 23 as your input pin. LIRC can also be setup to send IR data, so
we set GPIO 22 for that as long as we&amp;rsquo;re here. Next, modify &lt;code&gt;/etc/lirc/hardware.conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;# /etc/lirc/hardware.conf
#
# Arguments which will be used when launching lircd
LIRCD_ARGS=&amp;quot;--uinput&amp;quot;

#Don&#39;t start lircmd even if there seems to be a good config file
#START_LIRCMD=false

#Don&#39;t start irexec, even if a good config file seems to exist.
#START_IREXEC=false

#Try to load appropriate kernel modules
LOAD_MODULES=true

# Run &amp;quot;lircd --driver=help&amp;quot; for a list of supported drivers.
DRIVER=&amp;quot;default&amp;quot;
# usually /dev/lirc0 is the correct setting for systems using udev
DEVICE=&amp;quot;/dev/lirc0&amp;quot;
MODULES=&amp;quot;lirc_rpi&amp;quot;

# Default configuration files for your hardware if any
LIRCD_CONF=&amp;quot;&amp;quot;
LIRCMD_CONF=&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The particularly important things to note here are &lt;code&gt;DEVICE&lt;/code&gt; for the
device path, and &lt;code&gt;MODULES&lt;/code&gt; for the Raspberry Pi GPIO driver.&lt;/p&gt;

&lt;p&gt;Finally, edit &lt;code&gt;/boot/config.txt&lt;/code&gt; and add this somewhere in the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;dtoverlay=lirc-rpi,gpio_in_pin=23,gpio_out_pin=22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then reboot. Once you&amp;rsquo;re back up, you can test it by plugging in your IR module
to the right pins and pointing a remote at it. Using &lt;code&gt;mode2 -d /dev/lirc0&lt;/code&gt;,
you should see the &lt;code&gt;pulse&lt;/code&gt; and &lt;code&gt;space&lt;/code&gt; data being sent.&lt;/p&gt;

&lt;h3 id=&#34;decoding-the-undecodable:db41cc74731e5142d1f6a80629cf4a97&#34;&gt;Decoding the undecodable&lt;/h3&gt;

&lt;p&gt;Sony runs their remotes at 40KHz. It starts by sending a header of a 2400μs pulse and
600μs space. After the header, a 1 bit is sent by a 1200μs pulse, and a zero with a
600μs. Between those ones and zeros are 600μs spaces. Codes could be 12, 15, or 20
bits long depending on the remote. This is about as straightforward as things get.&lt;/p&gt;

&lt;p&gt;NEC uses a 38KHz carrier frequency. There&amp;rsquo;s a 9000μs header followed by a 4500μs space.
A 1 bit is sent by a 562.5μs pulse. A 0 bit is sent by a 562.5μs pulse. Wait, what? No,
that&amp;rsquo;s not a typo. NEC differentiates ones and zeros by the length of the space that
comes after the pulse: 1687.5μs for 1, and 562.5μs for 0.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.easyracelaptimer.com&#34;&gt;EasyRaceLapTimer&lt;/a&gt; (an Open Source
quadcopter race timer system) is on a 38KHz frequency. It sends a 300μs pulse followed
by a 300μs space. It then alternates sending pulses and spaces, with a 1 bit being
600μs, and a 0 bit being 300μs.&lt;/p&gt;

&lt;p&gt;All the timing numbers above are big fat lies. The noisy, analog nature of the world
means the actual values coming from the IR receiver will be different from the
specified values, perhaps by as much as 15%. It&amp;rsquo;s safe to assume that reverse
engineered specifications are only guessing at the actual values that the manufacturer
intended.&lt;/p&gt;

&lt;p&gt;All that is to say that we have a complicated job on our hands, and the above only
covers a few of the examples out there.&lt;/p&gt;

&lt;h3 id=&#34;linux-irpulses:db41cc74731e5142d1f6a80629cf4a97&#34;&gt;Linux::IRPulses&lt;/h3&gt;

&lt;p&gt;The goal of this module is to simplify the process reading these pulses and spaces
while tolerating the numbers being off.&lt;/p&gt;

&lt;p&gt;At present, the module works by parsing the output of LIRC&amp;rsquo;s &lt;code&gt;mode2&lt;/code&gt;
program. This may change to reading directly from &lt;code&gt;/dev/lirc0&lt;/code&gt; in the future.
For now, we&amp;rsquo;ll start by opening a pipe to &lt;code&gt;mode2&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;open( my $in, &#39;-|&#39;, &#39;mode2 -d /dev/lirc0&#39; ) or die &amp;quot;Can&#39;t exec mode2: $!\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now need to define the protocol to Linux::IRPluses&amp;rsquo;s constructor. To help with this,
adding a &lt;code&gt;use Linux::IRPulses&lt;/code&gt; will export the subroutines &lt;code&gt;pulse()&lt;/code&gt;,
&lt;code&gt;space()&lt;/code&gt;, and &lt;code&gt;pulse_or_space()&lt;/code&gt;.  These are used to specify what you
expect to come in for pulses or spaces.&lt;/p&gt;

&lt;p&gt;For instance, we know that NEC sends a 9000μs pulse and 4500μs space for its header.
We tell the constructor this with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $ir = Linux::IRPulses-&amp;gt;new({
    header =&amp;gt; [ pulse 9000, space 4500 ],
    ...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parser goes through each entry in the array, checking off that the given pulse or
space data is what we expect. Once it reaches the end of the header array, it marks the
header as good and then looks for valid data for ones and zeros. We specify those in
much the same way. We&amp;rsquo;ll add in the other constructor parameters here, as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $ir = Linux::IRPulses-&amp;gt;new({
    header =&amp;gt; [ pulse 9000, space 4500 ],
    zero =&amp;gt; [ pulse 563, space 563 ],
    one =&amp;gt; [ pulse 563, space 1688 ],
    bit_count =&amp;gt; 32,
    callback =&amp;gt; sub {
        my ($args) = @_;
        my $code = $args-&amp;gt;{code};
        say &amp;quot;Received code $code&amp;quot;;
    },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parser will continue looking for ones and zeros until it&amp;rsquo;s collected enough for the
given &lt;code&gt;bit_count&lt;/code&gt;. Once the right number has been met, it calls the subref
specified in &lt;code&gt;callback&lt;/code&gt; with a hashref. The hashref contains keys for
&lt;code&gt;code&lt;/code&gt; (the IR code that was detected) and &lt;code&gt;pulse_obj&lt;/code&gt; (the
Linux::IRPulses object). All the length numbers are checked with a tolerance of 20%.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t promise you will keep your sanity after working with IR data, but hopefully
&lt;code&gt;Linux::IRPulses&lt;/code&gt; can help you go mad with dignity.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Original photo CC-BY 2.0 by Stefanus Ming at &lt;a href=&#34;https://flic.kr/p/7djHYP&#34;&gt;https://flic.kr/p/7djHYP&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2016</title>
      <link>http://perltricks.com/article/what-s-new-on-cpan---february-2016/</link>
      <pubDate>Fri, 04 Mar 2016 09:21:32 +0000</pubDate>
      
      <guid>http://perltricks.com/article/what-s-new-on-cpan---february-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps:9cdca6c2ebff6e87c5498bacb548c29d&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/wp_tools&#34;&gt;App::WordPressTools&lt;/a&gt; provides tools to backup and upgrade WordPress installations.&lt;/li&gt;
&lt;li&gt;Manage AMQP connections with &lt;a href=&#34;https://metacpan.org/pod/Net::AMQP::ConnectionMgr&#34;&gt;Net::AMQP::ConnectionMgr&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Walmart&#34;&gt;WebService::Walmart&lt;/a&gt; Interface to Walmart&amp;rsquo;s open API.&lt;/li&gt;
&lt;li&gt;Get a Perly interface to the Microsoft Translator with &lt;a href=&#34;https://metacpan.org/pod/Lingua::Translator::Microsoft&#34;&gt;Lingua::Translator::Microsoft&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Start interacting with Ticketmaster&amp;rsquo;s APIs using &lt;a href=&#34;https://metacpan.org/pod/Ticketmaster::API&#34;&gt;Ticketmaster::API&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:9cdca6c2ebff6e87c5498bacb548c29d&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/CPAN::Mirror::Tiny&#34;&gt;CPAN::Mirror::Tiny&lt;/a&gt; can create local CPAN mirrors, with no XS dependencies.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::GELF::Util&#34;&gt;Log::GELF::Util&lt;/a&gt; provides utility functions for Graylog&amp;rsquo;s GELF format.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:9cdca6c2ebff6e87c5498bacb548c29d&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Stream data scattered across files by datetime using &lt;a href=&#34;https://metacpan.org/pod/CSV::HistoryPlayer&#34;&gt;CSV::HistoryPlayer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::BatchUpdate&#34;&gt;DBIx::Class::BatchUpdate&lt;/a&gt; can update DBIx results in batches, minimizing the number of queries executed.&lt;/li&gt;
&lt;li&gt;Run asynchronous queries on Postgres with AnyEvent and Promises with &lt;a href=&#34;https://metacpan.org/pod/DBIx::Poggy&#34;&gt;DBIx::Poggy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HTML::MyHTML&#34;&gt;HTML::MyHTML&lt;/a&gt; is a superfast, threaded, C based HTML parser.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Image::Similar&#34;&gt;Image::Similar&lt;/a&gt; measures how similar two images are.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Regexp::Parsertron&#34;&gt;Regexp::Parsertron&lt;/a&gt; parses Perl regular expressions into trees.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control:9cdca6c2ebff6e87c5498bacb548c29d&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Export::Attrs&#34;&gt;Export::Attrs&lt;/a&gt; provides Perl 6&amp;rsquo;s &lt;code&gt;is export(...)&lt;/code&gt; trait as a Perl 5 attribute.&lt;/li&gt;
&lt;li&gt;Get functions to compare Git::Version objects using &lt;a href=&#34;https://metacpan.org/pod/Git::Version::Compare&#34;&gt;Git::Version::Compare&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Parse::Diagnostics&#34;&gt;Parse::Diagnostics&lt;/a&gt; can extract diagnostic messages from Perl source code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Perlmazing&#34;&gt;Perlmazing&lt;/a&gt; - a bundle of lazily-loaded helper functions based on Perlmazing::Engine.&lt;/li&gt;
&lt;li&gt;GitHub inspired Perl module, run experiments with &lt;a href=&#34;https://metacpan.org/pod/Scientist&#34;&gt;Scientist&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Want to test a module against every installed version of Perl? &lt;a href=&#34;https://metacpan.org/pod/Test::BrewBuild&#34;&gt;Test::BrewBuild&lt;/a&gt; builds on perlbrew/berrybrew to do that for Windows Unix-based systems.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Mock::Time&#34;&gt;Test::Mock::Time&lt;/a&gt; create deterministic time &amp;amp; timers for testing. Particularly apt as February 29&lt;sup&gt;th&lt;/sup&gt; just passed.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test2::AsyncSubtest&#34;&gt;Test2::AsyncSubtest&lt;/a&gt; execute subtests asynchronously.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics:9cdca6c2ebff6e87c5498bacb548c29d&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Astro::Constants&#34;&gt;Astro::Constants&lt;/a&gt; a collection of Astronomy constants.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Compress::Huffman&#34;&gt;Compress::Huffman&lt;/a&gt; can huffman-encode a symbol table.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Music::Voss&#34;&gt;Music::Voss&lt;/a&gt; provides functions for fractal noise generation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:9cdca6c2ebff6e87c5498bacb548c29d&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Remotely control Google Chrome from Perl with &lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Chromi&#34;&gt;AnyEvent::Chromi&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Get an alternative syntax for describing Catalyst routes with &lt;a href=&#34;https://metacpan.org/pod/Catalyst::ControllerRole::At&#34;&gt;Catalyst::ControllerRole::At&lt;/a&gt;. This is big.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Getopt::Long::CGI&#34;&gt;Getopt::Long::CGI&lt;/a&gt; is a cool idea: execute CGI scripts just like passing arguments to a command line program.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Time::Progress::Stored&#34;&gt;Time::Progress::Stored&lt;/a&gt; is a progress bar implementation with an web apps.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Netanel Rubin&#39;s Perl Jam circus</title>
      <link>http://perltricks.com/article/netanel-rubins-perljam-circus/</link>
      <pubDate>Tue, 01 Mar 2016 08:57:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/netanel-rubins-perljam-circus/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve just watched Netanel Rubin&amp;rsquo;s Perl Jam 2 &lt;a href=&#34;https://www.youtube.com/watch?v=eH_u3C2WwQ0&#34;&gt;talk&lt;/a&gt; from this year&amp;rsquo;s Chaos Communication Congress. As he&amp;rsquo;s due to give the same talk at &lt;a href=&#34;https://www.blackhat.com/asia-16/&#34;&gt;Black Hat Asia&lt;/a&gt;, I thought it would be good to set the record straight concerning his claims about Perl (&lt;a href=&#34;https://gist.github.com/preaction/978ce941f05769b064f4&#34;&gt;others&lt;/a&gt; have already done so). He makes 3 major claims:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Perl language is insecure&lt;/li&gt;
&lt;li&gt;Bugzilla &amp;amp; CGI.pm are representative of idiomatic Perl&lt;/li&gt;
&lt;li&gt;Perl doesn&amp;rsquo;t improve&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;m going to address each claim in turn and show why it is false. In my view, Perl remains a powerful, general-purpose language well-suited to tasks like building dynamic web applications, processing big data, and managing systems.&lt;/p&gt;

&lt;h3 id=&#34;claim-1-the-perl-language-is-insecure:d158258b1d06be868d3b174d51dace7b&#34;&gt;Claim 1: The Perl language is insecure&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Function declarations cannot specify argument data types&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This isn&amp;rsquo;t true. Since 2008 Perl has supported subroutine signatures, with type checks using the &lt;a href=&#34;https://metacpan.org/pod/Method::Signatures&#34;&gt;Method::Signatures&lt;/a&gt; module. Since 2006 the &lt;a href=&#34;https://metacpan.org/pod/Moose&#34;&gt;Moose&lt;/a&gt; object system provided a fully-fledged &lt;a href=&#34;https://metacpan.org/pod/Moose::Util::TypeConstraints&#34;&gt;type system&lt;/a&gt; and meta object programming interface (there&amp;rsquo;s also &lt;a href=&#34;https://metacpan.org/pod/MooseX::Method::Signatures&#34;&gt;MooseX::Method::Signatures&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Developers treat hashes and arrays as &amp;ldquo;secure&amp;rdquo; data types &amp;hellip; this is the Perl standard. You&amp;rsquo;re not expected to use it, you have to, as you don&amp;rsquo;t have any other choice. This security mess is a fundamental part of the language.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Netanel starts by describing taint mode and claims that hashes are so secure, hash keys bypass Perl&amp;rsquo;s taint check. It&amp;rsquo;s true that hash keys are never considered tainted. This is documented in &lt;a href=&#34;http://perldoc.perl.org/perlsec.html#Taint-mode&#34;&gt;perlsec&lt;/a&gt; and discussed in depth in Chapter 2 of &lt;a href=&#34;http://masteringperl.org&#34;&gt;Mastering Perl&lt;/a&gt;. But it&amp;rsquo;s not because hashes are assumed to be secure, it&amp;rsquo;s because tainting hash keys involves a huge performance penalty. He never explains his claim as to why arrays are considered secure.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s &lt;code&gt;ref&lt;/code&gt; function is a reliable and secure way to determine the data type of a reference. Arguments passed to functions are always passed as an array of scalars via &lt;code&gt;@_&lt;/code&gt;. There is no doubt, no ambiguity. It&amp;rsquo;s not required security-wise, but if you want to use them you can use function signatures, types and meta-object programming in Perl. They&amp;rsquo;ve been available for years.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But I felt all of these points will go unnoticed without an extreme example of Perl&amp;rsquo;s absurdity. So I found an extreme example. One that will clearly show the ridiculousness nature of the language.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the vulnerable code, from an example CGI application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
use CGI;

my $cgi = CGI-&amp;gt;new;

if ($cgi-&amp;gt;upload( &#39;file&#39; )) {
  my $file = $cgi-&amp;gt;param( &#39;file&#39; );
  while (&amp;lt;$file&amp;gt;) {
    print &amp;quot;$_&amp;quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The issue with this code is that if &lt;code&gt;$file&lt;/code&gt; has the value of &lt;code&gt;ARGV&lt;/code&gt;, the diamond operator &lt;code&gt;&amp;lt;$file&amp;gt;&lt;/code&gt; will call &lt;code&gt;open&lt;/code&gt; on every value in &lt;code&gt;@ARGV&lt;/code&gt;. CGI populates &lt;code&gt;@ARGV&lt;/code&gt; with the HTTP query parameters which creates the vulnerability. So if the HTTP query parameter is &lt;code&gt;ls|&lt;/code&gt;, Perl will execute &lt;code&gt;ls&lt;/code&gt;. If the CGI program was running in taint mode, this attack vector would fail. Regardless, it&amp;rsquo;s a well-understood risk, the PLEAC project&amp;rsquo;s Perl &lt;a href=&#34;http://ramenlabs.com/pleac-pdf/pleac_perl.pdf&#34;&gt;recommendations&lt;/a&gt; from 1999 shows how to properly parse file descriptors in CGI parameters (ex 19.4). O&amp;rsquo;Reilly&amp;rsquo;s &lt;a href=&#34;http://www.oreilly.com/openbook/cgi/ch07_04.html&#34;&gt;CGI Programming on the Web&lt;/a&gt; by Shishir Gundavaram recommended parsing metacharacters like &lt;code&gt;|&lt;/code&gt; from user input, which also prevents this attack. That book was published in 1996.&lt;/p&gt;

&lt;p&gt;The piping open behavior is well documented in &lt;a href=&#34;http://perldoc.perl.org/functions/open.html&#34;&gt;open&lt;/a&gt;, &lt;a href=&#34;http://perldoc.perl.org/perlipc.html#Using-open%28%29-for-IPC&#34;&gt;perlipc&lt;/a&gt; and &lt;a href=&#34;http://perldoc.perl.org/perlsec.html&#34;&gt;perlsec&lt;/a&gt;. Chapter 2 of &lt;a href=&#34;http://masteringperl.org&#34;&gt;Mastering Perl&lt;/a&gt; also covers it. It&amp;rsquo;s a useful feature when you want to efficiently process a lot of data from an external command: just like a shell pipe, it creates a socket between the Perl program and the external binary, avoiding the need to read the entire output into memory at once.&lt;/p&gt;

&lt;p&gt;Netanel also identified a SQL injection vulnerability in Bugzilla. The weakness was caused by a poorly coded function which failed to properly validate input used in a dynamic SQL query. The developers should have used the safer pass-by-parameter &lt;a href=&#34;https://metacpan.org/pod/DBI&#34;&gt;DBI&lt;/a&gt; &lt;code&gt;prepare&lt;/code&gt; and &lt;code&gt;execute&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;In both cases Perl provided methods for securely parsing untrusted input, but the developers didn&amp;rsquo;t use them.&lt;/p&gt;

&lt;h3 id=&#34;claim-2-bugzilla-cgi-pm-are-representative-of-idiomatic-perl:d158258b1d06be868d3b174d51dace7b&#34;&gt;Claim 2: Bugzilla &amp;amp; CGI.pm are representative of idiomatic Perl&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Like every other Perl project, Bugzilla is heavily using functions that treat scalar and non-scalar argument types very differently.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Netanel is referring to this code from his talk, which uses the argument type to decide what to do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub test {
  $arg1 = @_; # Get an argument

  if (ref $arg1 eq &#39;HASH&#39;)
    print $arg1{&#39;key&#39;};
  else
    print $arg1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aside from the fact that Netanel&amp;rsquo;s code contains a big error which means it would never work, the claim that every other Perl project is coded in this way is preposterous. &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt; is a popular Perl project with over 20,000 lines of code. Can you guess how frequently Dist::Zilla uses the construct Netanel describes? A quick grep of the code shows zero instances. Bugzilla was developed in 1998, it is not an example of &lt;a href=&#34;http://modernperlbooks.com/books/modern_perl_2014/index.html&#34;&gt;Modern Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Regarding CGI.pm, I can&amp;rsquo;t say it better than the official &lt;a href=&#34;https://metacpan.org/pod/CGI#CGI.pm-HAS-BEEN-REMOVED-FROM-THE-PERL-CORE&#34;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CGI.pm HAS BEEN REMOVED FROM THE PERL CORE&lt;/p&gt;

&lt;p&gt;The rationale for this decision is that CGI.pm is no longer considered good practice for developing web applications, including quick prototyping and small web scripts. There are far better, cleaner, quicker, easier, safer, more scalable, more extensible, more modern alternatives available at this point in time.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;CGI.pm documentation&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;claim-3-perl-doesn-t-improve:d158258b1d06be868d3b174d51dace7b&#34;&gt;Claim 3: Perl doesn&amp;rsquo;t improve&lt;/h3&gt;

&lt;p&gt;Things get interesting during the Q&amp;amp;A section of the talk when an audience member says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We use Perl for almost every module that we have at work, and it works really fine. I don&amp;rsquo;t know why you are picking Perl as a language to attack. It&amp;rsquo;s a really old language, and every language you can pick has problems, it doesn&amp;rsquo;t mean that &amp;hellip; you have to stop using it.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Audience Member, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Netanel responds:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;C got criticized and it improved. PHP got criticized and it improved. Why can&amp;rsquo;t Perl be criticized too? &amp;hellip; why don&amp;rsquo;t they improve the language?&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The funny thing is Perl is improving all the time. Every year there is a major release of Perl which brings new features and enhancements to the language (&lt;a href=&#34;http://perldoc.perl.org/index-history.html&#34;&gt;history&lt;/a&gt;). Last year&amp;rsquo;s &lt;a href=&#34;http://perldoc.perl.org/perldelta.html&#34;&gt;release&lt;/a&gt; included a new operator, the &lt;a href=&#34;http://www.effectiveperlprogramming.com/2015/05/use-perl-5-22s-operator-for-safe-command-line-handling/&#34;&gt;double diamond&lt;/a&gt; &lt;code&gt;&amp;lt;&amp;lt; &amp;gt;&amp;gt;&lt;/code&gt; which disables the piping open behavior shown earlier. CGI.pm was removed from Perl&amp;rsquo;s core modules list in May 2014. Both of those occurrences predate Netanel&amp;rsquo;s talk.&lt;/p&gt;

&lt;p&gt;Instead of waiting for a major release milestone, the Perl development team can fix critical security issues in a minor release if needed (for example see &lt;a href=&#34;http://perldoc.perl.org/perl5163delta.html&#34;&gt;5.16.3&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Perl also has a strong toolchain for evaluating Perl code. &lt;a href=&#34;https://metacpan.org/pod/distribution/Perl-Critic/bin/perlcritic&#34;&gt;Perl::Critic&lt;/a&gt; is a linter that reviews Perl code against recommended coding practices. There is even a &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::PreventSQLInjection&#34;&gt;policy&lt;/a&gt; to check for potential SQL injection vulnerabilities.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:d158258b1d06be868d3b174d51dace7b&#34;&gt;Conclusion&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You can&amp;rsquo;t always live in the fear of not knowing what data type you are trying to handle &amp;hellip; not trusting your hashes, not trusting your arrays, what&amp;rsquo;s next, not trusting your own code?&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As someone who has years of experience writing professional Perl code, and working with Perl programmers, I do not recognize this experience at all. All Netanel has shown is an attack on some example code from a neglected module and a SQL injection bug in a legacy application.&lt;/p&gt;

&lt;p&gt;Is the Ruby language to blame for a vulnerability in &lt;a href=&#34;http://arstechnica.com/business/2012/03/hacker-commandeers-github-to-prove-vuln-in-ruby/&#34;&gt;Ruby-on-Rails&lt;/a&gt;? Is PHP insecure because over 950 &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=wordpress&#34;&gt;exploits&lt;/a&gt; were found for WordPress? This isn&amp;rsquo;t a dynamic language issue either; in &lt;a href=&#34;http://danluu.com/empirical-pl&#34;&gt;Static vs. dynamic languages: a literature review&lt;/a&gt; author Dan Luu found little evidence that statically typed languages were safer than dynamic ones.&lt;/p&gt;

&lt;p&gt;Anytime you fail to adequately parse untrusted input you&amp;rsquo;re going to have a bad day. Blaming Perl for developers&amp;rsquo; bad code is like blaming the Alphabet for being turned into 50 Shades of Grey.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An introduction to Tmux</title>
      <link>http://perltricks.com/article/an-introduction-to-tmux/</link>
      <pubDate>Wed, 24 Feb 2016 09:29:18 +0000</pubDate>
      
      <guid>http://perltricks.com/article/an-introduction-to-tmux/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://tmux.github.io/&#34;&gt;Tmux&lt;/a&gt; is a terminal multiplexer: it&amp;rsquo;s like a power-up for terminal programming. You can manage several terminals under a session, split terminal screens, detach and re-attach sessions and much more. If you do most of your programming at the command line, you&amp;rsquo;ll find using a terminal multiplexer invaluable.&lt;/p&gt;

&lt;h3 id=&#34;setup:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;First you&amp;rsquo;ll need to install Tmux via your package manager or &lt;a href=&#34;https://tmux.github.io/&#34;&gt;download&lt;/a&gt; it. Tmux is highly configurable but the first change I&amp;rsquo;d recommend is to ssh, not Tmux. Make ssh &amp;ldquo;keep alive&amp;rdquo; for all connections by adding this to &lt;code&gt;~/.ssh/config&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host *
   ServerAliveInterval 300
   ServerAliveCountMax 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the file doesn&amp;rsquo;t exist, create it. This configuration instructs your local machine for all user ssh sessions to send a server alive message every 300 seconds to keep the ssh session alive. If the local machine sends 3 unanswered messages, it will disconnect the session. You should tweak these settings to suit your needs: for instance by restricting the &lt;code&gt;host&lt;/code&gt; to specific domains you can have different settings per domain. If you have a slow or unreliable internet connection, consider changing &lt;code&gt;ServerAliveInterval&lt;/code&gt; to a lower number to send more frequent messages.&lt;/p&gt;

&lt;p&gt;If you have permission on the servers you use, you can update them with a similar configuration, in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ClientAliveInterval 300
ClientAliveCountMax 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-prefix-and-one-true-command-trade:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;The Prefix and One True Command&amp;trade;&lt;/h3&gt;

&lt;p&gt;Once Tmux is installed, start a new Tmux session from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Ctrl-b&lt;/code&gt; is the &lt;strong&gt;prefix&lt;/strong&gt; combination. Press the Ctrl key AND the letter b at the same time. When inside a Tmux session, the prefix is nearly always pressed before the shortcut key to trigger a command.&lt;/p&gt;

&lt;p&gt;The prefix combination is really important. Once you get the hang of the prefix combination, you can pretty much bootstrap yourself into learning Tmux with just one command. To display a list of Tmux commands, type: &lt;code&gt;Ctrl-b ?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That means press &lt;code&gt;Control&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; together, release, then press &lt;code&gt;?&lt;/code&gt;. Tmux should display:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind-key        C-b send-prefix
bind-key        C-o rotate-window
bind-key        C-z suspend-client
bind-key      Space next-layout
bind-key          ! break-pane
bind-key          &amp;quot; split-window
bind-key          # list-buffers
bind-key          $ command-prompt -I #S &amp;quot;rename-session &#39;%%&#39;&amp;quot;
bind-key          % split-window -h
bind-key          &amp;amp; confirm-before -p &amp;quot;kill-window #W? (y/n)&amp;quot; kill-window
bind-key          &#39; command-prompt -p index &amp;quot;select-window -t &#39;:%%&#39;&amp;quot;
bind-key          ( switch-client -p
bind-key          ) switch-client -n
bind-key          , command-prompt -I #W &amp;quot;rename-window &#39;%%&#39;&amp;quot;
bind-key          - delete-buffer
bind-key          . command-prompt &amp;quot;move-window -t &#39;%%&#39;&amp;quot;
bind-key          0 select-window -t :0
bind-key          1 select-window -t :1
bind-key          2 select-window -t :2
bind-key          3 select-window -t :3
bind-key          4 select-window -t :4
bind-key          5 select-window -t :5
bind-key          6 select-window -t :6
bind-key          7 select-window -t :7
bind-key          8 select-window -t :8
bind-key          9 select-window -t :9
bind-key          : command-prompt
bind-key          ; last-pane
bind-key          = choose-buffer
bind-key          ? list-keys
bind-key          D choose-client
bind-key          L switch-client -l
bind-key          [ copy-mode
bind-key          ] paste-buffer
bind-key          c new-window
bind-key          d detach-client
bind-key          f command-prompt &amp;quot;find-window &#39;%%&#39;&amp;quot;
bind-key          i display-message
bind-key          l last-window
bind-key          n next-window
bind-key          o select-pane -t :.+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also change the prefix combination (see the Config options section). If you do that, remember to use your prefix combination instead of &lt;code&gt;Ctrl-b&lt;/code&gt; in the examples below.&lt;/p&gt;

&lt;h3 id=&#34;window-control:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Window control&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s look at a key Tmux feature: windows. They&amp;rsquo;re similar to tabs in browsers. Each one is a different terminal from where you can run different commands at the same time. To create a new window press&lt;code&gt;Ctrl-b c&lt;/code&gt;. You can cycle between windows: &lt;code&gt;Ctrl-b n&lt;/code&gt; for the next window and &lt;code&gt;Ctrl-b p&lt;/code&gt; takes you to the prior window. &lt;code&gt;Ctrl-b w&lt;/code&gt; list all windows in a session and let&amp;rsquo;s you select which one to active (using the arrow keys and enter).&lt;/p&gt;

&lt;p&gt;If you know the window number you can also jump straight to it with &lt;code&gt;Ctrl-b #&lt;/code&gt; replacing &amp;ldquo;#&amp;rdquo; with the window number. By default they begin at 0, not 1!&lt;/p&gt;

&lt;p&gt;You might be wondering what&amp;rsquo;s the benefit of using Tmux windows over tabbed terminals. First, with regular terminals if the window manager crashes, you&amp;rsquo;ll lose the terminals as well. This won&amp;rsquo;t happen with Tmux: it will keep the terminals running in the background and you can re-attach a new terminal to them at any time. Windows can also be subdivided into panes, all running pseudo-terminals. Let&amp;rsquo;s look at them now.&lt;/p&gt;

&lt;h3 id=&#34;pane-control:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Pane control&lt;/h3&gt;

&lt;p&gt;Panes are great. You can split a window horizontally, vertically and with any dimensions you like. Have you ever wanted to quickly look up a man page whilst coding? Instead of dropping back to the terminal, looking up the man page and then foregrounding your editor, just open a new vertical pane, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/an-introduction-to-tmux/tmux-split-screen.png&#34; alt=&#34;Tmux Panes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can read the man page and code at the same time; you can even copy and paste between the two panes. Much more convenient!&lt;/p&gt;

&lt;p&gt;Recently I was processing a huge set of data; I arranged my Tmux window with 3 panes running the data processing and 1 pane monitoring the server resources with &lt;a href=&#34;http://hisham.hm/htop/&#34;&gt;htop&lt;/a&gt;. This server is almost overloaded:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/an-introduction-to-tmux/tmux-panes.png&#34; alt=&#34;Tmux Panes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;These are the key pane controls:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ctrl-b &amp;quot;      split pane horizontally
Ctrl-b %      split pane vertically
Ctrl-b o      next pane
Ctrl-b ;      prior pane
Ctrl-b ←↑→↓   jump to pane
Ctrl-b Ctrl-o swap panes
Ctrl-b space  arrange panes
Ctrl-b-←↑→↓   change pane size
Ctrl-b !      pop a pane into a new window
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The arrows &lt;code&gt;←↑→↓&lt;/code&gt; represent the arrow keys, just use one of these. For example to jump to a pane on the right, you&amp;rsquo;d press &lt;code&gt;Ctrl-b →&lt;/code&gt;. The change pane size controls are a little different. To make that work you first have to have more than one pane. Next press &lt;code&gt;Ctrl-b&lt;/code&gt; and keep the control key held down. Now you can repeatedly press an arrow key to change the pane size.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl-b !&lt;/code&gt; is one of my favorite features. It pops the current pane out of the window and moves it to its own window. This is wonderful if you find yourself doing some unrelated activity in one pane and want to re-organize your setup.&lt;/p&gt;

&lt;h3 id=&#34;scrolling-and-copy-paste:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Scrolling and copy/paste&lt;/h3&gt;

&lt;p&gt;If you can master scrolling and copy/paste in Tmux, you can master anything. I won&amp;rsquo;t lie, this is the clunkiest feature. But it&amp;rsquo;s really useful. The interface is modal, so start by entering scroll mode.&lt;/p&gt;

&lt;p&gt;Type &lt;code&gt;Ctrl-b [&lt;/code&gt;. Pressing &lt;code&gt;esc&lt;/code&gt; will exit scroll mode. You should know you&amp;rsquo;re in scroll mode because an orange line count appears in the top-right corner of the pane.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;re in scroll mode, you can move the cursor using the arrow keys and page up and down. By default Tmux doesn&amp;rsquo;t retain much history, but you can change that (see the Config options section).&lt;/p&gt;

&lt;p&gt;You can copy and paste in scroll mode. This is useful when you have split screens as a regular highlight and copy using the mouse won&amp;rsquo;t work across vertically split panes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/an-introduction-to-tmux/tmux-copy-fail.png&#34; alt=&#34;copy fail&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To copy, position the cursor where you want to start copying. Press &lt;code&gt;Ctrl-space&lt;/code&gt; to begin highlighting the text to copy. Press &lt;code&gt;Alt-w&lt;/code&gt; to copy the highlighted text. Pressing &lt;code&gt;Ctrl-b ]&lt;/code&gt; will paste the copied text. There are ways to make copy and paste easier: Tmux has a &amp;ldquo;vim like&amp;rdquo; copy mode (see the Config options section).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://perltricks.com/images/an-introduction-to-tmux/tmux-copy-win.png&#34; alt=&#34;copy win&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;session-control:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Session control&lt;/h3&gt;

&lt;p&gt;Sessions are one of the most useful features of Tmux. They let you group multiple terminal processes into a single Tmux session which can be worked on (attached), put into the background (detached) and discarded as you see fit. Programmers will often have different sessions for different projects. Because Tmux operates under a client-server architecture, even if the original terminal that started Tmux dies or your desktop GUI crashes, the Tmux session will be preserved, along with all of the terminal sessions in it.&lt;/p&gt;

&lt;p&gt;Detach your Tmux session with &lt;code&gt;Ctrl-b d&lt;/code&gt;. This will return you to a regular terminal prompt.&lt;/p&gt;

&lt;p&gt;To list existing Tmux sessions just use the &lt;code&gt;ls&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux ls
0: 1 windows (created Thu Jan 28 08:15:20 2016) [190x50] (attached)
2: 2 windows (created Thu Jan 28 09:11:59 2016) [190x50]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shows that I have two Tmux sessions running, one of which is attached to a terminal window already. To attach to a session just use the &lt;code&gt;attach&lt;/code&gt; command at the terminal prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux attach
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default Tmux attaches to the next unattached session (&amp;ldquo;2&amp;rdquo;) in this case. If I have many different sessions and want to attach to a particular one, I can specify it with &lt;code&gt;-t&lt;/code&gt; for target:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux attach -t 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;config-options:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Config options&lt;/h3&gt;

&lt;p&gt;The file &lt;code&gt;~/.tmux.conf&lt;/code&gt; is a plaintext file used by Tmux for local config. This is what mine looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# set scroll history to 10,000 lines
set-option -g history-limit 10000

# modern encoding and colors
set -g utf8 on set-window-option -g utf8 on
set -g default-terminal screen-256color

# don&#39;t use a login shell
set-option -g default-command /bin/bash

# unbind the prefix and bind it to Ctrl-a like screen
unbind C-b set -g prefix C-a bind C-a send-prefix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default Tmux uses a login shell, so every new pane will execute &lt;code&gt;.bash_profile&lt;/code&gt;. I prefer to disable that behavior and just launch regular non-login shells. Tmux has hundreds more options: many users will switch to a different shell like zsh, enable pane switching with the trackpad, display custom data in the Tmux footer (like weather info!) and so on. Copying other programmers&amp;rsquo; &lt;a href=&#34;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=.tmux.conf&#34;&gt;conf files&lt;/a&gt; is a great way to learn and experiment.&lt;/p&gt;

&lt;p&gt;To reload your &lt;code&gt;.tmux.conf&lt;/code&gt; within a Tmux session, type: &lt;code&gt;Ctrl-b :&lt;/code&gt; then &lt;code&gt;source-file ~/.tmux.conf&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;tmux-resources:a7fdafcdcb65652df0286deda8f9a9c6&#34;&gt;Tmux resources&lt;/h3&gt;

&lt;p&gt;The official Tmux &lt;a href=&#34;https://tmux.github.io/&#34;&gt;website&lt;/a&gt; is a good starting point with summary information, a changelog, downloads and a link to the extensive &lt;a href=&#34;http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man1/tmux.1?query=tmux&amp;amp;sec=1&#34;&gt;man page&lt;/a&gt;. The Arch Linux &lt;a href=&#34;https://wiki.archlinux.org/index.php/Tmux&#34;&gt;tmux documentation&lt;/a&gt; covers advanced features and troubleshooting tips. The book &lt;a href=&#34;https://pragprog.com/book/bhtmux/tmux&#34;&gt;tmux - Productive Mouse-Free Development&lt;/a&gt; by Pragmatic Bookshelf is thorough introduction to Tmux.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/article/153/2015/2/16/Get-to-grips-with-GNU-Screen/&#34;&gt;GNU Screen&lt;/a&gt; is another terminal multiplexer program. It&amp;rsquo;s older than Tmux and a little bit crufty, but it has most of the features Tmux has. The controls for Screen and Tmux are similar enough that if you know one of them you can get by using the other. The Tmux &lt;a href=&#34;https://raw.githubusercontent.com/tmux/tmux/master/FAQ&#34;&gt;FAQ&lt;/a&gt; lists the differences between them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magical tied scalars</title>
      <link>http://perltricks.com/article/magical-tied-scalars/</link>
      <pubDate>Tue, 16 Feb 2016 09:50:00 +0000</pubDate>
      
      <guid>http://perltricks.com/article/magical-tied-scalars/</guid>
      <description>&lt;p&gt;Perl&amp;rsquo;s &lt;code&gt;tie&lt;/code&gt; mechanism allows me to create something that looks like a scalar but does anything I want it to do. I can change how the familiar scalar interface of simple access and assignment actually work. I&amp;rsquo;ve found this so useful at times that I devoted an entire chapter of &lt;a href=&#34;http://www.masteringperl.org/&#34;&gt;Mastering Perl&lt;/a&gt; to it.&lt;/p&gt;

&lt;p&gt;I think I fell in love with this technique when it allowed me to solve a seemly intractable problem creating some HTML by hand (so you know this must have been a long time ago). Someone had created a library to create an HTML table that allowed me to set the color of the table rows by passing in a scalar value for &lt;code&gt;tr&lt;/code&gt;&amp;rsquo;s &lt;code&gt;bgcolor&lt;/code&gt; attribute. Fortunately I&amp;rsquo;ve forgotten who that was or what the code looked like, but it was something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;sub print_table_and_stuff {
    my( $color, @lots_of_other_arguments ) = @_;

    ... lots of code ...
    print &amp;quot;&amp;lt;table&amp;gt;&amp;quot;;

    foreach my $item ( @items ) {
            print qq(&amp;lt;tr bgcolor=&amp;quot;$color&amp;quot;&amp;gt;);
            ... fill in the cells ...
            print &amp;quot;&amp;lt;/tr&amp;gt;&amp;quot;;
            }

    ... lots of code ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besides all the goofy things going on with the code, such as printing directly and not using templates, whoever wrote it wasn&amp;rsquo;t thinking that anyone would want to have tables with alternating (or even rotating) row colors. There was a time before that was a thing and the code pre-dated even that. My task was to get alternating row colors with as little disturbance as possible.&lt;/p&gt;

&lt;p&gt;I could have replaced the subroutine using one of the techniques I showed in &lt;a href=&#34;http://www.masteringperl.org/&#34;&gt;Mastering Perl&lt;/a&gt;, but there was something simpler. If I could get &lt;code&gt;$color&lt;/code&gt; to change on its own, I wouldn&amp;rsquo;t have to mess with the code.&lt;/p&gt;

&lt;p&gt;Thus, I invented &lt;a href=&#34;https://metacpan.org/pod/Tie::Cycle&#34;&gt;Tie::Cycle&lt;/a&gt;. The &lt;code&gt;tie&lt;/code&gt; interface allows me to decide what a scalar should do when I access it or store it. I supply code behind both of those operations by defining special subroutines. Here&amp;rsquo;s an extract of the code that shows those special methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;package Tie::Cycle;
use strict;

sub TIESCALAR {
        my( $class, $list_ref ) = @_;
        my $self = bless [], $class;

        unless( $self-&amp;gt;STORE( $list_ref ) ) {
                carp &amp;quot;Argument must be an array reference&amp;quot;;
                return;
                }

        return $self;
        }

sub FETCH {
        my( $self ) = @_;

        my $index = $self-&amp;gt;[CURSOR_COL]++;
        $self-&amp;gt;[CURSOR_COL] %= $self-&amp;gt;_count;

        return $self-&amp;gt;_item( $index );
        }

sub STORE {
        my( $self, $list_ref ) = @_;
        return unless ref $list_ref eq ref [];
        my @shallow_copy = map { $_ } @$list_ref;

        $self-&amp;gt;[CURSOR_COL] = 0;
        $self-&amp;gt;[COUNT_COL]  = scalar @shallow_copy;
        $self-&amp;gt;[ITEM_COL]   = \@shallow_copy;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;tie&lt;/code&gt; interface includes the &lt;code&gt;TIESCALAR&lt;/code&gt; method that creates the &lt;code&gt;tied&lt;/code&gt; object, the &lt;code&gt;FETCH&lt;/code&gt; method that decides how to return a value, and the &lt;code&gt;STORE&lt;/code&gt; method that decides how to store a value. In this case, I want to store an array of values and cycle through them. Each time I access the scalar, Perl calls &lt;code&gt;FETCH&lt;/code&gt;. Each time it calls &lt;code&gt;FETCH&lt;/code&gt; I increment a counter so I&amp;rsquo;ll get the next value. When I get to the end, I wrap around to the beginning of the array.&lt;/p&gt;

&lt;p&gt;In this short bit of code, I create the tied scalar by calling &lt;code&gt;tie&lt;/code&gt; with the target scalar, the module name that defines the interface, and the arguments to pass to &lt;code&gt;TIESCALAR&lt;/code&gt;. After that, I use &lt;code&gt;$scalar&lt;/code&gt; as a normal scalar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use Tie::Cycle;

tie my $scalar, &#39;Tie::Cycle&#39;, [ qw(red green blue) ];

my $count;
while( $count++ &amp;lt; 10 ) {
        say $scalar;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each time through the &lt;code&gt;while&lt;/code&gt;, I output the value of &lt;code&gt;$scalar&lt;/code&gt;. It doesn&amp;rsquo;t look like I&amp;rsquo;m doing anything fancy, but I&amp;rsquo;m implicitly calling &lt;code&gt;Tie::Cycle::FETCH&lt;/code&gt; each time. Now the colors rotate.&lt;/p&gt;

&lt;p&gt;This is a bit more fun when I cycle through colored boxes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use open qw(:std :utf8);

use Tie::Cycle;
use Term::ANSIColor;

tie my $scalar, &#39;Tie::Cycle&#39;, [
        map { colored( [ $_ ], &amp;quot;\x{25AE}&amp;quot; ) }
                qw(red green blue)
        ];

my $count;
while( $count++ &amp;lt; 10 ) {
        print $scalar;
        }
print &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With an appropriate terminal, I see a series of Christmas lights.&lt;/p&gt;

&lt;p&gt;Recently, David Farrell had a similar problem. He could pass a value to a method that gave it a delay time to retry if it failed. That&amp;rsquo;s a nice feature, but he could only pass in a scalar. He didn&amp;rsquo;t want to pass in a value for two seconds and have it retry every two seconds. Instead, he wanted to back off. Wait two seconds the first time, then 4 seconds the next time, and eight seconds the next time. If something is falling over because you&amp;rsquo;re hitting it too frequently, you want to back off the pressure.&lt;/p&gt;

&lt;p&gt;However, using the same trick I used for HTML row colors, he was able to create what looks like a simple scalar variable but was really a method call that increased the value each time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
package Tie::Scalar::Ratio;

use parent &#39;Tie::Scalar&#39;;

sub TIESCALAR {
  my ($class, $ratio, $value) = @_;

  die &#39;Must provide ratio argument, a number to multiply the scalar value by&#39;
        unless $ratio &amp;amp;&amp;amp; $ratio =~ /^[\d.]+$/;

  bless {
        ratio =&amp;gt; $ratio,
        value =&amp;gt; $value,
  }, $class;
}

sub STORE {
  my ($self, $value) = @_;
  $self-&amp;gt;{value} = $value;
}

sub FETCH {
  my ($self) = @_;
  my $old_value = $self-&amp;gt;{value};
  $self-&amp;gt;{value} *= $self-&amp;gt;{ratio} if $self-&amp;gt;{value};
  return $old_value;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My program to demonstrate this is almost the same as my prior one. The part where I use &lt;code&gt;$scalar&lt;/code&gt; is the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use Tie::Scalar::Ratio;

tie my $scalar, &#39;Tie::Scalar::Ratio&#39;, 2, 37;

my $count;
while( $count++ &amp;lt; 10 ) {
        say $scalar;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each time I access the scalar, I get back the previous value multiplied by the ratio. In this case, I multiply the previous value by &lt;code&gt;2&lt;/code&gt; each time.&lt;/p&gt;

&lt;p&gt;This is a tidy solution because it fits into the code that&amp;rsquo;s already there. The existing code that expected a single value gets a scalar that changes its value each time.&lt;/p&gt;

&lt;p&gt;Instead of giving Tie::Scalar::Ratio, I&amp;rsquo;d like to give it a callback. David also created &lt;a href=&#34;https://metacpan.org/pod/Tie::Scalar::Callback&#34;&gt;Tie::Scalar::Callback&lt;/a&gt;. Each time I access the scalar, this module calls the subroutine I passed to it and give me back the result. The code looks similar to the others:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use strict;
use warnings;
package Tie::Scalar::Callback;

use parent &#39;Tie::Scalar&#39;;
use Carp qw(carp);

sub TIESCALAR {
  my ($class, $sub ) = @_;

  die &#39;Must provide subroutine reference argument&#39;
        unless $sub &amp;amp;&amp;amp; ref $sub eq ref sub {};

  bless $sub, $class;
}

sub STORE {
  carp &amp;quot;You can&#39;t assign to this tied scalar&amp;quot;;
}

sub FETCH {
  my ($self) = @_;
  return $self-&amp;gt;();
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a subroutine that does the same thing as the previous example by stores the state in the subroutine rather than in the tied object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my $coderef = sub {
        state $value  = 1/2;
        state $factor = 2;
        $value *= $factor;
        }

tie my $scalar, &#39;Tie::Scalar::Callback&#39;, $sub;

my $count;
while( $count++ &amp;lt; 10 ) {
        say $scalar;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a simple callback, but I can make something a little more exotic. How about a sine-based function?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.10;
use Tie::Scalar::Callback;

my $coderef = sub {
        state $pi     = 3.14152926;
        state $eighth = $pi / 8;
        state $value  = 0;

        sprintf &#39;%.3f&#39;, abs sin( $value += $eighth );
        };

tie my $scalar, &#39;Tie::Scalar::Callback&#39;, $coderef;

my $count;
while( $count++ &amp;lt; 10 ) {
        say $scalar;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the output backs off and speeds up. There&amp;rsquo;s something that might be more useful. Perhaps I want to use the load average to decide the number:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Sys::LoadAvg qw(loadavg);
use Tie::Scalar::Callback;

my $coderef = sub {
        state $factor  = 5;

        my @loads = loadavg();

        $factor * $loads[-1];
        };

tie my $scalar, &#39;Tie::Scalar::Callback&#39;, $coderef;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, just for fun, here&amp;rsquo;s a tied scalar that creates the Fibonacci series using the inline &lt;code&gt;package NAMESPACE BLOCK&lt;/code&gt; syntax introduced in v5.14:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use v5.14;

package Tie::Scalar::Fibonacci {
        use parent &#39;Tie::Scalar&#39;;
        use Carp qw(croak);
        use List::Util qw(sum);

        sub TIESCALAR {
                my( $class, $count ) = @_;
                $count = 2 unless defined $count;
                die &amp;quot;count must be a counting number&amp;quot; if $count =~ /[^0-9]/;
                die &amp;quot;count must be greater than 1&amp;quot;    if $count &amp;lt;= 1;

                my $array = [ ( 1 ) x ( $count ) ];
                bless $array, $class
                }
        sub STORE     { croak &amp;quot;You can&#39;t assign to this scalar!&amp;quot; }

        sub FETCH {
                my ($self) = @_;
                push @$self, sum( @$self );
                shift @$self;
                }
        }

tie my $scalar, &#39;Tie::Scalar::Fibonacci&#39;;

my $count;
while( $count++ &amp;lt; 10 ) {
        print $scalar, &#39; &#39;;
        }
print &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time I access it I get the next number in the Fibonacci series. Curiously, doing it this way, I&amp;rsquo;m computing a number that I&amp;rsquo;ll use in the future by pushing it onto the end and returning the oldest value by shifting it off the front. There&amp;rsquo;s no recursion here like in almost every example on the interwebs.&lt;/p&gt;

&lt;p&gt;But, it can generate other series too. Instead of looking at the previous two values, I can give &lt;code&gt;TIESCALAR&lt;/code&gt; a different number to specify how many previous numbers to sum:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;tie my $scalar, &#39;Tie::Scalar::Fibonacci&#39;, 5;

my $count;
while( $count++ &amp;lt; 10 ) {
        print $scalar, &#39; &#39;;
        }
print &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The idea is the same, but the sums are different. If you&amp;rsquo;ve used a tied variable in an interesting way, let us know about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - January 2016</title>
      <link>http://perltricks.com/article/213/2016/2/10/What-s-new-on-CPAN---January-2015/</link>
      <pubDate>Wed, 10 Feb 2016 15:02:35 +0000</pubDate>
      
      <guid>http://perltricks.com/article/213/2016/2/10/What-s-new-on-CPAN---January-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; Last year&amp;rsquo;s &amp;ldquo;module of the month&amp;rdquo; experiment has come to an end. I think there are better ways to promote Perl modules and developers (see &lt;a href=&#34;http://cpan-weekly.org/&#34;&gt;CPAN Weekly&lt;/a&gt; for example).&lt;/p&gt;

&lt;h3 id=&#34;apis-apps:fde3d04cece11f5529378539b125e845&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Convert CPAN distributions into RPM packages with the newly-repackaged &lt;a href=&#34;https://metacpan.org/pod/App::CPANtoRPM&#34;&gt;App::CPANtoRPM&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Inspect&#34;&gt;App::Inspect&lt;/a&gt; helps you easily find the versions and locations of installed modules&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::tt&#34;&gt;App::tt&lt;/a&gt; is a command line time tracking app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Duo&#34;&gt;Net::Duo&lt;/a&gt; provides a Perl API for the popular multifactor authentication service&lt;/li&gt;
&lt;li&gt;Read articles from two popular sources at the command line: &lt;a href=&#34;https://metacpan.org/pod/App::tldr&#34;&gt;App::tldr&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/WebService::TDWTF&#34;&gt;WebService::TDWTF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:fde3d04cece11f5529378539b125e845&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Conveniently find local outdated modules and for CPAN:&lt;a href=&#34;https://metacpan.org/pod/CPAN::Diff&#34;&gt;CPAN::Diff&lt;/a&gt; and Pinto: &lt;a href=&#34;https://metacpan.org/pod/DarkPAN::Compare&#34;&gt;DarkPAN::Compare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dispatch log events to Slack with log4perl and &lt;a href=&#34;https://metacpan.org/pod/Log::Dispatch::Slack&#34;&gt;Log::Dispatch::Slack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:fde3d04cece11f5529378539b125e845&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Useful for low-level network tasks, &lt;a href=&#34;https://metacpan.org/pod/Net::Frame::Layer::VRRP&#34;&gt;Net::Frame::Layer::VRRP&lt;/a&gt; provides a Virtual Router Redundancy Protocol class&lt;/li&gt;
&lt;li&gt;A simple way to get a high-resolution Unix epoch: &lt;a href=&#34;https://metacpan.org/pod/Time::TAI::Simple&#34;&gt;Time::TAI::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Types::SQL&#34;&gt;Types::SQL&lt;/a&gt; is library of SQL types; useful for Moo/Moose/Mouse classes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control:fde3d04cece11f5529378539b125e845&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Interesting; call functions / methods from a different caller with &lt;a href=&#34;https://metacpan.org/pod/Call::From&#34;&gt;Call::From&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Export::Declare&#34;&gt;Export::Declare&lt;/a&gt; provides simple and clean ways to export code and variables.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Importer&#34;&gt;Importer&lt;/a&gt; provides convenient routines for importing (and renaming!) code from modules&lt;/li&gt;
&lt;li&gt;Easily test non-blocking Perl scripts (like Mojo apps) with &lt;a href=&#34;https://metacpan.org/pod/Test::Script::Async&#34;&gt;Test::Script::Async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test2::Workflow&#34;&gt;Test2::Workflow&lt;/a&gt; is a framework for building testing workflows (e.g. &lt;a href=&#34;https://metacpan.org/pod/Test2::Tools::Spec&#34;&gt;Test2::Tools::Spec&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Make scalars which execute a subroutine every time they&amp;rsquo;re accessed using &lt;a href=&#34;https://metacpan.org/pod/Tie::Scalar::Callback&#34;&gt;Tie::Scalar::Callback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run Visual Basic and JavaScript code via OLE with &lt;a href=&#34;https://metacpan.org/pod/Win32::VBScript&#34;&gt;Win32::VBScript&lt;/a&gt;. Fun!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware:fde3d04cece11f5529378539b125e845&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Paul Evans continues to deliver new hardware tools via &lt;a href=&#34;https://metacpan.org/pod/Device::Chip&#34;&gt;Device::Chip&lt;/a&gt;! Get a driver for the PCF8563 chip (&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::PCF8563&#34;&gt;Device::Chip::PCF8563&lt;/a&gt;), and a driver for SD and MMC cards (&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::SDCard&#34;&gt;Device::Chip::SDCard&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other:fde3d04cece11f5529378539b125e845&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Poker::Eval&#34;&gt;Poker::Eval&lt;/a&gt; is a base class providing routines for Poker games including dealing, scoring and calculating expected win rates.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/URI::redis&#34;&gt;URI::redis&lt;/a&gt; provides a URI class specific to Redis URIs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics:fde3d04cece11f5529378539b125e845&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::HTS&#34;&gt;Bio::HTS&lt;/a&gt; is an early-stage Perl interface for htslib&lt;/li&gt;
&lt;li&gt;Get cryptographically-secure and fast pseudo random number generators using &lt;a href=&#34;https://metacpan.org/pod/Crypt::DRBG&#34;&gt;Crypt::DRBG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:fde3d04cece11f5529378539b125e845&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create CGI (yes!) GitHub webhooks with&lt;a href=&#34;https://metacpan.org/pod/CGI::Github::Webhook&#34;&gt;CGI::Github::Webhook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Curious: &lt;a href=&#34;https://metacpan.org/pod/Lemplate&#34;&gt;Lemplate&lt;/a&gt; compiles TT templates to standalone Lua modules for OpenResty&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get an in-browser remote desktop with Mojolicious and noVNC</title>
      <link>http://perltricks.com/article/212/2016/2/2/Get-an-in-browser-remote-desktop-with-Mojolicious-and-noVNC/</link>
      <pubDate>Tue, 02 Feb 2016 13:41:18 +0000</pubDate>
      
      <guid>http://perltricks.com/article/212/2016/2/2/Get-an-in-browser-remote-desktop-with-Mojolicious-and-noVNC/</guid>
      <description>

&lt;p&gt;While SSH is a staple of remote system administration, sometimes only a GUI will do. Perhaps the remote system doesn&amp;rsquo;t have a terminal environment to connect to; perhaps the target application doesn&amp;rsquo;t present an adequate command line interface; perhaps there is an existing GUI session you need to interact with. There can be all kinds of reasons.&lt;/p&gt;

&lt;p&gt;For this purpose, a generic type of remote desktop service called VNC is commonly used. The servers are easy to install, start on seemingly all platforms and lots of hardware has a VNC server embedded for remote administration. Clients are similarly easy to use, but when building a management console in the web, wouldn&amp;rsquo;t it be nice to have the console view right in your browser?&lt;/p&gt;

&lt;p&gt;Luckily there is a pure JavaScript VNC client called &lt;a href=&#34;https://github.com/kanaka/noVNC&#34;&gt;noVNC&lt;/a&gt; noVNC listens for VNC traffic over WebSockets, which is convenient for browsers but isn&amp;rsquo;t supported by most VNC servers. To overcome this problem they provide a command-line application called &lt;a href=&#34;https://github.com/kanaka/websockify&#34;&gt;Websockify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Websockify is a relay that connects to a TCP connection (the VNC server) and exposes the traffic as a WebSocket stream such that a browser client can listen on. While this does fix the problem it isn&amp;rsquo;t an elegant solution. Each VNC Server needs its own instance of Websockify requiring a separate port. Further you either need to leave these connected at all times in case of a web client or else spawn them on demand and clean them up later.&lt;/p&gt;

&lt;h2 id=&#34;mojolicious-to-the-rescue:df6114835a8ce31097aba2ba4c9f0a9f&#34;&gt;Mojolicious to the Rescue&lt;/h2&gt;

&lt;p&gt;Mojolicious has a built-in event-based &lt;a href=&#34;http://mojoliciou.us/perldoc/Mojo/IOLoop/Client&#34;&gt;TCP Client&lt;/a&gt; and native &lt;a href=&#34;http://mojolicious.org/perldoc/Mojolicious/Guides/Tutorial#WebSockets&#34;&gt;WebSocket&lt;/a&gt; handling. If you are already serving your site with Mojolicious, why not let it do the TCP/WebSocket relay work too? Even if you aren&amp;rsquo;t, the on-demand nature of the solution I&amp;rsquo;m going to show would be useful as a stand-alone app for this single purpose versus the websockify application.&lt;/p&gt;

&lt;p&gt;Here is a &lt;a href=&#34;http://mojolicio.us/perldoc/Mojolicious/Guides/Tutorial&#34;&gt;Mojolicious::Lite&lt;/a&gt; application which serves the noVNC client when you request a url like &lt;code&gt;/192.168.0.1&lt;/code&gt;. When the page loads, the client requests the WebSocket route at &lt;code&gt;/proxy?target=192.168.0.1&lt;/code&gt; which establishes the bridge. This example is bundled with my forthcoming wrapper module with a working name of &lt;a href=&#34;https://github.com/jberger/Mojo-Websockify/blob/master/ex/client.pl&#34;&gt;Mojo::Websockify&lt;/a&gt;. The code is remarkably simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Mojolicious::Lite;

use Mojo::IOLoop;

websocket &#39;/proxy&#39; =&amp;gt; sub {
  my $c = shift;
  $c-&amp;gt;render_later-&amp;gt;on(finish =&amp;gt; sub { warn &#39;websocket closing&#39; });

  my $tx = $c-&amp;gt;tx;
  $tx-&amp;gt;with_protocols(&#39;binary&#39;);

  my $host = $c-&amp;gt;param(&#39;target&#39;) || &#39;127.0.0.1&#39;;
  my $port = $host =~ s{:(\d+)$}{} ? $1 : 5901;

  Mojo::IOLoop-&amp;gt;client(address =&amp;gt; $host, port =&amp;gt; $port, sub {
    my ($loop, $err, $tcp) = @_;

    $tx-&amp;gt;finish(4500, &amp;quot;TCP connection error: $err&amp;quot;) if $err;
    $tcp-&amp;gt;on(error =&amp;gt; sub { $tx-&amp;gt;finish(4500, &amp;quot;TCP error: $_[1]&amp;quot;) });

    $tcp-&amp;gt;on(read =&amp;gt; sub {
      my ($tcp, $bytes) = @_;
      $tx-&amp;gt;send({binary =&amp;gt; $bytes});
    });

    $tx-&amp;gt;on(binary =&amp;gt; sub {
      my ($tx, $bytes) = @_;
      $tcp-&amp;gt;write($bytes);
    });

    $tx-&amp;gt;on(finish =&amp;gt; sub {
      $tcp-&amp;gt;close;
      undef $tcp;
      undef $tx;
    });
  });
};

get &#39;/*target&#39; =&amp;gt; sub {
  my $c = shift;
  my $target = $c-&amp;gt;stash(&#39;target&#39;);
  my $url = $c-&amp;gt;url_for(&#39;proxy&#39;)-&amp;gt;query(target =&amp;gt; $target);
  $url-&amp;gt;path-&amp;gt;leading_slash(0); # novnc assumes no leading slash :(
  $c-&amp;gt;render(
    vnc  =&amp;gt;
    base =&amp;gt; $c-&amp;gt;tx-&amp;gt;req-&amp;gt;url-&amp;gt;to_abs,
    path =&amp;gt; $url,
  );
};

app-&amp;gt;start;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;get&lt;/code&gt; route shown at the bottom and isn&amp;rsquo;t very exciting. It&amp;rsquo;s the frontend route that renders the noVNC client and tells it the WebSocket url.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;websocket&lt;/code&gt; route is the more interesting one, which I will explain in detail. After shifting off the controller, we tell the server not to attempt to render a template (&lt;code&gt;render_later&lt;/code&gt;), then subscribe to the finish handler. This is actually a hint to the server that we intend to initiate a WebSocket connection later. Typically this is done by either subscribing to one of the message events or else by sending data upon connection, but in this case we won&amp;rsquo;t do either until the TCP connection is established. Then after extracting the target host and port from the query argument we are ready to make the TCP connection.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mojolicious.org/perldoc/Mojo/IOLoop#client&#34;&gt;&lt;code&gt;Mojo::IOLoop-&amp;gt;client&lt;/code&gt;&lt;/a&gt; simply takes connection arguments and a callback for what to do once connected. We use this callback to establish our relay. The WebSocket protocol reserves all closing statuses below 4000 for internal use, so I&amp;rsquo;ve taken to using the standard HTTP statuses and prepending a 4 to them. Thus when setting up the TCP error handling, either on initially connecting or for subsequent errors, the status passed to the WebSocket &lt;code&gt;finish&lt;/code&gt; method is 4500.&lt;/p&gt;

&lt;p&gt;The relay itself is the next two method calls. First, when the TCP socket emits a &lt;code&gt;read&lt;/code&gt; event, we take its raw bytes and send them (as binary messages) to the WebSocket client. Then when the WebSocket emits a binary frame (i.e. when it receives a binary message) we write that back to the TCP connection. Finally when the Websocket is closed, we also close the TCP connection and cleanup our handlers.&lt;/p&gt;

&lt;p&gt;Simple, isn&amp;rsquo;t it?!&lt;/p&gt;

&lt;h2 id=&#34;additional-notes:df6114835a8ce31097aba2ba4c9f0a9f&#34;&gt;Additional Notes&lt;/h2&gt;

&lt;p&gt;There are a few things missing. First is that I haven&amp;rsquo;t addressed security in this example. If any part of the stream is publicly available you will want to encrypt the traffic and put the servers behind authentication. Another risk is the issue of &amp;ldquo;back pressure&amp;rdquo; where a stream starts sending floods of data.&lt;/p&gt;

&lt;p&gt;You may have noticed I skipped one line, which until a recent version of Chrome wasn&amp;rsquo;t necessary. When the WebSocket connection is first established it calls &lt;code&gt;with_protocols(&#39;binary&#39;)&lt;/code&gt;. Early versions of noVNC also supported sending the TCP traffic as base64 encoded text, since early implementations of WebSockets didn&amp;rsquo;t distinguish between text and binary frame types as the modern ones do. The WebSocket protocol allows the client to request an application-defined &amp;ldquo;sub-protocol&amp;rdquo; which noVNC used to request binary or base64, the latter of which has long since been deprecated and removed. The client still asks for the binary sub-protocol and recent versions of Chrome have started to refuse to connect if the server doesn&amp;rsquo;t indicate that it can handle this request.&lt;/p&gt;

&lt;h2 id=&#34;shouldn-t-this-be-on-cpan:df6114835a8ce31097aba2ba4c9f0a9f&#34;&gt;Shouldn&amp;rsquo;t This Be On CPAN?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m hoping to wrap this TCP/WebSocket bridge logic up as a module called &lt;code&gt;Mojo::Websockify&lt;/code&gt; and include the noVNC client as an example. It turns out however, that the logic which is simple to show here is remarkably hard to package in a generic, extensible way. For example, you may want to check if the TCP service is already in use via some database-locking table, or to allow remote-takeover of sessions using a message broker between clients. I&amp;rsquo;ll probably just simplify things for the common case and build in some protection for the &amp;ldquo;back pressure&amp;rdquo; problem. In the meantime I hope you have enjoyed seeing how beautifully simple Mojolicious&amp;rsquo; WebSocket and TCP services are.&lt;/p&gt;

&lt;p&gt;Happy Perling!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Twitter as a datastore</title>
      <link>http://perltricks.com/article/210/2016/1/21/Twitter-as-a-datastore/</link>
      <pubDate>Thu, 21 Jan 2016 13:52:14 +0000</pubDate>
      
      <guid>http://perltricks.com/article/210/2016/1/21/Twitter-as-a-datastore/</guid>
      <description>&lt;p&gt;Why doesn&amp;rsquo;t anyone talk about Twitter as a data store? It&amp;rsquo;s a free account, they mostly have uptime, and you can easily control who can see the information. If you can do it in 140 characters (and &lt;a href=&#34;http://www.theverge.com/2015/8/12/9134175/twitter-direct-message-character-limit&#34;&gt;soon to be 10,000&lt;/a&gt;), it&amp;rsquo;s an easy way to store data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/excellent_nums&#34;&gt;Tweets by @excellent_nums&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m doing this for my &lt;a href=&#34;http://www.excellentnums.com&#34;&gt;excellent numbers project&lt;/a&gt; that does quite a bit of computing to find numbers with a particular property. This isn&amp;rsquo;t the only way I&amp;rsquo;m storing the numbers, but I had the idea of tweeting them as soon as I found them in case every other method failed. If I accidentally deleted the output files (did that), truncated and overwrote files (did that), or somehow screwed it up in another way (did that), the numbers are still on Twitter.&lt;/p&gt;

&lt;p&gt;I had another compelling reason, though. I wanted to get an alert on my phone when my program found another excellent number. Unfortunately, I&amp;rsquo;ve hitched my wagon to the iPhone. There are all sorts of complicated ways for me to get an alert but I already use Twitter and get alerts for that. So, I can have a backup store and an alert system using stuff I already have installed. I can spend more time on the math and less time on installing and managing Redis (which is easy too and deserves an article here) then coming up with a way to send new entries to my phone.&lt;/p&gt;

&lt;p&gt;I wrote about my setup in nonspecific terms in &lt;a href=&#34;http://www.masteringperl.org/2015/12/ive-found-over-200-excellent-numbers/&#34;&gt;Mastering Perl&lt;/a&gt;. I didn&amp;rsquo;t show any code, although it&amp;rsquo;s all in &lt;a href=&#34;https://github.com/briandfoy/excellent_numbers&#34;&gt;the excellent_numbers GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before you start, you need some Twitter credentials to use their API through the &lt;a href=&#34;https://metacpan.org/pod/Net::Twitter&#34;&gt;Net::Twitter&lt;/a&gt; module. Start at &lt;a href=&#34;http://apps.twitter.com&#34;&gt;Twitter Application Management&lt;/a&gt; to get the four special strings you&amp;rsquo;ll need (&lt;a href=&#34;http://iag.me/socialmedia/how-to-create-a-twitter-app-in-8-easy-steps/&#34;&gt;&amp;ldquo;How to Register a Twitter App in 8 Easy Steps&amp;rdquo; has a good description of the steps&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Consumer Key (API Key)&lt;/p&gt;

&lt;p&gt;Consumer Secret (API Secret)&lt;/p&gt;

&lt;p&gt;Access Token&lt;/p&gt;

&lt;p&gt;Access Token Secret&lt;/p&gt;

&lt;p&gt;The Net::Twitter module needs these strings to create its object. The module handles all of the OAuth details without me having to think about them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;use Net::Twitter;

my $nt = Net::Twitter-&amp;gt;new(
   traits   =&amp;gt; [qw/OAuth API::RESTv1_1/],
   map { $_ =&amp;gt; $ENV{&amp;quot;$_&amp;quot;} || die &amp;quot;ENV $_ not set&amp;quot; }
           qw(     
                consumer_secret
                consumer_key
                access_token
                access_token_secret
                )
   );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my excellent number program, I wanted to be as simple as possible. I didn&amp;rsquo;t want to re-tweet numbers I already tweeted so I fetched everything I&amp;rsquo;ve tweeted so far and stored it in a hash. Twitter pages in groups of 200 tweets maximum, and this didn&amp;rsquo;t seem like it would be a problem a couple of months ago but I&amp;rsquo;m now up to over 350 of them.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s easy to fetch a bunch of statuses with the &lt;code&gt;user_timeline&lt;/code&gt; method. I need to tell it where to start (&lt;code&gt;min_id&lt;/code&gt; or &lt;code&gt;since_id&lt;/code&gt;). Twitter returns huge JSON structures with lots of information, but Net::Twitter turns that into a Perl data structure for me. I dump what they send and pull out the parts I want:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;my %tweets;
STATUSES: while( 1 ) {
  state $min_id = 1;
  state $fetch_size = 200;

  my $max_key = $min_id == 1 ? &#39;since_id&#39; : &#39;max_id&#39;;

  my $statuses = $nt-&amp;gt;user_timeline({
          count       =&amp;gt; $fetch_size,
          screen_name =&amp;gt; &#39;excellent_nums&#39;,
          $max_key    =&amp;gt; $min_id,
          });     

  say { interactive } &amp;quot;Found &amp;quot; . @$statuses . &amp;quot; statuses&amp;quot;;
  $min_id = $statuses-&amp;gt;[-1]{id} - 1 if $min_id == 1;

  foreach my $status ( @$statuses ) {
          $min_id = $status-&amp;gt;{id} - 1 if $min_id &amp;gt; $status-&amp;gt;{id};
          my( $number ) = $status-&amp;gt;{text} =~ m/(\d+)/;
          warn &amp;quot;[$number] has more than one tweet!\n&amp;quot; if exists $tweets{$number};
          $tweets{$number} = undef;
          unless( is_excellent( $number ) ) {
                  warn &amp;quot;Tweet for [$number] is an unexcellent error\n&amp;quot;;
                  }       
          }       

  last if @$statuses &amp;lt; $fetch_size; # must be last page
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This part is complicated for another reason. At the start of the project I was generating the excellent numbers sequentially. When that&amp;rsquo;s the case I only needed to look at the previous tweet to see if it was less than the number I just discovered. When I got to the big numbers, I went wide and worked on different parts of the range in parallel and sometimes on several computers simultaneously. I started to discover the numbers out of order and tweet them out of order. Hence, the paging. I could store the list of tweeted numbers locally, but that&amp;rsquo;s a hassle to manage too since that can be out of sync. I still might do that when this method runs out of steam. I&amp;rsquo;m not likely to get far beyond 500 numbers though.&lt;/p&gt;

&lt;p&gt;Notice that I also &lt;code&gt;warn&lt;/code&gt; if I run into a tweet with a number that I think is a duplicate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;warn &amp;quot;[$number] has more than one tweet!\n&amp;quot; if exists $tweets{$number};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this was a bigger problem (and it&amp;rsquo;s not anymore), I could use the &lt;code&gt;destroy_status&lt;/code&gt; method to automatically get rid of it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$nt-&amp;gt;destroy_status( $status-&amp;gt;{id} ) if exists $tweets{$number};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I decided not to delete automatically from the program. It&amp;rsquo;s not a problem to have duplicates. It&amp;rsquo;s a bit messy, but it&amp;rsquo;s more messy to delete stuff I want to keep and to retweet it. That risk makes it not worth it for me. I don&amp;rsquo;t want another possible automated mess to clean up.&lt;/p&gt;

&lt;p&gt;Now I know everything I&amp;rsquo;ve tweeted previously and I&amp;rsquo;ve put them in &lt;code&gt;%tweets&lt;/code&gt;. The next part is to tweet what I&amp;rsquo;ve found and haven&amp;rsquo;t stored yet. I also store that in a local file (but remember I want the alerts and the backup!) that I used to populate &lt;code&gt;%numbers&lt;/code&gt;. I skip the numbers I already tweeted and use &lt;code&gt;update&lt;/code&gt; to make the new tweets. Storing new numbers is easy, and when I do it I want to tweet the new numbers in ascending order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;NUMBER: foreach my $number ( sort { $a &amp;lt;=&amp;gt; $b } keys %numbers ) {
  next NUMBER if exists $tweets{$number};

  $nt-&amp;gt;update( &amp;quot;$number is excellent&amp;quot; );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This used to be part of the program that found the excellent numbers, but I switched to C for a huge performance bump. I still wanted to tweet from Perl, which is easy. Perl&amp;rsquo;s become the glue holding together lots of different things.&lt;/p&gt;

&lt;p&gt;Once I can read from, post to, and delete from twitter, other applications (or even real people) can follow it. It can be public or private. It&amp;rsquo;s not sophisticated. It&amp;rsquo;s uptime isn&amp;rsquo;t going to win any awards. But it&amp;rsquo;s free and easy for my small task.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - December 2015</title>
      <link>http://perltricks.com/article/209/2016/1/13/What-s-new-on-CPAN---December-2015/</link>
      <pubDate>Wed, 13 Jan 2016 15:31:05 +0000</pubDate>
      
      <guid>http://perltricks.com/article/209/2016/1/13/What-s-new-on-CPAN---December-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. December was a bumper month, full of exciting new stuff. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month:5fb0546749a7edbf85b72c1cf934a2cd&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Protocol::ACME&#34;&gt;Protocol::ACME&lt;/a&gt; is an alpha-stage implementation providing a perly interface to the &lt;a href=&#34;https://letsencrypt.readthedocs.org/en/latest/intro.html&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; ACME API. This lets you automate the business of fetching and validating Let&amp;rsquo;s Encrypt certificates, and any other certificate which is provided via the ACME protocol. If you build web applications with Mojolicious, you may also like &lt;a href=&#34;https://metacpan.org/pod/Toadfarm::Plugin::Letsencrypt&#34;&gt;Toadfarm::Plugin::Letsencrypt&lt;/a&gt;, a less ambitious module that provides Lets Encrypt domain verification.&lt;/p&gt;

&lt;h3 id=&#34;apis-apps:5fb0546749a7edbf85b72c1cf934a2cd&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Procapult&#34;&gt;App::Procapult&lt;/a&gt; is a process launcher / wrapper with a simple interface&lt;/li&gt;
&lt;li&gt;Another process manager, &lt;a href=&#34;https://metacpan.org/pod/Schedule::LongSteps&#34;&gt;Schedule::LongSteps&lt;/a&gt; aims to manage long term processes over long periods of time.&lt;/li&gt;
&lt;li&gt;Do you want to convert colored terminal output to HTML? Check out &lt;a href=&#34;https://metacpan.org/pod/App::Term2HTML&#34;&gt;App::Term2HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Barracuda::Api&#34;&gt;Barracuda::Api&lt;/a&gt; provides a perly interface to Barracuda business IT services&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Google::reCAPTCHA&#34;&gt;Google::reCAPTCHA&lt;/a&gt; a lightweight implementation of Google&amp;rsquo;s reCAPTCHA service, also see (Captcha::reCAPTCHA::V2)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops:5fb0546749a7edbf85b72c1cf934a2cd&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::MethodProxy&#34;&gt;Config::MethodProxy&lt;/a&gt; integrates dynamic logic with static configuration.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Minion::Notifier&#34;&gt;Minion::Notifier&lt;/a&gt; notifies queue listeners when a Minion task has completed&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Queue::Priority&#34;&gt;Queue::Priority&lt;/a&gt; orders messages according to their priority, so the important stuff gets processed first&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RBAC::Tiny&#34;&gt;RBAC::Tiny&lt;/a&gt; is a miniscule Role-Based Access Control implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data:5fb0546749a7edbf85b72c1cf934a2cd&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get an Attean SPARQL store using &lt;a href=&#34;https://metacpan.org/pod/AtteanX::Store::SPARQL&#34;&gt;AtteanX::Store::SPARQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::ParameterizedJoinHack&#34;&gt;DBIx::Class::ParameterizedJoinHack&lt;/a&gt; provides relationship joins with dynamic logic&lt;/li&gt;
&lt;li&gt;Cleanly get a locale-specific datetime duration string with &lt;a href=&#34;https://metacpan.org/pod/DateTime::Format::Human::Duration::Simple&#34;&gt;DateTime::Format::Human::Duration::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::AsType&#34;&gt;JSON::Schema::AsType&lt;/a&gt; generates Type::Tiny types out of JSON schemas, very nice! (I&amp;rsquo;m already using it).&lt;/li&gt;
&lt;li&gt;Add cropmarks to existing PDFs for better printing using &lt;a href=&#34;https://metacpan.org/pod/PDF::Cropmarks&#34;&gt;PDF::Cropmarks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Redis-like store implemented on Postgresql. Not &amp;ldquo;redisql&amp;rdquo; but &lt;a href=&#34;https://metacpan.org/pod/Postgredis&#34;&gt;Postgredis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control:5fb0546749a7edbf85b72c1cf934a2cd&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::CPAN::Search&#34;&gt;App::CPAN::Search&lt;/a&gt; provides a base class for and script for searching CPAN&lt;/li&gt;
&lt;li&gt;Oooh look! A new Perl DBGp debugger: &lt;a href=&#34;https://metacpan.org/pod/Devel::Debug::DBGp&#34;&gt;Devel::Debug::DBGp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get a &amp;ldquo;quick and dirty&amp;rdquo; code coverage measurement with &lt;a href=&#34;https://metacpan.org/pod/Devel::QuickCover&#34;&gt;Devel::QuickCover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Devel::SimpleProfiler&#34;&gt;Devel::SimpleProfiler&lt;/a&gt; makes it easy to profile subroutines.&lt;/li&gt;
&lt;li&gt;Useful; include roles in serialization using &lt;a href=&#34;https://metacpan.org/pod/MooseX::Storage::Traits::WithRoles&#34;&gt;MooseX::Storage::Traits::WithRoles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Readonly::Tiny&#34;&gt;Readonly::Tiny&lt;/a&gt; aims to provide &amp;ldquo;simple, correct, read only values&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Test UNIX sockets with &lt;a href=&#34;https://metacpan.org/pod/Test::UNIXSock&#34;&gt;Test::UNIXSock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Alien&#34;&gt;Test::Alien&lt;/a&gt; provides testing tools for Alien modules&lt;/li&gt;
&lt;li&gt;Reliably test if some code uses &lt;code&gt;exec&lt;/code&gt; with &lt;a href=&#34;https://metacpan.org/pod/Test::Exec&#34;&gt;Test::Exec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dump anything into a single line of 80 characters or fewer with &lt;a href=&#34;https://metacpan.org/pod/Test::Stream::Plugin::Explain::Terse&#34;&gt;Test::Stream::Plugin::Explain::Terse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware:5fb0546749a7edbf85b72c1cf934a2cd&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;An implementation of the Modbus communications protocol, &lt;a href=&#34;https://metacpan.org/pod/Device::Modbus&#34;&gt;Device::Modbus&lt;/a&gt; provides a base for developing Modbus clients and servers&lt;/li&gt;
&lt;li&gt;Similarly, &lt;a href=&#34;https://metacpan.org/pod/ZWave::Protocol&#34;&gt;ZWave::Protocol&lt;/a&gt; provides helpers for the Z-Wave communication protocol&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international:5fb0546749a7edbf85b72c1cf934a2cd&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Split identifiers into words with &lt;a href=&#34;https://metacpan.org/pod/Lingua::IdSplitter&#34;&gt;Lingua::IdSplitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Protocol::IRC&#34;&gt;Protocol::IRC&lt;/a&gt; a base class for IRC protocol handling&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Frundis&#34;&gt;Text::Frundis&lt;/a&gt; an object oriented interface for the &lt;a href=&#34;http://bardinflor.perso.aquilenet.fr/frundis/intro-en&#34;&gt;frundis&lt;/a&gt; markup language&lt;/li&gt;
&lt;li&gt;Get a Perl FFI interface to the Hunspell library using &lt;a href=&#34;https://metacpan.org/pod/Text::Hunspell::FFI&#34;&gt;Text::Hunspell::FFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Table::Any&#34;&gt;Text::Table::Any&lt;/a&gt; generates beautiful text tables using many different backends/li&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Ufal::Parsito&#34;&gt;Ufal::Parsito&lt;/a&gt; provides bindings to the &lt;a href=&#34;http://ufal.mff.cuni.cz/parsito&#34;&gt;Parsito&lt;/a&gt; library&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics:5fb0546749a7edbf85b72c1cf934a2cd&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a perly interface to the HTS library for DNA sequencing using &lt;a href=&#34;https://metacpan.org/pod/Bio::DB::HTS&#34;&gt;Bio::DB::HTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Graph::Dijkstra&#34;&gt;Graph::Dijkstra&lt;/a&gt; provides Dijkstra&amp;rsquo;s shortest path algorithm and additional helper methods&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web:5fb0546749a7edbf85b72c1cf934a2cd&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Great idea: use the popular HTTP::Tiny user agent with limited download/upload speed using &lt;a href=&#34;https://metacpan.org/pod/HTTP::Tiny::Bandwidth&#34;&gt;HTTP::Tiny::Bandwidth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Swagger&#34;&gt;Dancer::Plugin::Swagger&lt;/a&gt; creates Swagger documentation of the Dancer app&amp;rsquo;s REST interface. Nice!&lt;/li&gt;
&lt;li&gt;Another wrapper for wget / curl: &lt;a href=&#34;https://metacpan.org/pod/HTTP::Command::Wrapper&#34;&gt;HTTP::Command::Wrapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Save time with compile tests</title>
      <link>http://perltricks.com/article/208/2016/1/5/Save-time-with-compile-tests/</link>
      <pubDate>Tue, 05 Jan 2016 14:32:45 +0000</pubDate>
      
      <guid>http://perltricks.com/article/208/2016/1/5/Save-time-with-compile-tests/</guid>
      <description>

&lt;p&gt;Over the past year I&amp;rsquo;ve been working on several large Perl projects, sometimes as part of a team and sometimes alone. As the codebase grows, testing becomes increasingly important and one test in particular that pays dividends is the compile test. That is, before running any other tests, simply check if that every module in the codebase compiles.&lt;/p&gt;

&lt;h3 id=&#34;the-basics:cf491e3fd24f485540ea55cdf7d5e508&#34;&gt;The basics&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s look at a simple compile test, I&amp;rsquo;ve adapted this example from &lt;a href=&#34;https://github.com/dnmfarrell/Perly-Bot&#34;&gt;Perly-Bot&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use Test::More;
use lib &#39;lib&#39;;

my @modules = qw(
  Perly::Bot
  Perly::Bot::Feed
  Perly::Bot::Feed::Post
  Perly::Bot::Cache
  Perly::Bot::Media
  Perly::Bot::Media::Twitter
  Perly::Bot::Media::Reddit
);
for my $module ( @modules )
{
  BAIL_OUT( &amp;quot;$module does not compile&amp;quot; ) unless require_ok( $module );
}
done_testing();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is simple enough; it adds the local &lt;code&gt;lib&lt;/code&gt; directory to the list of directories for Perl to search for modules. Then it declares an array of module names called &lt;code&gt;@modules&lt;/code&gt;. Finally it loops through each module name and tries to import it, bailing out if any module fails to load. Because tests are usually run in alphabetical order, this file is called &lt;code&gt;00-compile.t&lt;/code&gt; so that it is run first. I can run this test at the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ ./t/00-compile.t
perl t/00-compile.t 
ok 1 - use Perly::Bot;
ok 2 - use Perly::Bot::Feed;
ok 3 - use Perly::Bot::Feed::Post;
ok 4 - use Perly::Bot::Cache;
ok 5 - use Perly::Bot::Media;
ok 6 - use Perly::Bot::Media::Twitter;
ok 7 - use Perly::Bot::Media::Reddit;
1..7
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;write-once-compile-tests:cf491e3fd24f485540ea55cdf7d5e508&#34;&gt;Write-once compile tests&lt;/h3&gt;

&lt;p&gt;The basic compile test example has an obvious flaw: it requires the programmer to list all the module names to be tested. This means that every time a new module is added to the codebase or a module is renamed, this test needs to be updated. This also introduces the risk of error - a failing module could exist in the codebase and never be tested. Instead of a static list of modules, I can tell Perl to search the &lt;code&gt;lib&lt;/code&gt; directory and try to import any module it finds:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use Test::More;
use lib &#39;lib&#39;;
use Path::Tiny;

# try to import every .pm file in /lib
my $dir = path(&#39;lib/&#39;);
my $iter = $dir-&amp;gt;iterator({
            recurse         =&amp;gt; 1,
            follow_symlinks =&amp;gt; 0,
           }); 
while (my $path = $iter-&amp;gt;())
{
  next if $path-&amp;gt;is_dir || $path !~ /\.pm$/;
  BAIL_OUT( &amp;quot;$path does not compile&amp;quot; ) unless require_ok( $path );
}
done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I use &lt;a href=&#34;https://metacpan.org/pod/Path::Tiny&#34;&gt;Path::Tiny&lt;/a&gt; to iterate through the files in &lt;code&gt;lib&lt;/code&gt;. Instead of passing module names, I pass the filepath to &lt;code&gt;require_ok&lt;/code&gt;. Now this compile test is dynamic, it will always pick up any new modules added or removed from the codebase. Nice!&lt;/p&gt;

&lt;h3 id=&#34;require-warnings:cf491e3fd24f485540ea55cdf7d5e508&#34;&gt;Require warnings&lt;/h3&gt;

&lt;p&gt;One problem with using &lt;a href=&#34;http://perldoc.perl.org/functions/require.html&#34;&gt;require&lt;/a&gt; to load filepaths instead of module names is that it can generate &amp;ldquo;subroutine redefined&amp;rdquo; warnings if the same module is loaded twice by different files. Imagine this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;require &#39;lib/Game.pm&#39;;
require &#39;lib/Game/Asset/Player.pm&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;Game.pm&lt;/code&gt; loads &lt;code&gt;Game::Asset::Player&lt;/code&gt;, Perl will emit the subroutine redefined warning when the second &lt;code&gt;require&lt;/code&gt; statement is executed. I can deal with this in a couple of ways: I could suppress the warning by adding &lt;code&gt;no warnings &#39;redefine&#39;;&lt;/code&gt; to my compile test file. But this would mask genuine warnings that could be helpful, like if I have circular dependencies in my codebase. Or I can convert the filepath into a module name, and then &lt;code&gt;require&lt;/code&gt; won&amp;rsquo;t complain, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;require &#39;Game&#39;;
require &#39;Game::Asset::Player&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the compile tests, I can use substitute regexes to convert the filepath into a module name. When the compile tests run they won&amp;rsquo;t generate spurious &amp;ldquo;subroutine redefined&amp;rdquo; warnings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;#!/usr/bin/env perl
use Test::More;
use lib &#39;lib&#39;;
use Path::Tiny;

# try to import every .pm file in /lib
my $dir = path(&#39;lib/&#39;);
my $iter = $dir-&amp;gt;iterator({
            recurse         =&amp;gt; 1,
            follow_symlinks =&amp;gt; 0,
           });
while (my $path = $iter-&amp;gt;())
{
  next if $path-&amp;gt;is_dir || $path !~ /\.pm$/;
  my $module = $path-&amp;gt;relative;
  $module =~ s/(?:^lib\/|\.pm$)//g;
  $module =~ s/\//::/g;
  BAIL_OUT( &amp;quot;$module does not compile&amp;quot; ) unless require_ok( $module );
}
done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;additional-thoughts:cf491e3fd24f485540ea55cdf7d5e508&#34;&gt;Additional thoughts&lt;/h3&gt;

&lt;p&gt;Another way to write compile tests is using &lt;a href=&#34;https://metacpan.org/pod/Class::Load&#34;&gt;Class::Load&lt;/a&gt; to do the module importing. It has a several useful functions for dynamically loading modules.&lt;/p&gt;

&lt;p&gt;Compile tests are an interesting class of test. They&amp;rsquo;re an implementation of the axiom: &amp;ldquo;the codebase should always compile&amp;rdquo;. Depending on the application, there are other axioms you can test for. For example with a web application, every admin URL should only be accessible to authenticated and authorized users. So you could write a dynamic test that enumerates every admin URL and attempts to fetch it unauthorized (the test fails if any request is successful). For testing Catalyst web applications, you might find my module &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::ActionPaths&#34;&gt;Catalyst::Plugin::ActionPaths&lt;/a&gt; useful. Testing axioms usually has a high reward for little or no maintenance cost. Seek them out!&lt;/p&gt;

&lt;p&gt;If you ever need to suppress a particular warning, in newer versions of Perl the warnings pragma &lt;a href=&#34;http://perldoc.perl.org/warnings.html&#34;&gt;documentation&lt;/a&gt; lists all of the types of warnings it recognizes. This is especially useful when using experimental features like &lt;a href=&#34;http://perltricks.com/article/72/2014/2/24/Perl-levels-up-with-native-subroutine-signatures&#34;&gt;subroutine signatures&lt;/a&gt;. You can read it for your version of Perl at the command line with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ perldoc warnings
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to get Perl 6 now</title>
      <link>http://perltricks.com/article/207/2015/12/31/How-to-get-Perl-6-now/</link>
      <pubDate>Thu, 31 Dec 2015 19:08:59 +0000</pubDate>
      
      <guid>http://perltricks.com/article/207/2015/12/31/How-to-get-Perl-6-now/</guid>
      <description>

&lt;p&gt;Great news, Perl 6 was &lt;a href=&#34;https://perl6advent.wordpress.com/2015/12/25/christmas-is-here/&#34;&gt;released&lt;/a&gt; on Christmas Day; finally us geeks got something we wanted for Christmas. Send the books back Grandma! (unless you got &lt;a href=&#34;http://perltricks.com/article/205/2015/12/21/Modern-Perl-4th-edition--a-review&#34;&gt;Modern Perl&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;installation-on-linux-osx:961206b7582ff32549d5b3ed6ab9aa7e&#34;&gt;Installation on Linux, OSX&lt;/h3&gt;

&lt;p&gt;On Linux and Mac the easiest way to get Perl 6 is with &lt;a href=&#34;https://github.com/tadzik/rakudobrew&#34;&gt;rakudobrew&lt;/a&gt;. You&amp;rsquo;ll need the typical software development tools like &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt;. On OSX Apple&amp;rsquo;s &lt;a href=&#34;https://developer.apple.com/opensource/&#34;&gt;Command Line Tools app&lt;/a&gt; provides most of these and is easy to install. On Linux they&amp;rsquo;re available via the package manager. Once you have the prerequisite tools installed, you can install rakudobrew via the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;$ git clone https://github.com/tadzik/rakudobrew ~/.rakudobrew
$ export PATH=~/.rakudobrew/bin:$PATH
$ rakudobrew build moar
$ rakudobrew build panda
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install &lt;code&gt;perl6&lt;/code&gt; and &lt;code&gt;panda&lt;/code&gt; the Perl 6 package manager.&lt;/p&gt;

&lt;h3 id=&#34;installation-on-windows:961206b7582ff32549d5b3ed6ab9aa7e&#34;&gt;Installation on Windows&lt;/h3&gt;

&lt;p&gt;On Windows it&amp;rsquo;s a different story. I was unable to get rakudobrew to work on Windows, which is a shame as it&amp;rsquo;s such a convenient tool. If you&amp;rsquo;re feeling adventurous, you can &lt;a href=&#34;http://perltricks.com/article/135/2014/11/18/Building-Perl-6-with-Visual-Studio-2013&#34;&gt;build your own Perl 6 with Visual Studio&lt;/a&gt;. Sinan Unur has &lt;a href=&#34;https://www.nu42.com/2015/12/perl6-rakudo-released.html&#34;&gt;blogged&lt;/a&gt; about building panda with the same toolset.&lt;/p&gt;

&lt;p&gt;Alternatively you can use the latest &lt;a href=&#34;http://rakudo.org/downloads/star/&#34;&gt;Rakudo Star distribution&lt;/a&gt; which comes with a convenient &lt;code&gt;.msi&lt;/code&gt; installer. Unfortunately the most recent Rakudo Star distribution is from September, so you won&amp;rsquo;t benefit from the last 3 months of updates to Perl 6 (a new version should be available soon). If you&amp;rsquo;ve installed Rakudo Star, you&amp;rsquo;ll need to add the Perl 6 binaries to your path. You can do that using &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prettyprint&#34;&gt;&amp;gt; SETX PATH &amp;quot;%PATH%;C:\rakudo\bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now start a new &lt;code&gt;cmd.exe&lt;/code&gt; terminal, and you&amp;rsquo;ll be use Perl 6. Rakudo Star ships with Panda too, so you&amp;rsquo;ll be able to start installing Perl 6 modules right away.&lt;/p&gt;

&lt;h3 id=&#34;useful-perl-6-resources:961206b7582ff32549d5b3ed6ab9aa7e&#34;&gt;Useful Perl 6 resources&lt;/h3&gt;

&lt;p&gt;So you&amp;rsquo;ve got Perl 6 installed, now what? To keep up to date with Perl 6 developments, I read the &lt;a href=&#34;https://p6weekly.wordpress.com/&#34;&gt;Perl 6 Weekly&lt;/a&gt; blog. The &lt;a href=&#34;http://perlweekly.com/&#34;&gt;Perl Weekly&lt;/a&gt; newsletter also includes Perl 6 articles, so be sure to subscribe if you haven&amp;rsquo;t already. The official website &lt;a href=&#34;http://perl6.org/&#34;&gt;Perl6.org&lt;/a&gt; is a good reference for all things Perl 6 related. Wendy has posted a &lt;a href=&#34;https://wendyga.wordpress.com/2015/12/25/why-would-you-want-to-use-perl-6-some-answers/&#34;&gt;useful list&lt;/a&gt; of Perl 6 features.&lt;/p&gt;

&lt;p&gt;Here at PerlTricks.com, we&amp;rsquo;ve got several Perl 6 articles that may be of interest:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/144/2015/1/13/How-to-create-a-grammar-in-Perl-6&#34;&gt;How to create a Grammar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/170/2015/4/30/Parsing-Perl-5-pod-with-Perl-6&#34;&gt;Parsing Perl 5 Pod with Perl 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/136/2014/11/20/Get-started-with-Perl-6-one-liners&#34;&gt;Get started with Perl 6 One Liners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/177/2015/6/9/Get-to-grips-with-Prove--Perl-s-test-workhorse&#34;&gt;How to run Perl 6 tests with prove&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/194/2015/9/22/Activating-Perl-6-syntax-highlighting-in-Vim&#34;&gt;Activate Perl 6 syntax highlighting in Vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; - Visual Studio article now includes instructions for VS2015. Added link to nu42.com. 2016-01-04&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

